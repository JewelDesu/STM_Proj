
OpenAMP_TTY_echo_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b4  10000000  10000000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  1000b1b4  1000b1b4  0000d1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000025c8  1000b204  1000b204  0000d204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1000d7cc  1000d7cc  000101bc  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  1000d7cc  1000d7cc  0000f7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  1000d7d4  1000d7d4  000101bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1000d7d4  1000d7d4  0000f7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  1000d7d8  1000d7d8  0000f7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000130  10020000  1000d7dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  10020130  1000d90c  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          0000139c  100201bc  100201bc  000101bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10021558  10021558  000101bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000101bc  2**0
                  CONTENTS, READONLY
 14 .debug_line   000225a0  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000161  00000000  00000000  0003278c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   000232a8  00000000  00000000  000328ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00005225  00000000  00000000  00055b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001580  00000000  00000000  0005adc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001ce309  00000000  00000000  0005c340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000ffa  00000000  00000000  0022a649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0004b9da  00000000  00000000  0022b643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0027701d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005e44  00000000  00000000  00277060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201bc 	.word	0x100201bc
1000001c:	00000000 	.word	0x00000000
10000020:	1000b19c 	.word	0x1000b19c

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201c0 	.word	0x100201c0
1000003c:	1000b19c 	.word	0x1000b19c

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000100:	e7fe      	b.n	10000100 <ADC1_IRQHandler>
	...

10000104 <Periph_Lock>:
  *                     Semaphore id deduced from this peripheral.
  *         Timeout: timeout value in msecs
  * @retval Return Status
  */
LockResource_Status_t Periph_Lock(void* Peripheral, uint32_t Timeout)
{
10000104:	b580      	push	{r7, lr}
10000106:	b084      	sub	sp, #16
10000108:	af00      	add	r7, sp, #0
1000010a:	6078      	str	r0, [r7, #4]
1000010c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
1000010e:	2300      	movs	r3, #0
10000110:	60bb      	str	r3, [r7, #8]
  LockResource_Status_t ret = LOCK_RESOURCE_STATUS_OK;
10000112:	2300      	movs	r3, #0
10000114:	73fb      	strb	r3, [r7, #15]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
10000116:	f001 fda3 	bl	10001c60 <HAL_GetTick>
1000011a:	60b8      	str	r0, [r7, #8]

  /* Try to Take HSEM  assigned to the Peripheral */
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
1000011c:	e00e      	b.n	1000013c <Periph_Lock+0x38>
  {

    if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
1000011e:	683b      	ldr	r3, [r7, #0]
10000120:	2b00      	cmp	r3, #0
10000122:	d007      	beq.n	10000134 <Periph_Lock+0x30>
10000124:	f001 fd9c 	bl	10001c60 <HAL_GetTick>
10000128:	4602      	mov	r2, r0
1000012a:	68bb      	ldr	r3, [r7, #8]
1000012c:	1ad3      	subs	r3, r2, r3
1000012e:	683a      	ldr	r2, [r7, #0]
10000130:	429a      	cmp	r2, r3
10000132:	d203      	bcs.n	1000013c <Periph_Lock+0x38>
    {
       ret = LOCK_RESOURCE_STATUS_TIMEOUT;
10000134:	2302      	movs	r3, #2
10000136:	73fb      	strb	r3, [r7, #15]
       Error_Handler();
10000138:	f000 fdb3 	bl	10000ca2 <Error_Handler>
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
1000013c:	687b      	ldr	r3, [r7, #4]
1000013e:	4a2c      	ldr	r2, [pc, #176]	@ (100001f0 <Periph_Lock+0xec>)
10000140:	4293      	cmp	r3, r2
10000142:	d049      	beq.n	100001d8 <Periph_Lock+0xd4>
10000144:	687b      	ldr	r3, [r7, #4]
10000146:	4a2b      	ldr	r2, [pc, #172]	@ (100001f4 <Periph_Lock+0xf0>)
10000148:	4293      	cmp	r3, r2
1000014a:	d043      	beq.n	100001d4 <Periph_Lock+0xd0>
1000014c:	687b      	ldr	r3, [r7, #4]
1000014e:	4a2a      	ldr	r2, [pc, #168]	@ (100001f8 <Periph_Lock+0xf4>)
10000150:	4293      	cmp	r3, r2
10000152:	d03d      	beq.n	100001d0 <Periph_Lock+0xcc>
10000154:	687b      	ldr	r3, [r7, #4]
10000156:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
1000015a:	d037      	beq.n	100001cc <Periph_Lock+0xc8>
1000015c:	687b      	ldr	r3, [r7, #4]
1000015e:	4a27      	ldr	r2, [pc, #156]	@ (100001fc <Periph_Lock+0xf8>)
10000160:	4293      	cmp	r3, r2
10000162:	d031      	beq.n	100001c8 <Periph_Lock+0xc4>
10000164:	687b      	ldr	r3, [r7, #4]
10000166:	4a26      	ldr	r2, [pc, #152]	@ (10000200 <Periph_Lock+0xfc>)
10000168:	4293      	cmp	r3, r2
1000016a:	d02b      	beq.n	100001c4 <Periph_Lock+0xc0>
1000016c:	687b      	ldr	r3, [r7, #4]
1000016e:	4a25      	ldr	r2, [pc, #148]	@ (10000204 <Periph_Lock+0x100>)
10000170:	4293      	cmp	r3, r2
10000172:	d025      	beq.n	100001c0 <Periph_Lock+0xbc>
10000174:	687b      	ldr	r3, [r7, #4]
10000176:	4a24      	ldr	r2, [pc, #144]	@ (10000208 <Periph_Lock+0x104>)
10000178:	4293      	cmp	r3, r2
1000017a:	d01f      	beq.n	100001bc <Periph_Lock+0xb8>
1000017c:	687b      	ldr	r3, [r7, #4]
1000017e:	4a23      	ldr	r2, [pc, #140]	@ (1000020c <Periph_Lock+0x108>)
10000180:	4293      	cmp	r3, r2
10000182:	d019      	beq.n	100001b8 <Periph_Lock+0xb4>
10000184:	687b      	ldr	r3, [r7, #4]
10000186:	4a22      	ldr	r2, [pc, #136]	@ (10000210 <Periph_Lock+0x10c>)
10000188:	4293      	cmp	r3, r2
1000018a:	d013      	beq.n	100001b4 <Periph_Lock+0xb0>
1000018c:	687b      	ldr	r3, [r7, #4]
1000018e:	4a21      	ldr	r2, [pc, #132]	@ (10000214 <Periph_Lock+0x110>)
10000190:	4293      	cmp	r3, r2
10000192:	d00d      	beq.n	100001b0 <Periph_Lock+0xac>
10000194:	687b      	ldr	r3, [r7, #4]
10000196:	4a20      	ldr	r2, [pc, #128]	@ (10000218 <Periph_Lock+0x114>)
10000198:	4293      	cmp	r3, r2
1000019a:	d007      	beq.n	100001ac <Periph_Lock+0xa8>
1000019c:	687b      	ldr	r3, [r7, #4]
1000019e:	4a1f      	ldr	r2, [pc, #124]	@ (1000021c <Periph_Lock+0x118>)
100001a0:	4293      	cmp	r3, r2
100001a2:	d101      	bne.n	100001a8 <Periph_Lock+0xa4>
100001a4:	2301      	movs	r3, #1
100001a6:	e018      	b.n	100001da <Periph_Lock+0xd6>
100001a8:	2320      	movs	r3, #32
100001aa:	e016      	b.n	100001da <Periph_Lock+0xd6>
100001ac:	2300      	movs	r3, #0
100001ae:	e014      	b.n	100001da <Periph_Lock+0xd6>
100001b0:	2300      	movs	r3, #0
100001b2:	e012      	b.n	100001da <Periph_Lock+0xd6>
100001b4:	2300      	movs	r3, #0
100001b6:	e010      	b.n	100001da <Periph_Lock+0xd6>
100001b8:	2300      	movs	r3, #0
100001ba:	e00e      	b.n	100001da <Periph_Lock+0xd6>
100001bc:	2300      	movs	r3, #0
100001be:	e00c      	b.n	100001da <Periph_Lock+0xd6>
100001c0:	2300      	movs	r3, #0
100001c2:	e00a      	b.n	100001da <Periph_Lock+0xd6>
100001c4:	2300      	movs	r3, #0
100001c6:	e008      	b.n	100001da <Periph_Lock+0xd6>
100001c8:	2300      	movs	r3, #0
100001ca:	e006      	b.n	100001da <Periph_Lock+0xd6>
100001cc:	2300      	movs	r3, #0
100001ce:	e004      	b.n	100001da <Periph_Lock+0xd6>
100001d0:	2300      	movs	r3, #0
100001d2:	e002      	b.n	100001da <Periph_Lock+0xd6>
100001d4:	2300      	movs	r3, #0
100001d6:	e000      	b.n	100001da <Periph_Lock+0xd6>
100001d8:	2300      	movs	r3, #0
100001da:	4618      	mov	r0, r3
100001dc:	f002 fa16 	bl	1000260c <HAL_HSEM_FastTake>
100001e0:	4603      	mov	r3, r0
100001e2:	2b00      	cmp	r3, #0
100001e4:	d19b      	bne.n	1000011e <Periph_Lock+0x1a>
    }
  }

  return ret;
100001e6:	7bfb      	ldrb	r3, [r7, #15]
}
100001e8:	4618      	mov	r0, r3
100001ea:	3710      	adds	r7, #16
100001ec:	46bd      	mov	sp, r7
100001ee:	bd80      	pop	{r7, pc}
100001f0:	50002000 	.word	0x50002000
100001f4:	50003000 	.word	0x50003000
100001f8:	50004000 	.word	0x50004000
100001fc:	50006000 	.word	0x50006000
10000200:	50007000 	.word	0x50007000
10000204:	50008000 	.word	0x50008000
10000208:	50009000 	.word	0x50009000
1000020c:	5000a000 	.word	0x5000a000
10000210:	5000b000 	.word	0x5000b000
10000214:	5000c000 	.word	0x5000c000
10000218:	54004000 	.word	0x54004000
1000021c:	5000d000 	.word	0x5000d000

10000220 <Periph_Unlock>:
  * @brief  The Periph_Unlock released a previously-acquired semaphore which we want to unlock
  * @param  Peripheral: used to identify which peripheral and the related semaphore
  * @retval None
  */
void Periph_Unlock(void* Peripheral)
{
10000220:	b580      	push	{r7, lr}
10000222:	b082      	sub	sp, #8
10000224:	af00      	add	r7, sp, #0
10000226:	6078      	str	r0, [r7, #4]
  /* Release HSEM  */
  HAL_HSEM_Release(GET_HSEM_SEM_INDEX(Peripheral), 0);
10000228:	687b      	ldr	r3, [r7, #4]
1000022a:	4a2b      	ldr	r2, [pc, #172]	@ (100002d8 <Periph_Unlock+0xb8>)
1000022c:	4293      	cmp	r3, r2
1000022e:	d049      	beq.n	100002c4 <Periph_Unlock+0xa4>
10000230:	687b      	ldr	r3, [r7, #4]
10000232:	4a2a      	ldr	r2, [pc, #168]	@ (100002dc <Periph_Unlock+0xbc>)
10000234:	4293      	cmp	r3, r2
10000236:	d043      	beq.n	100002c0 <Periph_Unlock+0xa0>
10000238:	687b      	ldr	r3, [r7, #4]
1000023a:	4a29      	ldr	r2, [pc, #164]	@ (100002e0 <Periph_Unlock+0xc0>)
1000023c:	4293      	cmp	r3, r2
1000023e:	d03d      	beq.n	100002bc <Periph_Unlock+0x9c>
10000240:	687b      	ldr	r3, [r7, #4]
10000242:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
10000246:	d037      	beq.n	100002b8 <Periph_Unlock+0x98>
10000248:	687b      	ldr	r3, [r7, #4]
1000024a:	4a26      	ldr	r2, [pc, #152]	@ (100002e4 <Periph_Unlock+0xc4>)
1000024c:	4293      	cmp	r3, r2
1000024e:	d031      	beq.n	100002b4 <Periph_Unlock+0x94>
10000250:	687b      	ldr	r3, [r7, #4]
10000252:	4a25      	ldr	r2, [pc, #148]	@ (100002e8 <Periph_Unlock+0xc8>)
10000254:	4293      	cmp	r3, r2
10000256:	d02b      	beq.n	100002b0 <Periph_Unlock+0x90>
10000258:	687b      	ldr	r3, [r7, #4]
1000025a:	4a24      	ldr	r2, [pc, #144]	@ (100002ec <Periph_Unlock+0xcc>)
1000025c:	4293      	cmp	r3, r2
1000025e:	d025      	beq.n	100002ac <Periph_Unlock+0x8c>
10000260:	687b      	ldr	r3, [r7, #4]
10000262:	4a23      	ldr	r2, [pc, #140]	@ (100002f0 <Periph_Unlock+0xd0>)
10000264:	4293      	cmp	r3, r2
10000266:	d01f      	beq.n	100002a8 <Periph_Unlock+0x88>
10000268:	687b      	ldr	r3, [r7, #4]
1000026a:	4a22      	ldr	r2, [pc, #136]	@ (100002f4 <Periph_Unlock+0xd4>)
1000026c:	4293      	cmp	r3, r2
1000026e:	d019      	beq.n	100002a4 <Periph_Unlock+0x84>
10000270:	687b      	ldr	r3, [r7, #4]
10000272:	4a21      	ldr	r2, [pc, #132]	@ (100002f8 <Periph_Unlock+0xd8>)
10000274:	4293      	cmp	r3, r2
10000276:	d013      	beq.n	100002a0 <Periph_Unlock+0x80>
10000278:	687b      	ldr	r3, [r7, #4]
1000027a:	4a20      	ldr	r2, [pc, #128]	@ (100002fc <Periph_Unlock+0xdc>)
1000027c:	4293      	cmp	r3, r2
1000027e:	d00d      	beq.n	1000029c <Periph_Unlock+0x7c>
10000280:	687b      	ldr	r3, [r7, #4]
10000282:	4a1f      	ldr	r2, [pc, #124]	@ (10000300 <Periph_Unlock+0xe0>)
10000284:	4293      	cmp	r3, r2
10000286:	d007      	beq.n	10000298 <Periph_Unlock+0x78>
10000288:	687b      	ldr	r3, [r7, #4]
1000028a:	4a1e      	ldr	r2, [pc, #120]	@ (10000304 <Periph_Unlock+0xe4>)
1000028c:	4293      	cmp	r3, r2
1000028e:	d101      	bne.n	10000294 <Periph_Unlock+0x74>
10000290:	2301      	movs	r3, #1
10000292:	e018      	b.n	100002c6 <Periph_Unlock+0xa6>
10000294:	2320      	movs	r3, #32
10000296:	e016      	b.n	100002c6 <Periph_Unlock+0xa6>
10000298:	2300      	movs	r3, #0
1000029a:	e014      	b.n	100002c6 <Periph_Unlock+0xa6>
1000029c:	2300      	movs	r3, #0
1000029e:	e012      	b.n	100002c6 <Periph_Unlock+0xa6>
100002a0:	2300      	movs	r3, #0
100002a2:	e010      	b.n	100002c6 <Periph_Unlock+0xa6>
100002a4:	2300      	movs	r3, #0
100002a6:	e00e      	b.n	100002c6 <Periph_Unlock+0xa6>
100002a8:	2300      	movs	r3, #0
100002aa:	e00c      	b.n	100002c6 <Periph_Unlock+0xa6>
100002ac:	2300      	movs	r3, #0
100002ae:	e00a      	b.n	100002c6 <Periph_Unlock+0xa6>
100002b0:	2300      	movs	r3, #0
100002b2:	e008      	b.n	100002c6 <Periph_Unlock+0xa6>
100002b4:	2300      	movs	r3, #0
100002b6:	e006      	b.n	100002c6 <Periph_Unlock+0xa6>
100002b8:	2300      	movs	r3, #0
100002ba:	e004      	b.n	100002c6 <Periph_Unlock+0xa6>
100002bc:	2300      	movs	r3, #0
100002be:	e002      	b.n	100002c6 <Periph_Unlock+0xa6>
100002c0:	2300      	movs	r3, #0
100002c2:	e000      	b.n	100002c6 <Periph_Unlock+0xa6>
100002c4:	2300      	movs	r3, #0
100002c6:	2100      	movs	r1, #0
100002c8:	4618      	mov	r0, r3
100002ca:	f002 f9b7 	bl	1000263c <HAL_HSEM_Release>

}
100002ce:	bf00      	nop
100002d0:	3708      	adds	r7, #8
100002d2:	46bd      	mov	sp, r7
100002d4:	bd80      	pop	{r7, pc}
100002d6:	bf00      	nop
100002d8:	50002000 	.word	0x50002000
100002dc:	50003000 	.word	0x50003000
100002e0:	50004000 	.word	0x50004000
100002e4:	50006000 	.word	0x50006000
100002e8:	50007000 	.word	0x50007000
100002ec:	50008000 	.word	0x50008000
100002f0:	50009000 	.word	0x50009000
100002f4:	5000a000 	.word	0x5000a000
100002f8:	5000b000 	.word	0x5000b000
100002fc:	5000c000 	.word	0x5000c000
10000300:	54004000 	.word	0x54004000
10000304:	5000d000 	.word	0x5000d000

10000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000030c:	b084      	sub	sp, #16
1000030e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  unsigned int counter = 0;
10000310:	2300      	movs	r3, #0
10000312:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initialize the Systick. */
  HAL_Init();
10000314:	f001 fc40 	bl	10001b98 <HAL_Init>

  /* USER CODE BEGIN Init */
    if(IS_ENGINEERING_BOOT_MODE())
10000318:	4b99      	ldr	r3, [pc, #612]	@ (10000580 <main+0x278>)
1000031a:	681b      	ldr	r3, [r3, #0]
1000031c:	f003 0307 	and.w	r3, r3, #7
10000320:	2b04      	cmp	r3, #4
10000322:	d103      	bne.n	1000032c <main+0x24>
  {
    /* Configure the system clock */
    HAL_RCC_DeInit();
10000324:	f003 fd98 	bl	10003e58 <HAL_RCC_DeInit>
    SystemClock_Config();
10000328:	f000 f958 	bl	100005dc <SystemClock_Config>
  }

  log_info("Cortex-M4 boot successful with STM32Cube FW version: v%ld.%ld.%ld \r\n",
1000032c:	f001 fc98 	bl	10001c60 <HAL_GetTick>
10000330:	4603      	mov	r3, r0
10000332:	4a94      	ldr	r2, [pc, #592]	@ (10000584 <main+0x27c>)
10000334:	fba2 2303 	umull	r2, r3, r2, r3
10000338:	099b      	lsrs	r3, r3, #6
1000033a:	461e      	mov	r6, r3
1000033c:	f001 fc90 	bl	10001c60 <HAL_GetTick>
10000340:	4602      	mov	r2, r0
10000342:	4b90      	ldr	r3, [pc, #576]	@ (10000584 <main+0x27c>)
10000344:	fba3 1302 	umull	r1, r3, r3, r2
10000348:	099b      	lsrs	r3, r3, #6
1000034a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
1000034e:	fb01 f303 	mul.w	r3, r1, r3
10000352:	1ad3      	subs	r3, r2, r3
10000354:	4698      	mov	r8, r3
10000356:	f001 fcb3 	bl	10001cc0 <HAL_GetHalVersion>
1000035a:	4603      	mov	r3, r0
1000035c:	0e1b      	lsrs	r3, r3, #24
1000035e:	b2dd      	uxtb	r5, r3
10000360:	f001 fcae 	bl	10001cc0 <HAL_GetHalVersion>
10000364:	4603      	mov	r3, r0
10000366:	0c1b      	lsrs	r3, r3, #16
10000368:	b2dc      	uxtb	r4, r3
1000036a:	f001 fca9 	bl	10001cc0 <HAL_GetHalVersion>
1000036e:	4603      	mov	r3, r0
10000370:	0a1b      	lsrs	r3, r3, #8
10000372:	b2db      	uxtb	r3, r3
10000374:	9301      	str	r3, [sp, #4]
10000376:	9400      	str	r4, [sp, #0]
10000378:	462b      	mov	r3, r5
1000037a:	4642      	mov	r2, r8
1000037c:	4631      	mov	r1, r6
1000037e:	4882      	ldr	r0, [pc, #520]	@ (10000588 <main+0x280>)
10000380:	f00a f8c4 	bl	1000a50c <iprintf>
                                            (long)((HAL_GetHalVersion() >> 24) & 0x000000FF),
                                            (long)((HAL_GetHalVersion() >> 16) & 0x000000FF),
                                            (long)((HAL_GetHalVersion() >> 8) & 0x000000FF));
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
10000384:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000388:	f44f 6200 	mov.w	r2, #2048	@ 0x800
1000038c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

  BSP_LED_Init(LED7);
10000390:	2002      	movs	r0, #2
10000392:	f001 f8e3 	bl	1000155c <BSP_LED_Init>
  //BSP_LED_On(LED7);
  /* USER CODE END Init */

  /* IPCC initialisation */
   MX_IPCC_Init();
10000396:	f000 fb13 	bl	100009c0 <MX_IPCC_Init>
  /* OpenAmp initialisation ---------------------------------*/
  MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
1000039a:	2100      	movs	r1, #0
1000039c:	2001      	movs	r0, #1
1000039e:	f000 fe5b 	bl	10001058 <MX_OPENAMP_Init>


  MX_GPIO_Init();
100003a2:	f000 fc39 	bl	10000c18 <MX_GPIO_Init>
  MX_I2C5_Init();
100003a6:	f000 fbf5 	bl	10000b94 <MX_I2C5_Init>

  if (ssd1306_Init () != 0){
100003aa:	f001 f9e9 	bl	10001780 <ssd1306_Init>
100003ae:	4603      	mov	r3, r0
100003b0:	2b00      	cmp	r3, #0
100003b2:	d001      	beq.n	100003b8 <main+0xb0>
	  Error_Handler();
100003b4:	f000 fc75 	bl	10000ca2 <Error_Handler>
 // ssd1306_WriteString("CACAAAAA \n", Font_7x10, White);
  //ssd1306_TestAll();
  //ssd1306_UpdateScreen();
  /* USER CODE BEGIN 2 */
  /* Configure LED7 */
  BSP_LED_Init(LED7);
100003b8:	2002      	movs	r0, #2
100003ba:	f001 f8cf 	bl	1000155c <BSP_LED_Init>
  BSP_LED_Toggle(LED7);
100003be:	2002      	movs	r0, #2
100003c0:	f001 f960 	bl	10001684 <BSP_LED_Toggle>


  EXTI14_IRQHandler_Config();
100003c4:	f000 fb9a 	bl	10000afc <EXTI14_IRQHandler_Config>
  /* USER CODE BEGIN 2 */
  /*
   * Create Virtual UART device
   * defined by a rpmsg channel attached to the remote device
   */
  log_info("Virtual UART0 OpenAMP-rpmsg channel creation\r\n");
100003c8:	f001 fc4a 	bl	10001c60 <HAL_GetTick>
100003cc:	4603      	mov	r3, r0
100003ce:	4a6d      	ldr	r2, [pc, #436]	@ (10000584 <main+0x27c>)
100003d0:	fba2 2303 	umull	r2, r3, r2, r3
100003d4:	099b      	lsrs	r3, r3, #6
100003d6:	461c      	mov	r4, r3
100003d8:	f001 fc42 	bl	10001c60 <HAL_GetTick>
100003dc:	4602      	mov	r2, r0
100003de:	4b69      	ldr	r3, [pc, #420]	@ (10000584 <main+0x27c>)
100003e0:	fba3 1302 	umull	r1, r3, r3, r2
100003e4:	099b      	lsrs	r3, r3, #6
100003e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
100003ea:	fb01 f303 	mul.w	r3, r1, r3
100003ee:	1ad3      	subs	r3, r2, r3
100003f0:	461a      	mov	r2, r3
100003f2:	4621      	mov	r1, r4
100003f4:	4865      	ldr	r0, [pc, #404]	@ (1000058c <main+0x284>)
100003f6:	f00a f889 	bl	1000a50c <iprintf>
  if (VIRT_UART_Init(&huart0) != VIRT_UART_OK) {
100003fa:	4865      	ldr	r0, [pc, #404]	@ (10000590 <main+0x288>)
100003fc:	f009 fe82 	bl	1000a104 <VIRT_UART_Init>
10000400:	4603      	mov	r3, r0
10000402:	2b00      	cmp	r3, #0
10000404:	d01a      	beq.n	1000043c <main+0x134>
    log_err("VIRT_UART_Init UART0 failed.\r\n");
10000406:	f001 fc2b 	bl	10001c60 <HAL_GetTick>
1000040a:	4603      	mov	r3, r0
1000040c:	4a5d      	ldr	r2, [pc, #372]	@ (10000584 <main+0x27c>)
1000040e:	fba2 2303 	umull	r2, r3, r2, r3
10000412:	099b      	lsrs	r3, r3, #6
10000414:	461c      	mov	r4, r3
10000416:	f001 fc23 	bl	10001c60 <HAL_GetTick>
1000041a:	4602      	mov	r2, r0
1000041c:	4b59      	ldr	r3, [pc, #356]	@ (10000584 <main+0x27c>)
1000041e:	fba3 1302 	umull	r1, r3, r3, r2
10000422:	099b      	lsrs	r3, r3, #6
10000424:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10000428:	fb01 f303 	mul.w	r3, r1, r3
1000042c:	1ad3      	subs	r3, r2, r3
1000042e:	461a      	mov	r2, r3
10000430:	4621      	mov	r1, r4
10000432:	4858      	ldr	r0, [pc, #352]	@ (10000594 <main+0x28c>)
10000434:	f00a f86a 	bl	1000a50c <iprintf>
    Error_Handler();
10000438:	f000 fc33 	bl	10000ca2 <Error_Handler>
  }

  log_info("Virtual UART1 OpenAMP-rpmsg channel creation\r\n");
1000043c:	f001 fc10 	bl	10001c60 <HAL_GetTick>
10000440:	4603      	mov	r3, r0
10000442:	4a50      	ldr	r2, [pc, #320]	@ (10000584 <main+0x27c>)
10000444:	fba2 2303 	umull	r2, r3, r2, r3
10000448:	099b      	lsrs	r3, r3, #6
1000044a:	461c      	mov	r4, r3
1000044c:	f001 fc08 	bl	10001c60 <HAL_GetTick>
10000450:	4602      	mov	r2, r0
10000452:	4b4c      	ldr	r3, [pc, #304]	@ (10000584 <main+0x27c>)
10000454:	fba3 1302 	umull	r1, r3, r3, r2
10000458:	099b      	lsrs	r3, r3, #6
1000045a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
1000045e:	fb01 f303 	mul.w	r3, r1, r3
10000462:	1ad3      	subs	r3, r2, r3
10000464:	461a      	mov	r2, r3
10000466:	4621      	mov	r1, r4
10000468:	484b      	ldr	r0, [pc, #300]	@ (10000598 <main+0x290>)
1000046a:	f00a f84f 	bl	1000a50c <iprintf>
  if (VIRT_UART_Init(&huart1) != VIRT_UART_OK) {
1000046e:	484b      	ldr	r0, [pc, #300]	@ (1000059c <main+0x294>)
10000470:	f009 fe48 	bl	1000a104 <VIRT_UART_Init>
10000474:	4603      	mov	r3, r0
10000476:	2b00      	cmp	r3, #0
10000478:	d01a      	beq.n	100004b0 <main+0x1a8>
    log_err("VIRT_UART_Init UART1 failed.\r\n");
1000047a:	f001 fbf1 	bl	10001c60 <HAL_GetTick>
1000047e:	4603      	mov	r3, r0
10000480:	4a40      	ldr	r2, [pc, #256]	@ (10000584 <main+0x27c>)
10000482:	fba2 2303 	umull	r2, r3, r2, r3
10000486:	099b      	lsrs	r3, r3, #6
10000488:	461c      	mov	r4, r3
1000048a:	f001 fbe9 	bl	10001c60 <HAL_GetTick>
1000048e:	4602      	mov	r2, r0
10000490:	4b3c      	ldr	r3, [pc, #240]	@ (10000584 <main+0x27c>)
10000492:	fba3 1302 	umull	r1, r3, r3, r2
10000496:	099b      	lsrs	r3, r3, #6
10000498:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
1000049c:	fb01 f303 	mul.w	r3, r1, r3
100004a0:	1ad3      	subs	r3, r2, r3
100004a2:	461a      	mov	r2, r3
100004a4:	4621      	mov	r1, r4
100004a6:	483e      	ldr	r0, [pc, #248]	@ (100005a0 <main+0x298>)
100004a8:	f00a f830 	bl	1000a50c <iprintf>
    Error_Handler();
100004ac:	f000 fbf9 	bl	10000ca2 <Error_Handler>
  }

  /*Need to register callback for message reception by channels*/
  if(VIRT_UART_RegisterCallback(&huart0, VIRT_UART_RXCPLT_CB_ID, VIRT_UART0_RxCpltCallback) != VIRT_UART_OK)
100004b0:	4a3c      	ldr	r2, [pc, #240]	@ (100005a4 <main+0x29c>)
100004b2:	2100      	movs	r1, #0
100004b4:	4836      	ldr	r0, [pc, #216]	@ (10000590 <main+0x288>)
100004b6:	f009 fe41 	bl	1000a13c <VIRT_UART_RegisterCallback>
100004ba:	4603      	mov	r3, r0
100004bc:	2b00      	cmp	r3, #0
100004be:	d001      	beq.n	100004c4 <main+0x1bc>
  {
   Error_Handler();
100004c0:	f000 fbef 	bl	10000ca2 <Error_Handler>
  }
  if(VIRT_UART_RegisterCallback(&huart1, VIRT_UART_RXCPLT_CB_ID, VIRT_UART1_RxCpltCallback) != VIRT_UART_OK)
100004c4:	4a38      	ldr	r2, [pc, #224]	@ (100005a8 <main+0x2a0>)
100004c6:	2100      	movs	r1, #0
100004c8:	4834      	ldr	r0, [pc, #208]	@ (1000059c <main+0x294>)
100004ca:	f009 fe37 	bl	1000a13c <VIRT_UART_RegisterCallback>
100004ce:	4603      	mov	r3, r0
100004d0:	2b00      	cmp	r3, #0
100004d2:	d001      	beq.n	100004d8 <main+0x1d0>
  {
    Error_Handler();
100004d4:	f000 fbe5 	bl	10000ca2 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    OPENAMP_check_for_message();
100004d8:	f000 fe70 	bl	100011bc <OPENAMP_check_for_message>

    /* USER CODE END WHILE */
    if (buttonPressed)
100004dc:	4b33      	ldr	r3, [pc, #204]	@ (100005ac <main+0x2a4>)
100004de:	681b      	ldr	r3, [r3, #0]
100004e0:	2b00      	cmp	r3, #0
100004e2:	d002      	beq.n	100004ea <main+0x1e2>
    {
//        char *msg = "Chungus";
//        VIRT_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg));
        buttonPressed = 0;
100004e4:	4b31      	ldr	r3, [pc, #196]	@ (100005ac <main+0x2a4>)
100004e6:	2200      	movs	r2, #0
100004e8:	601a      	str	r2, [r3, #0]
    }

    if (commandInit)
100004ea:	4b31      	ldr	r3, [pc, #196]	@ (100005b0 <main+0x2a8>)
100004ec:	681b      	ldr	r3, [r3, #0]
100004ee:	2b00      	cmp	r3, #0
100004f0:	d011      	beq.n	10000516 <main+0x20e>
    {
    	VirtUart0RxMsg = RESET;
100004f2:	4b30      	ldr	r3, [pc, #192]	@ (100005b4 <main+0x2ac>)
100004f4:	2200      	movs	r2, #0
100004f6:	701a      	strb	r2, [r3, #0]
    	ssd1306_WriteString("0", Font_16x24, White);
100004f8:	4b2f      	ldr	r3, [pc, #188]	@ (100005b8 <main+0x2b0>)
100004fa:	2201      	movs	r2, #1
100004fc:	9200      	str	r2, [sp, #0]
100004fe:	cb0e      	ldmia	r3, {r1, r2, r3}
10000500:	482e      	ldr	r0, [pc, #184]	@ (100005bc <main+0x2b4>)
10000502:	f001 fad9 	bl	10001ab8 <ssd1306_WriteString>
    	ssd1306_UpdateScreen();
10000506:	f001 f9c9 	bl	1000189c <ssd1306_UpdateScreen>
    	BSP_LED_Toggle(LED7);
1000050a:	2002      	movs	r0, #2
1000050c:	f001 f8ba 	bl	10001684 <BSP_LED_Toggle>
    	commandInit = 0;
10000510:	4b27      	ldr	r3, [pc, #156]	@ (100005b0 <main+0x2a8>)
10000512:	2200      	movs	r2, #0
10000514:	601a      	str	r2, [r3, #0]
    }



    if (VirtUart0RxMsg) {
10000516:	4b27      	ldr	r3, [pc, #156]	@ (100005b4 <main+0x2ac>)
10000518:	781b      	ldrb	r3, [r3, #0]
1000051a:	b2db      	uxtb	r3, r3
1000051c:	2b00      	cmp	r3, #0
1000051e:	d009      	beq.n	10000534 <main+0x22c>
      VirtUart0RxMsg = RESET;
10000520:	4b24      	ldr	r3, [pc, #144]	@ (100005b4 <main+0x2ac>)
10000522:	2200      	movs	r2, #0
10000524:	701a      	strb	r2, [r3, #0]
      VIRT_UART_Transmit(&huart0, VirtUart0ChannelBuffRx, VirtUart0ChannelRxSize);
10000526:	4b26      	ldr	r3, [pc, #152]	@ (100005c0 <main+0x2b8>)
10000528:	881b      	ldrh	r3, [r3, #0]
1000052a:	461a      	mov	r2, r3
1000052c:	4925      	ldr	r1, [pc, #148]	@ (100005c4 <main+0x2bc>)
1000052e:	4818      	ldr	r0, [pc, #96]	@ (10000590 <main+0x288>)
10000530:	f009 fe1e 	bl	1000a170 <VIRT_UART_Transmit>
    }

    if (VirtUart1RxMsg) {
10000534:	4b24      	ldr	r3, [pc, #144]	@ (100005c8 <main+0x2c0>)
10000536:	781b      	ldrb	r3, [r3, #0]
10000538:	b2db      	uxtb	r3, r3
1000053a:	2b00      	cmp	r3, #0
1000053c:	d016      	beq.n	1000056c <main+0x264>
      VirtUart1RxMsg = RESET;
1000053e:	4b22      	ldr	r3, [pc, #136]	@ (100005c8 <main+0x2c0>)
10000540:	2200      	movs	r2, #0
10000542:	701a      	strb	r2, [r3, #0]

      ssd1306_SetCursor(5, 5);
10000544:	2105      	movs	r1, #5
10000546:	2005      	movs	r0, #5
10000548:	f001 fadc 	bl	10001b04 <ssd1306_SetCursor>
      ssd1306_WriteString(VirtUart1ChannelBuffRx, Font_11x18, White);
1000054c:	4b1f      	ldr	r3, [pc, #124]	@ (100005cc <main+0x2c4>)
1000054e:	2201      	movs	r2, #1
10000550:	9200      	str	r2, [sp, #0]
10000552:	cb0e      	ldmia	r3, {r1, r2, r3}
10000554:	481e      	ldr	r0, [pc, #120]	@ (100005d0 <main+0x2c8>)
10000556:	f001 faaf 	bl	10001ab8 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
1000055a:	f001 f99f 	bl	1000189c <ssd1306_UpdateScreen>
      VIRT_UART_Transmit(&huart1, VirtUart1ChannelBuffRx, VirtUart1ChannelRxSize);
1000055e:	4b1d      	ldr	r3, [pc, #116]	@ (100005d4 <main+0x2cc>)
10000560:	881b      	ldrh	r3, [r3, #0]
10000562:	461a      	mov	r2, r3
10000564:	491a      	ldr	r1, [pc, #104]	@ (100005d0 <main+0x2c8>)
10000566:	480d      	ldr	r0, [pc, #52]	@ (1000059c <main+0x294>)
10000568:	f009 fe02 	bl	1000a170 <VIRT_UART_Transmit>
    }

    if(counter++ == 500000) {
1000056c:	687b      	ldr	r3, [r7, #4]
1000056e:	1c5a      	adds	r2, r3, #1
10000570:	607a      	str	r2, [r7, #4]
10000572:	4a19      	ldr	r2, [pc, #100]	@ (100005d8 <main+0x2d0>)
10000574:	4293      	cmp	r3, r2
10000576:	d1af      	bne.n	100004d8 <main+0x1d0>
        //BSP_LED_Toggle(LED7);
        counter = 0;
10000578:	2300      	movs	r3, #0
1000057a:	607b      	str	r3, [r7, #4]
    OPENAMP_check_for_message();
1000057c:	e7ac      	b.n	100004d8 <main+0x1d0>
1000057e:	bf00      	nop
10000580:	50020000 	.word	0x50020000
10000584:	10624dd3 	.word	0x10624dd3
10000588:	1000b204 	.word	0x1000b204
1000058c:	1000b260 	.word	0x1000b260
10000590:	1002027c 	.word	0x1002027c
10000594:	1000b2a4 	.word	0x1000b2a4
10000598:	1000b2d8 	.word	0x1000b2d8
1000059c:	100202cc 	.word	0x100202cc
100005a0:	1000b31c 	.word	0x1000b31c
100005a4:	100009e9 	.word	0x100009e9
100005a8:	10000a71 	.word	0x10000a71
100005ac:	10020274 	.word	0x10020274
100005b0:	10020278 	.word	0x10020278
100005b4:	1002031c 	.word	0x1002031c
100005b8:	1000d69c 	.word	0x1000d69c
100005bc:	1000b350 	.word	0x1000b350
100005c0:	10020520 	.word	0x10020520
100005c4:	10020320 	.word	0x10020320
100005c8:	10020522 	.word	0x10020522
100005cc:	1000d690 	.word	0x1000d690
100005d0:	10020524 	.word	0x10020524
100005d4:	10020724 	.word	0x10020724
100005d8:	0007a120 	.word	0x0007a120

100005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100005dc:	b580      	push	{r7, lr}
100005de:	b0d2      	sub	sp, #328	@ 0x148
100005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100005e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100005e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100005ea:	4618      	mov	r0, r3
100005ec:	f44f 738a 	mov.w	r3, #276	@ 0x114
100005f0:	461a      	mov	r2, r3
100005f2:	2100      	movs	r1, #0
100005f4:	f009 ffdf 	bl	1000a5b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100005f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100005fc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000600:	4618      	mov	r0, r3
10000602:	2330      	movs	r3, #48	@ 0x30
10000604:	461a      	mov	r2, r3
10000606:	2100      	movs	r1, #0
10000608:	f009 ffd5 	bl	1000a5b6 <memset>

  /**Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
1000060c:	f003 fc14 	bl	10003e38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10000610:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000614:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10000618:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
1000061c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10000620:	f043 0320 	orr.w	r3, r3, #32
10000624:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
10000628:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000062c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000630:	2207      	movs	r2, #7
10000632:	601a      	str	r2, [r3, #0]
                |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10000634:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000638:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000063c:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
10000640:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000642:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000646:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000064a:	2201      	movs	r2, #1
1000064c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
1000064e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000652:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000656:	2201      	movs	r2, #1
10000658:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
1000065a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000065e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000662:	2210      	movs	r2, #16
10000664:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000666:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000066a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000066e:	2200      	movs	r2, #0
10000670:	615a      	str	r2, [r3, #20]

  /**PLL1 Config
  */
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
10000672:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000676:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000067a:	2202      	movs	r2, #2
1000067c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL12SOURCE_HSE;
1000067e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000682:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000686:	2201      	movs	r2, #1
10000688:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 3;
1000068a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000068e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000692:	2203      	movs	r2, #3
10000694:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 81;
10000696:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000069a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000069e:	2251      	movs	r2, #81	@ 0x51
100006a0:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = 1;
100006a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100006a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100006aa:	2201      	movs	r2, #1
100006ac:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 1;
100006ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100006b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100006b6:	2201      	movs	r2, #1
100006b8:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 1;
100006ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100006be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100006c2:	2201      	movs	r2, #1
100006c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLFRACV = 0x800;
100006c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100006ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100006ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
100006d2:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMODE = RCC_PLL_FRACTIONAL;
100006d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100006d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100006dc:	2201      	movs	r2, #1
100006de:	649a      	str	r2, [r3, #72]	@ 0x48
  RCC_OscInitStruct.PLL.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
100006e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100006e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100006e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
100006ec:	651a      	str	r2, [r3, #80]	@ 0x50
  RCC_OscInitStruct.PLL.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
100006ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100006f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100006f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
100006fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /**PLL2 Config
    */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
100006fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000700:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000704:	2202      	movs	r2, #2
10000706:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000708:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000070c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000710:	2201      	movs	r2, #1
10000712:	665a      	str	r2, [r3, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10000714:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000718:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000071c:	2203      	movs	r2, #3
1000071e:	669a      	str	r2, [r3, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10000720:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000724:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000728:	2242      	movs	r2, #66	@ 0x42
1000072a:	66da      	str	r2, [r3, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
1000072c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000730:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000734:	2202      	movs	r2, #2
10000736:	671a      	str	r2, [r3, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
10000738:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000073c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000740:	2201      	movs	r2, #1
10000742:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000744:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000748:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000074c:	2201      	movs	r2, #1
1000074e:	679a      	str	r2, [r3, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
10000750:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000754:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000758:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
1000075c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000760:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000764:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000768:	2201      	movs	r2, #1
1000076a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
1000076e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000772:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000776:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
1000077a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  RCC_OscInitStruct.PLL2.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
1000077e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000782:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000786:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
1000078a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /**PLL3 Config
    */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
1000078e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000792:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000796:	2202      	movs	r2, #2
10000798:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
1000079c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100007a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100007a4:	2201      	movs	r2, #1
100007a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
100007aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100007ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100007b2:	2202      	movs	r2, #2
100007b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
100007b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100007bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100007c0:	2222      	movs	r2, #34	@ 0x22
100007c2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
100007c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100007ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100007ce:	2202      	movs	r2, #2
100007d0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
100007d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100007d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100007dc:	2211      	movs	r2, #17
100007de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
100007e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100007e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100007ea:	2225      	movs	r2, #37	@ 0x25
100007ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
100007f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100007f4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100007f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
100007fc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 0x1A04;
10000800:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000804:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000808:	f641 2204 	movw	r2, #6660	@ 0x1a04
1000080c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10000810:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000814:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000818:	2201      	movs	r2, #1
1000081a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  RCC_OscInitStruct.PLL3.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
1000081e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000822:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000826:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
1000082a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  RCC_OscInitStruct.PLL3.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
1000082e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000832:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000836:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
1000083a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

    /**PLL4 Config
    */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
1000083e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000842:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000846:	2202      	movs	r2, #2
10000848:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
1000084c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000850:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000854:	2201      	movs	r2, #1
10000856:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
1000085a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000085e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000862:	2204      	movs	r2, #4
10000864:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
10000868:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000086c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10000870:	2263      	movs	r2, #99	@ 0x63
10000872:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000876:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000087a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000087e:	2206      	movs	r2, #6
10000880:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000884:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000888:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000088c:	2208      	movs	r2, #8
1000088e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
10000892:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000896:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000089a:	2208      	movs	r2, #8
1000089c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
100008a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100008a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100008a8:	2200      	movs	r2, #0
100008aa:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
100008ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100008b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100008b6:	2200      	movs	r2, #0
100008b8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
100008bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100008c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100008c4:	2200      	movs	r2, #0
100008c6:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  RCC_OscInitStruct.PLL4.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
100008ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100008ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100008d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
100008d6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  RCC_OscInitStruct.PLL4.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
100008da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100008de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100008e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
100008e6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100008ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
100008ee:	4618      	mov	r0, r3
100008f0:	f003 fcf6 	bl	100042e0 <HAL_RCC_OscConfig>
100008f4:	4603      	mov	r3, r0
100008f6:	2b00      	cmp	r3, #0
100008f8:	d001      	beq.n	100008fe <SystemClock_Config+0x322>
  {
  Error_Handler();
100008fa:	f000 f9d2 	bl	10000ca2 <Error_Handler>
  }
  /**RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
100008fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000902:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000906:	22ff      	movs	r2, #255	@ 0xff
10000908:	601a      	str	r2, [r3, #0]
                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                |RCC_CLOCKTYPE_PCLK5|RCC_CLOCKTYPE_MPU;
  RCC_ClkInitStruct.MPUInit.MPU_Clock = RCC_MPUSOURCE_PLL1;
1000090a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000090e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000912:	2202      	movs	r2, #2
10000914:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.MPUInit.MPU_Div = RCC_MPU_DIV2;
10000916:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000091a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000091e:	2201      	movs	r2, #1
10000920:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10000922:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000926:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000092a:	2202      	movs	r2, #2
1000092c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
1000092e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000932:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000936:	2200      	movs	r2, #0
10000938:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
1000093a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000093e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000942:	2203      	movs	r2, #3
10000944:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000946:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000094a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000094e:	2200      	movs	r2, #0
10000950:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000952:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000956:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000095a:	2201      	movs	r2, #1
1000095c:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
1000095e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000962:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000966:	2202      	movs	r2, #2
10000968:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
1000096a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000096e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10000972:	2201      	movs	r2, #1
10000974:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000976:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000097a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000097e:	2201      	movs	r2, #1
10000980:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000982:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10000986:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
1000098a:	2201      	movs	r2, #1
1000098c:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
1000098e:	1d3b      	adds	r3, r7, #4
10000990:	4618      	mov	r0, r3
10000992:	f004 fa43 	bl	10004e1c <HAL_RCC_ClockConfig>
10000996:	4603      	mov	r3, r0
10000998:	2b00      	cmp	r3, #0
1000099a:	d001      	beq.n	100009a0 <SystemClock_Config+0x3c4>
  {
  Error_Handler();
1000099c:	f000 f981 	bl	10000ca2 <Error_Handler>
  }

  /**Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
100009a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100009a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
100009aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100009ae:	f043 0317 	orr.w	r3, r3, #23
100009b2:	6453      	str	r3, [r2, #68]	@ 0x44
}
100009b4:	bf00      	nop
100009b6:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
100009ba:	46bd      	mov	sp, r7
100009bc:	bd80      	pop	{r7, pc}
	...

100009c0 <MX_IPCC_Init>:
  * @brief IPPC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
100009c0:	b580      	push	{r7, lr}
100009c2:	af00      	add	r7, sp, #0

  hipcc.Instance = IPCC;
100009c4:	4b06      	ldr	r3, [pc, #24]	@ (100009e0 <MX_IPCC_Init+0x20>)
100009c6:	4a07      	ldr	r2, [pc, #28]	@ (100009e4 <MX_IPCC_Init+0x24>)
100009c8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
100009ca:	4805      	ldr	r0, [pc, #20]	@ (100009e0 <MX_IPCC_Init+0x20>)
100009cc:	f003 f86c 	bl	10003aa8 <HAL_IPCC_Init>
100009d0:	4603      	mov	r3, r0
100009d2:	2b00      	cmp	r3, #0
100009d4:	d001      	beq.n	100009da <MX_IPCC_Init+0x1a>
  {
     Error_Handler();
100009d6:	f000 f964 	bl	10000ca2 <Error_Handler>
  }
}
100009da:	bf00      	nop
100009dc:	bd80      	pop	{r7, pc}
100009de:	bf00      	nop
100009e0:	1002022c 	.word	0x1002022c
100009e4:	4c001000 	.word	0x4c001000

100009e8 <VIRT_UART0_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void VIRT_UART0_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
100009e8:	b590      	push	{r4, r7, lr}
100009ea:	b083      	sub	sp, #12
100009ec:	af00      	add	r7, sp, #0
100009ee:	6078      	str	r0, [r7, #4]
//	}

	//commandInit = 1;


    log_info("Msg received on VIRTUAL UART0 channel:  %s \n\r", (char *) huart->pRxBuffPtr);
100009f0:	f001 f936 	bl	10001c60 <HAL_GetTick>
100009f4:	4603      	mov	r3, r0
100009f6:	4a19      	ldr	r2, [pc, #100]	@ (10000a5c <VIRT_UART0_RxCpltCallback+0x74>)
100009f8:	fba2 2303 	umull	r2, r3, r2, r3
100009fc:	099b      	lsrs	r3, r3, #6
100009fe:	461c      	mov	r4, r3
10000a00:	f001 f92e 	bl	10001c60 <HAL_GetTick>
10000a04:	4602      	mov	r2, r0
10000a06:	4b15      	ldr	r3, [pc, #84]	@ (10000a5c <VIRT_UART0_RxCpltCallback+0x74>)
10000a08:	fba3 1302 	umull	r1, r3, r3, r2
10000a0c:	099b      	lsrs	r3, r3, #6
10000a0e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10000a12:	fb01 f303 	mul.w	r3, r1, r3
10000a16:	1ad3      	subs	r3, r2, r3
10000a18:	461a      	mov	r2, r3
10000a1a:	687b      	ldr	r3, [r7, #4]
10000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10000a1e:	4621      	mov	r1, r4
10000a20:	480f      	ldr	r0, [pc, #60]	@ (10000a60 <VIRT_UART0_RxCpltCallback+0x78>)
10000a22:	f009 fd73 	bl	1000a50c <iprintf>

    /* copy received msg in a variable to sent it back to master processor in main infinite loop*/
    VirtUart0ChannelRxSize = huart->RxXferSize < MAX_BUFFER_SIZE? huart->RxXferSize : MAX_BUFFER_SIZE-1;
10000a26:	687b      	ldr	r3, [r7, #4]
10000a28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
10000a2c:	f240 12ff 	movw	r2, #511	@ 0x1ff
10000a30:	4293      	cmp	r3, r2
10000a32:	bf28      	it	cs
10000a34:	4613      	movcs	r3, r2
10000a36:	b29a      	uxth	r2, r3
10000a38:	4b0a      	ldr	r3, [pc, #40]	@ (10000a64 <VIRT_UART0_RxCpltCallback+0x7c>)
10000a3a:	801a      	strh	r2, [r3, #0]
    memcpy(VirtUart0ChannelBuffRx, huart->pRxBuffPtr, VirtUart0ChannelRxSize);
10000a3c:	687b      	ldr	r3, [r7, #4]
10000a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10000a40:	4a08      	ldr	r2, [pc, #32]	@ (10000a64 <VIRT_UART0_RxCpltCallback+0x7c>)
10000a42:	8812      	ldrh	r2, [r2, #0]
10000a44:	4619      	mov	r1, r3
10000a46:	4808      	ldr	r0, [pc, #32]	@ (10000a68 <VIRT_UART0_RxCpltCallback+0x80>)
10000a48:	f009 fe65 	bl	1000a716 <memcpy>
    VirtUart0RxMsg = SET;
10000a4c:	4b07      	ldr	r3, [pc, #28]	@ (10000a6c <VIRT_UART0_RxCpltCallback+0x84>)
10000a4e:	2201      	movs	r2, #1
10000a50:	701a      	strb	r2, [r3, #0]
}
10000a52:	bf00      	nop
10000a54:	370c      	adds	r7, #12
10000a56:	46bd      	mov	sp, r7
10000a58:	bd90      	pop	{r4, r7, pc}
10000a5a:	bf00      	nop
10000a5c:	10624dd3 	.word	0x10624dd3
10000a60:	1000b354 	.word	0x1000b354
10000a64:	10020520 	.word	0x10020520
10000a68:	10020320 	.word	0x10020320
10000a6c:	1002031c 	.word	0x1002031c

10000a70 <VIRT_UART1_RxCpltCallback>:

void VIRT_UART1_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
10000a70:	b590      	push	{r4, r7, lr}
10000a72:	b083      	sub	sp, #12
10000a74:	af00      	add	r7, sp, #0
10000a76:	6078      	str	r0, [r7, #4]
	ssd1306_Clear();
10000a78:	f000 ff06 	bl	10001888 <ssd1306_Clear>

    log_info("Msg received on VIRTUAL UART1 channel:  %s \n\r", (char *) huart->pRxBuffPtr);
10000a7c:	f001 f8f0 	bl	10001c60 <HAL_GetTick>
10000a80:	4603      	mov	r3, r0
10000a82:	4a19      	ldr	r2, [pc, #100]	@ (10000ae8 <VIRT_UART1_RxCpltCallback+0x78>)
10000a84:	fba2 2303 	umull	r2, r3, r2, r3
10000a88:	099b      	lsrs	r3, r3, #6
10000a8a:	461c      	mov	r4, r3
10000a8c:	f001 f8e8 	bl	10001c60 <HAL_GetTick>
10000a90:	4602      	mov	r2, r0
10000a92:	4b15      	ldr	r3, [pc, #84]	@ (10000ae8 <VIRT_UART1_RxCpltCallback+0x78>)
10000a94:	fba3 1302 	umull	r1, r3, r3, r2
10000a98:	099b      	lsrs	r3, r3, #6
10000a9a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10000a9e:	fb01 f303 	mul.w	r3, r1, r3
10000aa2:	1ad3      	subs	r3, r2, r3
10000aa4:	461a      	mov	r2, r3
10000aa6:	687b      	ldr	r3, [r7, #4]
10000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10000aaa:	4621      	mov	r1, r4
10000aac:	480f      	ldr	r0, [pc, #60]	@ (10000aec <VIRT_UART1_RxCpltCallback+0x7c>)
10000aae:	f009 fd2d 	bl	1000a50c <iprintf>

    /* copy received msg in a variable to sent it back to master processor in main infinite loop*/
    VirtUart1ChannelRxSize = huart->RxXferSize < MAX_BUFFER_SIZE? huart->RxXferSize : MAX_BUFFER_SIZE-1;
10000ab2:	687b      	ldr	r3, [r7, #4]
10000ab4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
10000ab8:	f240 12ff 	movw	r2, #511	@ 0x1ff
10000abc:	4293      	cmp	r3, r2
10000abe:	bf28      	it	cs
10000ac0:	4613      	movcs	r3, r2
10000ac2:	b29a      	uxth	r2, r3
10000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (10000af0 <VIRT_UART1_RxCpltCallback+0x80>)
10000ac6:	801a      	strh	r2, [r3, #0]
    memcpy(VirtUart1ChannelBuffRx, huart->pRxBuffPtr, VirtUart1ChannelRxSize);
10000ac8:	687b      	ldr	r3, [r7, #4]
10000aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10000acc:	4a08      	ldr	r2, [pc, #32]	@ (10000af0 <VIRT_UART1_RxCpltCallback+0x80>)
10000ace:	8812      	ldrh	r2, [r2, #0]
10000ad0:	4619      	mov	r1, r3
10000ad2:	4808      	ldr	r0, [pc, #32]	@ (10000af4 <VIRT_UART1_RxCpltCallback+0x84>)
10000ad4:	f009 fe1f 	bl	1000a716 <memcpy>
    VirtUart1RxMsg = SET;
10000ad8:	4b07      	ldr	r3, [pc, #28]	@ (10000af8 <VIRT_UART1_RxCpltCallback+0x88>)
10000ada:	2201      	movs	r2, #1
10000adc:	701a      	strb	r2, [r3, #0]
}
10000ade:	bf00      	nop
10000ae0:	370c      	adds	r7, #12
10000ae2:	46bd      	mov	sp, r7
10000ae4:	bd90      	pop	{r4, r7, pc}
10000ae6:	bf00      	nop
10000ae8:	10624dd3 	.word	0x10624dd3
10000aec:	1000b398 	.word	0x1000b398
10000af0:	10020724 	.word	0x10020724
10000af4:	10020524 	.word	0x10020524
10000af8:	10020522 	.word	0x10020522

10000afc <EXTI14_IRQHandler_Config>:

static void EXTI14_IRQHandler_Config(void)
{
10000afc:	b580      	push	{r7, lr}
10000afe:	b08a      	sub	sp, #40	@ 0x28
10000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStruct;
  EXTI_ConfigTypeDef EXTI_ConfigStructure;


  /* Enable GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
10000b02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000b06:	2201      	movs	r2, #1
10000b08:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

  /* Configure PA.14 pin as input floating */
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10000b0c:	2300      	movs	r3, #0
10000b0e:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Pull = GPIO_NOPULL;
10000b10:	2300      	movs	r3, #0
10000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = USER_BUTTON_PIN;
10000b14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
10000b18:	617b      	str	r3, [r7, #20]
  PERIPH_LOCK(GPIOA);
10000b1a:	2164      	movs	r1, #100	@ 0x64
10000b1c:	4818      	ldr	r0, [pc, #96]	@ (10000b80 <EXTI14_IRQHandler_Config+0x84>)
10000b1e:	f7ff faf1 	bl	10000104 <Periph_Lock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10000b22:	f107 0314 	add.w	r3, r7, #20
10000b26:	4619      	mov	r1, r3
10000b28:	4815      	ldr	r0, [pc, #84]	@ (10000b80 <EXTI14_IRQHandler_Config+0x84>)
10000b2a:	f001 fb93 	bl	10002254 <HAL_GPIO_Init>
  PERIPH_UNLOCK(GPIOA);
10000b2e:	4814      	ldr	r0, [pc, #80]	@ (10000b80 <EXTI14_IRQHandler_Config+0x84>)
10000b30:	f7ff fb76 	bl	10000220 <Periph_Unlock>

  /* Set configuration except Interrupt and Event mask of Exti line 14*/
  EXTI_ConfigStructure.Line = EXTI_LINE_14;
10000b34:	4b13      	ldr	r3, [pc, #76]	@ (10000b84 <EXTI14_IRQHandler_Config+0x88>)
10000b36:	607b      	str	r3, [r7, #4]
  EXTI_ConfigStructure.Trigger = EXTI_TRIGGER_FALLING;
10000b38:	2302      	movs	r3, #2
10000b3a:	60fb      	str	r3, [r7, #12]
  EXTI_ConfigStructure.GPIOSel = EXTI_GPIOA;
10000b3c:	2300      	movs	r3, #0
10000b3e:	613b      	str	r3, [r7, #16]
  EXTI_ConfigStructure.Mode = EXTI_MODE_C2_INTERRUPT;
10000b40:	2321      	movs	r3, #33	@ 0x21
10000b42:	60bb      	str	r3, [r7, #8]
  PERIPH_LOCK(EXTI);
10000b44:	2164      	movs	r1, #100	@ 0x64
10000b46:	4810      	ldr	r0, [pc, #64]	@ (10000b88 <EXTI14_IRQHandler_Config+0x8c>)
10000b48:	f7ff fadc 	bl	10000104 <Periph_Lock>
  HAL_EXTI_SetConfigLine(&hexti, &EXTI_ConfigStructure);
10000b4c:	1d3b      	adds	r3, r7, #4
10000b4e:	4619      	mov	r1, r3
10000b50:	480e      	ldr	r0, [pc, #56]	@ (10000b8c <EXTI14_IRQHandler_Config+0x90>)
10000b52:	f001 fa13 	bl	10001f7c <HAL_EXTI_SetConfigLine>
  PERIPH_UNLOCK(EXTI);
10000b56:	480c      	ldr	r0, [pc, #48]	@ (10000b88 <EXTI14_IRQHandler_Config+0x8c>)
10000b58:	f7ff fb62 	bl	10000220 <Periph_Unlock>

  /* Register callback to treat Exti interrupts in user Exti14FallingCb function */
  HAL_EXTI_RegisterCallback(&hexti, HAL_EXTI_FALLING_CB_ID, Exti14FallingCb);
10000b5c:	4a0c      	ldr	r2, [pc, #48]	@ (10000b90 <EXTI14_IRQHandler_Config+0x94>)
10000b5e:	2102      	movs	r1, #2
10000b60:	480a      	ldr	r0, [pc, #40]	@ (10000b8c <EXTI14_IRQHandler_Config+0x90>)
10000b62:	f001 fb03 	bl	1000216c <HAL_EXTI_RegisterCallback>

  /* Enable and set line 14 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI14_IRQn, (DEFAULT_IRQ_PRIO + 2U), 0);
10000b66:	2200      	movs	r2, #0
10000b68:	2103      	movs	r1, #3
10000b6a:	2079      	movs	r0, #121	@ 0x79
10000b6c:	f001 f98d 	bl	10001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
10000b70:	2079      	movs	r0, #121	@ 0x79
10000b72:	f001 f9a6 	bl	10001ec2 <HAL_NVIC_EnableIRQ>
}
10000b76:	bf00      	nop
10000b78:	3728      	adds	r7, #40	@ 0x28
10000b7a:	46bd      	mov	sp, r7
10000b7c:	bd80      	pop	{r7, pc}
10000b7e:	bf00      	nop
10000b80:	50002000 	.word	0x50002000
10000b84:	1600000e 	.word	0x1600000e
10000b88:	5000d000 	.word	0x5000d000
10000b8c:	10020268 	.word	0x10020268
10000b90:	10000cb9 	.word	0x10000cb9

10000b94 <MX_I2C5_Init>:
  * @param None:
  * @retval None
  */

static void MX_I2C5_Init(void)
{
10000b94:	b580      	push	{r7, lr}
10000b96:	af00      	add	r7, sp, #0

  hi2c5.Instance = I2C5;
10000b98:	4b1c      	ldr	r3, [pc, #112]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000b9a:	4a1d      	ldr	r2, [pc, #116]	@ (10000c10 <MX_I2C5_Init+0x7c>)
10000b9c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00701837;
10000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000ba0:	4a1c      	ldr	r2, [pc, #112]	@ (10000c14 <MX_I2C5_Init+0x80>)
10000ba2:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
10000ba4:	4b19      	ldr	r3, [pc, #100]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000ba6:	2200      	movs	r2, #0
10000ba8:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
10000baa:	4b18      	ldr	r3, [pc, #96]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000bac:	2201      	movs	r2, #1
10000bae:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
10000bb0:	4b16      	ldr	r3, [pc, #88]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000bb2:	2200      	movs	r2, #0
10000bb4:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
10000bb6:	4b15      	ldr	r3, [pc, #84]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000bb8:	2200      	movs	r2, #0
10000bba:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
10000bbc:	4b13      	ldr	r3, [pc, #76]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000bbe:	2200      	movs	r2, #0
10000bc0:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
10000bc2:	4b12      	ldr	r3, [pc, #72]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000bc4:	2200      	movs	r2, #0
10000bc6:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
10000bc8:	4b10      	ldr	r3, [pc, #64]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000bca:	2200      	movs	r2, #0
10000bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
10000bce:	480f      	ldr	r0, [pc, #60]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000bd0:	f001 fd47 	bl	10002662 <HAL_I2C_Init>
10000bd4:	4603      	mov	r3, r0
10000bd6:	2b00      	cmp	r3, #0
10000bd8:	d001      	beq.n	10000bde <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
10000bda:	f000 f862 	bl	10000ca2 <Error_Handler>
  }

    /**Configure Analogue filter
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
10000bde:	2100      	movs	r1, #0
10000be0:	480a      	ldr	r0, [pc, #40]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000be2:	f002 feb1 	bl	10003948 <HAL_I2CEx_ConfigAnalogFilter>
10000be6:	4603      	mov	r3, r0
10000be8:	2b00      	cmp	r3, #0
10000bea:	d001      	beq.n	10000bf0 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
10000bec:	f000 f859 	bl	10000ca2 <Error_Handler>
  }

    /**Configure Digital filter
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
10000bf0:	2100      	movs	r1, #0
10000bf2:	4806      	ldr	r0, [pc, #24]	@ (10000c0c <MX_I2C5_Init+0x78>)
10000bf4:	f002 fef3 	bl	100039de <HAL_I2CEx_ConfigDigitalFilter>
10000bf8:	4603      	mov	r3, r0
10000bfa:	2b00      	cmp	r3, #0
10000bfc:	d001      	beq.n	10000c02 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
10000bfe:	f000 f850 	bl	10000ca2 <Error_Handler>
  }

  /**I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
10000c02:	2010      	movs	r0, #16
10000c04:	f002 ff38 	bl	10003a78 <HAL_I2CEx_EnableFastModePlus>
}
10000c08:	bf00      	nop
10000c0a:	bd80      	pop	{r7, pc}
10000c0c:	100201d8 	.word	0x100201d8
10000c10:	40015000 	.word	0x40015000
10000c14:	00701837 	.word	0x00701837

10000c18 <MX_GPIO_Init>:
        * EXTI
     USB_DM1   ------> USBH_HS1_DM
     USB_DP1   ------> USBH_HS1_DP
*/
static void MX_GPIO_Init(void)
{
10000c18:	b480      	push	{r7}
10000c1a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
10000c1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c20:	2280      	movs	r2, #128	@ 0x80
10000c22:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOD_CLK_ENABLE();
10000c26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c2a:	2208      	movs	r2, #8
10000c2c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOG_CLK_ENABLE();
10000c30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c34:	2240      	movs	r2, #64	@ 0x40
10000c36:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
10000c3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c3e:	2202      	movs	r2, #2
10000c40:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
10000c44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c48:	2220      	movs	r2, #32
10000c4a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOC_CLK_ENABLE();
10000c4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c52:	2204      	movs	r2, #4
10000c54:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOE_CLK_ENABLE();
10000c58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c5c:	2210      	movs	r2, #16
10000c5e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
10000c62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c66:	2201      	movs	r2, #1
10000c68:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOI_CLK_ENABLE();
10000c6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10000c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
10000c74:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
}
10000c78:	bf00      	nop
10000c7a:	46bd      	mov	sp, r7
10000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c80:	4770      	bx	lr

10000c82 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
10000c82:	b580      	push	{r7, lr}
10000c84:	b082      	sub	sp, #8
10000c86:	af00      	add	r7, sp, #0
10000c88:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
10000c8a:	6878      	ldr	r0, [r7, #4]
10000c8c:	f001 ff3d 	bl	10002b0a <HAL_I2C_GetError>
10000c90:	4603      	mov	r3, r0
10000c92:	2b04      	cmp	r3, #4
10000c94:	d001      	beq.n	10000c9a <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
10000c96:	f000 f804 	bl	10000ca2 <Error_Handler>
  }
}
10000c9a:	bf00      	nop
10000c9c:	3708      	adds	r7, #8
10000c9e:	46bd      	mov	sp, r7
10000ca0:	bd80      	pop	{r7, pc}

10000ca2 <Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void Error_Handler(void)
{
10000ca2:	b580      	push	{r7, lr}
10000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Error if LED7 is slowly blinking (1 sec. period) */
  while(1)
  {
    BSP_LED_Toggle(LED7);
10000ca6:	2002      	movs	r0, #2
10000ca8:	f000 fcec 	bl	10001684 <BSP_LED_Toggle>
    HAL_Delay(1000);
10000cac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10000cb0:	f000 ffe2 	bl	10001c78 <HAL_Delay>
    BSP_LED_Toggle(LED7);
10000cb4:	bf00      	nop
10000cb6:	e7f6      	b.n	10000ca6 <Error_Handler+0x4>

10000cb8 <Exti14FallingCb>:
  /* USER CODE END Error_Handler_Debug */
}


static void Exti14FallingCb(void)
{
10000cb8:	b580      	push	{r7, lr}
10000cba:	af00      	add	r7, sp, #0
    BSP_LED_Toggle(LED7);
10000cbc:	2002      	movs	r0, #2
10000cbe:	f000 fce1 	bl	10001684 <BSP_LED_Toggle>
    ssd1306_Clear();
10000cc2:	f000 fde1 	bl	10001888 <ssd1306_Clear>
    buttonPressed = 1;   // just set the flag
10000cc6:	4b02      	ldr	r3, [pc, #8]	@ (10000cd0 <Exti14FallingCb+0x18>)
10000cc8:	2201      	movs	r2, #1
10000cca:	601a      	str	r2, [r3, #0]
}
10000ccc:	bf00      	nop
10000cce:	bd80      	pop	{r7, pc}
10000cd0:	10020274 	.word	0x10020274

10000cd4 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
10000cd4:	b598      	push	{r3, r4, r7, lr}
10000cd6:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
10000cd8:	4b27      	ldr	r3, [pc, #156]	@ (10000d78 <MAILBOX_Init+0xa4>)
10000cda:	2201      	movs	r2, #1
10000cdc:	2100      	movs	r1, #0
10000cde:	4827      	ldr	r0, [pc, #156]	@ (10000d7c <MAILBOX_Init+0xa8>)
10000ce0:	f002 ff14 	bl	10003b0c <HAL_IPCC_ActivateNotification>
10000ce4:	4603      	mov	r3, r0
10000ce6:	2b00      	cmp	r3, #0
10000ce8:	d01c      	beq.n	10000d24 <MAILBOX_Init+0x50>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
10000cea:	f000 ffb9 	bl	10001c60 <HAL_GetTick>
10000cee:	4603      	mov	r3, r0
10000cf0:	4a23      	ldr	r2, [pc, #140]	@ (10000d80 <MAILBOX_Init+0xac>)
10000cf2:	fba2 2303 	umull	r2, r3, r2, r3
10000cf6:	099b      	lsrs	r3, r3, #6
10000cf8:	461c      	mov	r4, r3
10000cfa:	f000 ffb1 	bl	10001c60 <HAL_GetTick>
10000cfe:	4602      	mov	r2, r0
10000d00:	4b1f      	ldr	r3, [pc, #124]	@ (10000d80 <MAILBOX_Init+0xac>)
10000d02:	fba3 1302 	umull	r1, r3, r3, r2
10000d06:	099b      	lsrs	r3, r3, #6
10000d08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10000d0c:	fb01 f303 	mul.w	r3, r1, r3
10000d10:	1ad3      	subs	r3, r2, r3
10000d12:	461a      	mov	r2, r3
10000d14:	4b1b      	ldr	r3, [pc, #108]	@ (10000d84 <MAILBOX_Init+0xb0>)
10000d16:	4621      	mov	r1, r4
10000d18:	481b      	ldr	r0, [pc, #108]	@ (10000d88 <MAILBOX_Init+0xb4>)
10000d1a:	f009 fbf7 	bl	1000a50c <iprintf>
    return -1;
10000d1e:	f04f 33ff 	mov.w	r3, #4294967295
10000d22:	e026      	b.n	10000d72 <MAILBOX_Init+0x9e>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
10000d24:	4b19      	ldr	r3, [pc, #100]	@ (10000d8c <MAILBOX_Init+0xb8>)
10000d26:	2201      	movs	r2, #1
10000d28:	2101      	movs	r1, #1
10000d2a:	4814      	ldr	r0, [pc, #80]	@ (10000d7c <MAILBOX_Init+0xa8>)
10000d2c:	f002 feee 	bl	10003b0c <HAL_IPCC_ActivateNotification>
10000d30:	4603      	mov	r3, r0
10000d32:	2b00      	cmp	r3, #0
10000d34:	d01c      	beq.n	10000d70 <MAILBOX_Init+0x9c>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
10000d36:	f000 ff93 	bl	10001c60 <HAL_GetTick>
10000d3a:	4603      	mov	r3, r0
10000d3c:	4a10      	ldr	r2, [pc, #64]	@ (10000d80 <MAILBOX_Init+0xac>)
10000d3e:	fba2 2303 	umull	r2, r3, r2, r3
10000d42:	099b      	lsrs	r3, r3, #6
10000d44:	461c      	mov	r4, r3
10000d46:	f000 ff8b 	bl	10001c60 <HAL_GetTick>
10000d4a:	4602      	mov	r2, r0
10000d4c:	4b0c      	ldr	r3, [pc, #48]	@ (10000d80 <MAILBOX_Init+0xac>)
10000d4e:	fba3 1302 	umull	r1, r3, r3, r2
10000d52:	099b      	lsrs	r3, r3, #6
10000d54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10000d58:	fb01 f303 	mul.w	r3, r1, r3
10000d5c:	1ad3      	subs	r3, r2, r3
10000d5e:	461a      	mov	r2, r3
10000d60:	4b08      	ldr	r3, [pc, #32]	@ (10000d84 <MAILBOX_Init+0xb0>)
10000d62:	4621      	mov	r1, r4
10000d64:	480a      	ldr	r0, [pc, #40]	@ (10000d90 <MAILBOX_Init+0xbc>)
10000d66:	f009 fbd1 	bl	1000a50c <iprintf>
    return -1;
10000d6a:	f04f 33ff 	mov.w	r3, #4294967295
10000d6e:	e000      	b.n	10000d72 <MAILBOX_Init+0x9e>


  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
10000d70:	2300      	movs	r3, #0
}
10000d72:	4618      	mov	r0, r3
10000d74:	bd98      	pop	{r3, r4, r7, pc}
10000d76:	bf00      	nop
10000d78:	10000e89 	.word	0x10000e89
10000d7c:	1002022c 	.word	0x1002022c
10000d80:	10624dd3 	.word	0x10624dd3
10000d84:	1000b744 	.word	0x1000b744
10000d88:	1000b3dc 	.word	0x1000b3dc
10000d8c:	10000eb5 	.word	0x10000eb5
10000d90:	1000b404 	.word	0x1000b404

10000d94 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
10000d94:	b580      	push	{r7, lr}
10000d96:	b084      	sub	sp, #16
10000d98:	af00      	add	r7, sp, #0
10000d9a:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */
  int ret = -1;
10000d9c:	f04f 33ff 	mov.w	r3, #4294967295
10000da0:	60fb      	str	r3, [r7, #12]

   /* USER CODE BEGIN PRE_MAILBOX_POLL */

   /* USER CODE END  PRE_MAILBOX_POLL */

   if (msg_received_ch1 == MBOX_BUF_FREE) {
10000da2:	4b0f      	ldr	r3, [pc, #60]	@ (10000de0 <MAILBOX_Poll+0x4c>)
10000da4:	681b      	ldr	r3, [r3, #0]
10000da6:	2b02      	cmp	r3, #2
10000da8:	d108      	bne.n	10000dbc <MAILBOX_Poll+0x28>
   /* USER CODE BEGIN MSG_CHANNEL1 */

   /* USER CODE END  MSG_CHANNEL1 */

    OPENAMP_log_dbg("Running virt0 (ch_1 buf free)\r\n");
    rproc_virtio_notified(vdev, VRING0_ID);
10000daa:	2100      	movs	r1, #0
10000dac:	6878      	ldr	r0, [r7, #4]
10000dae:	f007 fdec 	bl	1000898a <rproc_virtio_notified>
    ret = 0;
10000db2:	2300      	movs	r3, #0
10000db4:	60fb      	str	r3, [r7, #12]
    msg_received_ch1 = MBOX_NO_MSG;
10000db6:	4b0a      	ldr	r3, [pc, #40]	@ (10000de0 <MAILBOX_Poll+0x4c>)
10000db8:	2200      	movs	r2, #0
10000dba:	601a      	str	r2, [r3, #0]
  }

  if (msg_received_ch2 == MBOX_NEW_MSG) {
10000dbc:	4b09      	ldr	r3, [pc, #36]	@ (10000de4 <MAILBOX_Poll+0x50>)
10000dbe:	681b      	ldr	r3, [r3, #0]
10000dc0:	2b01      	cmp	r3, #1
10000dc2:	d108      	bne.n	10000dd6 <MAILBOX_Poll+0x42>
   /* USER CODE BEGIN MSG_CHANNEL2 */

   /* USER CODE END  MSG_CHANNEL2 */

    OPENAMP_log_dbg("Running virt1 (ch_2 new msg)\r\n");
    rproc_virtio_notified(vdev, VRING1_ID);
10000dc4:	2101      	movs	r1, #1
10000dc6:	6878      	ldr	r0, [r7, #4]
10000dc8:	f007 fddf 	bl	1000898a <rproc_virtio_notified>
    msg_received_ch2 = MBOX_NO_MSG;
10000dcc:	4b05      	ldr	r3, [pc, #20]	@ (10000de4 <MAILBOX_Poll+0x50>)
10000dce:	2200      	movs	r2, #0
10000dd0:	601a      	str	r2, [r3, #0]

    ret = 0;
10000dd2:	2300      	movs	r3, #0
10000dd4:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_MAILBOX_POLL */

  /* USER CODE END  POST_MAILBOX_POLL */

  return ret;
10000dd6:	68fb      	ldr	r3, [r7, #12]
}
10000dd8:	4618      	mov	r0, r3
10000dda:	3710      	adds	r7, #16
10000ddc:	46bd      	mov	sp, r7
10000dde:	bd80      	pop	{r7, pc}
10000de0:	10020728 	.word	0x10020728
10000de4:	1002072c 	.word	0x1002072c

10000de8 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
10000de8:	b590      	push	{r4, r7, lr}
10000dea:	b085      	sub	sp, #20
10000dec:	af00      	add	r7, sp, #0
10000dee:	6078      	str	r0, [r7, #4]
10000df0:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
10000df2:	683b      	ldr	r3, [r7, #0]
10000df4:	2b00      	cmp	r3, #0
10000df6:	d102      	bne.n	10000dfe <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
10000df8:	2300      	movs	r3, #0
10000dfa:	60fb      	str	r3, [r7, #12]
10000dfc:	e022      	b.n	10000e44 <MAILBOX_Notify+0x5c>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
10000dfe:	683b      	ldr	r3, [r7, #0]
10000e00:	2b01      	cmp	r3, #1
10000e02:	d102      	bne.n	10000e0a <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
10000e04:	2301      	movs	r3, #1
10000e06:	60fb      	str	r3, [r7, #12]
10000e08:	e01c      	b.n	10000e44 <MAILBOX_Notify+0x5c>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
10000e0a:	f000 ff29 	bl	10001c60 <HAL_GetTick>
10000e0e:	4603      	mov	r3, r0
10000e10:	4a1a      	ldr	r2, [pc, #104]	@ (10000e7c <MAILBOX_Notify+0x94>)
10000e12:	fba2 2303 	umull	r2, r3, r2, r3
10000e16:	099b      	lsrs	r3, r3, #6
10000e18:	461c      	mov	r4, r3
10000e1a:	f000 ff21 	bl	10001c60 <HAL_GetTick>
10000e1e:	4602      	mov	r2, r0
10000e20:	4b16      	ldr	r3, [pc, #88]	@ (10000e7c <MAILBOX_Notify+0x94>)
10000e22:	fba3 1302 	umull	r1, r3, r3, r2
10000e26:	099b      	lsrs	r3, r3, #6
10000e28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10000e2c:	fb01 f303 	mul.w	r3, r1, r3
10000e30:	1ad3      	subs	r3, r2, r3
10000e32:	461a      	mov	r2, r3
10000e34:	683b      	ldr	r3, [r7, #0]
10000e36:	4621      	mov	r1, r4
10000e38:	4811      	ldr	r0, [pc, #68]	@ (10000e80 <MAILBOX_Notify+0x98>)
10000e3a:	f009 fb67 	bl	1000a50c <iprintf>
    return -1;
10000e3e:	f04f 33ff 	mov.w	r3, #4294967295
10000e42:	e016      	b.n	10000e72 <MAILBOX_Notify+0x8a>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
10000e44:	2200      	movs	r2, #0
10000e46:	68f9      	ldr	r1, [r7, #12]
10000e48:	480e      	ldr	r0, [pc, #56]	@ (10000e84 <MAILBOX_Notify+0x9c>)
10000e4a:	f002 fead 	bl	10003ba8 <HAL_IPCC_GetChannelStatus>
10000e4e:	4603      	mov	r3, r0
10000e50:	2b01      	cmp	r3, #1
10000e52:	d108      	bne.n	10000e66 <MAILBOX_Notify+0x7e>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
10000e54:	bf00      	nop
10000e56:	2200      	movs	r2, #0
10000e58:	68f9      	ldr	r1, [r7, #12]
10000e5a:	480a      	ldr	r0, [pc, #40]	@ (10000e84 <MAILBOX_Notify+0x9c>)
10000e5c:	f002 fea4 	bl	10003ba8 <HAL_IPCC_GetChannelStatus>
10000e60:	4603      	mov	r3, r0
10000e62:	2b01      	cmp	r3, #1
10000e64:	d0f7      	beq.n	10000e56 <MAILBOX_Notify+0x6e>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
10000e66:	2200      	movs	r2, #0
10000e68:	68f9      	ldr	r1, [r7, #12]
10000e6a:	4806      	ldr	r0, [pc, #24]	@ (10000e84 <MAILBOX_Notify+0x9c>)
10000e6c:	f002 fed0 	bl	10003c10 <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
10000e70:	2300      	movs	r3, #0
}
10000e72:	4618      	mov	r0, r3
10000e74:	3714      	adds	r7, #20
10000e76:	46bd      	mov	sp, r7
10000e78:	bd90      	pop	{r4, r7, pc}
10000e7a:	bf00      	nop
10000e7c:	10624dd3 	.word	0x10624dd3
10000e80:	1000b42c 	.word	0x1000b42c
10000e84:	1002022c 	.word	0x1002022c

10000e88 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000e88:	b580      	push	{r7, lr}
10000e8a:	b084      	sub	sp, #16
10000e8c:	af00      	add	r7, sp, #0
10000e8e:	60f8      	str	r0, [r7, #12]
10000e90:	60b9      	str	r1, [r7, #8]
10000e92:	4613      	mov	r3, r2
10000e94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
10000e96:	4b06      	ldr	r3, [pc, #24]	@ (10000eb0 <IPCC_channel1_callback+0x28>)
10000e98:	2202      	movs	r2, #2
10000e9a:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10000e9c:	2201      	movs	r2, #1
10000e9e:	68b9      	ldr	r1, [r7, #8]
10000ea0:	68f8      	ldr	r0, [r7, #12]
10000ea2:	f002 feb5 	bl	10003c10 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
10000ea6:	bf00      	nop
10000ea8:	3710      	adds	r7, #16
10000eaa:	46bd      	mov	sp, r7
10000eac:	bd80      	pop	{r7, pc}
10000eae:	bf00      	nop
10000eb0:	10020728 	.word	0x10020728

10000eb4 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000eb4:	b580      	push	{r7, lr}
10000eb6:	b084      	sub	sp, #16
10000eb8:	af00      	add	r7, sp, #0
10000eba:	60f8      	str	r0, [r7, #12]
10000ebc:	60b9      	str	r1, [r7, #8]
10000ebe:	4613      	mov	r3, r2
10000ec0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
10000ec2:	4b06      	ldr	r3, [pc, #24]	@ (10000edc <IPCC_channel2_callback+0x28>)
10000ec4:	2201      	movs	r2, #1
10000ec6:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10000ec8:	2201      	movs	r2, #1
10000eca:	68b9      	ldr	r1, [r7, #8]
10000ecc:	68f8      	ldr	r0, [r7, #12]
10000ece:	f002 fe9f 	bl	10003c10 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
10000ed2:	bf00      	nop
10000ed4:	3710      	adds	r7, #16
10000ed6:	46bd      	mov	sp, r7
10000ed8:	bd80      	pop	{r7, pc}
10000eda:	bf00      	nop
10000edc:	1002072c 	.word	0x1002072c

10000ee0 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
10000ee0:	b480      	push	{r7}
10000ee2:	b083      	sub	sp, #12
10000ee4:	af00      	add	r7, sp, #0
10000ee6:	6078      	str	r0, [r7, #4]
10000ee8:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
10000eea:	687b      	ldr	r3, [r7, #4]
10000eec:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
10000eee:	683a      	ldr	r2, [r7, #0]
10000ef0:	429a      	cmp	r2, r3
10000ef2:	d209      	bcs.n	10000f08 <metal_device_io_region+0x28>
10000ef4:	683a      	ldr	r2, [r7, #0]
10000ef6:	4613      	mov	r3, r2
10000ef8:	00db      	lsls	r3, r3, #3
10000efa:	1a9b      	subs	r3, r3, r2
10000efc:	00db      	lsls	r3, r3, #3
10000efe:	3308      	adds	r3, #8
10000f00:	687a      	ldr	r2, [r7, #4]
10000f02:	4413      	add	r3, r2
10000f04:	3304      	adds	r3, #4
10000f06:	e000      	b.n	10000f0a <metal_device_io_region+0x2a>
10000f08:	2300      	movs	r3, #0
}
10000f0a:	4618      	mov	r0, r3
10000f0c:	370c      	adds	r7, #12
10000f0e:	46bd      	mov	sp, r7
10000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f14:	4770      	bx	lr
	...

10000f18 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
10000f18:	b590      	push	{r4, r7, lr}
10000f1a:	b08d      	sub	sp, #52	@ 0x34
10000f1c:	af04      	add	r7, sp, #16
10000f1e:	6078      	str	r0, [r7, #4]
  int status = 0;
10000f20:	2300      	movs	r3, #0
10000f22:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
10000f24:	2300      	movs	r3, #0
10000f26:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
10000f28:	4a41      	ldr	r2, [pc, #260]	@ (10001030 <OPENAMP_shmem_init+0x118>)
10000f2a:	f107 0310 	add.w	r3, r7, #16
10000f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
10000f32:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
10000f36:	2300      	movs	r3, #0
10000f38:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
10000f3a:	2300      	movs	r3, #0
10000f3c:	60bb      	str	r3, [r7, #8]


  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
10000f3e:	f107 0310 	add.w	r3, r7, #16
10000f42:	4618      	mov	r0, r3
10000f44:	f007 f85e 	bl	10008004 <metal_init>

  status = metal_register_generic_device(&shm_device);
10000f48:	483a      	ldr	r0, [pc, #232]	@ (10001034 <OPENAMP_shmem_init+0x11c>)
10000f4a:	f006 ff79 	bl	10007e40 <metal_register_generic_device>
10000f4e:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10000f50:	69fb      	ldr	r3, [r7, #28]
10000f52:	2b00      	cmp	r3, #0
10000f54:	d001      	beq.n	10000f5a <OPENAMP_shmem_init+0x42>
    return status;
10000f56:	69fb      	ldr	r3, [r7, #28]
10000f58:	e066      	b.n	10001028 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
10000f5a:	f107 0318 	add.w	r3, r7, #24
10000f5e:	461a      	mov	r2, r3
10000f60:	4935      	ldr	r1, [pc, #212]	@ (10001038 <OPENAMP_shmem_init+0x120>)
10000f62:	4836      	ldr	r0, [pc, #216]	@ (1000103c <OPENAMP_shmem_init+0x124>)
10000f64:	f006 ff2e 	bl	10007dc4 <metal_device_open>
10000f68:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
10000f6a:	69fb      	ldr	r3, [r7, #28]
10000f6c:	2b00      	cmp	r3, #0
10000f6e:	d001      	beq.n	10000f74 <OPENAMP_shmem_init+0x5c>
    return status;
10000f70:	69fb      	ldr	r3, [r7, #28]
10000f72:	e059      	b.n	10001028 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
10000f74:	4a32      	ldr	r2, [pc, #200]	@ (10001040 <OPENAMP_shmem_init+0x128>)
10000f76:	4b33      	ldr	r3, [pc, #204]	@ (10001044 <OPENAMP_shmem_init+0x12c>)
10000f78:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10000f7a:	69bb      	ldr	r3, [r7, #24]
10000f7c:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
10000f80:	4a31      	ldr	r2, [pc, #196]	@ (10001048 <OPENAMP_shmem_init+0x130>)
10000f82:	4b2f      	ldr	r3, [pc, #188]	@ (10001040 <OPENAMP_shmem_init+0x128>)
10000f84:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10000f86:	461a      	mov	r2, r3
10000f88:	2300      	movs	r3, #0
10000f8a:	9302      	str	r3, [sp, #8]
10000f8c:	2300      	movs	r3, #0
10000f8e:	9301      	str	r3, [sp, #4]
10000f90:	f04f 33ff 	mov.w	r3, #4294967295
10000f94:	9300      	str	r3, [sp, #0]
10000f96:	4613      	mov	r3, r2
10000f98:	4a2a      	ldr	r2, [pc, #168]	@ (10001044 <OPENAMP_shmem_init+0x12c>)
10000f9a:	4929      	ldr	r1, [pc, #164]	@ (10001040 <OPENAMP_shmem_init+0x128>)
10000f9c:	f007 f880 	bl	100080a0 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
10000fa0:	69bb      	ldr	r3, [r7, #24]
10000fa2:	2100      	movs	r1, #0
10000fa4:	4618      	mov	r0, r3
10000fa6:	f7ff ff9b 	bl	10000ee0 <metal_device_io_region>
10000faa:	4603      	mov	r3, r0
10000fac:	4a27      	ldr	r2, [pc, #156]	@ (1000104c <OPENAMP_shmem_init+0x134>)
10000fae:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
10000fb0:	4b26      	ldr	r3, [pc, #152]	@ (1000104c <OPENAMP_shmem_init+0x134>)
10000fb2:	681b      	ldr	r3, [r3, #0]
10000fb4:	2b00      	cmp	r3, #0
10000fb6:	d102      	bne.n	10000fbe <OPENAMP_shmem_init+0xa6>
    return -1;
10000fb8:	f04f 33ff 	mov.w	r3, #4294967295
10000fbc:	e034      	b.n	10001028 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
10000fbe:	f107 0208 	add.w	r2, r7, #8
10000fc2:	f107 030c 	add.w	r3, r7, #12
10000fc6:	4619      	mov	r1, r3
10000fc8:	6878      	ldr	r0, [r7, #4]
10000fca:	f000 f935 	bl	10001238 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
10000fce:	68fb      	ldr	r3, [r7, #12]
10000fd0:	4a1f      	ldr	r2, [pc, #124]	@ (10001050 <OPENAMP_shmem_init+0x138>)
10000fd2:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
10000fd4:	4b1e      	ldr	r3, [pc, #120]	@ (10001050 <OPENAMP_shmem_init+0x138>)
10000fd6:	681b      	ldr	r3, [r3, #0]
10000fd8:	2b00      	cmp	r3, #0
10000fda:	d102      	bne.n	10000fe2 <OPENAMP_shmem_init+0xca>
  {
    return -1;
10000fdc:	f04f 33ff 	mov.w	r3, #4294967295
10000fe0:	e022      	b.n	10001028 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
10000fe2:	69bb      	ldr	r3, [r7, #24]
10000fe4:	f103 0044 	add.w	r0, r3, #68	@ 0x44
10000fe8:	4b19      	ldr	r3, [pc, #100]	@ (10001050 <OPENAMP_shmem_init+0x138>)
10000fea:	6819      	ldr	r1, [r3, #0]
10000fec:	4b18      	ldr	r3, [pc, #96]	@ (10001050 <OPENAMP_shmem_init+0x138>)
10000fee:	681a      	ldr	r2, [r3, #0]
10000ff0:	68bb      	ldr	r3, [r7, #8]
10000ff2:	461c      	mov	r4, r3
10000ff4:	2300      	movs	r3, #0
10000ff6:	9302      	str	r3, [sp, #8]
10000ff8:	2300      	movs	r3, #0
10000ffa:	9301      	str	r3, [sp, #4]
10000ffc:	f04f 33ff 	mov.w	r3, #4294967295
10001000:	9300      	str	r3, [sp, #0]
10001002:	4623      	mov	r3, r4
10001004:	f007 f84c 	bl	100080a0 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
10001008:	69bb      	ldr	r3, [r7, #24]
1000100a:	2101      	movs	r1, #1
1000100c:	4618      	mov	r0, r3
1000100e:	f7ff ff67 	bl	10000ee0 <metal_device_io_region>
10001012:	4603      	mov	r3, r0
10001014:	4a0f      	ldr	r2, [pc, #60]	@ (10001054 <OPENAMP_shmem_init+0x13c>)
10001016:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
10001018:	4b0e      	ldr	r3, [pc, #56]	@ (10001054 <OPENAMP_shmem_init+0x13c>)
1000101a:	681b      	ldr	r3, [r3, #0]
1000101c:	2b00      	cmp	r3, #0
1000101e:	d102      	bne.n	10001026 <OPENAMP_shmem_init+0x10e>
    return -1;
10001020:	f04f 33ff 	mov.w	r3, #4294967295
10001024:	e000      	b.n	10001028 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
10001026:	2300      	movs	r3, #0
}
10001028:	4618      	mov	r0, r3
1000102a:	3724      	adds	r7, #36	@ 0x24
1000102c:	46bd      	mov	sp, r7
1000102e:	bd90      	pop	{r4, r7, pc}
10001030:	1000b46c 	.word	0x1000b46c
10001034:	10020000 	.word	0x10020000
10001038:	1000b458 	.word	0x1000b458
1000103c:	1000b464 	.word	0x1000b464
10001040:	10040000 	.word	0x10040000
10001044:	100207d4 	.word	0x100207d4
10001048:	10048000 	.word	0x10048000
1000104c:	10020730 	.word	0x10020730
10001050:	10020738 	.word	0x10020738
10001054:	10020734 	.word	0x10020734

10001058 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
10001058:	b590      	push	{r4, r7, lr}
1000105a:	b08b      	sub	sp, #44	@ 0x2c
1000105c:	af04      	add	r7, sp, #16
1000105e:	6078      	str	r0, [r7, #4]
10001060:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
10001062:	2300      	movs	r3, #0
10001064:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
10001066:	2300      	movs	r3, #0
10001068:	613b      	str	r3, [r7, #16]
  int status = 0;
1000106a:	2300      	movs	r3, #0
1000106c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
1000106e:	f7ff fe31 	bl	10000cd4 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
10001072:	6878      	ldr	r0, [r7, #4]
10001074:	f7ff ff50 	bl	10000f18 <OPENAMP_shmem_init>
10001078:	60f8      	str	r0, [r7, #12]
  if(status)
1000107a:	68fb      	ldr	r3, [r7, #12]
1000107c:	2b00      	cmp	r3, #0
1000107e:	d001      	beq.n	10001084 <MX_OPENAMP_Init+0x2c>
  {
    return status;
10001080:	68fb      	ldr	r3, [r7, #12]
10001082:	e068      	b.n	10001156 <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
10001084:	6878      	ldr	r0, [r7, #4]
10001086:	4b36      	ldr	r3, [pc, #216]	@ (10001160 <MX_OPENAMP_Init+0x108>)
10001088:	681b      	ldr	r3, [r3, #0]
1000108a:	f103 0218 	add.w	r2, r3, #24
1000108e:	4b35      	ldr	r3, [pc, #212]	@ (10001164 <MX_OPENAMP_Init+0x10c>)
10001090:	681b      	ldr	r3, [r3, #0]
10001092:	2100      	movs	r1, #0
10001094:	9102      	str	r1, [sp, #8]
10001096:	4934      	ldr	r1, [pc, #208]	@ (10001168 <MX_OPENAMP_Init+0x110>)
10001098:	9101      	str	r1, [sp, #4]
1000109a:	2100      	movs	r1, #0
1000109c:	9100      	str	r1, [sp, #0]
1000109e:	21ff      	movs	r1, #255	@ 0xff
100010a0:	f007 fb94 	bl	100087cc <rproc_virtio_create_vdev>
100010a4:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
100010a6:	693b      	ldr	r3, [r7, #16]
100010a8:	2b00      	cmp	r3, #0
100010aa:	d102      	bne.n	100010b2 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
100010ac:	f04f 33ff 	mov.w	r3, #4294967295
100010b0:	e051      	b.n	10001156 <MX_OPENAMP_Init+0xfe>
  }


  rproc_virtio_wait_remote_ready(vdev);
100010b2:	6938      	ldr	r0, [r7, #16]
100010b4:	f007 fca5 	bl	10008a02 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
100010b8:	4b29      	ldr	r3, [pc, #164]	@ (10001160 <MX_OPENAMP_Init+0x108>)
100010ba:	681b      	ldr	r3, [r3, #0]
100010bc:	3334      	adds	r3, #52	@ 0x34
100010be:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
100010c0:	697b      	ldr	r3, [r7, #20]
100010c2:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
100010c4:	697b      	ldr	r3, [r7, #20]
100010c6:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
100010c8:	461c      	mov	r4, r3
100010ca:	4b28      	ldr	r3, [pc, #160]	@ (1000116c <MX_OPENAMP_Init+0x114>)
100010cc:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
100010ce:	697a      	ldr	r2, [r7, #20]
100010d0:	6892      	ldr	r2, [r2, #8]
100010d2:	6979      	ldr	r1, [r7, #20]
100010d4:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
100010d6:	9102      	str	r1, [sp, #8]
100010d8:	9201      	str	r2, [sp, #4]
100010da:	9300      	str	r3, [sp, #0]
100010dc:	4623      	mov	r3, r4
100010de:	4602      	mov	r2, r0
100010e0:	2100      	movs	r1, #0
100010e2:	6938      	ldr	r0, [r7, #16]
100010e4:	f007 fc20 	bl	10008928 <rproc_virtio_init_vring>
100010e8:	60f8      	str	r0, [r7, #12]
  if (status != 0)
100010ea:	68fb      	ldr	r3, [r7, #12]
100010ec:	2b00      	cmp	r3, #0
100010ee:	d001      	beq.n	100010f4 <MX_OPENAMP_Init+0x9c>
  {
    return status;
100010f0:	68fb      	ldr	r3, [r7, #12]
100010f2:	e030      	b.n	10001156 <MX_OPENAMP_Init+0xfe>


  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
100010f4:	4b1a      	ldr	r3, [pc, #104]	@ (10001160 <MX_OPENAMP_Init+0x108>)
100010f6:	681b      	ldr	r3, [r3, #0]
100010f8:	3348      	adds	r3, #72	@ 0x48
100010fa:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
100010fc:	697b      	ldr	r3, [r7, #20]
100010fe:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10001100:	697b      	ldr	r3, [r7, #20]
10001102:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10001104:	461c      	mov	r4, r3
10001106:	4b19      	ldr	r3, [pc, #100]	@ (1000116c <MX_OPENAMP_Init+0x114>)
10001108:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
1000110a:	697a      	ldr	r2, [r7, #20]
1000110c:	6892      	ldr	r2, [r2, #8]
1000110e:	6979      	ldr	r1, [r7, #20]
10001110:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10001112:	9102      	str	r1, [sp, #8]
10001114:	9201      	str	r2, [sp, #4]
10001116:	9300      	str	r3, [sp, #0]
10001118:	4623      	mov	r3, r4
1000111a:	4602      	mov	r2, r0
1000111c:	2101      	movs	r1, #1
1000111e:	6938      	ldr	r0, [r7, #16]
10001120:	f007 fc02 	bl	10008928 <rproc_virtio_init_vring>
10001124:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10001126:	68fb      	ldr	r3, [r7, #12]
10001128:	2b00      	cmp	r3, #0
1000112a:	d001      	beq.n	10001130 <MX_OPENAMP_Init+0xd8>
  {
    return status;
1000112c:	68fb      	ldr	r3, [r7, #12]
1000112e:	e012      	b.n	10001156 <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
10001130:	4a0f      	ldr	r2, [pc, #60]	@ (10001170 <MX_OPENAMP_Init+0x118>)
10001132:	4b10      	ldr	r3, [pc, #64]	@ (10001174 <MX_OPENAMP_Init+0x11c>)
10001134:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
10001136:	461a      	mov	r2, r3
10001138:	f04f 31ff 	mov.w	r1, #4294967295
1000113c:	480e      	ldr	r0, [pc, #56]	@ (10001178 <MX_OPENAMP_Init+0x120>)
1000113e:	f008 f8f8 	bl	10009332 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
10001142:	4b0a      	ldr	r3, [pc, #40]	@ (1000116c <MX_OPENAMP_Init+0x114>)
10001144:	681b      	ldr	r3, [r3, #0]
10001146:	4a0c      	ldr	r2, [pc, #48]	@ (10001178 <MX_OPENAMP_Init+0x120>)
10001148:	9200      	str	r2, [sp, #0]
1000114a:	683a      	ldr	r2, [r7, #0]
1000114c:	6939      	ldr	r1, [r7, #16]
1000114e:	480b      	ldr	r0, [pc, #44]	@ (1000117c <MX_OPENAMP_Init+0x124>)
10001150:	f008 fbec 	bl	1000992c <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
10001154:	2300      	movs	r3, #0
}
10001156:	4618      	mov	r0, r3
10001158:	371c      	adds	r7, #28
1000115a:	46bd      	mov	sp, r7
1000115c:	bd90      	pop	{r4, r7, pc}
1000115e:	bf00      	nop
10001160:	10020738 	.word	0x10020738
10001164:	10020734 	.word	0x10020734
10001168:	10000de9 	.word	0x10000de9
1000116c:	10020730 	.word	0x10020730
10001170:	10048000 	.word	0x10048000
10001174:	10040000 	.word	0x10040000
10001178:	1002073c 	.word	0x1002073c
1000117c:	10020748 	.word	0x10020748

10001180 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
10001180:	b580      	push	{r7, lr}
10001182:	b08a      	sub	sp, #40	@ 0x28
10001184:	af04      	add	r7, sp, #16
10001186:	60f8      	str	r0, [r7, #12]
10001188:	60b9      	str	r1, [r7, #8]
1000118a:	607a      	str	r2, [r7, #4]
1000118c:	603b      	str	r3, [r7, #0]
  int ret = 0;
1000118e:	2300      	movs	r3, #0
10001190:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
10001192:	6a3b      	ldr	r3, [r7, #32]
10001194:	9302      	str	r3, [sp, #8]
10001196:	683b      	ldr	r3, [r7, #0]
10001198:	9301      	str	r3, [sp, #4]
1000119a:	687b      	ldr	r3, [r7, #4]
1000119c:	9300      	str	r3, [sp, #0]
1000119e:	f04f 33ff 	mov.w	r3, #4294967295
100011a2:	68ba      	ldr	r2, [r7, #8]
100011a4:	4904      	ldr	r1, [pc, #16]	@ (100011b8 <OPENAMP_create_endpoint+0x38>)
100011a6:	68f8      	ldr	r0, [r7, #12]
100011a8:	f007 fef8 	bl	10008f9c <rpmsg_create_ept>
100011ac:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
100011ae:	697b      	ldr	r3, [r7, #20]
}
100011b0:	4618      	mov	r0, r3
100011b2:	3718      	adds	r7, #24
100011b4:	46bd      	mov	sp, r7
100011b6:	bd80      	pop	{r7, pc}
100011b8:	10020748 	.word	0x10020748

100011bc <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
100011bc:	b580      	push	{r7, lr}
100011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
100011c0:	4b03      	ldr	r3, [pc, #12]	@ (100011d0 <OPENAMP_check_for_message+0x14>)
100011c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
100011c4:	4618      	mov	r0, r3
100011c6:	f7ff fde5 	bl	10000d94 <MAILBOX_Poll>
}
100011ca:	bf00      	nop
100011cc:	bd80      	pop	{r7, pc}
100011ce:	bf00      	nop
100011d0:	10020748 	.word	0x10020748

100011d4 <log_buff>:

#if defined (__LOG_TRACE_IO_)
char system_log_buf[SYSTEM_TRACE_BUF_SZ];

__weak void log_buff(int ch)
{
100011d4:	b480      	push	{r7}
100011d6:	b083      	sub	sp, #12
100011d8:	af00      	add	r7, sp, #0
100011da:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
 static int offset = 0;

	if (offset + 1 >= SYSTEM_TRACE_BUF_SZ)
100011dc:	4b0e      	ldr	r3, [pc, #56]	@ (10001218 <log_buff+0x44>)
100011de:	681b      	ldr	r3, [r3, #0]
100011e0:	f240 72fe 	movw	r2, #2046	@ 0x7fe
100011e4:	4293      	cmp	r3, r2
100011e6:	dd02      	ble.n	100011ee <log_buff+0x1a>
		offset = 0;
100011e8:	4b0b      	ldr	r3, [pc, #44]	@ (10001218 <log_buff+0x44>)
100011ea:	2200      	movs	r2, #0
100011ec:	601a      	str	r2, [r3, #0]

	system_log_buf[offset] = ch;
100011ee:	4b0a      	ldr	r3, [pc, #40]	@ (10001218 <log_buff+0x44>)
100011f0:	681b      	ldr	r3, [r3, #0]
100011f2:	687a      	ldr	r2, [r7, #4]
100011f4:	b2d1      	uxtb	r1, r2
100011f6:	4a09      	ldr	r2, [pc, #36]	@ (1000121c <log_buff+0x48>)
100011f8:	54d1      	strb	r1, [r2, r3]
	system_log_buf[offset++ + 1] = '\0';
100011fa:	4b07      	ldr	r3, [pc, #28]	@ (10001218 <log_buff+0x44>)
100011fc:	681b      	ldr	r3, [r3, #0]
100011fe:	1c5a      	adds	r2, r3, #1
10001200:	4905      	ldr	r1, [pc, #20]	@ (10001218 <log_buff+0x44>)
10001202:	600a      	str	r2, [r1, #0]
10001204:	3301      	adds	r3, #1
10001206:	4a05      	ldr	r2, [pc, #20]	@ (1000121c <log_buff+0x48>)
10001208:	2100      	movs	r1, #0
1000120a:	54d1      	strb	r1, [r2, r3]
}
1000120c:	bf00      	nop
1000120e:	370c      	adds	r7, #12
10001210:	46bd      	mov	sp, r7
10001212:	f85d 7b04 	ldr.w	r7, [sp], #4
10001216:	4770      	bx	lr
10001218:	10020fd8 	.word	0x10020fd8
1000121c:	100207d8 	.word	0x100207d8

10001220 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __attribute__(( weak )) fputc(int ch, FILE *f)
#endif /* __GNUC__ */

#if defined (__LOG_UART_IO_) || defined (__LOG_TRACE_IO_)
PUTCHAR_PROTOTYPE
{
10001220:	b580      	push	{r7, lr}
10001222:	b082      	sub	sp, #8
10001224:	af00      	add	r7, sp, #0
10001226:	6078      	str	r0, [r7, #4]
#if defined (__LOG_UART_IO_)
extern UART_HandleTypeDef huart;
  HAL_UART_Transmit(&huart, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
#endif
#if defined (__LOG_TRACE_IO_)
	log_buff(ch);
10001228:	6878      	ldr	r0, [r7, #4]
1000122a:	f7ff ffd3 	bl	100011d4 <log_buff>
#endif
	return ch;
1000122e:	687b      	ldr	r3, [r7, #4]
}
10001230:	4618      	mov	r0, r3
10001232:	3708      	adds	r7, #8
10001234:	46bd      	mov	sp, r7
10001236:	bd80      	pop	{r7, pc}

10001238 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
10001238:	b480      	push	{r7}
1000123a:	b085      	sub	sp, #20
1000123c:	af00      	add	r7, sp, #0
1000123e:	60f8      	str	r0, [r7, #12]
10001240:	60b9      	str	r1, [r7, #8]
10001242:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
10001244:	687b      	ldr	r3, [r7, #4]
10001246:	228c      	movs	r2, #140	@ 0x8c
10001248:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
1000124a:	68bb      	ldr	r3, [r7, #8]
1000124c:	4a03      	ldr	r2, [pc, #12]	@ (1000125c <resource_table_init+0x24>)
1000124e:	601a      	str	r2, [r3, #0]
}
10001250:	bf00      	nop
10001252:	3714      	adds	r7, #20
10001254:	46bd      	mov	sp, r7
10001256:	f85d 7b04 	ldr.w	r7, [sp], #4
1000125a:	4770      	bx	lr
1000125c:	10020130 	.word	0x10020130

10001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10001260:	b480      	push	{r7}
10001262:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10001264:	bf00      	nop
10001266:	46bd      	mov	sp, r7
10001268:	f85d 7b04 	ldr.w	r7, [sp], #4
1000126c:	4770      	bx	lr
	...

10001270 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
10001270:	b580      	push	{r7, lr}
10001272:	b082      	sub	sp, #8
10001274:	af00      	add	r7, sp, #0
10001276:	6078      	str	r0, [r7, #4]

  if(hipcc->Instance==IPCC)
10001278:	687b      	ldr	r3, [r7, #4]
1000127a:	681b      	ldr	r3, [r3, #0]
1000127c:	4a0a      	ldr	r2, [pc, #40]	@ (100012a8 <HAL_IPCC_MspInit+0x38>)
1000127e:	4293      	cmp	r3, r2
10001280:	d10d      	bne.n	1000129e <HAL_IPCC_MspInit+0x2e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
10001282:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001286:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
1000128a:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0
  /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, DEFAULT_IRQ_PRIO, 0);
1000128e:	2200      	movs	r2, #0
10001290:	2101      	movs	r1, #1
10001292:	2067      	movs	r0, #103	@ 0x67
10001294:	f000 fdf9 	bl	10001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
10001298:	2067      	movs	r0, #103	@ 0x67
1000129a:	f000 fe12 	bl	10001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END IPCC_MspInit 1 */
}



}
1000129e:	bf00      	nop
100012a0:	3708      	adds	r7, #8
100012a2:	46bd      	mov	sp, r7
100012a4:	bd80      	pop	{r7, pc}
100012a6:	bf00      	nop
100012a8:	4c001000 	.word	0x4c001000

100012ac <HAL_I2C_MspInit>:

}

/* USER CODE BEGIN 1 */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
100012ac:	b580      	push	{r7, lr}
100012ae:	b0de      	sub	sp, #376	@ 0x178
100012b0:	af00      	add	r7, sp, #0
100012b2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100012b6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
100012ba:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C5)
100012bc:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100012c0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
100012c4:	681b      	ldr	r3, [r3, #0]
100012c6:	681b      	ldr	r3, [r3, #0]
100012c8:	4a2b      	ldr	r2, [pc, #172]	@ (10001378 <HAL_I2C_MspInit+0xcc>)
100012ca:	4293      	cmp	r3, r2
100012cc:	d14e      	bne.n	1000136c <HAL_I2C_MspInit+0xc0>
  {
  /* USER CODE BEGIN I2C5_MspInit 0 */
    if(IS_ENGINEERING_BOOT_MODE())
100012ce:	4b2b      	ldr	r3, [pc, #172]	@ (1000137c <HAL_I2C_MspInit+0xd0>)
100012d0:	681b      	ldr	r3, [r3, #0]
100012d2:	f003 0307 	and.w	r3, r3, #7
100012d6:	2b04      	cmp	r3, #4
100012d8:	d115      	bne.n	10001306 <HAL_I2C_MspInit+0x5a>
    {
      RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

      /*##-1- Configure the I2C clock source #*/
      RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C35;
100012da:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100012de:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
100012e2:	f04f 0220 	mov.w	r2, #32
100012e6:	f04f 0300 	mov.w	r3, #0
100012ea:	e9c1 2300 	strd	r2, r3, [r1]
      RCC_PeriphCLKInitStruct.I2c35ClockSelection = RCC_I2C35CLKSOURCE_HSI;
100012ee:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
100012f2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
100012f6:	2202      	movs	r2, #2
100012f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
      HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
100012fc:	f107 0308 	add.w	r3, r7, #8
10001300:	4618      	mov	r0, r3
10001302:	f004 fded 	bl	10005ee0 <HAL_RCCEx_PeriphCLKConfig>

    /**I2C5 GPIO Configuration
    PA11     ------> I2C5_SCL
    PA12     ------> I2C5_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
10001306:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
1000130a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
1000130e:	2312      	movs	r3, #18
10001310:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10001314:	2300      	movs	r3, #0
10001316:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1000131a:	2300      	movs	r3, #0
1000131c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
10001320:	2304      	movs	r3, #4
10001322:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    PERIPH_LOCK(GPIOA);
10001326:	2164      	movs	r1, #100	@ 0x64
10001328:	4815      	ldr	r0, [pc, #84]	@ (10001380 <HAL_I2C_MspInit+0xd4>)
1000132a:	f7fe feeb 	bl	10000104 <Periph_Lock>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1000132e:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
10001332:	4619      	mov	r1, r3
10001334:	4812      	ldr	r0, [pc, #72]	@ (10001380 <HAL_I2C_MspInit+0xd4>)
10001336:	f000 ff8d 	bl	10002254 <HAL_GPIO_Init>
    PERIPH_UNLOCK(GPIOA);
1000133a:	4811      	ldr	r0, [pc, #68]	@ (10001380 <HAL_I2C_MspInit+0xd4>)
1000133c:	f7fe ff70 	bl	10000220 <Periph_Unlock>
    /* Peripheral clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
10001340:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001344:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
10001348:	f8c3 2a80 	str.w	r2, [r3, #2688]	@ 0xa80
    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, DEFAULT_IRQ_PRIO, 0);
1000134c:	2200      	movs	r2, #0
1000134e:	2101      	movs	r1, #1
10001350:	206b      	movs	r0, #107	@ 0x6b
10001352:	f000 fd9a 	bl	10001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
10001356:	206b      	movs	r0, #107	@ 0x6b
10001358:	f000 fdb3 	bl	10001ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C5_ER_IRQn, DEFAULT_IRQ_PRIO, 0);
1000135c:	2200      	movs	r2, #0
1000135e:	2101      	movs	r1, #1
10001360:	206c      	movs	r0, #108	@ 0x6c
10001362:	f000 fd92 	bl	10001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_ER_IRQn);
10001366:	206c      	movs	r0, #108	@ 0x6c
10001368:	f000 fdab 	bl	10001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
1000136c:	bf00      	nop
1000136e:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
10001372:	46bd      	mov	sp, r7
10001374:	bd80      	pop	{r7, pc}
10001376:	bf00      	nop
10001378:	40015000 	.word	0x40015000
1000137c:	50020000 	.word	0x50020000
10001380:	50002000 	.word	0x50002000

10001384 <NMI_Handler>:
/******************************************************************************/
/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
10001384:	b480      	push	{r7}
10001386:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
10001388:	bf00      	nop
1000138a:	46bd      	mov	sp, r7
1000138c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001390:	4770      	bx	lr

10001392 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
10001392:	b480      	push	{r7}
10001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10001396:	bf00      	nop
10001398:	e7fd      	b.n	10001396 <HardFault_Handler+0x4>

1000139a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
1000139a:	b480      	push	{r7}
1000139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
1000139e:	bf00      	nop
100013a0:	e7fd      	b.n	1000139e <MemManage_Handler+0x4>

100013a2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
100013a2:	b480      	push	{r7}
100013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
100013a6:	bf00      	nop
100013a8:	e7fd      	b.n	100013a6 <BusFault_Handler+0x4>

100013aa <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
100013aa:	b480      	push	{r7}
100013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
100013ae:	bf00      	nop
100013b0:	e7fd      	b.n	100013ae <UsageFault_Handler+0x4>

100013b2 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
100013b2:	b480      	push	{r7}
100013b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100013b6:	bf00      	nop
100013b8:	46bd      	mov	sp, r7
100013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
100013be:	4770      	bx	lr

100013c0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
100013c0:	b480      	push	{r7}
100013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
100013c4:	bf00      	nop
100013c6:	46bd      	mov	sp, r7
100013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
100013cc:	4770      	bx	lr

100013ce <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
100013ce:	b480      	push	{r7}
100013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100013d2:	bf00      	nop
100013d4:	46bd      	mov	sp, r7
100013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
100013da:	4770      	bx	lr

100013dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
100013dc:	b580      	push	{r7, lr}
100013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100013e0:	f000 fc2a 	bl	10001c38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
100013e4:	f000 fd87 	bl	10001ef6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100013e8:	bf00      	nop
100013ea:	bd80      	pop	{r7, pc}

100013ec <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
100013ec:	b580      	push	{r7, lr}
100013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */
  log_dbg("%s: IT RX1\r\n", __func__);
  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
100013f0:	4802      	ldr	r0, [pc, #8]	@ (100013fc <IPCC_RX1_IRQHandler+0x10>)
100013f2:	f002 fc53 	bl	10003c9c <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
100013f6:	bf00      	nop
100013f8:	bd80      	pop	{r7, pc}
100013fa:	bf00      	nop
100013fc:	1002022c 	.word	0x1002022c

10001400 <EXTI14_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI14_IRQHandler(void)
{
10001400:	b580      	push	{r7, lr}
10001402:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&hexti);
10001404:	4802      	ldr	r0, [pc, #8]	@ (10001410 <EXTI14_IRQHandler+0x10>)
10001406:	f000 fedd 	bl	100021c4 <HAL_EXTI_IRQHandler>
}
1000140a:	bf00      	nop
1000140c:	bd80      	pop	{r7, pc}
1000140e:	bf00      	nop
10001410:	10020268 	.word	0x10020268

10001414 <I2C5_EV_IRQHandler>:
/* USER CODE END 1 */
void I2C5_EV_IRQHandler(void)
{
10001414:	b580      	push	{r7, lr}
10001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
10001418:	4802      	ldr	r0, [pc, #8]	@ (10001424 <I2C5_EV_IRQHandler+0x10>)
1000141a:	f001 fac5 	bl	100029a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
1000141e:	bf00      	nop
10001420:	bd80      	pop	{r7, pc}
10001422:	bf00      	nop
10001424:	100201d8 	.word	0x100201d8

10001428 <I2C5_ER_IRQHandler>:

void I2C5_ER_IRQHandler(void)
{
10001428:	b580      	push	{r7, lr}
1000142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_ER_IRQn 0 */

  /* USER CODE END I2C5_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c5);
1000142c:	4802      	ldr	r0, [pc, #8]	@ (10001438 <I2C5_ER_IRQHandler+0x10>)
1000142e:	f001 fad5 	bl	100029dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C5_ER_IRQn 1 */

  /* USER CODE END I2C5_ER_IRQn 1 */
}
10001432:	bf00      	nop
10001434:	bd80      	pop	{r7, pc}
10001436:	bf00      	nop
10001438:	100201d8 	.word	0x100201d8

1000143c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
1000143c:	b480      	push	{r7}
1000143e:	af00      	add	r7, sp, #0
	return 1;
10001440:	2301      	movs	r3, #1
}
10001442:	4618      	mov	r0, r3
10001444:	46bd      	mov	sp, r7
10001446:	f85d 7b04 	ldr.w	r7, [sp], #4
1000144a:	4770      	bx	lr

1000144c <_kill>:

int _kill(int pid, int sig)
{
1000144c:	b580      	push	{r7, lr}
1000144e:	b082      	sub	sp, #8
10001450:	af00      	add	r7, sp, #0
10001452:	6078      	str	r0, [r7, #4]
10001454:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
10001456:	f009 f931 	bl	1000a6bc <__errno>
1000145a:	4603      	mov	r3, r0
1000145c:	2216      	movs	r2, #22
1000145e:	601a      	str	r2, [r3, #0]
	return -1;
10001460:	f04f 33ff 	mov.w	r3, #4294967295
}
10001464:	4618      	mov	r0, r3
10001466:	3708      	adds	r7, #8
10001468:	46bd      	mov	sp, r7
1000146a:	bd80      	pop	{r7, pc}

1000146c <_exit>:

void _exit (int status)
{
1000146c:	b580      	push	{r7, lr}
1000146e:	b082      	sub	sp, #8
10001470:	af00      	add	r7, sp, #0
10001472:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
10001474:	f04f 31ff 	mov.w	r1, #4294967295
10001478:	6878      	ldr	r0, [r7, #4]
1000147a:	f7ff ffe7 	bl	1000144c <_kill>
	while (1) {}		/* Make sure we hang here */
1000147e:	bf00      	nop
10001480:	e7fd      	b.n	1000147e <_exit+0x12>

10001482 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10001482:	b580      	push	{r7, lr}
10001484:	b086      	sub	sp, #24
10001486:	af00      	add	r7, sp, #0
10001488:	60f8      	str	r0, [r7, #12]
1000148a:	60b9      	str	r1, [r7, #8]
1000148c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
1000148e:	2300      	movs	r3, #0
10001490:	617b      	str	r3, [r7, #20]
10001492:	e00a      	b.n	100014aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
10001494:	f3af 8000 	nop.w
10001498:	4601      	mov	r1, r0
1000149a:	68bb      	ldr	r3, [r7, #8]
1000149c:	1c5a      	adds	r2, r3, #1
1000149e:	60ba      	str	r2, [r7, #8]
100014a0:	b2ca      	uxtb	r2, r1
100014a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
100014a4:	697b      	ldr	r3, [r7, #20]
100014a6:	3301      	adds	r3, #1
100014a8:	617b      	str	r3, [r7, #20]
100014aa:	697a      	ldr	r2, [r7, #20]
100014ac:	687b      	ldr	r3, [r7, #4]
100014ae:	429a      	cmp	r2, r3
100014b0:	dbf0      	blt.n	10001494 <_read+0x12>
	}

return len;
100014b2:	687b      	ldr	r3, [r7, #4]
}
100014b4:	4618      	mov	r0, r3
100014b6:	3718      	adds	r7, #24
100014b8:	46bd      	mov	sp, r7
100014ba:	bd80      	pop	{r7, pc}

100014bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
100014bc:	b580      	push	{r7, lr}
100014be:	b086      	sub	sp, #24
100014c0:	af00      	add	r7, sp, #0
100014c2:	60f8      	str	r0, [r7, #12]
100014c4:	60b9      	str	r1, [r7, #8]
100014c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
100014c8:	2300      	movs	r3, #0
100014ca:	617b      	str	r3, [r7, #20]
100014cc:	e009      	b.n	100014e2 <_write+0x26>
	{
		__io_putchar(*ptr++);
100014ce:	68bb      	ldr	r3, [r7, #8]
100014d0:	1c5a      	adds	r2, r3, #1
100014d2:	60ba      	str	r2, [r7, #8]
100014d4:	781b      	ldrb	r3, [r3, #0]
100014d6:	4618      	mov	r0, r3
100014d8:	f7ff fea2 	bl	10001220 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
100014dc:	697b      	ldr	r3, [r7, #20]
100014de:	3301      	adds	r3, #1
100014e0:	617b      	str	r3, [r7, #20]
100014e2:	697a      	ldr	r2, [r7, #20]
100014e4:	687b      	ldr	r3, [r7, #4]
100014e6:	429a      	cmp	r2, r3
100014e8:	dbf1      	blt.n	100014ce <_write+0x12>
	}
	return len;
100014ea:	687b      	ldr	r3, [r7, #4]
}
100014ec:	4618      	mov	r0, r3
100014ee:	3718      	adds	r7, #24
100014f0:	46bd      	mov	sp, r7
100014f2:	bd80      	pop	{r7, pc}

100014f4 <_close>:

int _close(int file)
{
100014f4:	b480      	push	{r7}
100014f6:	b083      	sub	sp, #12
100014f8:	af00      	add	r7, sp, #0
100014fa:	6078      	str	r0, [r7, #4]
	return -1;
100014fc:	f04f 33ff 	mov.w	r3, #4294967295
}
10001500:	4618      	mov	r0, r3
10001502:	370c      	adds	r7, #12
10001504:	46bd      	mov	sp, r7
10001506:	f85d 7b04 	ldr.w	r7, [sp], #4
1000150a:	4770      	bx	lr

1000150c <_fstat>:


int _fstat(int file, struct stat *st)
{
1000150c:	b480      	push	{r7}
1000150e:	b083      	sub	sp, #12
10001510:	af00      	add	r7, sp, #0
10001512:	6078      	str	r0, [r7, #4]
10001514:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
10001516:	683b      	ldr	r3, [r7, #0]
10001518:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
1000151c:	605a      	str	r2, [r3, #4]
	return 0;
1000151e:	2300      	movs	r3, #0
}
10001520:	4618      	mov	r0, r3
10001522:	370c      	adds	r7, #12
10001524:	46bd      	mov	sp, r7
10001526:	f85d 7b04 	ldr.w	r7, [sp], #4
1000152a:	4770      	bx	lr

1000152c <_isatty>:

int _isatty(int file)
{
1000152c:	b480      	push	{r7}
1000152e:	b083      	sub	sp, #12
10001530:	af00      	add	r7, sp, #0
10001532:	6078      	str	r0, [r7, #4]
	return 1;
10001534:	2301      	movs	r3, #1
}
10001536:	4618      	mov	r0, r3
10001538:	370c      	adds	r7, #12
1000153a:	46bd      	mov	sp, r7
1000153c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001540:	4770      	bx	lr

10001542 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10001542:	b480      	push	{r7}
10001544:	b085      	sub	sp, #20
10001546:	af00      	add	r7, sp, #0
10001548:	60f8      	str	r0, [r7, #12]
1000154a:	60b9      	str	r1, [r7, #8]
1000154c:	607a      	str	r2, [r7, #4]
	return 0;
1000154e:	2300      	movs	r3, #0
}
10001550:	4618      	mov	r0, r3
10001552:	3714      	adds	r7, #20
10001554:	46bd      	mov	sp, r7
10001556:	f85d 7b04 	ldr.w	r7, [sp], #4
1000155a:	4770      	bx	lr

1000155c <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
1000155c:	b580      	push	{r7, lr}
1000155e:	b088      	sub	sp, #32
10001560:	af00      	add	r7, sp, #0
10001562:	4603      	mov	r3, r0
10001564:	71fb      	strb	r3, [r7, #7]
int32_t  status = BSP_ERROR_NONE;
10001566:	2300      	movs	r3, #0
10001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if(Led == LED6)
1000156a:	79fb      	ldrb	r3, [r7, #7]
1000156c:	2b00      	cmp	r3, #0
1000156e:	d105      	bne.n	1000157c <BSP_LED_Init+0x20>
  {
    LED6_GPIO_CLK_ENABLE();
10001570:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001574:	2201      	movs	r2, #1
10001576:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
1000157a:	e019      	b.n	100015b0 <BSP_LED_Init+0x54>
  }
  else if (Led == LED5)
1000157c:	79fb      	ldrb	r3, [r7, #7]
1000157e:	2b01      	cmp	r3, #1
10001580:	d105      	bne.n	1000158e <BSP_LED_Init+0x32>
  {
    LED5_GPIO_CLK_ENABLE();
10001582:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001586:	2201      	movs	r2, #1
10001588:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
1000158c:	e010      	b.n	100015b0 <BSP_LED_Init+0x54>
  }
  else if (Led == LED7)
1000158e:	79fb      	ldrb	r3, [r7, #7]
10001590:	2b02      	cmp	r3, #2
10001592:	d105      	bne.n	100015a0 <BSP_LED_Init+0x44>
  {
    LED7_GPIO_CLK_ENABLE();
10001594:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001598:	2280      	movs	r2, #128	@ 0x80
1000159a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
1000159e:	e007      	b.n	100015b0 <BSP_LED_Init+0x54>
  }
  else if (Led == LED8)
100015a0:	79fb      	ldrb	r3, [r7, #7]
100015a2:	2b03      	cmp	r3, #3
100015a4:	d104      	bne.n	100015b0 <BSP_LED_Init+0x54>
  {
    LED8_GPIO_CLK_ENABLE();
100015a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100015aa:	2208      	movs	r2, #8
100015ac:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  }

    /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
100015b0:	79fb      	ldrb	r3, [r7, #7]
100015b2:	4a16      	ldr	r2, [pc, #88]	@ (1000160c <BSP_LED_Init+0xb0>)
100015b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100015b8:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
100015ba:	2301      	movs	r3, #1
100015bc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
100015be:	2301      	movs	r3, #1
100015c0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
100015c2:	2303      	movs	r3, #3
100015c4:	617b      	str	r3, [r7, #20]
  BSP_ENTER_CRITICAL_SECTION(LED_PORT[Led]);
100015c6:	79fb      	ldrb	r3, [r7, #7]
100015c8:	4a11      	ldr	r2, [pc, #68]	@ (10001610 <BSP_LED_Init+0xb4>)
100015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100015ce:	2164      	movs	r1, #100	@ 0x64
100015d0:	4618      	mov	r0, r3
100015d2:	f7fe fd97 	bl	10000104 <Periph_Lock>
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
100015d6:	79fb      	ldrb	r3, [r7, #7]
100015d8:	4a0d      	ldr	r2, [pc, #52]	@ (10001610 <BSP_LED_Init+0xb4>)
100015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100015de:	f107 0208 	add.w	r2, r7, #8
100015e2:	4611      	mov	r1, r2
100015e4:	4618      	mov	r0, r3
100015e6:	f000 fe35 	bl	10002254 <HAL_GPIO_Init>
  BSP_EXIT_CRITICAL_SECTION(LED_PORT[Led]);
100015ea:	79fb      	ldrb	r3, [r7, #7]
100015ec:	4a08      	ldr	r2, [pc, #32]	@ (10001610 <BSP_LED_Init+0xb4>)
100015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100015f2:	4618      	mov	r0, r3
100015f4:	f7fe fe14 	bl	10000220 <Periph_Unlock>
  
  /* By default, turn off LED */
  BSP_LED_Off(Led);
100015f8:	79fb      	ldrb	r3, [r7, #7]
100015fa:	4618      	mov	r0, r3
100015fc:	f000 f80a 	bl	10001614 <BSP_LED_Off>

return status;
10001600:	69fb      	ldr	r3, [r7, #28]
}
10001602:	4618      	mov	r0, r3
10001604:	3720      	adds	r7, #32
10001606:	46bd      	mov	sp, r7
10001608:	bd80      	pop	{r7, pc}
1000160a:	bf00      	nop
1000160c:	1000b754 	.word	0x1000b754
10001610:	1002008c 	.word	0x1002008c

10001614 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
10001614:	b580      	push	{r7, lr}
10001616:	b084      	sub	sp, #16
10001618:	af00      	add	r7, sp, #0
1000161a:	4603      	mov	r3, r0
1000161c:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
1000161e:	2300      	movs	r3, #0
10001620:	60fb      	str	r3, [r7, #12]
  if((Led == LED5) || (Led == LED6))
10001622:	79fb      	ldrb	r3, [r7, #7]
10001624:	2b01      	cmp	r3, #1
10001626:	d002      	beq.n	1000162e <BSP_LED_Off+0x1a>
10001628:	79fb      	ldrb	r3, [r7, #7]
1000162a:	2b00      	cmp	r3, #0
1000162c:	d10d      	bne.n	1000164a <BSP_LED_Off+0x36>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
1000162e:	79fb      	ldrb	r3, [r7, #7]
10001630:	4a12      	ldr	r2, [pc, #72]	@ (1000167c <BSP_LED_Off+0x68>)
10001632:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
10001636:	79fb      	ldrb	r3, [r7, #7]
10001638:	4a11      	ldr	r2, [pc, #68]	@ (10001680 <BSP_LED_Off+0x6c>)
1000163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000163e:	b29b      	uxth	r3, r3
10001640:	2201      	movs	r2, #1
10001642:	4619      	mov	r1, r3
10001644:	f000 ffb0 	bl	100025a8 <HAL_GPIO_WritePin>
10001648:	e012      	b.n	10001670 <BSP_LED_Off+0x5c>
  }
  else if ((Led == LED7) || (Led == LED8))
1000164a:	79fb      	ldrb	r3, [r7, #7]
1000164c:	2b02      	cmp	r3, #2
1000164e:	d002      	beq.n	10001656 <BSP_LED_Off+0x42>
10001650:	79fb      	ldrb	r3, [r7, #7]
10001652:	2b03      	cmp	r3, #3
10001654:	d10c      	bne.n	10001670 <BSP_LED_Off+0x5c>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
10001656:	79fb      	ldrb	r3, [r7, #7]
10001658:	4a08      	ldr	r2, [pc, #32]	@ (1000167c <BSP_LED_Off+0x68>)
1000165a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
1000165e:	79fb      	ldrb	r3, [r7, #7]
10001660:	4a07      	ldr	r2, [pc, #28]	@ (10001680 <BSP_LED_Off+0x6c>)
10001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10001666:	b29b      	uxth	r3, r3
10001668:	2200      	movs	r2, #0
1000166a:	4619      	mov	r1, r3
1000166c:	f000 ff9c 	bl	100025a8 <HAL_GPIO_WritePin>
  }

  return status;
10001670:	68fb      	ldr	r3, [r7, #12]
}
10001672:	4618      	mov	r0, r3
10001674:	3710      	adds	r7, #16
10001676:	46bd      	mov	sp, r7
10001678:	bd80      	pop	{r7, pc}
1000167a:	bf00      	nop
1000167c:	1002008c 	.word	0x1002008c
10001680:	1000b754 	.word	0x1000b754

10001684 <BSP_LED_Toggle>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
10001684:	b580      	push	{r7, lr}
10001686:	b084      	sub	sp, #16
10001688:	af00      	add	r7, sp, #0
1000168a:	4603      	mov	r3, r0
1000168c:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
1000168e:	2300      	movs	r3, #0
10001690:	60fb      	str	r3, [r7, #12]
  /* Toggle GPIO Led Pin */
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
10001692:	79fb      	ldrb	r3, [r7, #7]
10001694:	4a08      	ldr	r2, [pc, #32]	@ (100016b8 <BSP_LED_Toggle+0x34>)
10001696:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1000169a:	79fb      	ldrb	r3, [r7, #7]
1000169c:	4907      	ldr	r1, [pc, #28]	@ (100016bc <BSP_LED_Toggle+0x38>)
1000169e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
100016a2:	b29b      	uxth	r3, r3
100016a4:	4619      	mov	r1, r3
100016a6:	4610      	mov	r0, r2
100016a8:	f000 ff97 	bl	100025da <HAL_GPIO_TogglePin>
  return status;
100016ac:	68fb      	ldr	r3, [r7, #12]
}
100016ae:	4618      	mov	r0, r3
100016b0:	3710      	adds	r7, #16
100016b2:	46bd      	mov	sp, r7
100016b4:	bd80      	pop	{r7, pc}
100016b6:	bf00      	nop
100016b8:	1002008c 	.word	0x1002008c
100016bc:	1000b754 	.word	0x1000b754

100016c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
100016c0:	b480      	push	{r7}
100016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
100016c4:	4b0f      	ldr	r3, [pc, #60]	@ (10001704 <SystemInit+0x44>)
100016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
100016ca:	4a0e      	ldr	r2, [pc, #56]	@ (10001704 <SystemInit+0x44>)
100016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
100016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
100016d4:	4b0c      	ldr	r3, [pc, #48]	@ (10001708 <SystemInit+0x48>)
100016d6:	2200      	movs	r2, #0
100016d8:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
100016da:	4b0b      	ldr	r3, [pc, #44]	@ (10001708 <SystemInit+0x48>)
100016dc:	2200      	movs	r2, #0
100016de:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
100016e0:	4b09      	ldr	r3, [pc, #36]	@ (10001708 <SystemInit+0x48>)
100016e2:	2200      	movs	r2, #0
100016e4:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
100016e6:	4b08      	ldr	r3, [pc, #32]	@ (10001708 <SystemInit+0x48>)
100016e8:	2200      	movs	r2, #0
100016ea:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
100016ec:	4b06      	ldr	r3, [pc, #24]	@ (10001708 <SystemInit+0x48>)
100016ee:	2200      	movs	r2, #0
100016f0:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
100016f2:	4b05      	ldr	r3, [pc, #20]	@ (10001708 <SystemInit+0x48>)
100016f4:	2200      	movs	r2, #0
100016f6:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
100016f8:	bf00      	nop
100016fa:	46bd      	mov	sp, r7
100016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
10001700:	4770      	bx	lr
10001702:	bf00      	nop
10001704:	e000ed00 	.word	0xe000ed00
10001708:	5000d0c0 	.word	0x5000d0c0

1000170c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
1000170c:	b480      	push	{r7}
1000170e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
10001710:	bf00      	nop
10001712:	46bd      	mov	sp, r7
10001714:	f85d 7b04 	ldr.w	r7, [sp], #4
10001718:	4770      	bx	lr
	...

1000171c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
1000171c:	b580      	push	{r7, lr}
1000171e:	b086      	sub	sp, #24
10001720:	af04      	add	r7, sp, #16
10001722:	4603      	mov	r3, r0
10001724:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
10001726:	f04f 33ff 	mov.w	r3, #4294967295
1000172a:	9302      	str	r3, [sp, #8]
1000172c:	2301      	movs	r3, #1
1000172e:	9301      	str	r3, [sp, #4]
10001730:	1dfb      	adds	r3, r7, #7
10001732:	9300      	str	r3, [sp, #0]
10001734:	2301      	movs	r3, #1
10001736:	2200      	movs	r2, #0
10001738:	2178      	movs	r1, #120	@ 0x78
1000173a:	4803      	ldr	r0, [pc, #12]	@ (10001748 <ssd1306_WriteCommand+0x2c>)
1000173c:	f001 f820 	bl	10002780 <HAL_I2C_Mem_Write>
}
10001740:	bf00      	nop
10001742:	3708      	adds	r7, #8
10001744:	46bd      	mov	sp, r7
10001746:	bd80      	pop	{r7, pc}
10001748:	100201d8 	.word	0x100201d8

1000174c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
1000174c:	b580      	push	{r7, lr}
1000174e:	b086      	sub	sp, #24
10001750:	af04      	add	r7, sp, #16
10001752:	6078      	str	r0, [r7, #4]
10001754:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
10001756:	683b      	ldr	r3, [r7, #0]
10001758:	b29b      	uxth	r3, r3
1000175a:	f04f 32ff 	mov.w	r2, #4294967295
1000175e:	9202      	str	r2, [sp, #8]
10001760:	9301      	str	r3, [sp, #4]
10001762:	687b      	ldr	r3, [r7, #4]
10001764:	9300      	str	r3, [sp, #0]
10001766:	2301      	movs	r3, #1
10001768:	2240      	movs	r2, #64	@ 0x40
1000176a:	2178      	movs	r1, #120	@ 0x78
1000176c:	4803      	ldr	r0, [pc, #12]	@ (1000177c <ssd1306_WriteData+0x30>)
1000176e:	f001 f807 	bl	10002780 <HAL_I2C_Mem_Write>
}
10001772:	bf00      	nop
10001774:	3708      	adds	r7, #8
10001776:	46bd      	mov	sp, r7
10001778:	bd80      	pop	{r7, pc}
1000177a:	bf00      	nop
1000177c:	100201d8 	.word	0x100201d8

10001780 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
int ssd1306_Init(void) {
10001780:	b580      	push	{r7, lr}
10001782:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
10001784:	f7ff ffc2 	bl	1000170c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
10001788:	2064      	movs	r0, #100	@ 0x64
1000178a:	f000 fa75 	bl	10001c78 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
1000178e:	2000      	movs	r0, #0
10001790:	f000 f9e4 	bl	10001b5c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
10001794:	2020      	movs	r0, #32
10001796:	f7ff ffc1 	bl	1000171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
1000179a:	2000      	movs	r0, #0
1000179c:	f7ff ffbe 	bl	1000171c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
100017a0:	20b0      	movs	r0, #176	@ 0xb0
100017a2:	f7ff ffbb 	bl	1000171c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
100017a6:	20c8      	movs	r0, #200	@ 0xc8
100017a8:	f7ff ffb8 	bl	1000171c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
100017ac:	2000      	movs	r0, #0
100017ae:	f7ff ffb5 	bl	1000171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
100017b2:	2010      	movs	r0, #16
100017b4:	f7ff ffb2 	bl	1000171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
100017b8:	2040      	movs	r0, #64	@ 0x40
100017ba:	f7ff ffaf 	bl	1000171c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
100017be:	20ff      	movs	r0, #255	@ 0xff
100017c0:	f000 f9b8 	bl	10001b34 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
100017c4:	20a1      	movs	r0, #161	@ 0xa1
100017c6:	f7ff ffa9 	bl	1000171c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
100017ca:	20a6      	movs	r0, #166	@ 0xa6
100017cc:	f7ff ffa6 	bl	1000171c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
100017d0:	20a8      	movs	r0, #168	@ 0xa8
100017d2:	f7ff ffa3 	bl	1000171c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
100017d6:	203f      	movs	r0, #63	@ 0x3f
100017d8:	f7ff ffa0 	bl	1000171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
100017dc:	20a4      	movs	r0, #164	@ 0xa4
100017de:	f7ff ff9d 	bl	1000171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
100017e2:	20d3      	movs	r0, #211	@ 0xd3
100017e4:	f7ff ff9a 	bl	1000171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
100017e8:	2000      	movs	r0, #0
100017ea:	f7ff ff97 	bl	1000171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
100017ee:	20d5      	movs	r0, #213	@ 0xd5
100017f0:	f7ff ff94 	bl	1000171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
100017f4:	20f0      	movs	r0, #240	@ 0xf0
100017f6:	f7ff ff91 	bl	1000171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
100017fa:	20d9      	movs	r0, #217	@ 0xd9
100017fc:	f7ff ff8e 	bl	1000171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
10001800:	2022      	movs	r0, #34	@ 0x22
10001802:	f7ff ff8b 	bl	1000171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
10001806:	20da      	movs	r0, #218	@ 0xda
10001808:	f7ff ff88 	bl	1000171c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
1000180c:	2012      	movs	r0, #18
1000180e:	f7ff ff85 	bl	1000171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
10001812:	20db      	movs	r0, #219	@ 0xdb
10001814:	f7ff ff82 	bl	1000171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
10001818:	2020      	movs	r0, #32
1000181a:	f7ff ff7f 	bl	1000171c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
1000181e:	208d      	movs	r0, #141	@ 0x8d
10001820:	f7ff ff7c 	bl	1000171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
10001824:	2014      	movs	r0, #20
10001826:	f7ff ff79 	bl	1000171c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
1000182a:	2001      	movs	r0, #1
1000182c:	f000 f996 	bl	10001b5c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
10001830:	2000      	movs	r0, #0
10001832:	f000 f811 	bl	10001858 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
10001836:	f000 f831 	bl	1000189c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
1000183a:	4b06      	ldr	r3, [pc, #24]	@ (10001854 <ssd1306_Init+0xd4>)
1000183c:	2200      	movs	r2, #0
1000183e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
10001840:	4b04      	ldr	r3, [pc, #16]	@ (10001854 <ssd1306_Init+0xd4>)
10001842:	2200      	movs	r2, #0
10001844:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
10001846:	4b03      	ldr	r3, [pc, #12]	@ (10001854 <ssd1306_Init+0xd4>)
10001848:	2201      	movs	r2, #1
1000184a:	711a      	strb	r2, [r3, #4]

    return 0;
1000184c:	2300      	movs	r3, #0
}
1000184e:	4618      	mov	r0, r3
10001850:	bd80      	pop	{r7, pc}
10001852:	bf00      	nop
10001854:	100213dc 	.word	0x100213dc

10001858 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
10001858:	b580      	push	{r7, lr}
1000185a:	b082      	sub	sp, #8
1000185c:	af00      	add	r7, sp, #0
1000185e:	4603      	mov	r3, r0
10001860:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
10001862:	79fb      	ldrb	r3, [r7, #7]
10001864:	2b00      	cmp	r3, #0
10001866:	d101      	bne.n	1000186c <ssd1306_Fill+0x14>
10001868:	2300      	movs	r3, #0
1000186a:	e000      	b.n	1000186e <ssd1306_Fill+0x16>
1000186c:	23ff      	movs	r3, #255	@ 0xff
1000186e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
10001872:	4619      	mov	r1, r3
10001874:	4803      	ldr	r0, [pc, #12]	@ (10001884 <ssd1306_Fill+0x2c>)
10001876:	f008 fe9e 	bl	1000a5b6 <memset>
}
1000187a:	bf00      	nop
1000187c:	3708      	adds	r7, #8
1000187e:	46bd      	mov	sp, r7
10001880:	bd80      	pop	{r7, pc}
10001882:	bf00      	nop
10001884:	10020fdc 	.word	0x10020fdc

10001888 <ssd1306_Clear>:
void ssd1306_Clear(void){
10001888:	b580      	push	{r7, lr}
1000188a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
1000188c:	2000      	movs	r0, #0
1000188e:	f7ff ffe3 	bl	10001858 <ssd1306_Fill>
	ssd1306_UpdateScreen();
10001892:	f000 f803 	bl	1000189c <ssd1306_UpdateScreen>
}
10001896:	bf00      	nop
10001898:	bd80      	pop	{r7, pc}
	...

1000189c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
1000189c:	b580      	push	{r7, lr}
1000189e:	b082      	sub	sp, #8
100018a0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
100018a2:	2300      	movs	r3, #0
100018a4:	71fb      	strb	r3, [r7, #7]
100018a6:	e016      	b.n	100018d6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
100018a8:	79fb      	ldrb	r3, [r7, #7]
100018aa:	3b50      	subs	r3, #80	@ 0x50
100018ac:	b2db      	uxtb	r3, r3
100018ae:	4618      	mov	r0, r3
100018b0:	f7ff ff34 	bl	1000171c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
100018b4:	2000      	movs	r0, #0
100018b6:	f7ff ff31 	bl	1000171c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
100018ba:	2010      	movs	r0, #16
100018bc:	f7ff ff2e 	bl	1000171c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
100018c0:	79fb      	ldrb	r3, [r7, #7]
100018c2:	01db      	lsls	r3, r3, #7
100018c4:	4a08      	ldr	r2, [pc, #32]	@ (100018e8 <ssd1306_UpdateScreen+0x4c>)
100018c6:	4413      	add	r3, r2
100018c8:	2180      	movs	r1, #128	@ 0x80
100018ca:	4618      	mov	r0, r3
100018cc:	f7ff ff3e 	bl	1000174c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
100018d0:	79fb      	ldrb	r3, [r7, #7]
100018d2:	3301      	adds	r3, #1
100018d4:	71fb      	strb	r3, [r7, #7]
100018d6:	79fb      	ldrb	r3, [r7, #7]
100018d8:	2b07      	cmp	r3, #7
100018da:	d9e5      	bls.n	100018a8 <ssd1306_UpdateScreen+0xc>
    }
}
100018dc:	bf00      	nop
100018de:	bf00      	nop
100018e0:	3708      	adds	r7, #8
100018e2:	46bd      	mov	sp, r7
100018e4:	bd80      	pop	{r7, pc}
100018e6:	bf00      	nop
100018e8:	10020fdc 	.word	0x10020fdc

100018ec <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
100018ec:	b480      	push	{r7}
100018ee:	b083      	sub	sp, #12
100018f0:	af00      	add	r7, sp, #0
100018f2:	4603      	mov	r3, r0
100018f4:	71fb      	strb	r3, [r7, #7]
100018f6:	460b      	mov	r3, r1
100018f8:	71bb      	strb	r3, [r7, #6]
100018fa:	4613      	mov	r3, r2
100018fc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
100018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
10001902:	2b00      	cmp	r3, #0
10001904:	db3d      	blt.n	10001982 <ssd1306_DrawPixel+0x96>
10001906:	79bb      	ldrb	r3, [r7, #6]
10001908:	2b3f      	cmp	r3, #63	@ 0x3f
1000190a:	d83a      	bhi.n	10001982 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
1000190c:	797b      	ldrb	r3, [r7, #5]
1000190e:	2b01      	cmp	r3, #1
10001910:	d11a      	bne.n	10001948 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
10001912:	79fa      	ldrb	r2, [r7, #7]
10001914:	79bb      	ldrb	r3, [r7, #6]
10001916:	08db      	lsrs	r3, r3, #3
10001918:	b2d8      	uxtb	r0, r3
1000191a:	4603      	mov	r3, r0
1000191c:	01db      	lsls	r3, r3, #7
1000191e:	4413      	add	r3, r2
10001920:	4a1b      	ldr	r2, [pc, #108]	@ (10001990 <ssd1306_DrawPixel+0xa4>)
10001922:	5cd3      	ldrb	r3, [r2, r3]
10001924:	b25a      	sxtb	r2, r3
10001926:	79bb      	ldrb	r3, [r7, #6]
10001928:	f003 0307 	and.w	r3, r3, #7
1000192c:	2101      	movs	r1, #1
1000192e:	fa01 f303 	lsl.w	r3, r1, r3
10001932:	b25b      	sxtb	r3, r3
10001934:	4313      	orrs	r3, r2
10001936:	b259      	sxtb	r1, r3
10001938:	79fa      	ldrb	r2, [r7, #7]
1000193a:	4603      	mov	r3, r0
1000193c:	01db      	lsls	r3, r3, #7
1000193e:	4413      	add	r3, r2
10001940:	b2c9      	uxtb	r1, r1
10001942:	4a13      	ldr	r2, [pc, #76]	@ (10001990 <ssd1306_DrawPixel+0xa4>)
10001944:	54d1      	strb	r1, [r2, r3]
10001946:	e01d      	b.n	10001984 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
10001948:	79fa      	ldrb	r2, [r7, #7]
1000194a:	79bb      	ldrb	r3, [r7, #6]
1000194c:	08db      	lsrs	r3, r3, #3
1000194e:	b2d8      	uxtb	r0, r3
10001950:	4603      	mov	r3, r0
10001952:	01db      	lsls	r3, r3, #7
10001954:	4413      	add	r3, r2
10001956:	4a0e      	ldr	r2, [pc, #56]	@ (10001990 <ssd1306_DrawPixel+0xa4>)
10001958:	5cd3      	ldrb	r3, [r2, r3]
1000195a:	b25a      	sxtb	r2, r3
1000195c:	79bb      	ldrb	r3, [r7, #6]
1000195e:	f003 0307 	and.w	r3, r3, #7
10001962:	2101      	movs	r1, #1
10001964:	fa01 f303 	lsl.w	r3, r1, r3
10001968:	b25b      	sxtb	r3, r3
1000196a:	43db      	mvns	r3, r3
1000196c:	b25b      	sxtb	r3, r3
1000196e:	4013      	ands	r3, r2
10001970:	b259      	sxtb	r1, r3
10001972:	79fa      	ldrb	r2, [r7, #7]
10001974:	4603      	mov	r3, r0
10001976:	01db      	lsls	r3, r3, #7
10001978:	4413      	add	r3, r2
1000197a:	b2c9      	uxtb	r1, r1
1000197c:	4a04      	ldr	r2, [pc, #16]	@ (10001990 <ssd1306_DrawPixel+0xa4>)
1000197e:	54d1      	strb	r1, [r2, r3]
10001980:	e000      	b.n	10001984 <ssd1306_DrawPixel+0x98>
        return;
10001982:	bf00      	nop
    }
}
10001984:	370c      	adds	r7, #12
10001986:	46bd      	mov	sp, r7
10001988:	f85d 7b04 	ldr.w	r7, [sp], #4
1000198c:	4770      	bx	lr
1000198e:	bf00      	nop
10001990:	10020fdc 	.word	0x10020fdc

10001994 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
10001994:	b590      	push	{r4, r7, lr}
10001996:	b089      	sub	sp, #36	@ 0x24
10001998:	af00      	add	r7, sp, #0
1000199a:	4604      	mov	r4, r0
1000199c:	4638      	mov	r0, r7
1000199e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
100019a2:	4623      	mov	r3, r4
100019a4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
100019a6:	7bfb      	ldrb	r3, [r7, #15]
100019a8:	2b1f      	cmp	r3, #31
100019aa:	d902      	bls.n	100019b2 <ssd1306_WriteChar+0x1e>
100019ac:	7bfb      	ldrb	r3, [r7, #15]
100019ae:	2b7e      	cmp	r3, #126	@ 0x7e
100019b0:	d901      	bls.n	100019b6 <ssd1306_WriteChar+0x22>
        return 0;
100019b2:	2300      	movs	r3, #0
100019b4:	e079      	b.n	10001aaa <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
100019b6:	68bb      	ldr	r3, [r7, #8]
100019b8:	2b00      	cmp	r3, #0
100019ba:	d005      	beq.n	100019c8 <ssd1306_WriteChar+0x34>
100019bc:	68ba      	ldr	r2, [r7, #8]
100019be:	7bfb      	ldrb	r3, [r7, #15]
100019c0:	3b20      	subs	r3, #32
100019c2:	4413      	add	r3, r2
100019c4:	781b      	ldrb	r3, [r3, #0]
100019c6:	e000      	b.n	100019ca <ssd1306_WriteChar+0x36>
100019c8:	783b      	ldrb	r3, [r7, #0]
100019ca:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
100019cc:	4b39      	ldr	r3, [pc, #228]	@ (10001ab4 <ssd1306_WriteChar+0x120>)
100019ce:	881b      	ldrh	r3, [r3, #0]
100019d0:	461a      	mov	r2, r3
100019d2:	7dfb      	ldrb	r3, [r7, #23]
100019d4:	4413      	add	r3, r2
100019d6:	2b80      	cmp	r3, #128	@ 0x80
100019d8:	dc06      	bgt.n	100019e8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
100019da:	4b36      	ldr	r3, [pc, #216]	@ (10001ab4 <ssd1306_WriteChar+0x120>)
100019dc:	885b      	ldrh	r3, [r3, #2]
100019de:	461a      	mov	r2, r3
100019e0:	787b      	ldrb	r3, [r7, #1]
100019e2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
100019e4:	2b40      	cmp	r3, #64	@ 0x40
100019e6:	dd01      	ble.n	100019ec <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
100019e8:	2300      	movs	r3, #0
100019ea:	e05e      	b.n	10001aaa <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
100019ec:	2300      	movs	r3, #0
100019ee:	61fb      	str	r3, [r7, #28]
100019f0:	e04d      	b.n	10001a8e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
100019f2:	687a      	ldr	r2, [r7, #4]
100019f4:	7bfb      	ldrb	r3, [r7, #15]
100019f6:	3b20      	subs	r3, #32
100019f8:	7879      	ldrb	r1, [r7, #1]
100019fa:	fb01 f303 	mul.w	r3, r1, r3
100019fe:	4619      	mov	r1, r3
10001a00:	69fb      	ldr	r3, [r7, #28]
10001a02:	440b      	add	r3, r1
10001a04:	005b      	lsls	r3, r3, #1
10001a06:	4413      	add	r3, r2
10001a08:	881b      	ldrh	r3, [r3, #0]
10001a0a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
10001a0c:	2300      	movs	r3, #0
10001a0e:	61bb      	str	r3, [r7, #24]
10001a10:	e036      	b.n	10001a80 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
10001a12:	693a      	ldr	r2, [r7, #16]
10001a14:	69bb      	ldr	r3, [r7, #24]
10001a16:	fa02 f303 	lsl.w	r3, r2, r3
10001a1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
10001a1e:	2b00      	cmp	r3, #0
10001a20:	d013      	beq.n	10001a4a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
10001a22:	4b24      	ldr	r3, [pc, #144]	@ (10001ab4 <ssd1306_WriteChar+0x120>)
10001a24:	881b      	ldrh	r3, [r3, #0]
10001a26:	b2da      	uxtb	r2, r3
10001a28:	69bb      	ldr	r3, [r7, #24]
10001a2a:	b2db      	uxtb	r3, r3
10001a2c:	4413      	add	r3, r2
10001a2e:	b2d8      	uxtb	r0, r3
10001a30:	4b20      	ldr	r3, [pc, #128]	@ (10001ab4 <ssd1306_WriteChar+0x120>)
10001a32:	885b      	ldrh	r3, [r3, #2]
10001a34:	b2da      	uxtb	r2, r3
10001a36:	69fb      	ldr	r3, [r7, #28]
10001a38:	b2db      	uxtb	r3, r3
10001a3a:	4413      	add	r3, r2
10001a3c:	b2db      	uxtb	r3, r3
10001a3e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
10001a42:	4619      	mov	r1, r3
10001a44:	f7ff ff52 	bl	100018ec <ssd1306_DrawPixel>
10001a48:	e017      	b.n	10001a7a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
10001a4a:	4b1a      	ldr	r3, [pc, #104]	@ (10001ab4 <ssd1306_WriteChar+0x120>)
10001a4c:	881b      	ldrh	r3, [r3, #0]
10001a4e:	b2da      	uxtb	r2, r3
10001a50:	69bb      	ldr	r3, [r7, #24]
10001a52:	b2db      	uxtb	r3, r3
10001a54:	4413      	add	r3, r2
10001a56:	b2d8      	uxtb	r0, r3
10001a58:	4b16      	ldr	r3, [pc, #88]	@ (10001ab4 <ssd1306_WriteChar+0x120>)
10001a5a:	885b      	ldrh	r3, [r3, #2]
10001a5c:	b2da      	uxtb	r2, r3
10001a5e:	69fb      	ldr	r3, [r7, #28]
10001a60:	b2db      	uxtb	r3, r3
10001a62:	4413      	add	r3, r2
10001a64:	b2d9      	uxtb	r1, r3
10001a66:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
10001a6a:	2b00      	cmp	r3, #0
10001a6c:	bf0c      	ite	eq
10001a6e:	2301      	moveq	r3, #1
10001a70:	2300      	movne	r3, #0
10001a72:	b2db      	uxtb	r3, r3
10001a74:	461a      	mov	r2, r3
10001a76:	f7ff ff39 	bl	100018ec <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
10001a7a:	69bb      	ldr	r3, [r7, #24]
10001a7c:	3301      	adds	r3, #1
10001a7e:	61bb      	str	r3, [r7, #24]
10001a80:	7dfb      	ldrb	r3, [r7, #23]
10001a82:	69ba      	ldr	r2, [r7, #24]
10001a84:	429a      	cmp	r2, r3
10001a86:	d3c4      	bcc.n	10001a12 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
10001a88:	69fb      	ldr	r3, [r7, #28]
10001a8a:	3301      	adds	r3, #1
10001a8c:	61fb      	str	r3, [r7, #28]
10001a8e:	787b      	ldrb	r3, [r7, #1]
10001a90:	461a      	mov	r2, r3
10001a92:	69fb      	ldr	r3, [r7, #28]
10001a94:	4293      	cmp	r3, r2
10001a96:	d3ac      	bcc.n	100019f2 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
10001a98:	4b06      	ldr	r3, [pc, #24]	@ (10001ab4 <ssd1306_WriteChar+0x120>)
10001a9a:	881a      	ldrh	r2, [r3, #0]
10001a9c:	7dfb      	ldrb	r3, [r7, #23]
10001a9e:	b29b      	uxth	r3, r3
10001aa0:	4413      	add	r3, r2
10001aa2:	b29a      	uxth	r2, r3
10001aa4:	4b03      	ldr	r3, [pc, #12]	@ (10001ab4 <ssd1306_WriteChar+0x120>)
10001aa6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
10001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
10001aaa:	4618      	mov	r0, r3
10001aac:	3724      	adds	r7, #36	@ 0x24
10001aae:	46bd      	mov	sp, r7
10001ab0:	bd90      	pop	{r4, r7, pc}
10001ab2:	bf00      	nop
10001ab4:	100213dc 	.word	0x100213dc

10001ab8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
10001ab8:	b580      	push	{r7, lr}
10001aba:	b086      	sub	sp, #24
10001abc:	af02      	add	r7, sp, #8
10001abe:	60f8      	str	r0, [r7, #12]
10001ac0:	4638      	mov	r0, r7
10001ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
10001ac6:	e013      	b.n	10001af0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
10001ac8:	68fb      	ldr	r3, [r7, #12]
10001aca:	7818      	ldrb	r0, [r3, #0]
10001acc:	7e3b      	ldrb	r3, [r7, #24]
10001ace:	9300      	str	r3, [sp, #0]
10001ad0:	463b      	mov	r3, r7
10001ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
10001ad4:	f7ff ff5e 	bl	10001994 <ssd1306_WriteChar>
10001ad8:	4603      	mov	r3, r0
10001ada:	461a      	mov	r2, r3
10001adc:	68fb      	ldr	r3, [r7, #12]
10001ade:	781b      	ldrb	r3, [r3, #0]
10001ae0:	429a      	cmp	r2, r3
10001ae2:	d002      	beq.n	10001aea <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
10001ae4:	68fb      	ldr	r3, [r7, #12]
10001ae6:	781b      	ldrb	r3, [r3, #0]
10001ae8:	e008      	b.n	10001afc <ssd1306_WriteString+0x44>
        }
        str++;
10001aea:	68fb      	ldr	r3, [r7, #12]
10001aec:	3301      	adds	r3, #1
10001aee:	60fb      	str	r3, [r7, #12]
    while (*str) {
10001af0:	68fb      	ldr	r3, [r7, #12]
10001af2:	781b      	ldrb	r3, [r3, #0]
10001af4:	2b00      	cmp	r3, #0
10001af6:	d1e7      	bne.n	10001ac8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
10001af8:	68fb      	ldr	r3, [r7, #12]
10001afa:	781b      	ldrb	r3, [r3, #0]
}
10001afc:	4618      	mov	r0, r3
10001afe:	3710      	adds	r7, #16
10001b00:	46bd      	mov	sp, r7
10001b02:	bd80      	pop	{r7, pc}

10001b04 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
10001b04:	b480      	push	{r7}
10001b06:	b083      	sub	sp, #12
10001b08:	af00      	add	r7, sp, #0
10001b0a:	4603      	mov	r3, r0
10001b0c:	460a      	mov	r2, r1
10001b0e:	71fb      	strb	r3, [r7, #7]
10001b10:	4613      	mov	r3, r2
10001b12:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
10001b14:	79fb      	ldrb	r3, [r7, #7]
10001b16:	b29a      	uxth	r2, r3
10001b18:	4b05      	ldr	r3, [pc, #20]	@ (10001b30 <ssd1306_SetCursor+0x2c>)
10001b1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
10001b1c:	79bb      	ldrb	r3, [r7, #6]
10001b1e:	b29a      	uxth	r2, r3
10001b20:	4b03      	ldr	r3, [pc, #12]	@ (10001b30 <ssd1306_SetCursor+0x2c>)
10001b22:	805a      	strh	r2, [r3, #2]
}
10001b24:	bf00      	nop
10001b26:	370c      	adds	r7, #12
10001b28:	46bd      	mov	sp, r7
10001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b2e:	4770      	bx	lr
10001b30:	100213dc 	.word	0x100213dc

10001b34 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
10001b34:	b580      	push	{r7, lr}
10001b36:	b084      	sub	sp, #16
10001b38:	af00      	add	r7, sp, #0
10001b3a:	4603      	mov	r3, r0
10001b3c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
10001b3e:	2381      	movs	r3, #129	@ 0x81
10001b40:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
10001b42:	7bfb      	ldrb	r3, [r7, #15]
10001b44:	4618      	mov	r0, r3
10001b46:	f7ff fde9 	bl	1000171c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
10001b4a:	79fb      	ldrb	r3, [r7, #7]
10001b4c:	4618      	mov	r0, r3
10001b4e:	f7ff fde5 	bl	1000171c <ssd1306_WriteCommand>
}
10001b52:	bf00      	nop
10001b54:	3710      	adds	r7, #16
10001b56:	46bd      	mov	sp, r7
10001b58:	bd80      	pop	{r7, pc}
	...

10001b5c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
10001b5c:	b580      	push	{r7, lr}
10001b5e:	b084      	sub	sp, #16
10001b60:	af00      	add	r7, sp, #0
10001b62:	4603      	mov	r3, r0
10001b64:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
10001b66:	79fb      	ldrb	r3, [r7, #7]
10001b68:	2b00      	cmp	r3, #0
10001b6a:	d005      	beq.n	10001b78 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
10001b6c:	23af      	movs	r3, #175	@ 0xaf
10001b6e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
10001b70:	4b08      	ldr	r3, [pc, #32]	@ (10001b94 <ssd1306_SetDisplayOn+0x38>)
10001b72:	2201      	movs	r2, #1
10001b74:	715a      	strb	r2, [r3, #5]
10001b76:	e004      	b.n	10001b82 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
10001b78:	23ae      	movs	r3, #174	@ 0xae
10001b7a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
10001b7c:	4b05      	ldr	r3, [pc, #20]	@ (10001b94 <ssd1306_SetDisplayOn+0x38>)
10001b7e:	2200      	movs	r2, #0
10001b80:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
10001b82:	7bfb      	ldrb	r3, [r7, #15]
10001b84:	4618      	mov	r0, r3
10001b86:	f7ff fdc9 	bl	1000171c <ssd1306_WriteCommand>
}
10001b8a:	bf00      	nop
10001b8c:	3710      	adds	r7, #16
10001b8e:	46bd      	mov	sp, r7
10001b90:	bd80      	pop	{r7, pc}
10001b92:	bf00      	nop
10001b94:	100213dc 	.word	0x100213dc

10001b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10001b98:	b580      	push	{r7, lr}
10001b9a:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10001b9c:	2003      	movs	r0, #3
10001b9e:	f000 f969 	bl	10001e74 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001ba2:	f003 fd18 	bl	100055d6 <HAL_RCC_GetSystemCoreClockFreq>
10001ba6:	4603      	mov	r3, r0
10001ba8:	4a07      	ldr	r2, [pc, #28]	@ (10001bc8 <HAL_Init+0x30>)
10001baa:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10001bac:	200f      	movs	r0, #15
10001bae:	f000 f80d 	bl	10001bcc <HAL_InitTick>
10001bb2:	4603      	mov	r3, r0
10001bb4:	2b00      	cmp	r3, #0
10001bb6:	d001      	beq.n	10001bbc <HAL_Init+0x24>
  {
    return HAL_ERROR;
10001bb8:	2301      	movs	r3, #1
10001bba:	e002      	b.n	10001bc2 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10001bbc:	f7ff fb50 	bl	10001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10001bc0:	2300      	movs	r3, #0
}
10001bc2:	4618      	mov	r0, r3
10001bc4:	bd80      	pop	{r7, pc}
10001bc6:	bf00      	nop
10001bc8:	1002009c 	.word	0x1002009c

10001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10001bcc:	b580      	push	{r7, lr}
10001bce:	b082      	sub	sp, #8
10001bd0:	af00      	add	r7, sp, #0
10001bd2:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10001bd4:	4b15      	ldr	r3, [pc, #84]	@ (10001c2c <HAL_InitTick+0x60>)
10001bd6:	781b      	ldrb	r3, [r3, #0]
10001bd8:	2b00      	cmp	r3, #0
10001bda:	d101      	bne.n	10001be0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
10001bdc:	2301      	movs	r3, #1
10001bde:	e021      	b.n	10001c24 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10001be0:	4b13      	ldr	r3, [pc, #76]	@ (10001c30 <HAL_InitTick+0x64>)
10001be2:	681a      	ldr	r2, [r3, #0]
10001be4:	4b11      	ldr	r3, [pc, #68]	@ (10001c2c <HAL_InitTick+0x60>)
10001be6:	781b      	ldrb	r3, [r3, #0]
10001be8:	4619      	mov	r1, r3
10001bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
10001bee:	fbb3 f3f1 	udiv	r3, r3, r1
10001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
10001bf6:	4618      	mov	r0, r3
10001bf8:	f000 f971 	bl	10001ede <HAL_SYSTICK_Config>
10001bfc:	4603      	mov	r3, r0
10001bfe:	2b00      	cmp	r3, #0
10001c00:	d001      	beq.n	10001c06 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10001c02:	2301      	movs	r3, #1
10001c04:	e00e      	b.n	10001c24 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10001c06:	687b      	ldr	r3, [r7, #4]
10001c08:	2b0f      	cmp	r3, #15
10001c0a:	d80a      	bhi.n	10001c22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10001c0c:	2200      	movs	r2, #0
10001c0e:	6879      	ldr	r1, [r7, #4]
10001c10:	f04f 30ff 	mov.w	r0, #4294967295
10001c14:	f000 f939 	bl	10001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10001c18:	4a06      	ldr	r2, [pc, #24]	@ (10001c34 <HAL_InitTick+0x68>)
10001c1a:	687b      	ldr	r3, [r7, #4]
10001c1c:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10001c1e:	2300      	movs	r3, #0
10001c20:	e000      	b.n	10001c24 <HAL_InitTick+0x58>
    return HAL_ERROR;
10001c22:	2301      	movs	r3, #1
}
10001c24:	4618      	mov	r0, r3
10001c26:	3708      	adds	r7, #8
10001c28:	46bd      	mov	sp, r7
10001c2a:	bd80      	pop	{r7, pc}
10001c2c:	100200a4 	.word	0x100200a4
10001c30:	1002009c 	.word	0x1002009c
10001c34:	100200a0 	.word	0x100200a0

10001c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10001c38:	b480      	push	{r7}
10001c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10001c3c:	4b06      	ldr	r3, [pc, #24]	@ (10001c58 <HAL_IncTick+0x20>)
10001c3e:	781b      	ldrb	r3, [r3, #0]
10001c40:	461a      	mov	r2, r3
10001c42:	4b06      	ldr	r3, [pc, #24]	@ (10001c5c <HAL_IncTick+0x24>)
10001c44:	681b      	ldr	r3, [r3, #0]
10001c46:	4413      	add	r3, r2
10001c48:	4a04      	ldr	r2, [pc, #16]	@ (10001c5c <HAL_IncTick+0x24>)
10001c4a:	6013      	str	r3, [r2, #0]
}
10001c4c:	bf00      	nop
10001c4e:	46bd      	mov	sp, r7
10001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c54:	4770      	bx	lr
10001c56:	bf00      	nop
10001c58:	100200a4 	.word	0x100200a4
10001c5c:	100213e4 	.word	0x100213e4

10001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10001c60:	b480      	push	{r7}
10001c62:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10001c64:	4b03      	ldr	r3, [pc, #12]	@ (10001c74 <HAL_GetTick+0x14>)
10001c66:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10001c68:	4618      	mov	r0, r3
10001c6a:	46bd      	mov	sp, r7
10001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c70:	4770      	bx	lr
10001c72:	bf00      	nop
10001c74:	100213e4 	.word	0x100213e4

10001c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10001c78:	b580      	push	{r7, lr}
10001c7a:	b084      	sub	sp, #16
10001c7c:	af00      	add	r7, sp, #0
10001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10001c80:	f7ff ffee 	bl	10001c60 <HAL_GetTick>
10001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10001c86:	687b      	ldr	r3, [r7, #4]
10001c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10001c8a:	68fb      	ldr	r3, [r7, #12]
10001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
10001c90:	d005      	beq.n	10001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10001c92:	4b0a      	ldr	r3, [pc, #40]	@ (10001cbc <HAL_Delay+0x44>)
10001c94:	781b      	ldrb	r3, [r3, #0]
10001c96:	461a      	mov	r2, r3
10001c98:	68fb      	ldr	r3, [r7, #12]
10001c9a:	4413      	add	r3, r2
10001c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10001c9e:	bf00      	nop
10001ca0:	f7ff ffde 	bl	10001c60 <HAL_GetTick>
10001ca4:	4602      	mov	r2, r0
10001ca6:	68bb      	ldr	r3, [r7, #8]
10001ca8:	1ad3      	subs	r3, r2, r3
10001caa:	68fa      	ldr	r2, [r7, #12]
10001cac:	429a      	cmp	r2, r3
10001cae:	d8f7      	bhi.n	10001ca0 <HAL_Delay+0x28>
  {
  }
}
10001cb0:	bf00      	nop
10001cb2:	bf00      	nop
10001cb4:	3710      	adds	r7, #16
10001cb6:	46bd      	mov	sp, r7
10001cb8:	bd80      	pop	{r7, pc}
10001cba:	bf00      	nop
10001cbc:	100200a4 	.word	0x100200a4

10001cc0 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
10001cc0:	b480      	push	{r7}
10001cc2:	af00      	add	r7, sp, #0
 return __STM32MP1xx_HAL_VERSION;
10001cc4:	4b02      	ldr	r3, [pc, #8]	@ (10001cd0 <HAL_GetHalVersion+0x10>)
}
10001cc6:	4618      	mov	r0, r3
10001cc8:	46bd      	mov	sp, r7
10001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
10001cce:	4770      	bx	lr
10001cd0:	01070000 	.word	0x01070000

10001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10001cd4:	b480      	push	{r7}
10001cd6:	b085      	sub	sp, #20
10001cd8:	af00      	add	r7, sp, #0
10001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10001cdc:	687b      	ldr	r3, [r7, #4]
10001cde:	f003 0307 	and.w	r3, r3, #7
10001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (10001d18 <__NVIC_SetPriorityGrouping+0x44>)
10001ce6:	68db      	ldr	r3, [r3, #12]
10001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10001cea:	68ba      	ldr	r2, [r7, #8]
10001cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
10001cf0:	4013      	ands	r3, r2
10001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10001cf4:	68fb      	ldr	r3, [r7, #12]
10001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10001cf8:	68bb      	ldr	r3, [r7, #8]
10001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
10001d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
10001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10001d06:	4a04      	ldr	r2, [pc, #16]	@ (10001d18 <__NVIC_SetPriorityGrouping+0x44>)
10001d08:	68bb      	ldr	r3, [r7, #8]
10001d0a:	60d3      	str	r3, [r2, #12]
}
10001d0c:	bf00      	nop
10001d0e:	3714      	adds	r7, #20
10001d10:	46bd      	mov	sp, r7
10001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d16:	4770      	bx	lr
10001d18:	e000ed00 	.word	0xe000ed00

10001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10001d1c:	b480      	push	{r7}
10001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10001d20:	4b04      	ldr	r3, [pc, #16]	@ (10001d34 <__NVIC_GetPriorityGrouping+0x18>)
10001d22:	68db      	ldr	r3, [r3, #12]
10001d24:	0a1b      	lsrs	r3, r3, #8
10001d26:	f003 0307 	and.w	r3, r3, #7
}
10001d2a:	4618      	mov	r0, r3
10001d2c:	46bd      	mov	sp, r7
10001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d32:	4770      	bx	lr
10001d34:	e000ed00 	.word	0xe000ed00

10001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001d38:	b480      	push	{r7}
10001d3a:	b083      	sub	sp, #12
10001d3c:	af00      	add	r7, sp, #0
10001d3e:	4603      	mov	r3, r0
10001d40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10001d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001d46:	2b00      	cmp	r3, #0
10001d48:	db0b      	blt.n	10001d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10001d4a:	88fb      	ldrh	r3, [r7, #6]
10001d4c:	f003 021f 	and.w	r2, r3, #31
10001d50:	4907      	ldr	r1, [pc, #28]	@ (10001d70 <__NVIC_EnableIRQ+0x38>)
10001d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001d56:	095b      	lsrs	r3, r3, #5
10001d58:	2001      	movs	r0, #1
10001d5a:	fa00 f202 	lsl.w	r2, r0, r2
10001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10001d62:	bf00      	nop
10001d64:	370c      	adds	r7, #12
10001d66:	46bd      	mov	sp, r7
10001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d6c:	4770      	bx	lr
10001d6e:	bf00      	nop
10001d70:	e000e100 	.word	0xe000e100

10001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10001d74:	b480      	push	{r7}
10001d76:	b083      	sub	sp, #12
10001d78:	af00      	add	r7, sp, #0
10001d7a:	4603      	mov	r3, r0
10001d7c:	6039      	str	r1, [r7, #0]
10001d7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10001d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001d84:	2b00      	cmp	r3, #0
10001d86:	db0a      	blt.n	10001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10001d88:	683b      	ldr	r3, [r7, #0]
10001d8a:	b2da      	uxtb	r2, r3
10001d8c:	490c      	ldr	r1, [pc, #48]	@ (10001dc0 <__NVIC_SetPriority+0x4c>)
10001d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001d92:	0112      	lsls	r2, r2, #4
10001d94:	b2d2      	uxtb	r2, r2
10001d96:	440b      	add	r3, r1
10001d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10001d9c:	e00a      	b.n	10001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10001d9e:	683b      	ldr	r3, [r7, #0]
10001da0:	b2da      	uxtb	r2, r3
10001da2:	4908      	ldr	r1, [pc, #32]	@ (10001dc4 <__NVIC_SetPriority+0x50>)
10001da4:	88fb      	ldrh	r3, [r7, #6]
10001da6:	f003 030f 	and.w	r3, r3, #15
10001daa:	3b04      	subs	r3, #4
10001dac:	0112      	lsls	r2, r2, #4
10001dae:	b2d2      	uxtb	r2, r2
10001db0:	440b      	add	r3, r1
10001db2:	761a      	strb	r2, [r3, #24]
}
10001db4:	bf00      	nop
10001db6:	370c      	adds	r7, #12
10001db8:	46bd      	mov	sp, r7
10001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dbe:	4770      	bx	lr
10001dc0:	e000e100 	.word	0xe000e100
10001dc4:	e000ed00 	.word	0xe000ed00

10001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10001dc8:	b480      	push	{r7}
10001dca:	b089      	sub	sp, #36	@ 0x24
10001dcc:	af00      	add	r7, sp, #0
10001dce:	60f8      	str	r0, [r7, #12]
10001dd0:	60b9      	str	r1, [r7, #8]
10001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10001dd4:	68fb      	ldr	r3, [r7, #12]
10001dd6:	f003 0307 	and.w	r3, r3, #7
10001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10001ddc:	69fb      	ldr	r3, [r7, #28]
10001dde:	f1c3 0307 	rsb	r3, r3, #7
10001de2:	2b04      	cmp	r3, #4
10001de4:	bf28      	it	cs
10001de6:	2304      	movcs	r3, #4
10001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10001dea:	69fb      	ldr	r3, [r7, #28]
10001dec:	3304      	adds	r3, #4
10001dee:	2b06      	cmp	r3, #6
10001df0:	d902      	bls.n	10001df8 <NVIC_EncodePriority+0x30>
10001df2:	69fb      	ldr	r3, [r7, #28]
10001df4:	3b03      	subs	r3, #3
10001df6:	e000      	b.n	10001dfa <NVIC_EncodePriority+0x32>
10001df8:	2300      	movs	r3, #0
10001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001dfc:	f04f 32ff 	mov.w	r2, #4294967295
10001e00:	69bb      	ldr	r3, [r7, #24]
10001e02:	fa02 f303 	lsl.w	r3, r2, r3
10001e06:	43da      	mvns	r2, r3
10001e08:	68bb      	ldr	r3, [r7, #8]
10001e0a:	401a      	ands	r2, r3
10001e0c:	697b      	ldr	r3, [r7, #20]
10001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10001e10:	f04f 31ff 	mov.w	r1, #4294967295
10001e14:	697b      	ldr	r3, [r7, #20]
10001e16:	fa01 f303 	lsl.w	r3, r1, r3
10001e1a:	43d9      	mvns	r1, r3
10001e1c:	687b      	ldr	r3, [r7, #4]
10001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001e20:	4313      	orrs	r3, r2
         );
}
10001e22:	4618      	mov	r0, r3
10001e24:	3724      	adds	r7, #36	@ 0x24
10001e26:	46bd      	mov	sp, r7
10001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e2c:	4770      	bx	lr
	...

10001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10001e30:	b580      	push	{r7, lr}
10001e32:	b082      	sub	sp, #8
10001e34:	af00      	add	r7, sp, #0
10001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10001e38:	687b      	ldr	r3, [r7, #4]
10001e3a:	3b01      	subs	r3, #1
10001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10001e40:	d301      	bcc.n	10001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10001e42:	2301      	movs	r3, #1
10001e44:	e00f      	b.n	10001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10001e46:	4a0a      	ldr	r2, [pc, #40]	@ (10001e70 <SysTick_Config+0x40>)
10001e48:	687b      	ldr	r3, [r7, #4]
10001e4a:	3b01      	subs	r3, #1
10001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10001e4e:	210f      	movs	r1, #15
10001e50:	f04f 30ff 	mov.w	r0, #4294967295
10001e54:	f7ff ff8e 	bl	10001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10001e58:	4b05      	ldr	r3, [pc, #20]	@ (10001e70 <SysTick_Config+0x40>)
10001e5a:	2200      	movs	r2, #0
10001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10001e5e:	4b04      	ldr	r3, [pc, #16]	@ (10001e70 <SysTick_Config+0x40>)
10001e60:	2207      	movs	r2, #7
10001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10001e64:	2300      	movs	r3, #0
}
10001e66:	4618      	mov	r0, r3
10001e68:	3708      	adds	r7, #8
10001e6a:	46bd      	mov	sp, r7
10001e6c:	bd80      	pop	{r7, pc}
10001e6e:	bf00      	nop
10001e70:	e000e010 	.word	0xe000e010

10001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10001e74:	b580      	push	{r7, lr}
10001e76:	b082      	sub	sp, #8
10001e78:	af00      	add	r7, sp, #0
10001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10001e7c:	6878      	ldr	r0, [r7, #4]
10001e7e:	f7ff ff29 	bl	10001cd4 <__NVIC_SetPriorityGrouping>
}
10001e82:	bf00      	nop
10001e84:	3708      	adds	r7, #8
10001e86:	46bd      	mov	sp, r7
10001e88:	bd80      	pop	{r7, pc}

10001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10001e8a:	b580      	push	{r7, lr}
10001e8c:	b086      	sub	sp, #24
10001e8e:	af00      	add	r7, sp, #0
10001e90:	4603      	mov	r3, r0
10001e92:	60b9      	str	r1, [r7, #8]
10001e94:	607a      	str	r2, [r7, #4]
10001e96:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10001e98:	2300      	movs	r3, #0
10001e9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10001e9c:	f7ff ff3e 	bl	10001d1c <__NVIC_GetPriorityGrouping>
10001ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10001ea2:	687a      	ldr	r2, [r7, #4]
10001ea4:	68b9      	ldr	r1, [r7, #8]
10001ea6:	6978      	ldr	r0, [r7, #20]
10001ea8:	f7ff ff8e 	bl	10001dc8 <NVIC_EncodePriority>
10001eac:	4602      	mov	r2, r0
10001eae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10001eb2:	4611      	mov	r1, r2
10001eb4:	4618      	mov	r0, r3
10001eb6:	f7ff ff5d 	bl	10001d74 <__NVIC_SetPriority>
}
10001eba:	bf00      	nop
10001ebc:	3718      	adds	r7, #24
10001ebe:	46bd      	mov	sp, r7
10001ec0:	bd80      	pop	{r7, pc}

10001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10001ec2:	b580      	push	{r7, lr}
10001ec4:	b082      	sub	sp, #8
10001ec6:	af00      	add	r7, sp, #0
10001ec8:	4603      	mov	r3, r0
10001eca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10001ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001ed0:	4618      	mov	r0, r3
10001ed2:	f7ff ff31 	bl	10001d38 <__NVIC_EnableIRQ>
}
10001ed6:	bf00      	nop
10001ed8:	3708      	adds	r7, #8
10001eda:	46bd      	mov	sp, r7
10001edc:	bd80      	pop	{r7, pc}

10001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10001ede:	b580      	push	{r7, lr}
10001ee0:	b082      	sub	sp, #8
10001ee2:	af00      	add	r7, sp, #0
10001ee4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10001ee6:	6878      	ldr	r0, [r7, #4]
10001ee8:	f7ff ffa2 	bl	10001e30 <SysTick_Config>
10001eec:	4603      	mov	r3, r0
}
10001eee:	4618      	mov	r0, r3
10001ef0:	3708      	adds	r7, #8
10001ef2:	46bd      	mov	sp, r7
10001ef4:	bd80      	pop	{r7, pc}

10001ef6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
10001ef6:	b580      	push	{r7, lr}
10001ef8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
10001efa:	f000 f802 	bl	10001f02 <HAL_SYSTICK_Callback>
}
10001efe:	bf00      	nop
10001f00:	bd80      	pop	{r7, pc}

10001f02 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
10001f02:	b480      	push	{r7}
10001f04:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
10001f06:	bf00      	nop
10001f08:	46bd      	mov	sp, r7
10001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f0e:	4770      	bx	lr

10001f10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
10001f10:	b480      	push	{r7}
10001f12:	b083      	sub	sp, #12
10001f14:	af00      	add	r7, sp, #0
10001f16:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (hdma == NULL)
10001f18:	687b      	ldr	r3, [r7, #4]
10001f1a:	2b00      	cmp	r3, #0
10001f1c:	d101      	bne.n	10001f22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
10001f1e:	2301      	movs	r3, #1
10001f20:	e017      	b.n	10001f52 <HAL_DMA_Abort_IT+0x42>
  }

  if (hdma->State != HAL_DMA_STATE_BUSY)
10001f22:	687b      	ldr	r3, [r7, #4]
10001f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
10001f28:	b2db      	uxtb	r3, r3
10001f2a:	2b02      	cmp	r3, #2
10001f2c:	d004      	beq.n	10001f38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
10001f2e:	687b      	ldr	r3, [r7, #4]
10001f30:	2280      	movs	r2, #128	@ 0x80
10001f32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
10001f34:	2301      	movs	r3, #1
10001f36:	e00c      	b.n	10001f52 <HAL_DMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
10001f38:	687b      	ldr	r3, [r7, #4]
10001f3a:	2204      	movs	r2, #4
10001f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
10001f40:	687b      	ldr	r3, [r7, #4]
10001f42:	681b      	ldr	r3, [r3, #0]
10001f44:	681a      	ldr	r2, [r3, #0]
10001f46:	687b      	ldr	r3, [r7, #4]
10001f48:	681b      	ldr	r3, [r3, #0]
10001f4a:	f022 0201 	bic.w	r2, r2, #1
10001f4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
10001f50:	2300      	movs	r3, #0
}
10001f52:	4618      	mov	r0, r3
10001f54:	370c      	adds	r7, #12
10001f56:	46bd      	mov	sp, r7
10001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f5c:	4770      	bx	lr

10001f5e <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
10001f5e:	b480      	push	{r7}
10001f60:	b083      	sub	sp, #12
10001f62:	af00      	add	r7, sp, #0
10001f64:	6078      	str	r0, [r7, #4]
  return hdma->State;
10001f66:	687b      	ldr	r3, [r7, #4]
10001f68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
10001f6c:	b2db      	uxtb	r3, r3
}
10001f6e:	4618      	mov	r0, r3
10001f70:	370c      	adds	r7, #12
10001f72:	46bd      	mov	sp, r7
10001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f78:	4770      	bx	lr
	...

10001f7c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
10001f7c:	b480      	push	{r7}
10001f7e:	b089      	sub	sp, #36	@ 0x24
10001f80:	af00      	add	r7, sp, #0
10001f82:	6078      	str	r0, [r7, #4]
10001f84:	6039      	str	r1, [r7, #0]
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
10001f86:	687b      	ldr	r3, [r7, #4]
10001f88:	2b00      	cmp	r3, #0
10001f8a:	d002      	beq.n	10001f92 <HAL_EXTI_SetConfigLine+0x16>
10001f8c:	683b      	ldr	r3, [r7, #0]
10001f8e:	2b00      	cmp	r3, #0
10001f90:	d101      	bne.n	10001f96 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
10001f92:	2301      	movs	r3, #1
10001f94:	e0da      	b.n	1000214c <HAL_EXTI_SetConfigLine+0x1d0>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
10001f96:	683b      	ldr	r3, [r7, #0]
10001f98:	681a      	ldr	r2, [r3, #0]
10001f9a:	687b      	ldr	r3, [r7, #4]
10001f9c:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
10001f9e:	683b      	ldr	r3, [r7, #0]
10001fa0:	681b      	ldr	r3, [r3, #0]
10001fa2:	0c1b      	lsrs	r3, r3, #16
10001fa4:	f003 0303 	and.w	r3, r3, #3
10001fa8:	61bb      	str	r3, [r7, #24]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
10001faa:	683b      	ldr	r3, [r7, #0]
10001fac:	681b      	ldr	r3, [r3, #0]
10001fae:	f003 031f 	and.w	r3, r3, #31
10001fb2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
10001fb4:	2201      	movs	r2, #1
10001fb6:	697b      	ldr	r3, [r7, #20]
10001fb8:	fa02 f303 	lsl.w	r3, r2, r3
10001fbc:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x0u)
10001fbe:	683b      	ldr	r3, [r7, #0]
10001fc0:	681b      	ldr	r3, [r3, #0]
10001fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
10001fc6:	2b00      	cmp	r3, #0
10001fc8:	d062      	beq.n	10002090 <HAL_EXTI_SetConfigLine+0x114>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
10001fca:	69bb      	ldr	r3, [r7, #24]
10001fcc:	015b      	lsls	r3, r3, #5
10001fce:	f103 43a0 	add.w	r3, r3, #1342177280	@ 0x50000000
10001fd2:	f503 4350 	add.w	r3, r3, #53248	@ 0xd000
10001fd6:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
10001fd8:	68fb      	ldr	r3, [r7, #12]
10001fda:	681b      	ldr	r3, [r3, #0]
10001fdc:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x0u)
10001fde:	683b      	ldr	r3, [r7, #0]
10001fe0:	689b      	ldr	r3, [r3, #8]
10001fe2:	f003 0301 	and.w	r3, r3, #1
10001fe6:	2b00      	cmp	r3, #0
10001fe8:	d004      	beq.n	10001ff4 <HAL_EXTI_SetConfigLine+0x78>
    {
      regval |= maskline;
10001fea:	69fa      	ldr	r2, [r7, #28]
10001fec:	693b      	ldr	r3, [r7, #16]
10001fee:	4313      	orrs	r3, r2
10001ff0:	61fb      	str	r3, [r7, #28]
10001ff2:	e004      	b.n	10001ffe <HAL_EXTI_SetConfigLine+0x82>
    }
    else
    {
      regval &= ~maskline;
10001ff4:	693b      	ldr	r3, [r7, #16]
10001ff6:	43db      	mvns	r3, r3
10001ff8:	69fa      	ldr	r2, [r7, #28]
10001ffa:	4013      	ands	r3, r2
10001ffc:	61fb      	str	r3, [r7, #28]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
10001ffe:	68fb      	ldr	r3, [r7, #12]
10002000:	69fa      	ldr	r2, [r7, #28]
10002002:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
10002004:	69bb      	ldr	r3, [r7, #24]
10002006:	015a      	lsls	r2, r3, #5
10002008:	4b53      	ldr	r3, [pc, #332]	@ (10002158 <HAL_EXTI_SetConfigLine+0x1dc>)
1000200a:	4413      	add	r3, r2
1000200c:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
1000200e:	68fb      	ldr	r3, [r7, #12]
10002010:	681b      	ldr	r3, [r3, #0]
10002012:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x0u)
10002014:	683b      	ldr	r3, [r7, #0]
10002016:	689b      	ldr	r3, [r3, #8]
10002018:	f003 0302 	and.w	r3, r3, #2
1000201c:	2b00      	cmp	r3, #0
1000201e:	d004      	beq.n	1000202a <HAL_EXTI_SetConfigLine+0xae>
    {
      regval |= maskline;
10002020:	69fa      	ldr	r2, [r7, #28]
10002022:	693b      	ldr	r3, [r7, #16]
10002024:	4313      	orrs	r3, r2
10002026:	61fb      	str	r3, [r7, #28]
10002028:	e004      	b.n	10002034 <HAL_EXTI_SetConfigLine+0xb8>
    }
    else
    {
      regval &= ~maskline;
1000202a:	693b      	ldr	r3, [r7, #16]
1000202c:	43db      	mvns	r3, r3
1000202e:	69fa      	ldr	r2, [r7, #28]
10002030:	4013      	ands	r3, r2
10002032:	61fb      	str	r3, [r7, #28]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
10002034:	68fb      	ldr	r3, [r7, #12]
10002036:	69fa      	ldr	r2, [r7, #28]
10002038:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
1000203a:	683b      	ldr	r3, [r7, #0]
1000203c:	681b      	ldr	r3, [r3, #0]
1000203e:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
10002042:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
10002046:	d123      	bne.n	10002090 <HAL_EXTI_SetConfigLine+0x114>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = EXTI->EXTICR[linepos >> 2u];
10002048:	4a44      	ldr	r2, [pc, #272]	@ (1000215c <HAL_EXTI_SetConfigLine+0x1e0>)
1000204a:	697b      	ldr	r3, [r7, #20]
1000204c:	089b      	lsrs	r3, r3, #2
1000204e:	3318      	adds	r3, #24
10002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10002054:	61fb      	str	r3, [r7, #28]
      regval &= ~(EXTI_EXTICR1_EXTI0 << (EXTI_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
10002056:	697b      	ldr	r3, [r7, #20]
10002058:	f003 0303 	and.w	r3, r3, #3
1000205c:	00db      	lsls	r3, r3, #3
1000205e:	220f      	movs	r2, #15
10002060:	fa02 f303 	lsl.w	r3, r2, r3
10002064:	43db      	mvns	r3, r3
10002066:	69fa      	ldr	r2, [r7, #28]
10002068:	4013      	ands	r3, r2
1000206a:	61fb      	str	r3, [r7, #28]
      regval |= (pExtiConfig->GPIOSel << (EXTI_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
1000206c:	683b      	ldr	r3, [r7, #0]
1000206e:	68da      	ldr	r2, [r3, #12]
10002070:	697b      	ldr	r3, [r7, #20]
10002072:	f003 0303 	and.w	r3, r3, #3
10002076:	00db      	lsls	r3, r3, #3
10002078:	fa02 f303 	lsl.w	r3, r2, r3
1000207c:	69fa      	ldr	r2, [r7, #28]
1000207e:	4313      	orrs	r3, r2
10002080:	61fb      	str	r3, [r7, #28]
      EXTI->EXTICR[linepos >> 2u] = regval;
10002082:	4936      	ldr	r1, [pc, #216]	@ (1000215c <HAL_EXTI_SetConfigLine+0x1e0>)
10002084:	697b      	ldr	r3, [r7, #20]
10002086:	089b      	lsrs	r3, r3, #2
10002088:	3318      	adds	r3, #24
1000208a:	69fa      	ldr	r2, [r7, #28]
1000208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }


  /*Set Interrupt And Event Mask for Core 1 if configuration for Core 1 given into parameter mode */
  if ((pExtiConfig->Mode & EXTI_MODE_C1) != 0x0u)
10002090:	683b      	ldr	r3, [r7, #0]
10002092:	685b      	ldr	r3, [r3, #4]
10002094:	f003 0310 	and.w	r3, r3, #16
10002098:	2b00      	cmp	r3, #0
1000209a:	d01a      	beq.n	100020d2 <HAL_EXTI_SetConfigLine+0x156>
  {
    regaddr = (&EXTI->C1IMR1 + (EXTI_MODE_OFFSET * offset));
1000209c:	69bb      	ldr	r3, [r7, #24]
1000209e:	011a      	lsls	r2, r3, #4
100020a0:	4b2f      	ldr	r3, [pc, #188]	@ (10002160 <HAL_EXTI_SetConfigLine+0x1e4>)
100020a2:	4413      	add	r3, r2
100020a4:	60fb      	str	r3, [r7, #12]

    regval = *regaddr;
100020a6:	68fb      	ldr	r3, [r7, #12]
100020a8:	681b      	ldr	r3, [r3, #0]
100020aa:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x0u)
100020ac:	683b      	ldr	r3, [r7, #0]
100020ae:	685b      	ldr	r3, [r3, #4]
100020b0:	f003 0301 	and.w	r3, r3, #1
100020b4:	2b00      	cmp	r3, #0
100020b6:	d004      	beq.n	100020c2 <HAL_EXTI_SetConfigLine+0x146>
    {
      regval |= maskline;
100020b8:	69fa      	ldr	r2, [r7, #28]
100020ba:	693b      	ldr	r3, [r7, #16]
100020bc:	4313      	orrs	r3, r2
100020be:	61fb      	str	r3, [r7, #28]
100020c0:	e004      	b.n	100020cc <HAL_EXTI_SetConfigLine+0x150>
    }
    else
    {
      regval &= ~maskline;
100020c2:	693b      	ldr	r3, [r7, #16]
100020c4:	43db      	mvns	r3, r3
100020c6:	69fa      	ldr	r2, [r7, #28]
100020c8:	4013      	ands	r3, r2
100020ca:	61fb      	str	r3, [r7, #28]
    }

    /* Store interrupt mode */
    *regaddr = regval;
100020cc:	68fb      	ldr	r3, [r7, #12]
100020ce:	69fa      	ldr	r2, [r7, #28]
100020d0:	601a      	str	r2, [r3, #0]
  }

  /*Set Interrupt And Event Mask for Core 2 if configuration for Core 2 given into parameter mode  */
  if ((pExtiConfig->Mode & EXTI_MODE_C2) != 0x0u)
100020d2:	683b      	ldr	r3, [r7, #0]
100020d4:	685b      	ldr	r3, [r3, #4]
100020d6:	f003 0320 	and.w	r3, r3, #32
100020da:	2b00      	cmp	r3, #0
100020dc:	d035      	beq.n	1000214a <HAL_EXTI_SetConfigLine+0x1ce>
  {
    regaddr = (&EXTI->C2IMR1 + (EXTI_MODE_OFFSET * offset));
100020de:	69bb      	ldr	r3, [r7, #24]
100020e0:	011a      	lsls	r2, r3, #4
100020e2:	4b20      	ldr	r3, [pc, #128]	@ (10002164 <HAL_EXTI_SetConfigLine+0x1e8>)
100020e4:	4413      	add	r3, r2
100020e6:	60fb      	str	r3, [r7, #12]

    regval = *regaddr;
100020e8:	68fb      	ldr	r3, [r7, #12]
100020ea:	681b      	ldr	r3, [r3, #0]
100020ec:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x0u)
100020ee:	683b      	ldr	r3, [r7, #0]
100020f0:	685b      	ldr	r3, [r3, #4]
100020f2:	f003 0301 	and.w	r3, r3, #1
100020f6:	2b00      	cmp	r3, #0
100020f8:	d004      	beq.n	10002104 <HAL_EXTI_SetConfigLine+0x188>
    {
      regval |= maskline;
100020fa:	69fa      	ldr	r2, [r7, #28]
100020fc:	693b      	ldr	r3, [r7, #16]
100020fe:	4313      	orrs	r3, r2
10002100:	61fb      	str	r3, [r7, #28]
10002102:	e004      	b.n	1000210e <HAL_EXTI_SetConfigLine+0x192>
    }
    else
    {
      regval &= ~maskline;
10002104:	693b      	ldr	r3, [r7, #16]
10002106:	43db      	mvns	r3, r3
10002108:	69fa      	ldr	r2, [r7, #28]
1000210a:	4013      	ands	r3, r2
1000210c:	61fb      	str	r3, [r7, #28]
    }

    /* Store interrupt mode */
    *regaddr = regval;
1000210e:	68fb      	ldr	r3, [r7, #12]
10002110:	69fa      	ldr	r2, [r7, #28]
10002112:	601a      	str	r2, [r3, #0]

    /* The event mode cannot be configured if the line does not support it */
    assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

    regaddr = (&EXTI->C2EMR1 + (EXTI_MODE_OFFSET * offset));
10002114:	69bb      	ldr	r3, [r7, #24]
10002116:	011a      	lsls	r2, r3, #4
10002118:	4b13      	ldr	r3, [pc, #76]	@ (10002168 <HAL_EXTI_SetConfigLine+0x1ec>)
1000211a:	4413      	add	r3, r2
1000211c:	60fb      	str	r3, [r7, #12]

    regval = *regaddr;
1000211e:	68fb      	ldr	r3, [r7, #12]
10002120:	681b      	ldr	r3, [r3, #0]
10002122:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x0u)
10002124:	683b      	ldr	r3, [r7, #0]
10002126:	685b      	ldr	r3, [r3, #4]
10002128:	f003 0302 	and.w	r3, r3, #2
1000212c:	2b00      	cmp	r3, #0
1000212e:	d004      	beq.n	1000213a <HAL_EXTI_SetConfigLine+0x1be>
    {
      regval |= maskline;
10002130:	69fa      	ldr	r2, [r7, #28]
10002132:	693b      	ldr	r3, [r7, #16]
10002134:	4313      	orrs	r3, r2
10002136:	61fb      	str	r3, [r7, #28]
10002138:	e004      	b.n	10002144 <HAL_EXTI_SetConfigLine+0x1c8>
    }
    else
    {
      regval &= ~maskline;
1000213a:	693b      	ldr	r3, [r7, #16]
1000213c:	43db      	mvns	r3, r3
1000213e:	69fa      	ldr	r2, [r7, #28]
10002140:	4013      	ands	r3, r2
10002142:	61fb      	str	r3, [r7, #28]
    }

    /* Store event mode */
    *regaddr = regval;
10002144:	68fb      	ldr	r3, [r7, #12]
10002146:	69fa      	ldr	r2, [r7, #28]
10002148:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
1000214a:	2300      	movs	r3, #0
}
1000214c:	4618      	mov	r0, r3
1000214e:	3724      	adds	r7, #36	@ 0x24
10002150:	46bd      	mov	sp, r7
10002152:	f85d 7b04 	ldr.w	r7, [sp], #4
10002156:	4770      	bx	lr
10002158:	5000d004 	.word	0x5000d004
1000215c:	5000d000 	.word	0x5000d000
10002160:	5000d080 	.word	0x5000d080
10002164:	5000d0c0 	.word	0x5000d0c0
10002168:	5000d0c4 	.word	0x5000d0c4

1000216c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
1000216c:	b480      	push	{r7}
1000216e:	b087      	sub	sp, #28
10002170:	af00      	add	r7, sp, #0
10002172:	60f8      	str	r0, [r7, #12]
10002174:	460b      	mov	r3, r1
10002176:	607a      	str	r2, [r7, #4]
10002178:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
1000217a:	2300      	movs	r3, #0
1000217c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
1000217e:	7afb      	ldrb	r3, [r7, #11]
10002180:	2b02      	cmp	r3, #2
10002182:	d011      	beq.n	100021a8 <HAL_EXTI_RegisterCallback+0x3c>
10002184:	2b02      	cmp	r3, #2
10002186:	dc13      	bgt.n	100021b0 <HAL_EXTI_RegisterCallback+0x44>
10002188:	2b00      	cmp	r3, #0
1000218a:	d002      	beq.n	10002192 <HAL_EXTI_RegisterCallback+0x26>
1000218c:	2b01      	cmp	r3, #1
1000218e:	d007      	beq.n	100021a0 <HAL_EXTI_RegisterCallback+0x34>
10002190:	e00e      	b.n	100021b0 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
10002192:	68fb      	ldr	r3, [r7, #12]
10002194:	687a      	ldr	r2, [r7, #4]
10002196:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
10002198:	68fb      	ldr	r3, [r7, #12]
1000219a:	687a      	ldr	r2, [r7, #4]
1000219c:	609a      	str	r2, [r3, #8]
      break;
1000219e:	e00a      	b.n	100021b6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
100021a0:	68fb      	ldr	r3, [r7, #12]
100021a2:	687a      	ldr	r2, [r7, #4]
100021a4:	605a      	str	r2, [r3, #4]
      break;
100021a6:	e006      	b.n	100021b6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
100021a8:	68fb      	ldr	r3, [r7, #12]
100021aa:	687a      	ldr	r2, [r7, #4]
100021ac:	609a      	str	r2, [r3, #8]
      break;
100021ae:	e002      	b.n	100021b6 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
100021b0:	2301      	movs	r3, #1
100021b2:	75fb      	strb	r3, [r7, #23]
      break;
100021b4:	bf00      	nop
  }

  return status;
100021b6:	7dfb      	ldrb	r3, [r7, #23]
}
100021b8:	4618      	mov	r0, r3
100021ba:	371c      	adds	r7, #28
100021bc:	46bd      	mov	sp, r7
100021be:	f85d 7b04 	ldr.w	r7, [sp], #4
100021c2:	4770      	bx	lr

100021c4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
100021c4:	b580      	push	{r7, lr}
100021c6:	b086      	sub	sp, #24
100021c8:	af00      	add	r7, sp, #0
100021ca:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
100021cc:	687b      	ldr	r3, [r7, #4]
100021ce:	681b      	ldr	r3, [r3, #0]
100021d0:	0c1b      	lsrs	r3, r3, #16
100021d2:	f003 0303 	and.w	r3, r3, #3
100021d6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
100021d8:	687b      	ldr	r3, [r7, #4]
100021da:	681b      	ldr	r3, [r3, #0]
100021dc:	f003 031f 	and.w	r3, r3, #31
100021e0:	2201      	movs	r2, #1
100021e2:	fa02 f303 	lsl.w	r3, r2, r3
100021e6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
100021e8:	697b      	ldr	r3, [r7, #20]
100021ea:	015a      	lsls	r2, r3, #5
100021ec:	4b17      	ldr	r3, [pc, #92]	@ (1000224c <HAL_EXTI_IRQHandler+0x88>)
100021ee:	4413      	add	r3, r2
100021f0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
100021f2:	68fb      	ldr	r3, [r7, #12]
100021f4:	681b      	ldr	r3, [r3, #0]
100021f6:	693a      	ldr	r2, [r7, #16]
100021f8:	4013      	ands	r3, r2
100021fa:	60bb      	str	r3, [r7, #8]

  if (regval != 0x0u)
100021fc:	68bb      	ldr	r3, [r7, #8]
100021fe:	2b00      	cmp	r3, #0
10002200:	d009      	beq.n	10002216 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
10002202:	68fb      	ldr	r3, [r7, #12]
10002204:	693a      	ldr	r2, [r7, #16]
10002206:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
10002208:	687b      	ldr	r3, [r7, #4]
1000220a:	685b      	ldr	r3, [r3, #4]
1000220c:	2b00      	cmp	r3, #0
1000220e:	d002      	beq.n	10002216 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
10002210:	687b      	ldr	r3, [r7, #4]
10002212:	685b      	ldr	r3, [r3, #4]
10002214:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
10002216:	697b      	ldr	r3, [r7, #20]
10002218:	015a      	lsls	r2, r3, #5
1000221a:	4b0d      	ldr	r3, [pc, #52]	@ (10002250 <HAL_EXTI_IRQHandler+0x8c>)
1000221c:	4413      	add	r3, r2
1000221e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
10002220:	68fb      	ldr	r3, [r7, #12]
10002222:	681b      	ldr	r3, [r3, #0]
10002224:	693a      	ldr	r2, [r7, #16]
10002226:	4013      	ands	r3, r2
10002228:	60bb      	str	r3, [r7, #8]

  if (regval != 0x0u)
1000222a:	68bb      	ldr	r3, [r7, #8]
1000222c:	2b00      	cmp	r3, #0
1000222e:	d009      	beq.n	10002244 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
10002230:	68fb      	ldr	r3, [r7, #12]
10002232:	693a      	ldr	r2, [r7, #16]
10002234:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
10002236:	687b      	ldr	r3, [r7, #4]
10002238:	689b      	ldr	r3, [r3, #8]
1000223a:	2b00      	cmp	r3, #0
1000223c:	d002      	beq.n	10002244 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
1000223e:	687b      	ldr	r3, [r7, #4]
10002240:	689b      	ldr	r3, [r3, #8]
10002242:	4798      	blx	r3
    }
  }
}
10002244:	bf00      	nop
10002246:	3718      	adds	r7, #24
10002248:	46bd      	mov	sp, r7
1000224a:	bd80      	pop	{r7, pc}
1000224c:	5000d00c 	.word	0x5000d00c
10002250:	5000d010 	.word	0x5000d010

10002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10002254:	b480      	push	{r7}
10002256:	b089      	sub	sp, #36	@ 0x24
10002258:	af00      	add	r7, sp, #0
1000225a:	6078      	str	r0, [r7, #4]
1000225c:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
1000225e:	4b8a      	ldr	r3, [pc, #552]	@ (10002488 <HAL_GPIO_Init+0x234>)
10002260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10002262:	2300      	movs	r3, #0
10002264:	61fb      	str	r3, [r7, #28]
10002266:	e191      	b.n	1000258c <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10002268:	2201      	movs	r2, #1
1000226a:	69fb      	ldr	r3, [r7, #28]
1000226c:	fa02 f303 	lsl.w	r3, r2, r3
10002270:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
10002272:	683b      	ldr	r3, [r7, #0]
10002274:	681b      	ldr	r3, [r3, #0]
10002276:	693a      	ldr	r2, [r7, #16]
10002278:	4013      	ands	r3, r2
1000227a:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
1000227c:	68fa      	ldr	r2, [r7, #12]
1000227e:	693b      	ldr	r3, [r7, #16]
10002280:	429a      	cmp	r2, r3
10002282:	f040 8180 	bne.w	10002586 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10002286:	683b      	ldr	r3, [r7, #0]
10002288:	685b      	ldr	r3, [r3, #4]
1000228a:	2b02      	cmp	r3, #2
1000228c:	d003      	beq.n	10002296 <HAL_GPIO_Init+0x42>
1000228e:	683b      	ldr	r3, [r7, #0]
10002290:	685b      	ldr	r3, [r3, #4]
10002292:	2b12      	cmp	r3, #18
10002294:	d123      	bne.n	100022de <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10002296:	69fb      	ldr	r3, [r7, #28]
10002298:	08da      	lsrs	r2, r3, #3
1000229a:	687b      	ldr	r3, [r7, #4]
1000229c:	3208      	adds	r2, #8
1000229e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
100022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
100022a4:	69fb      	ldr	r3, [r7, #28]
100022a6:	f003 0307 	and.w	r3, r3, #7
100022aa:	009b      	lsls	r3, r3, #2
100022ac:	220f      	movs	r2, #15
100022ae:	fa02 f303 	lsl.w	r3, r2, r3
100022b2:	43db      	mvns	r3, r3
100022b4:	69ba      	ldr	r2, [r7, #24]
100022b6:	4013      	ands	r3, r2
100022b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
100022ba:	683b      	ldr	r3, [r7, #0]
100022bc:	691a      	ldr	r2, [r3, #16]
100022be:	69fb      	ldr	r3, [r7, #28]
100022c0:	f003 0307 	and.w	r3, r3, #7
100022c4:	009b      	lsls	r3, r3, #2
100022c6:	fa02 f303 	lsl.w	r3, r2, r3
100022ca:	69ba      	ldr	r2, [r7, #24]
100022cc:	4313      	orrs	r3, r2
100022ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
100022d0:	69fb      	ldr	r3, [r7, #28]
100022d2:	08da      	lsrs	r2, r3, #3
100022d4:	687b      	ldr	r3, [r7, #4]
100022d6:	3208      	adds	r2, #8
100022d8:	69b9      	ldr	r1, [r7, #24]
100022da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100022de:	687b      	ldr	r3, [r7, #4]
100022e0:	681b      	ldr	r3, [r3, #0]
100022e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
100022e4:	69fb      	ldr	r3, [r7, #28]
100022e6:	005b      	lsls	r3, r3, #1
100022e8:	2203      	movs	r2, #3
100022ea:	fa02 f303 	lsl.w	r3, r2, r3
100022ee:	43db      	mvns	r3, r3
100022f0:	69ba      	ldr	r2, [r7, #24]
100022f2:	4013      	ands	r3, r2
100022f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
100022f6:	683b      	ldr	r3, [r7, #0]
100022f8:	685b      	ldr	r3, [r3, #4]
100022fa:	f003 0203 	and.w	r2, r3, #3
100022fe:	69fb      	ldr	r3, [r7, #28]
10002300:	005b      	lsls	r3, r3, #1
10002302:	fa02 f303 	lsl.w	r3, r2, r3
10002306:	69ba      	ldr	r2, [r7, #24]
10002308:	4313      	orrs	r3, r2
1000230a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
1000230c:	687b      	ldr	r3, [r7, #4]
1000230e:	69ba      	ldr	r2, [r7, #24]
10002310:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10002312:	683b      	ldr	r3, [r7, #0]
10002314:	685b      	ldr	r3, [r3, #4]
10002316:	2b01      	cmp	r3, #1
10002318:	d00b      	beq.n	10002332 <HAL_GPIO_Init+0xde>
1000231a:	683b      	ldr	r3, [r7, #0]
1000231c:	685b      	ldr	r3, [r3, #4]
1000231e:	2b02      	cmp	r3, #2
10002320:	d007      	beq.n	10002332 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10002322:	683b      	ldr	r3, [r7, #0]
10002324:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10002326:	2b11      	cmp	r3, #17
10002328:	d003      	beq.n	10002332 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000232a:	683b      	ldr	r3, [r7, #0]
1000232c:	685b      	ldr	r3, [r3, #4]
1000232e:	2b12      	cmp	r3, #18
10002330:	d130      	bne.n	10002394 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10002332:	687b      	ldr	r3, [r7, #4]
10002334:	689b      	ldr	r3, [r3, #8]
10002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10002338:	69fb      	ldr	r3, [r7, #28]
1000233a:	005b      	lsls	r3, r3, #1
1000233c:	2203      	movs	r2, #3
1000233e:	fa02 f303 	lsl.w	r3, r2, r3
10002342:	43db      	mvns	r3, r3
10002344:	69ba      	ldr	r2, [r7, #24]
10002346:	4013      	ands	r3, r2
10002348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
1000234a:	683b      	ldr	r3, [r7, #0]
1000234c:	68da      	ldr	r2, [r3, #12]
1000234e:	69fb      	ldr	r3, [r7, #28]
10002350:	005b      	lsls	r3, r3, #1
10002352:	fa02 f303 	lsl.w	r3, r2, r3
10002356:	69ba      	ldr	r2, [r7, #24]
10002358:	4313      	orrs	r3, r2
1000235a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
1000235c:	687b      	ldr	r3, [r7, #4]
1000235e:	69ba      	ldr	r2, [r7, #24]
10002360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10002362:	687b      	ldr	r3, [r7, #4]
10002364:	685b      	ldr	r3, [r3, #4]
10002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10002368:	2201      	movs	r2, #1
1000236a:	69fb      	ldr	r3, [r7, #28]
1000236c:	fa02 f303 	lsl.w	r3, r2, r3
10002370:	43db      	mvns	r3, r3
10002372:	69ba      	ldr	r2, [r7, #24]
10002374:	4013      	ands	r3, r2
10002376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10002378:	683b      	ldr	r3, [r7, #0]
1000237a:	685b      	ldr	r3, [r3, #4]
1000237c:	091b      	lsrs	r3, r3, #4
1000237e:	f003 0201 	and.w	r2, r3, #1
10002382:	69fb      	ldr	r3, [r7, #28]
10002384:	fa02 f303 	lsl.w	r3, r2, r3
10002388:	69ba      	ldr	r2, [r7, #24]
1000238a:	4313      	orrs	r3, r2
1000238c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
1000238e:	687b      	ldr	r3, [r7, #4]
10002390:	69ba      	ldr	r2, [r7, #24]
10002392:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10002394:	687b      	ldr	r3, [r7, #4]
10002396:	68db      	ldr	r3, [r3, #12]
10002398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
1000239a:	69fb      	ldr	r3, [r7, #28]
1000239c:	005b      	lsls	r3, r3, #1
1000239e:	2203      	movs	r2, #3
100023a0:	fa02 f303 	lsl.w	r3, r2, r3
100023a4:	43db      	mvns	r3, r3
100023a6:	69ba      	ldr	r2, [r7, #24]
100023a8:	4013      	ands	r3, r2
100023aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
100023ac:	683b      	ldr	r3, [r7, #0]
100023ae:	689a      	ldr	r2, [r3, #8]
100023b0:	69fb      	ldr	r3, [r7, #28]
100023b2:	005b      	lsls	r3, r3, #1
100023b4:	fa02 f303 	lsl.w	r3, r2, r3
100023b8:	69ba      	ldr	r2, [r7, #24]
100023ba:	4313      	orrs	r3, r2
100023bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
100023be:	687b      	ldr	r3, [r7, #4]
100023c0:	69ba      	ldr	r2, [r7, #24]
100023c2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
100023c4:	683b      	ldr	r3, [r7, #0]
100023c6:	685b      	ldr	r3, [r3, #4]
100023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
100023cc:	2b00      	cmp	r3, #0
100023ce:	f000 80da 	beq.w	10002586 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
100023d2:	4a2e      	ldr	r2, [pc, #184]	@ (1000248c <HAL_GPIO_Init+0x238>)
100023d4:	69fb      	ldr	r3, [r7, #28]
100023d6:	089b      	lsrs	r3, r3, #2
100023d8:	3318      	adds	r3, #24
100023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
100023e0:	69fb      	ldr	r3, [r7, #28]
100023e2:	f003 0303 	and.w	r3, r3, #3
100023e6:	00db      	lsls	r3, r3, #3
100023e8:	22ff      	movs	r2, #255	@ 0xff
100023ea:	fa02 f303 	lsl.w	r3, r2, r3
100023ee:	43db      	mvns	r3, r3
100023f0:	69ba      	ldr	r2, [r7, #24]
100023f2:	4013      	ands	r3, r2
100023f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
100023f6:	687b      	ldr	r3, [r7, #4]
100023f8:	4a25      	ldr	r2, [pc, #148]	@ (10002490 <HAL_GPIO_Init+0x23c>)
100023fa:	4293      	cmp	r3, r2
100023fc:	d05e      	beq.n	100024bc <HAL_GPIO_Init+0x268>
100023fe:	687b      	ldr	r3, [r7, #4]
10002400:	4a24      	ldr	r2, [pc, #144]	@ (10002494 <HAL_GPIO_Init+0x240>)
10002402:	4293      	cmp	r3, r2
10002404:	d03d      	beq.n	10002482 <HAL_GPIO_Init+0x22e>
10002406:	687b      	ldr	r3, [r7, #4]
10002408:	4a23      	ldr	r2, [pc, #140]	@ (10002498 <HAL_GPIO_Init+0x244>)
1000240a:	4293      	cmp	r3, r2
1000240c:	d037      	beq.n	1000247e <HAL_GPIO_Init+0x22a>
1000240e:	687b      	ldr	r3, [r7, #4]
10002410:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
10002414:	d031      	beq.n	1000247a <HAL_GPIO_Init+0x226>
10002416:	687b      	ldr	r3, [r7, #4]
10002418:	4a20      	ldr	r2, [pc, #128]	@ (1000249c <HAL_GPIO_Init+0x248>)
1000241a:	4293      	cmp	r3, r2
1000241c:	d02b      	beq.n	10002476 <HAL_GPIO_Init+0x222>
1000241e:	687b      	ldr	r3, [r7, #4]
10002420:	4a1f      	ldr	r2, [pc, #124]	@ (100024a0 <HAL_GPIO_Init+0x24c>)
10002422:	4293      	cmp	r3, r2
10002424:	d025      	beq.n	10002472 <HAL_GPIO_Init+0x21e>
10002426:	687b      	ldr	r3, [r7, #4]
10002428:	4a1e      	ldr	r2, [pc, #120]	@ (100024a4 <HAL_GPIO_Init+0x250>)
1000242a:	4293      	cmp	r3, r2
1000242c:	d01f      	beq.n	1000246e <HAL_GPIO_Init+0x21a>
1000242e:	687b      	ldr	r3, [r7, #4]
10002430:	4a1d      	ldr	r2, [pc, #116]	@ (100024a8 <HAL_GPIO_Init+0x254>)
10002432:	4293      	cmp	r3, r2
10002434:	d019      	beq.n	1000246a <HAL_GPIO_Init+0x216>
10002436:	687b      	ldr	r3, [r7, #4]
10002438:	4a1c      	ldr	r2, [pc, #112]	@ (100024ac <HAL_GPIO_Init+0x258>)
1000243a:	4293      	cmp	r3, r2
1000243c:	d013      	beq.n	10002466 <HAL_GPIO_Init+0x212>
1000243e:	687b      	ldr	r3, [r7, #4]
10002440:	4a1b      	ldr	r2, [pc, #108]	@ (100024b0 <HAL_GPIO_Init+0x25c>)
10002442:	4293      	cmp	r3, r2
10002444:	d00d      	beq.n	10002462 <HAL_GPIO_Init+0x20e>
10002446:	687b      	ldr	r3, [r7, #4]
10002448:	4a1a      	ldr	r2, [pc, #104]	@ (100024b4 <HAL_GPIO_Init+0x260>)
1000244a:	4293      	cmp	r3, r2
1000244c:	d007      	beq.n	1000245e <HAL_GPIO_Init+0x20a>
1000244e:	687b      	ldr	r3, [r7, #4]
10002450:	4a19      	ldr	r2, [pc, #100]	@ (100024b8 <HAL_GPIO_Init+0x264>)
10002452:	4293      	cmp	r3, r2
10002454:	d101      	bne.n	1000245a <HAL_GPIO_Init+0x206>
10002456:	230b      	movs	r3, #11
10002458:	e031      	b.n	100024be <HAL_GPIO_Init+0x26a>
1000245a:	2319      	movs	r3, #25
1000245c:	e02f      	b.n	100024be <HAL_GPIO_Init+0x26a>
1000245e:	230a      	movs	r3, #10
10002460:	e02d      	b.n	100024be <HAL_GPIO_Init+0x26a>
10002462:	2309      	movs	r3, #9
10002464:	e02b      	b.n	100024be <HAL_GPIO_Init+0x26a>
10002466:	2308      	movs	r3, #8
10002468:	e029      	b.n	100024be <HAL_GPIO_Init+0x26a>
1000246a:	2307      	movs	r3, #7
1000246c:	e027      	b.n	100024be <HAL_GPIO_Init+0x26a>
1000246e:	2306      	movs	r3, #6
10002470:	e025      	b.n	100024be <HAL_GPIO_Init+0x26a>
10002472:	2305      	movs	r3, #5
10002474:	e023      	b.n	100024be <HAL_GPIO_Init+0x26a>
10002476:	2304      	movs	r3, #4
10002478:	e021      	b.n	100024be <HAL_GPIO_Init+0x26a>
1000247a:	2303      	movs	r3, #3
1000247c:	e01f      	b.n	100024be <HAL_GPIO_Init+0x26a>
1000247e:	2302      	movs	r3, #2
10002480:	e01d      	b.n	100024be <HAL_GPIO_Init+0x26a>
10002482:	2301      	movs	r3, #1
10002484:	e01b      	b.n	100024be <HAL_GPIO_Init+0x26a>
10002486:	bf00      	nop
10002488:	5000d0c0 	.word	0x5000d0c0
1000248c:	5000d000 	.word	0x5000d000
10002490:	50002000 	.word	0x50002000
10002494:	50003000 	.word	0x50003000
10002498:	50004000 	.word	0x50004000
1000249c:	50006000 	.word	0x50006000
100024a0:	50007000 	.word	0x50007000
100024a4:	50008000 	.word	0x50008000
100024a8:	50009000 	.word	0x50009000
100024ac:	5000a000 	.word	0x5000a000
100024b0:	5000b000 	.word	0x5000b000
100024b4:	5000c000 	.word	0x5000c000
100024b8:	54004000 	.word	0x54004000
100024bc:	2300      	movs	r3, #0
100024be:	69fa      	ldr	r2, [r7, #28]
100024c0:	f002 0203 	and.w	r2, r2, #3
100024c4:	00d2      	lsls	r2, r2, #3
100024c6:	4093      	lsls	r3, r2
100024c8:	461a      	mov	r2, r3
100024ca:	69bb      	ldr	r3, [r7, #24]
100024cc:	4313      	orrs	r3, r2
100024ce:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
100024d0:	4934      	ldr	r1, [pc, #208]	@ (100025a4 <HAL_GPIO_Init+0x350>)
100024d2:	69fb      	ldr	r3, [r7, #28]
100024d4:	089b      	lsrs	r3, r3, #2
100024d6:	3318      	adds	r3, #24
100024d8:	69ba      	ldr	r2, [r7, #24]
100024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
100024de:	697b      	ldr	r3, [r7, #20]
100024e0:	681b      	ldr	r3, [r3, #0]
100024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100024e4:	68fb      	ldr	r3, [r7, #12]
100024e6:	43db      	mvns	r3, r3
100024e8:	69ba      	ldr	r2, [r7, #24]
100024ea:	4013      	ands	r3, r2
100024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
100024ee:	683b      	ldr	r3, [r7, #0]
100024f0:	685b      	ldr	r3, [r3, #4]
100024f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
100024f6:	2b00      	cmp	r3, #0
100024f8:	d003      	beq.n	10002502 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
100024fa:	69ba      	ldr	r2, [r7, #24]
100024fc:	68fb      	ldr	r3, [r7, #12]
100024fe:	4313      	orrs	r3, r2
10002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10002502:	697b      	ldr	r3, [r7, #20]
10002504:	69ba      	ldr	r2, [r7, #24]
10002506:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10002508:	697b      	ldr	r3, [r7, #20]
1000250a:	685b      	ldr	r3, [r3, #4]
1000250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000250e:	68fb      	ldr	r3, [r7, #12]
10002510:	43db      	mvns	r3, r3
10002512:	69ba      	ldr	r2, [r7, #24]
10002514:	4013      	ands	r3, r2
10002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10002518:	683b      	ldr	r3, [r7, #0]
1000251a:	685b      	ldr	r3, [r3, #4]
1000251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
10002520:	2b00      	cmp	r3, #0
10002522:	d003      	beq.n	1000252c <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10002524:	69ba      	ldr	r2, [r7, #24]
10002526:	68fb      	ldr	r3, [r7, #12]
10002528:	4313      	orrs	r3, r2
1000252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
1000252c:	697b      	ldr	r3, [r7, #20]
1000252e:	69ba      	ldr	r2, [r7, #24]
10002530:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10002532:	4b1c      	ldr	r3, [pc, #112]	@ (100025a4 <HAL_GPIO_Init+0x350>)
10002534:	681b      	ldr	r3, [r3, #0]
10002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10002538:	68fb      	ldr	r3, [r7, #12]
1000253a:	43db      	mvns	r3, r3
1000253c:	69ba      	ldr	r2, [r7, #24]
1000253e:	4013      	ands	r3, r2
10002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10002542:	683b      	ldr	r3, [r7, #0]
10002544:	685b      	ldr	r3, [r3, #4]
10002546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
1000254a:	2b00      	cmp	r3, #0
1000254c:	d003      	beq.n	10002556 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
1000254e:	69ba      	ldr	r2, [r7, #24]
10002550:	68fb      	ldr	r3, [r7, #12]
10002552:	4313      	orrs	r3, r2
10002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10002556:	4a13      	ldr	r2, [pc, #76]	@ (100025a4 <HAL_GPIO_Init+0x350>)
10002558:	69bb      	ldr	r3, [r7, #24]
1000255a:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
1000255c:	4b11      	ldr	r3, [pc, #68]	@ (100025a4 <HAL_GPIO_Init+0x350>)
1000255e:	685b      	ldr	r3, [r3, #4]
10002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10002562:	68fb      	ldr	r3, [r7, #12]
10002564:	43db      	mvns	r3, r3
10002566:	69ba      	ldr	r2, [r7, #24]
10002568:	4013      	ands	r3, r2
1000256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
1000256c:	683b      	ldr	r3, [r7, #0]
1000256e:	685b      	ldr	r3, [r3, #4]
10002570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
10002574:	2b00      	cmp	r3, #0
10002576:	d003      	beq.n	10002580 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10002578:	69ba      	ldr	r2, [r7, #24]
1000257a:	68fb      	ldr	r3, [r7, #12]
1000257c:	4313      	orrs	r3, r2
1000257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10002580:	4a08      	ldr	r2, [pc, #32]	@ (100025a4 <HAL_GPIO_Init+0x350>)
10002582:	69bb      	ldr	r3, [r7, #24]
10002584:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10002586:	69fb      	ldr	r3, [r7, #28]
10002588:	3301      	adds	r3, #1
1000258a:	61fb      	str	r3, [r7, #28]
1000258c:	69fb      	ldr	r3, [r7, #28]
1000258e:	2b0f      	cmp	r3, #15
10002590:	f67f ae6a 	bls.w	10002268 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10002594:	bf00      	nop
10002596:	bf00      	nop
10002598:	3724      	adds	r7, #36	@ 0x24
1000259a:	46bd      	mov	sp, r7
1000259c:	f85d 7b04 	ldr.w	r7, [sp], #4
100025a0:	4770      	bx	lr
100025a2:	bf00      	nop
100025a4:	5000d000 	.word	0x5000d000

100025a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
100025a8:	b480      	push	{r7}
100025aa:	b083      	sub	sp, #12
100025ac:	af00      	add	r7, sp, #0
100025ae:	6078      	str	r0, [r7, #4]
100025b0:	460b      	mov	r3, r1
100025b2:	807b      	strh	r3, [r7, #2]
100025b4:	4613      	mov	r3, r2
100025b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
100025b8:	787b      	ldrb	r3, [r7, #1]
100025ba:	2b00      	cmp	r3, #0
100025bc:	d003      	beq.n	100025c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
100025be:	887a      	ldrh	r2, [r7, #2]
100025c0:	687b      	ldr	r3, [r7, #4]
100025c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
100025c4:	e003      	b.n	100025ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
100025c6:	887b      	ldrh	r3, [r7, #2]
100025c8:	041a      	lsls	r2, r3, #16
100025ca:	687b      	ldr	r3, [r7, #4]
100025cc:	619a      	str	r2, [r3, #24]
}
100025ce:	bf00      	nop
100025d0:	370c      	adds	r7, #12
100025d2:	46bd      	mov	sp, r7
100025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100025d8:	4770      	bx	lr

100025da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
100025da:	b480      	push	{r7}
100025dc:	b083      	sub	sp, #12
100025de:	af00      	add	r7, sp, #0
100025e0:	6078      	str	r0, [r7, #4]
100025e2:	460b      	mov	r3, r1
100025e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
100025e6:	687b      	ldr	r3, [r7, #4]
100025e8:	695a      	ldr	r2, [r3, #20]
100025ea:	887b      	ldrh	r3, [r7, #2]
100025ec:	4013      	ands	r3, r2
100025ee:	2b00      	cmp	r3, #0
100025f0:	d003      	beq.n	100025fa <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
100025f2:	887a      	ldrh	r2, [r7, #2]
100025f4:	687b      	ldr	r3, [r7, #4]
100025f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
100025f8:	e002      	b.n	10002600 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
100025fa:	887a      	ldrh	r2, [r7, #2]
100025fc:	687b      	ldr	r3, [r7, #4]
100025fe:	619a      	str	r2, [r3, #24]
}
10002600:	bf00      	nop
10002602:	370c      	adds	r7, #12
10002604:	46bd      	mov	sp, r7
10002606:	f85d 7b04 	ldr.w	r7, [sp], #4
1000260a:	4770      	bx	lr

1000260c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
1000260c:	b480      	push	{r7}
1000260e:	b083      	sub	sp, #12
10002610:	af00      	add	r7, sp, #0
10002612:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
10002614:	f04f 4298 	mov.w	r2, #1275068416	@ 0x4c000000
10002618:	687b      	ldr	r3, [r7, #4]
1000261a:	3320      	adds	r3, #32
1000261c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10002620:	4a05      	ldr	r2, [pc, #20]	@ (10002638 <HAL_HSEM_FastTake+0x2c>)
10002622:	4293      	cmp	r3, r2
10002624:	d101      	bne.n	1000262a <HAL_HSEM_FastTake+0x1e>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
10002626:	2300      	movs	r3, #0
10002628:	e000      	b.n	1000262c <HAL_HSEM_FastTake+0x20>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
1000262a:	2301      	movs	r3, #1
}
1000262c:	4618      	mov	r0, r3
1000262e:	370c      	adds	r7, #12
10002630:	46bd      	mov	sp, r7
10002632:	f85d 7b04 	ldr.w	r7, [sp], #4
10002636:	4770      	bx	lr
10002638:	80000200 	.word	0x80000200

1000263c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
1000263c:	b480      	push	{r7}
1000263e:	b083      	sub	sp, #12
10002640:	af00      	add	r7, sp, #0
10002642:	6078      	str	r0, [r7, #4]
10002644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
10002646:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
1000264a:	683b      	ldr	r3, [r7, #0]
1000264c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
10002650:	687b      	ldr	r3, [r7, #4]
10002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
10002656:	bf00      	nop
10002658:	370c      	adds	r7, #12
1000265a:	46bd      	mov	sp, r7
1000265c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002660:	4770      	bx	lr

10002662 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
10002662:	b580      	push	{r7, lr}
10002664:	b082      	sub	sp, #8
10002666:	af00      	add	r7, sp, #0
10002668:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
1000266a:	687b      	ldr	r3, [r7, #4]
1000266c:	2b00      	cmp	r3, #0
1000266e:	d101      	bne.n	10002674 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
10002670:	2301      	movs	r3, #1
10002672:	e081      	b.n	10002778 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
10002674:	687b      	ldr	r3, [r7, #4]
10002676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
1000267a:	b2db      	uxtb	r3, r3
1000267c:	2b00      	cmp	r3, #0
1000267e:	d106      	bne.n	1000268e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
10002680:	687b      	ldr	r3, [r7, #4]
10002682:	2200      	movs	r2, #0
10002684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
10002688:	6878      	ldr	r0, [r7, #4]
1000268a:	f7fe fe0f 	bl	100012ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
1000268e:	687b      	ldr	r3, [r7, #4]
10002690:	2224      	movs	r2, #36	@ 0x24
10002692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
10002696:	687b      	ldr	r3, [r7, #4]
10002698:	681b      	ldr	r3, [r3, #0]
1000269a:	681a      	ldr	r2, [r3, #0]
1000269c:	687b      	ldr	r3, [r7, #4]
1000269e:	681b      	ldr	r3, [r3, #0]
100026a0:	f022 0201 	bic.w	r2, r2, #1
100026a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
100026a6:	687b      	ldr	r3, [r7, #4]
100026a8:	685a      	ldr	r2, [r3, #4]
100026aa:	687b      	ldr	r3, [r7, #4]
100026ac:	681b      	ldr	r3, [r3, #0]
100026ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
100026b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
100026b4:	687b      	ldr	r3, [r7, #4]
100026b6:	681b      	ldr	r3, [r3, #0]
100026b8:	689a      	ldr	r2, [r3, #8]
100026ba:	687b      	ldr	r3, [r7, #4]
100026bc:	681b      	ldr	r3, [r3, #0]
100026be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
100026c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
100026c4:	687b      	ldr	r3, [r7, #4]
100026c6:	68db      	ldr	r3, [r3, #12]
100026c8:	2b01      	cmp	r3, #1
100026ca:	d107      	bne.n	100026dc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
100026cc:	687b      	ldr	r3, [r7, #4]
100026ce:	689a      	ldr	r2, [r3, #8]
100026d0:	687b      	ldr	r3, [r7, #4]
100026d2:	681b      	ldr	r3, [r3, #0]
100026d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
100026d8:	609a      	str	r2, [r3, #8]
100026da:	e006      	b.n	100026ea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
100026dc:	687b      	ldr	r3, [r7, #4]
100026de:	689a      	ldr	r2, [r3, #8]
100026e0:	687b      	ldr	r3, [r7, #4]
100026e2:	681b      	ldr	r3, [r3, #0]
100026e4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
100026e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
100026ea:	687b      	ldr	r3, [r7, #4]
100026ec:	68db      	ldr	r3, [r3, #12]
100026ee:	2b02      	cmp	r3, #2
100026f0:	d104      	bne.n	100026fc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
100026f2:	687b      	ldr	r3, [r7, #4]
100026f4:	681b      	ldr	r3, [r3, #0]
100026f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
100026fa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
100026fc:	687b      	ldr	r3, [r7, #4]
100026fe:	681b      	ldr	r3, [r3, #0]
10002700:	685b      	ldr	r3, [r3, #4]
10002702:	687a      	ldr	r2, [r7, #4]
10002704:	6812      	ldr	r2, [r2, #0]
10002706:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
1000270a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
1000270e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
10002710:	687b      	ldr	r3, [r7, #4]
10002712:	681b      	ldr	r3, [r3, #0]
10002714:	68da      	ldr	r2, [r3, #12]
10002716:	687b      	ldr	r3, [r7, #4]
10002718:	681b      	ldr	r3, [r3, #0]
1000271a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
1000271e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
10002720:	687b      	ldr	r3, [r7, #4]
10002722:	691a      	ldr	r2, [r3, #16]
10002724:	687b      	ldr	r3, [r7, #4]
10002726:	695b      	ldr	r3, [r3, #20]
10002728:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
1000272c:	687b      	ldr	r3, [r7, #4]
1000272e:	699b      	ldr	r3, [r3, #24]
10002730:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
10002732:	687b      	ldr	r3, [r7, #4]
10002734:	681b      	ldr	r3, [r3, #0]
10002736:	430a      	orrs	r2, r1
10002738:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
1000273a:	687b      	ldr	r3, [r7, #4]
1000273c:	69d9      	ldr	r1, [r3, #28]
1000273e:	687b      	ldr	r3, [r7, #4]
10002740:	6a1a      	ldr	r2, [r3, #32]
10002742:	687b      	ldr	r3, [r7, #4]
10002744:	681b      	ldr	r3, [r3, #0]
10002746:	430a      	orrs	r2, r1
10002748:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
1000274a:	687b      	ldr	r3, [r7, #4]
1000274c:	681b      	ldr	r3, [r3, #0]
1000274e:	681a      	ldr	r2, [r3, #0]
10002750:	687b      	ldr	r3, [r7, #4]
10002752:	681b      	ldr	r3, [r3, #0]
10002754:	f042 0201 	orr.w	r2, r2, #1
10002758:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
1000275a:	687b      	ldr	r3, [r7, #4]
1000275c:	2200      	movs	r2, #0
1000275e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
10002760:	687b      	ldr	r3, [r7, #4]
10002762:	2220      	movs	r2, #32
10002764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
10002768:	687b      	ldr	r3, [r7, #4]
1000276a:	2200      	movs	r2, #0
1000276c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
1000276e:	687b      	ldr	r3, [r7, #4]
10002770:	2200      	movs	r2, #0
10002772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
10002776:	2300      	movs	r3, #0
}
10002778:	4618      	mov	r0, r3
1000277a:	3708      	adds	r7, #8
1000277c:	46bd      	mov	sp, r7
1000277e:	bd80      	pop	{r7, pc}

10002780 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10002780:	b580      	push	{r7, lr}
10002782:	b088      	sub	sp, #32
10002784:	af02      	add	r7, sp, #8
10002786:	60f8      	str	r0, [r7, #12]
10002788:	4608      	mov	r0, r1
1000278a:	4611      	mov	r1, r2
1000278c:	461a      	mov	r2, r3
1000278e:	4603      	mov	r3, r0
10002790:	817b      	strh	r3, [r7, #10]
10002792:	460b      	mov	r3, r1
10002794:	813b      	strh	r3, [r7, #8]
10002796:	4613      	mov	r3, r2
10002798:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
1000279a:	68fb      	ldr	r3, [r7, #12]
1000279c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
100027a0:	b2db      	uxtb	r3, r3
100027a2:	2b20      	cmp	r3, #32
100027a4:	f040 80f9 	bne.w	1000299a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
100027a8:	6a3b      	ldr	r3, [r7, #32]
100027aa:	2b00      	cmp	r3, #0
100027ac:	d002      	beq.n	100027b4 <HAL_I2C_Mem_Write+0x34>
100027ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
100027b0:	2b00      	cmp	r3, #0
100027b2:	d105      	bne.n	100027c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
100027b4:	68fb      	ldr	r3, [r7, #12]
100027b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
100027ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
100027bc:	2301      	movs	r3, #1
100027be:	e0ed      	b.n	1000299c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
100027c0:	68fb      	ldr	r3, [r7, #12]
100027c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
100027c6:	2b01      	cmp	r3, #1
100027c8:	d101      	bne.n	100027ce <HAL_I2C_Mem_Write+0x4e>
100027ca:	2302      	movs	r3, #2
100027cc:	e0e6      	b.n	1000299c <HAL_I2C_Mem_Write+0x21c>
100027ce:	68fb      	ldr	r3, [r7, #12]
100027d0:	2201      	movs	r2, #1
100027d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
100027d6:	f7ff fa43 	bl	10001c60 <HAL_GetTick>
100027da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
100027dc:	697b      	ldr	r3, [r7, #20]
100027de:	9300      	str	r3, [sp, #0]
100027e0:	2319      	movs	r3, #25
100027e2:	2201      	movs	r2, #1
100027e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
100027e8:	68f8      	ldr	r0, [r7, #12]
100027ea:	f000 fe74 	bl	100034d6 <I2C_WaitOnFlagUntilTimeout>
100027ee:	4603      	mov	r3, r0
100027f0:	2b00      	cmp	r3, #0
100027f2:	d001      	beq.n	100027f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
100027f4:	2301      	movs	r3, #1
100027f6:	e0d1      	b.n	1000299c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
100027f8:	68fb      	ldr	r3, [r7, #12]
100027fa:	2221      	movs	r2, #33	@ 0x21
100027fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
10002800:	68fb      	ldr	r3, [r7, #12]
10002802:	2240      	movs	r2, #64	@ 0x40
10002804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10002808:	68fb      	ldr	r3, [r7, #12]
1000280a:	2200      	movs	r2, #0
1000280c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
1000280e:	68fb      	ldr	r3, [r7, #12]
10002810:	6a3a      	ldr	r2, [r7, #32]
10002812:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
10002814:	68fb      	ldr	r3, [r7, #12]
10002816:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
10002818:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
1000281a:	68fb      	ldr	r3, [r7, #12]
1000281c:	2200      	movs	r2, #0
1000281e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
10002820:	88f8      	ldrh	r0, [r7, #6]
10002822:	893a      	ldrh	r2, [r7, #8]
10002824:	8979      	ldrh	r1, [r7, #10]
10002826:	697b      	ldr	r3, [r7, #20]
10002828:	9301      	str	r3, [sp, #4]
1000282a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000282c:	9300      	str	r3, [sp, #0]
1000282e:	4603      	mov	r3, r0
10002830:	68f8      	ldr	r0, [r7, #12]
10002832:	f000 fa79 	bl	10002d28 <I2C_RequestMemoryWrite>
10002836:	4603      	mov	r3, r0
10002838:	2b00      	cmp	r3, #0
1000283a:	d005      	beq.n	10002848 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1000283c:	68fb      	ldr	r3, [r7, #12]
1000283e:	2200      	movs	r2, #0
10002840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
10002844:	2301      	movs	r3, #1
10002846:	e0a9      	b.n	1000299c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10002848:	68fb      	ldr	r3, [r7, #12]
1000284a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1000284c:	b29b      	uxth	r3, r3
1000284e:	2bff      	cmp	r3, #255	@ 0xff
10002850:	d90e      	bls.n	10002870 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10002852:	68fb      	ldr	r3, [r7, #12]
10002854:	22ff      	movs	r2, #255	@ 0xff
10002856:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
10002858:	68fb      	ldr	r3, [r7, #12]
1000285a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1000285c:	b2da      	uxtb	r2, r3
1000285e:	8979      	ldrh	r1, [r7, #10]
10002860:	2300      	movs	r3, #0
10002862:	9300      	str	r3, [sp, #0]
10002864:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
10002868:	68f8      	ldr	r0, [r7, #12]
1000286a:	f000 ffdd 	bl	10003828 <I2C_TransferConfig>
1000286e:	e00f      	b.n	10002890 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10002870:	68fb      	ldr	r3, [r7, #12]
10002872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10002874:	b29a      	uxth	r2, r3
10002876:	68fb      	ldr	r3, [r7, #12]
10002878:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
1000287a:	68fb      	ldr	r3, [r7, #12]
1000287c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1000287e:	b2da      	uxtb	r2, r3
10002880:	8979      	ldrh	r1, [r7, #10]
10002882:	2300      	movs	r3, #0
10002884:	9300      	str	r3, [sp, #0]
10002886:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
1000288a:	68f8      	ldr	r0, [r7, #12]
1000288c:	f000 ffcc 	bl	10003828 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
10002890:	697a      	ldr	r2, [r7, #20]
10002892:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
10002894:	68f8      	ldr	r0, [r7, #12]
10002896:	f000 fe5e 	bl	10003556 <I2C_WaitOnTXISFlagUntilTimeout>
1000289a:	4603      	mov	r3, r0
1000289c:	2b00      	cmp	r3, #0
1000289e:	d001      	beq.n	100028a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
100028a0:	2301      	movs	r3, #1
100028a2:	e07b      	b.n	1000299c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
100028a4:	68fb      	ldr	r3, [r7, #12]
100028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100028a8:	781a      	ldrb	r2, [r3, #0]
100028aa:	68fb      	ldr	r3, [r7, #12]
100028ac:	681b      	ldr	r3, [r3, #0]
100028ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100028b0:	68fb      	ldr	r3, [r7, #12]
100028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100028b4:	1c5a      	adds	r2, r3, #1
100028b6:	68fb      	ldr	r3, [r7, #12]
100028b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
100028ba:	68fb      	ldr	r3, [r7, #12]
100028bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100028be:	b29b      	uxth	r3, r3
100028c0:	3b01      	subs	r3, #1
100028c2:	b29a      	uxth	r2, r3
100028c4:	68fb      	ldr	r3, [r7, #12]
100028c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
100028c8:	68fb      	ldr	r3, [r7, #12]
100028ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100028cc:	3b01      	subs	r3, #1
100028ce:	b29a      	uxth	r2, r3
100028d0:	68fb      	ldr	r3, [r7, #12]
100028d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
100028d4:	68fb      	ldr	r3, [r7, #12]
100028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100028d8:	b29b      	uxth	r3, r3
100028da:	2b00      	cmp	r3, #0
100028dc:	d034      	beq.n	10002948 <HAL_I2C_Mem_Write+0x1c8>
100028de:	68fb      	ldr	r3, [r7, #12]
100028e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100028e2:	2b00      	cmp	r3, #0
100028e4:	d130      	bne.n	10002948 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
100028e6:	697b      	ldr	r3, [r7, #20]
100028e8:	9300      	str	r3, [sp, #0]
100028ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100028ec:	2200      	movs	r2, #0
100028ee:	2180      	movs	r1, #128	@ 0x80
100028f0:	68f8      	ldr	r0, [r7, #12]
100028f2:	f000 fdf0 	bl	100034d6 <I2C_WaitOnFlagUntilTimeout>
100028f6:	4603      	mov	r3, r0
100028f8:	2b00      	cmp	r3, #0
100028fa:	d001      	beq.n	10002900 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
100028fc:	2301      	movs	r3, #1
100028fe:	e04d      	b.n	1000299c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
10002900:	68fb      	ldr	r3, [r7, #12]
10002902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10002904:	b29b      	uxth	r3, r3
10002906:	2bff      	cmp	r3, #255	@ 0xff
10002908:	d90e      	bls.n	10002928 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
1000290a:	68fb      	ldr	r3, [r7, #12]
1000290c:	22ff      	movs	r2, #255	@ 0xff
1000290e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
10002910:	68fb      	ldr	r3, [r7, #12]
10002912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10002914:	b2da      	uxtb	r2, r3
10002916:	8979      	ldrh	r1, [r7, #10]
10002918:	2300      	movs	r3, #0
1000291a:	9300      	str	r3, [sp, #0]
1000291c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
10002920:	68f8      	ldr	r0, [r7, #12]
10002922:	f000 ff81 	bl	10003828 <I2C_TransferConfig>
10002926:	e00f      	b.n	10002948 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
10002928:	68fb      	ldr	r3, [r7, #12]
1000292a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1000292c:	b29a      	uxth	r2, r3
1000292e:	68fb      	ldr	r3, [r7, #12]
10002930:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
10002932:	68fb      	ldr	r3, [r7, #12]
10002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10002936:	b2da      	uxtb	r2, r3
10002938:	8979      	ldrh	r1, [r7, #10]
1000293a:	2300      	movs	r3, #0
1000293c:	9300      	str	r3, [sp, #0]
1000293e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
10002942:	68f8      	ldr	r0, [r7, #12]
10002944:	f000 ff70 	bl	10003828 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
10002948:	68fb      	ldr	r3, [r7, #12]
1000294a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1000294c:	b29b      	uxth	r3, r3
1000294e:	2b00      	cmp	r3, #0
10002950:	d19e      	bne.n	10002890 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
10002952:	697a      	ldr	r2, [r7, #20]
10002954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
10002956:	68f8      	ldr	r0, [r7, #12]
10002958:	f000 fe3d 	bl	100035d6 <I2C_WaitOnSTOPFlagUntilTimeout>
1000295c:	4603      	mov	r3, r0
1000295e:	2b00      	cmp	r3, #0
10002960:	d001      	beq.n	10002966 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
10002962:	2301      	movs	r3, #1
10002964:	e01a      	b.n	1000299c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10002966:	68fb      	ldr	r3, [r7, #12]
10002968:	681b      	ldr	r3, [r3, #0]
1000296a:	2220      	movs	r2, #32
1000296c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
1000296e:	68fb      	ldr	r3, [r7, #12]
10002970:	681b      	ldr	r3, [r3, #0]
10002972:	6859      	ldr	r1, [r3, #4]
10002974:	68fb      	ldr	r3, [r7, #12]
10002976:	681a      	ldr	r2, [r3, #0]
10002978:	4b0a      	ldr	r3, [pc, #40]	@ (100029a4 <HAL_I2C_Mem_Write+0x224>)
1000297a:	400b      	ands	r3, r1
1000297c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
1000297e:	68fb      	ldr	r3, [r7, #12]
10002980:	2220      	movs	r2, #32
10002982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
10002986:	68fb      	ldr	r3, [r7, #12]
10002988:	2200      	movs	r2, #0
1000298a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1000298e:	68fb      	ldr	r3, [r7, #12]
10002990:	2200      	movs	r2, #0
10002992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
10002996:	2300      	movs	r3, #0
10002998:	e000      	b.n	1000299c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
1000299a:	2302      	movs	r3, #2
  }
}
1000299c:	4618      	mov	r0, r3
1000299e:	3718      	adds	r7, #24
100029a0:	46bd      	mov	sp, r7
100029a2:	bd80      	pop	{r7, pc}
100029a4:	fe00e800 	.word	0xfe00e800

100029a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
100029a8:	b580      	push	{r7, lr}
100029aa:	b084      	sub	sp, #16
100029ac:	af00      	add	r7, sp, #0
100029ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
100029b0:	687b      	ldr	r3, [r7, #4]
100029b2:	681b      	ldr	r3, [r3, #0]
100029b4:	699b      	ldr	r3, [r3, #24]
100029b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
100029b8:	687b      	ldr	r3, [r7, #4]
100029ba:	681b      	ldr	r3, [r3, #0]
100029bc:	681b      	ldr	r3, [r3, #0]
100029be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
100029c0:	687b      	ldr	r3, [r7, #4]
100029c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100029c4:	2b00      	cmp	r3, #0
100029c6:	d005      	beq.n	100029d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
100029c8:	687b      	ldr	r3, [r7, #4]
100029ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100029cc:	68ba      	ldr	r2, [r7, #8]
100029ce:	68f9      	ldr	r1, [r7, #12]
100029d0:	6878      	ldr	r0, [r7, #4]
100029d2:	4798      	blx	r3
  }
}
100029d4:	bf00      	nop
100029d6:	3710      	adds	r7, #16
100029d8:	46bd      	mov	sp, r7
100029da:	bd80      	pop	{r7, pc}

100029dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
100029dc:	b580      	push	{r7, lr}
100029de:	b086      	sub	sp, #24
100029e0:	af00      	add	r7, sp, #0
100029e2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
100029e4:	687b      	ldr	r3, [r7, #4]
100029e6:	681b      	ldr	r3, [r3, #0]
100029e8:	699b      	ldr	r3, [r3, #24]
100029ea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
100029ec:	687b      	ldr	r3, [r7, #4]
100029ee:	681b      	ldr	r3, [r3, #0]
100029f0:	681b      	ldr	r3, [r3, #0]
100029f2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
100029f4:	697b      	ldr	r3, [r7, #20]
100029f6:	0a1b      	lsrs	r3, r3, #8
100029f8:	f003 0301 	and.w	r3, r3, #1
100029fc:	2b00      	cmp	r3, #0
100029fe:	d010      	beq.n	10002a22 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10002a00:	693b      	ldr	r3, [r7, #16]
10002a02:	09db      	lsrs	r3, r3, #7
10002a04:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10002a08:	2b00      	cmp	r3, #0
10002a0a:	d00a      	beq.n	10002a22 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
10002a0c:	687b      	ldr	r3, [r7, #4]
10002a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10002a10:	f043 0201 	orr.w	r2, r3, #1
10002a14:	687b      	ldr	r3, [r7, #4]
10002a16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
10002a18:	687b      	ldr	r3, [r7, #4]
10002a1a:	681b      	ldr	r3, [r3, #0]
10002a1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
10002a20:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10002a22:	697b      	ldr	r3, [r7, #20]
10002a24:	0a9b      	lsrs	r3, r3, #10
10002a26:	f003 0301 	and.w	r3, r3, #1
10002a2a:	2b00      	cmp	r3, #0
10002a2c:	d010      	beq.n	10002a50 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10002a2e:	693b      	ldr	r3, [r7, #16]
10002a30:	09db      	lsrs	r3, r3, #7
10002a32:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10002a36:	2b00      	cmp	r3, #0
10002a38:	d00a      	beq.n	10002a50 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
10002a3a:	687b      	ldr	r3, [r7, #4]
10002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10002a3e:	f043 0208 	orr.w	r2, r3, #8
10002a42:	687b      	ldr	r3, [r7, #4]
10002a44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
10002a46:	687b      	ldr	r3, [r7, #4]
10002a48:	681b      	ldr	r3, [r3, #0]
10002a4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
10002a4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10002a50:	697b      	ldr	r3, [r7, #20]
10002a52:	0a5b      	lsrs	r3, r3, #9
10002a54:	f003 0301 	and.w	r3, r3, #1
10002a58:	2b00      	cmp	r3, #0
10002a5a:	d010      	beq.n	10002a7e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10002a5c:	693b      	ldr	r3, [r7, #16]
10002a5e:	09db      	lsrs	r3, r3, #7
10002a60:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10002a64:	2b00      	cmp	r3, #0
10002a66:	d00a      	beq.n	10002a7e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
10002a68:	687b      	ldr	r3, [r7, #4]
10002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10002a6c:	f043 0202 	orr.w	r2, r3, #2
10002a70:	687b      	ldr	r3, [r7, #4]
10002a72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
10002a74:	687b      	ldr	r3, [r7, #4]
10002a76:	681b      	ldr	r3, [r3, #0]
10002a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
10002a7c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
10002a7e:	687b      	ldr	r3, [r7, #4]
10002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10002a82:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
10002a84:	68fb      	ldr	r3, [r7, #12]
10002a86:	f003 030b 	and.w	r3, r3, #11
10002a8a:	2b00      	cmp	r3, #0
10002a8c:	d003      	beq.n	10002a96 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
10002a8e:	68f9      	ldr	r1, [r7, #12]
10002a90:	6878      	ldr	r0, [r7, #4]
10002a92:	f000 fbdf 	bl	10003254 <I2C_ITError>
  }
}
10002a96:	bf00      	nop
10002a98:	3718      	adds	r7, #24
10002a9a:	46bd      	mov	sp, r7
10002a9c:	bd80      	pop	{r7, pc}

10002a9e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10002a9e:	b480      	push	{r7}
10002aa0:	b083      	sub	sp, #12
10002aa2:	af00      	add	r7, sp, #0
10002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
10002aa6:	bf00      	nop
10002aa8:	370c      	adds	r7, #12
10002aaa:	46bd      	mov	sp, r7
10002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
10002ab0:	4770      	bx	lr

10002ab2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10002ab2:	b480      	push	{r7}
10002ab4:	b083      	sub	sp, #12
10002ab6:	af00      	add	r7, sp, #0
10002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
10002aba:	bf00      	nop
10002abc:	370c      	adds	r7, #12
10002abe:	46bd      	mov	sp, r7
10002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
10002ac4:	4770      	bx	lr

10002ac6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
10002ac6:	b480      	push	{r7}
10002ac8:	b083      	sub	sp, #12
10002aca:	af00      	add	r7, sp, #0
10002acc:	6078      	str	r0, [r7, #4]
10002ace:	460b      	mov	r3, r1
10002ad0:	70fb      	strb	r3, [r7, #3]
10002ad2:	4613      	mov	r3, r2
10002ad4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
10002ad6:	bf00      	nop
10002ad8:	370c      	adds	r7, #12
10002ada:	46bd      	mov	sp, r7
10002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
10002ae0:	4770      	bx	lr

10002ae2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
10002ae2:	b480      	push	{r7}
10002ae4:	b083      	sub	sp, #12
10002ae6:	af00      	add	r7, sp, #0
10002ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
10002aea:	bf00      	nop
10002aec:	370c      	adds	r7, #12
10002aee:	46bd      	mov	sp, r7
10002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
10002af4:	4770      	bx	lr

10002af6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
10002af6:	b480      	push	{r7}
10002af8:	b083      	sub	sp, #12
10002afa:	af00      	add	r7, sp, #0
10002afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
10002afe:	bf00      	nop
10002b00:	370c      	adds	r7, #12
10002b02:	46bd      	mov	sp, r7
10002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
10002b08:	4770      	bx	lr

10002b0a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
10002b0a:	b480      	push	{r7}
10002b0c:	b083      	sub	sp, #12
10002b0e:	af00      	add	r7, sp, #0
10002b10:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
10002b12:	687b      	ldr	r3, [r7, #4]
10002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
10002b16:	4618      	mov	r0, r3
10002b18:	370c      	adds	r7, #12
10002b1a:	46bd      	mov	sp, r7
10002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002b20:	4770      	bx	lr

10002b22 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
10002b22:	b580      	push	{r7, lr}
10002b24:	b086      	sub	sp, #24
10002b26:	af00      	add	r7, sp, #0
10002b28:	60f8      	str	r0, [r7, #12]
10002b2a:	60b9      	str	r1, [r7, #8]
10002b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
10002b2e:	68fb      	ldr	r3, [r7, #12]
10002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10002b32:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10002b34:	68bb      	ldr	r3, [r7, #8]
10002b36:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
10002b38:	68fb      	ldr	r3, [r7, #12]
10002b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
10002b3e:	2b01      	cmp	r3, #1
10002b40:	d101      	bne.n	10002b46 <I2C_Slave_ISR_IT+0x24>
10002b42:	2302      	movs	r3, #2
10002b44:	e0ec      	b.n	10002d20 <I2C_Slave_ISR_IT+0x1fe>
10002b46:	68fb      	ldr	r3, [r7, #12]
10002b48:	2201      	movs	r2, #1
10002b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10002b4e:	693b      	ldr	r3, [r7, #16]
10002b50:	095b      	lsrs	r3, r3, #5
10002b52:	f003 0301 	and.w	r3, r3, #1
10002b56:	2b00      	cmp	r3, #0
10002b58:	d009      	beq.n	10002b6e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10002b5a:	687b      	ldr	r3, [r7, #4]
10002b5c:	095b      	lsrs	r3, r3, #5
10002b5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10002b62:	2b00      	cmp	r3, #0
10002b64:	d003      	beq.n	10002b6e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
10002b66:	6939      	ldr	r1, [r7, #16]
10002b68:	68f8      	ldr	r0, [r7, #12]
10002b6a:	f000 fa13 	bl	10002f94 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10002b6e:	693b      	ldr	r3, [r7, #16]
10002b70:	091b      	lsrs	r3, r3, #4
10002b72:	f003 0301 	and.w	r3, r3, #1
10002b76:	2b00      	cmp	r3, #0
10002b78:	d04d      	beq.n	10002c16 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10002b7a:	687b      	ldr	r3, [r7, #4]
10002b7c:	091b      	lsrs	r3, r3, #4
10002b7e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10002b82:	2b00      	cmp	r3, #0
10002b84:	d047      	beq.n	10002c16 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10002b86:	68fb      	ldr	r3, [r7, #12]
10002b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10002b8a:	b29b      	uxth	r3, r3
10002b8c:	2b00      	cmp	r3, #0
10002b8e:	d128      	bne.n	10002be2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10002b90:	68fb      	ldr	r3, [r7, #12]
10002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10002b96:	b2db      	uxtb	r3, r3
10002b98:	2b28      	cmp	r3, #40	@ 0x28
10002b9a:	d108      	bne.n	10002bae <I2C_Slave_ISR_IT+0x8c>
10002b9c:	697b      	ldr	r3, [r7, #20]
10002b9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
10002ba2:	d104      	bne.n	10002bae <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10002ba4:	6939      	ldr	r1, [r7, #16]
10002ba6:	68f8      	ldr	r0, [r7, #12]
10002ba8:	f000 fafe 	bl	100031a8 <I2C_ITListenCplt>
10002bac:	e032      	b.n	10002c14 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10002bae:	68fb      	ldr	r3, [r7, #12]
10002bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10002bb4:	b2db      	uxtb	r3, r3
10002bb6:	2b29      	cmp	r3, #41	@ 0x29
10002bb8:	d10e      	bne.n	10002bd8 <I2C_Slave_ISR_IT+0xb6>
10002bba:	697b      	ldr	r3, [r7, #20]
10002bbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
10002bc0:	d00a      	beq.n	10002bd8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10002bc2:	68fb      	ldr	r3, [r7, #12]
10002bc4:	681b      	ldr	r3, [r3, #0]
10002bc6:	2210      	movs	r2, #16
10002bc8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10002bca:	68f8      	ldr	r0, [r7, #12]
10002bcc:	f000 fc41 	bl	10003452 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10002bd0:	68f8      	ldr	r0, [r7, #12]
10002bd2:	f000 f981 	bl	10002ed8 <I2C_ITSlaveSeqCplt>
10002bd6:	e01d      	b.n	10002c14 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10002bd8:	68fb      	ldr	r3, [r7, #12]
10002bda:	681b      	ldr	r3, [r3, #0]
10002bdc:	2210      	movs	r2, #16
10002bde:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
10002be0:	e096      	b.n	10002d10 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10002be2:	68fb      	ldr	r3, [r7, #12]
10002be4:	681b      	ldr	r3, [r3, #0]
10002be6:	2210      	movs	r2, #16
10002be8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10002bea:	68fb      	ldr	r3, [r7, #12]
10002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10002bee:	f043 0204 	orr.w	r2, r3, #4
10002bf2:	68fb      	ldr	r3, [r7, #12]
10002bf4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10002bf6:	697b      	ldr	r3, [r7, #20]
10002bf8:	2b00      	cmp	r3, #0
10002bfa:	d004      	beq.n	10002c06 <I2C_Slave_ISR_IT+0xe4>
10002bfc:	697b      	ldr	r3, [r7, #20]
10002bfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10002c02:	f040 8085 	bne.w	10002d10 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
10002c06:	68fb      	ldr	r3, [r7, #12]
10002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10002c0a:	4619      	mov	r1, r3
10002c0c:	68f8      	ldr	r0, [r7, #12]
10002c0e:	f000 fb21 	bl	10003254 <I2C_ITError>
    if (hi2c->XferCount == 0U)
10002c12:	e07d      	b.n	10002d10 <I2C_Slave_ISR_IT+0x1ee>
10002c14:	e07c      	b.n	10002d10 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10002c16:	693b      	ldr	r3, [r7, #16]
10002c18:	089b      	lsrs	r3, r3, #2
10002c1a:	f003 0301 	and.w	r3, r3, #1
10002c1e:	2b00      	cmp	r3, #0
10002c20:	d030      	beq.n	10002c84 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
10002c22:	687b      	ldr	r3, [r7, #4]
10002c24:	089b      	lsrs	r3, r3, #2
10002c26:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10002c2a:	2b00      	cmp	r3, #0
10002c2c:	d02a      	beq.n	10002c84 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
10002c2e:	68fb      	ldr	r3, [r7, #12]
10002c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10002c32:	b29b      	uxth	r3, r3
10002c34:	2b00      	cmp	r3, #0
10002c36:	d018      	beq.n	10002c6a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10002c38:	68fb      	ldr	r3, [r7, #12]
10002c3a:	681b      	ldr	r3, [r3, #0]
10002c3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10002c3e:	68fb      	ldr	r3, [r7, #12]
10002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002c42:	b2d2      	uxtb	r2, r2
10002c44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10002c46:	68fb      	ldr	r3, [r7, #12]
10002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002c4a:	1c5a      	adds	r2, r3, #1
10002c4c:	68fb      	ldr	r3, [r7, #12]
10002c4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10002c50:	68fb      	ldr	r3, [r7, #12]
10002c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10002c54:	3b01      	subs	r3, #1
10002c56:	b29a      	uxth	r2, r3
10002c58:	68fb      	ldr	r3, [r7, #12]
10002c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10002c5c:	68fb      	ldr	r3, [r7, #12]
10002c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10002c60:	b29b      	uxth	r3, r3
10002c62:	3b01      	subs	r3, #1
10002c64:	b29a      	uxth	r2, r3
10002c66:	68fb      	ldr	r3, [r7, #12]
10002c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
10002c6a:	68fb      	ldr	r3, [r7, #12]
10002c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10002c6e:	b29b      	uxth	r3, r3
10002c70:	2b00      	cmp	r3, #0
10002c72:	d14f      	bne.n	10002d14 <I2C_Slave_ISR_IT+0x1f2>
10002c74:	697b      	ldr	r3, [r7, #20]
10002c76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
10002c7a:	d04b      	beq.n	10002d14 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
10002c7c:	68f8      	ldr	r0, [r7, #12]
10002c7e:	f000 f92b 	bl	10002ed8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
10002c82:	e047      	b.n	10002d14 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10002c84:	693b      	ldr	r3, [r7, #16]
10002c86:	08db      	lsrs	r3, r3, #3
10002c88:	f003 0301 	and.w	r3, r3, #1
10002c8c:	2b00      	cmp	r3, #0
10002c8e:	d00a      	beq.n	10002ca6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10002c90:	687b      	ldr	r3, [r7, #4]
10002c92:	08db      	lsrs	r3, r3, #3
10002c94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10002c98:	2b00      	cmp	r3, #0
10002c9a:	d004      	beq.n	10002ca6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
10002c9c:	6939      	ldr	r1, [r7, #16]
10002c9e:	68f8      	ldr	r0, [r7, #12]
10002ca0:	f000 f896 	bl	10002dd0 <I2C_ITAddrCplt>
10002ca4:	e037      	b.n	10002d16 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10002ca6:	693b      	ldr	r3, [r7, #16]
10002ca8:	085b      	lsrs	r3, r3, #1
10002caa:	f003 0301 	and.w	r3, r3, #1
10002cae:	2b00      	cmp	r3, #0
10002cb0:	d031      	beq.n	10002d16 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10002cb2:	687b      	ldr	r3, [r7, #4]
10002cb4:	085b      	lsrs	r3, r3, #1
10002cb6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10002cba:	2b00      	cmp	r3, #0
10002cbc:	d02b      	beq.n	10002d16 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
10002cbe:	68fb      	ldr	r3, [r7, #12]
10002cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10002cc2:	b29b      	uxth	r3, r3
10002cc4:	2b00      	cmp	r3, #0
10002cc6:	d018      	beq.n	10002cfa <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10002cc8:	68fb      	ldr	r3, [r7, #12]
10002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002ccc:	781a      	ldrb	r2, [r3, #0]
10002cce:	68fb      	ldr	r3, [r7, #12]
10002cd0:	681b      	ldr	r3, [r3, #0]
10002cd2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10002cd4:	68fb      	ldr	r3, [r7, #12]
10002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002cd8:	1c5a      	adds	r2, r3, #1
10002cda:	68fb      	ldr	r3, [r7, #12]
10002cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
10002cde:	68fb      	ldr	r3, [r7, #12]
10002ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10002ce2:	b29b      	uxth	r3, r3
10002ce4:	3b01      	subs	r3, #1
10002ce6:	b29a      	uxth	r2, r3
10002ce8:	68fb      	ldr	r3, [r7, #12]
10002cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
10002cec:	68fb      	ldr	r3, [r7, #12]
10002cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10002cf0:	3b01      	subs	r3, #1
10002cf2:	b29a      	uxth	r2, r3
10002cf4:	68fb      	ldr	r3, [r7, #12]
10002cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
10002cf8:	e00d      	b.n	10002d16 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
10002cfa:	697b      	ldr	r3, [r7, #20]
10002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10002d00:	d002      	beq.n	10002d08 <I2C_Slave_ISR_IT+0x1e6>
10002d02:	697b      	ldr	r3, [r7, #20]
10002d04:	2b00      	cmp	r3, #0
10002d06:	d106      	bne.n	10002d16 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10002d08:	68f8      	ldr	r0, [r7, #12]
10002d0a:	f000 f8e5 	bl	10002ed8 <I2C_ITSlaveSeqCplt>
10002d0e:	e002      	b.n	10002d16 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
10002d10:	bf00      	nop
10002d12:	e000      	b.n	10002d16 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
10002d14:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10002d16:	68fb      	ldr	r3, [r7, #12]
10002d18:	2200      	movs	r2, #0
10002d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
10002d1e:	2300      	movs	r3, #0
}
10002d20:	4618      	mov	r0, r3
10002d22:	3718      	adds	r7, #24
10002d24:	46bd      	mov	sp, r7
10002d26:	bd80      	pop	{r7, pc}

10002d28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
10002d28:	b580      	push	{r7, lr}
10002d2a:	b086      	sub	sp, #24
10002d2c:	af02      	add	r7, sp, #8
10002d2e:	60f8      	str	r0, [r7, #12]
10002d30:	4608      	mov	r0, r1
10002d32:	4611      	mov	r1, r2
10002d34:	461a      	mov	r2, r3
10002d36:	4603      	mov	r3, r0
10002d38:	817b      	strh	r3, [r7, #10]
10002d3a:	460b      	mov	r3, r1
10002d3c:	813b      	strh	r3, [r7, #8]
10002d3e:	4613      	mov	r3, r2
10002d40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
10002d42:	88fb      	ldrh	r3, [r7, #6]
10002d44:	b2da      	uxtb	r2, r3
10002d46:	8979      	ldrh	r1, [r7, #10]
10002d48:	4b20      	ldr	r3, [pc, #128]	@ (10002dcc <I2C_RequestMemoryWrite+0xa4>)
10002d4a:	9300      	str	r3, [sp, #0]
10002d4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
10002d50:	68f8      	ldr	r0, [r7, #12]
10002d52:	f000 fd69 	bl	10003828 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10002d56:	69fa      	ldr	r2, [r7, #28]
10002d58:	69b9      	ldr	r1, [r7, #24]
10002d5a:	68f8      	ldr	r0, [r7, #12]
10002d5c:	f000 fbfb 	bl	10003556 <I2C_WaitOnTXISFlagUntilTimeout>
10002d60:	4603      	mov	r3, r0
10002d62:	2b00      	cmp	r3, #0
10002d64:	d001      	beq.n	10002d6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
10002d66:	2301      	movs	r3, #1
10002d68:	e02c      	b.n	10002dc4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10002d6a:	88fb      	ldrh	r3, [r7, #6]
10002d6c:	2b01      	cmp	r3, #1
10002d6e:	d105      	bne.n	10002d7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10002d70:	893b      	ldrh	r3, [r7, #8]
10002d72:	b2da      	uxtb	r2, r3
10002d74:	68fb      	ldr	r3, [r7, #12]
10002d76:	681b      	ldr	r3, [r3, #0]
10002d78:	629a      	str	r2, [r3, #40]	@ 0x28
10002d7a:	e015      	b.n	10002da8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10002d7c:	893b      	ldrh	r3, [r7, #8]
10002d7e:	0a1b      	lsrs	r3, r3, #8
10002d80:	b29b      	uxth	r3, r3
10002d82:	b2da      	uxtb	r2, r3
10002d84:	68fb      	ldr	r3, [r7, #12]
10002d86:	681b      	ldr	r3, [r3, #0]
10002d88:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10002d8a:	69fa      	ldr	r2, [r7, #28]
10002d8c:	69b9      	ldr	r1, [r7, #24]
10002d8e:	68f8      	ldr	r0, [r7, #12]
10002d90:	f000 fbe1 	bl	10003556 <I2C_WaitOnTXISFlagUntilTimeout>
10002d94:	4603      	mov	r3, r0
10002d96:	2b00      	cmp	r3, #0
10002d98:	d001      	beq.n	10002d9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
10002d9a:	2301      	movs	r3, #1
10002d9c:	e012      	b.n	10002dc4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10002d9e:	893b      	ldrh	r3, [r7, #8]
10002da0:	b2da      	uxtb	r2, r3
10002da2:	68fb      	ldr	r3, [r7, #12]
10002da4:	681b      	ldr	r3, [r3, #0]
10002da6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
10002da8:	69fb      	ldr	r3, [r7, #28]
10002daa:	9300      	str	r3, [sp, #0]
10002dac:	69bb      	ldr	r3, [r7, #24]
10002dae:	2200      	movs	r2, #0
10002db0:	2180      	movs	r1, #128	@ 0x80
10002db2:	68f8      	ldr	r0, [r7, #12]
10002db4:	f000 fb8f 	bl	100034d6 <I2C_WaitOnFlagUntilTimeout>
10002db8:	4603      	mov	r3, r0
10002dba:	2b00      	cmp	r3, #0
10002dbc:	d001      	beq.n	10002dc2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
10002dbe:	2301      	movs	r3, #1
10002dc0:	e000      	b.n	10002dc4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
10002dc2:	2300      	movs	r3, #0
}
10002dc4:	4618      	mov	r0, r3
10002dc6:	3710      	adds	r7, #16
10002dc8:	46bd      	mov	sp, r7
10002dca:	bd80      	pop	{r7, pc}
10002dcc:	80002000 	.word	0x80002000

10002dd0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10002dd0:	b580      	push	{r7, lr}
10002dd2:	b084      	sub	sp, #16
10002dd4:	af00      	add	r7, sp, #0
10002dd6:	6078      	str	r0, [r7, #4]
10002dd8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
10002dda:	687b      	ldr	r3, [r7, #4]
10002ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10002de0:	b2db      	uxtb	r3, r3
10002de2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
10002de6:	2b28      	cmp	r3, #40	@ 0x28
10002de8:	d16a      	bne.n	10002ec0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
10002dea:	687b      	ldr	r3, [r7, #4]
10002dec:	681b      	ldr	r3, [r3, #0]
10002dee:	699b      	ldr	r3, [r3, #24]
10002df0:	0c1b      	lsrs	r3, r3, #16
10002df2:	b2db      	uxtb	r3, r3
10002df4:	f003 0301 	and.w	r3, r3, #1
10002df8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
10002dfa:	687b      	ldr	r3, [r7, #4]
10002dfc:	681b      	ldr	r3, [r3, #0]
10002dfe:	699b      	ldr	r3, [r3, #24]
10002e00:	0c1b      	lsrs	r3, r3, #16
10002e02:	b29b      	uxth	r3, r3
10002e04:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
10002e08:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
10002e0a:	687b      	ldr	r3, [r7, #4]
10002e0c:	681b      	ldr	r3, [r3, #0]
10002e0e:	689b      	ldr	r3, [r3, #8]
10002e10:	b29b      	uxth	r3, r3
10002e12:	f3c3 0309 	ubfx	r3, r3, #0, #10
10002e16:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
10002e18:	687b      	ldr	r3, [r7, #4]
10002e1a:	681b      	ldr	r3, [r3, #0]
10002e1c:	68db      	ldr	r3, [r3, #12]
10002e1e:	b29b      	uxth	r3, r3
10002e20:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
10002e24:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10002e26:	687b      	ldr	r3, [r7, #4]
10002e28:	68db      	ldr	r3, [r3, #12]
10002e2a:	2b02      	cmp	r3, #2
10002e2c:	d138      	bne.n	10002ea0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
10002e2e:	897b      	ldrh	r3, [r7, #10]
10002e30:	09db      	lsrs	r3, r3, #7
10002e32:	b29a      	uxth	r2, r3
10002e34:	89bb      	ldrh	r3, [r7, #12]
10002e36:	4053      	eors	r3, r2
10002e38:	b29b      	uxth	r3, r3
10002e3a:	f003 0306 	and.w	r3, r3, #6
10002e3e:	2b00      	cmp	r3, #0
10002e40:	d11c      	bne.n	10002e7c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
10002e42:	897b      	ldrh	r3, [r7, #10]
10002e44:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
10002e46:	687b      	ldr	r3, [r7, #4]
10002e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002e4a:	1c5a      	adds	r2, r3, #1
10002e4c:	687b      	ldr	r3, [r7, #4]
10002e4e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
10002e50:	687b      	ldr	r3, [r7, #4]
10002e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10002e54:	2b02      	cmp	r3, #2
10002e56:	d13b      	bne.n	10002ed0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
10002e58:	687b      	ldr	r3, [r7, #4]
10002e5a:	2200      	movs	r2, #0
10002e5c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10002e5e:	687b      	ldr	r3, [r7, #4]
10002e60:	681b      	ldr	r3, [r3, #0]
10002e62:	2208      	movs	r2, #8
10002e64:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
10002e66:	687b      	ldr	r3, [r7, #4]
10002e68:	2200      	movs	r2, #0
10002e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10002e6e:	89ba      	ldrh	r2, [r7, #12]
10002e70:	7bfb      	ldrb	r3, [r7, #15]
10002e72:	4619      	mov	r1, r3
10002e74:	6878      	ldr	r0, [r7, #4]
10002e76:	f7ff fe26 	bl	10002ac6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
10002e7a:	e029      	b.n	10002ed0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
10002e7c:	893b      	ldrh	r3, [r7, #8]
10002e7e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10002e80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
10002e84:	6878      	ldr	r0, [r7, #4]
10002e86:	f000 fd01 	bl	1000388c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
10002e8a:	687b      	ldr	r3, [r7, #4]
10002e8c:	2200      	movs	r2, #0
10002e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10002e92:	89ba      	ldrh	r2, [r7, #12]
10002e94:	7bfb      	ldrb	r3, [r7, #15]
10002e96:	4619      	mov	r1, r3
10002e98:	6878      	ldr	r0, [r7, #4]
10002e9a:	f7ff fe14 	bl	10002ac6 <HAL_I2C_AddrCallback>
}
10002e9e:	e017      	b.n	10002ed0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10002ea0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
10002ea4:	6878      	ldr	r0, [r7, #4]
10002ea6:	f000 fcf1 	bl	1000388c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
10002eaa:	687b      	ldr	r3, [r7, #4]
10002eac:	2200      	movs	r2, #0
10002eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10002eb2:	89ba      	ldrh	r2, [r7, #12]
10002eb4:	7bfb      	ldrb	r3, [r7, #15]
10002eb6:	4619      	mov	r1, r3
10002eb8:	6878      	ldr	r0, [r7, #4]
10002eba:	f7ff fe04 	bl	10002ac6 <HAL_I2C_AddrCallback>
}
10002ebe:	e007      	b.n	10002ed0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10002ec0:	687b      	ldr	r3, [r7, #4]
10002ec2:	681b      	ldr	r3, [r3, #0]
10002ec4:	2208      	movs	r2, #8
10002ec6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
10002ec8:	687b      	ldr	r3, [r7, #4]
10002eca:	2200      	movs	r2, #0
10002ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
10002ed0:	bf00      	nop
10002ed2:	3710      	adds	r7, #16
10002ed4:	46bd      	mov	sp, r7
10002ed6:	bd80      	pop	{r7, pc}

10002ed8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
10002ed8:	b580      	push	{r7, lr}
10002eda:	b084      	sub	sp, #16
10002edc:	af00      	add	r7, sp, #0
10002ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10002ee0:	687b      	ldr	r3, [r7, #4]
10002ee2:	681b      	ldr	r3, [r3, #0]
10002ee4:	681b      	ldr	r3, [r3, #0]
10002ee6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
10002ee8:	687b      	ldr	r3, [r7, #4]
10002eea:	2200      	movs	r2, #0
10002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10002ef0:	68fb      	ldr	r3, [r7, #12]
10002ef2:	0b9b      	lsrs	r3, r3, #14
10002ef4:	f003 0301 	and.w	r3, r3, #1
10002ef8:	2b00      	cmp	r3, #0
10002efa:	d008      	beq.n	10002f0e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10002efc:	687b      	ldr	r3, [r7, #4]
10002efe:	681b      	ldr	r3, [r3, #0]
10002f00:	681a      	ldr	r2, [r3, #0]
10002f02:	687b      	ldr	r3, [r7, #4]
10002f04:	681b      	ldr	r3, [r3, #0]
10002f06:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
10002f0a:	601a      	str	r2, [r3, #0]
10002f0c:	e00d      	b.n	10002f2a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
10002f0e:	68fb      	ldr	r3, [r7, #12]
10002f10:	0bdb      	lsrs	r3, r3, #15
10002f12:	f003 0301 	and.w	r3, r3, #1
10002f16:	2b00      	cmp	r3, #0
10002f18:	d007      	beq.n	10002f2a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10002f1a:	687b      	ldr	r3, [r7, #4]
10002f1c:	681b      	ldr	r3, [r3, #0]
10002f1e:	681a      	ldr	r2, [r3, #0]
10002f20:	687b      	ldr	r3, [r7, #4]
10002f22:	681b      	ldr	r3, [r3, #0]
10002f24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
10002f28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
10002f2a:	687b      	ldr	r3, [r7, #4]
10002f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10002f30:	b2db      	uxtb	r3, r3
10002f32:	2b29      	cmp	r3, #41	@ 0x29
10002f34:	d112      	bne.n	10002f5c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10002f36:	687b      	ldr	r3, [r7, #4]
10002f38:	2228      	movs	r2, #40	@ 0x28
10002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10002f3e:	687b      	ldr	r3, [r7, #4]
10002f40:	2221      	movs	r2, #33	@ 0x21
10002f42:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10002f44:	2101      	movs	r1, #1
10002f46:	6878      	ldr	r0, [r7, #4]
10002f48:	f000 fca0 	bl	1000388c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10002f4c:	687b      	ldr	r3, [r7, #4]
10002f4e:	2200      	movs	r2, #0
10002f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10002f54:	6878      	ldr	r0, [r7, #4]
10002f56:	f7ff fda2 	bl	10002a9e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
10002f5a:	e017      	b.n	10002f8c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
10002f5c:	687b      	ldr	r3, [r7, #4]
10002f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10002f62:	b2db      	uxtb	r3, r3
10002f64:	2b2a      	cmp	r3, #42	@ 0x2a
10002f66:	d111      	bne.n	10002f8c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10002f68:	687b      	ldr	r3, [r7, #4]
10002f6a:	2228      	movs	r2, #40	@ 0x28
10002f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10002f70:	687b      	ldr	r3, [r7, #4]
10002f72:	2222      	movs	r2, #34	@ 0x22
10002f74:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10002f76:	2102      	movs	r1, #2
10002f78:	6878      	ldr	r0, [r7, #4]
10002f7a:	f000 fc87 	bl	1000388c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
10002f7e:	687b      	ldr	r3, [r7, #4]
10002f80:	2200      	movs	r2, #0
10002f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10002f86:	6878      	ldr	r0, [r7, #4]
10002f88:	f7ff fd93 	bl	10002ab2 <HAL_I2C_SlaveRxCpltCallback>
}
10002f8c:	bf00      	nop
10002f8e:	3710      	adds	r7, #16
10002f90:	46bd      	mov	sp, r7
10002f92:	bd80      	pop	{r7, pc}

10002f94 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10002f94:	b580      	push	{r7, lr}
10002f96:	b086      	sub	sp, #24
10002f98:	af00      	add	r7, sp, #0
10002f9a:	6078      	str	r0, [r7, #4]
10002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10002f9e:	687b      	ldr	r3, [r7, #4]
10002fa0:	681b      	ldr	r3, [r3, #0]
10002fa2:	681b      	ldr	r3, [r3, #0]
10002fa4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
10002fa6:	683b      	ldr	r3, [r7, #0]
10002fa8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
10002faa:	687b      	ldr	r3, [r7, #4]
10002fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10002fb0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10002fb2:	687b      	ldr	r3, [r7, #4]
10002fb4:	681b      	ldr	r3, [r3, #0]
10002fb6:	2220      	movs	r2, #32
10002fb8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
10002fba:	7bfb      	ldrb	r3, [r7, #15]
10002fbc:	2b21      	cmp	r3, #33	@ 0x21
10002fbe:	d002      	beq.n	10002fc6 <I2C_ITSlaveCplt+0x32>
10002fc0:	7bfb      	ldrb	r3, [r7, #15]
10002fc2:	2b29      	cmp	r3, #41	@ 0x29
10002fc4:	d108      	bne.n	10002fd8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
10002fc6:	f248 0101 	movw	r1, #32769	@ 0x8001
10002fca:	6878      	ldr	r0, [r7, #4]
10002fcc:	f000 fc5e 	bl	1000388c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10002fd0:	687b      	ldr	r3, [r7, #4]
10002fd2:	2221      	movs	r2, #33	@ 0x21
10002fd4:	631a      	str	r2, [r3, #48]	@ 0x30
10002fd6:	e00d      	b.n	10002ff4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10002fd8:	7bfb      	ldrb	r3, [r7, #15]
10002fda:	2b22      	cmp	r3, #34	@ 0x22
10002fdc:	d002      	beq.n	10002fe4 <I2C_ITSlaveCplt+0x50>
10002fde:	7bfb      	ldrb	r3, [r7, #15]
10002fe0:	2b2a      	cmp	r3, #42	@ 0x2a
10002fe2:	d107      	bne.n	10002ff4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
10002fe4:	f248 0102 	movw	r1, #32770	@ 0x8002
10002fe8:	6878      	ldr	r0, [r7, #4]
10002fea:	f000 fc4f 	bl	1000388c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10002fee:	687b      	ldr	r3, [r7, #4]
10002ff0:	2222      	movs	r2, #34	@ 0x22
10002ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
10002ff4:	687b      	ldr	r3, [r7, #4]
10002ff6:	681b      	ldr	r3, [r3, #0]
10002ff8:	685a      	ldr	r2, [r3, #4]
10002ffa:	687b      	ldr	r3, [r7, #4]
10002ffc:	681b      	ldr	r3, [r3, #0]
10002ffe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
10003002:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10003004:	687b      	ldr	r3, [r7, #4]
10003006:	681b      	ldr	r3, [r3, #0]
10003008:	6859      	ldr	r1, [r3, #4]
1000300a:	687b      	ldr	r3, [r7, #4]
1000300c:	681a      	ldr	r2, [r3, #0]
1000300e:	4b64      	ldr	r3, [pc, #400]	@ (100031a0 <I2C_ITSlaveCplt+0x20c>)
10003010:	400b      	ands	r3, r1
10003012:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10003014:	6878      	ldr	r0, [r7, #4]
10003016:	f000 fa1c 	bl	10003452 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
1000301a:	693b      	ldr	r3, [r7, #16]
1000301c:	0b9b      	lsrs	r3, r3, #14
1000301e:	f003 0301 	and.w	r3, r3, #1
10003022:	2b00      	cmp	r3, #0
10003024:	d013      	beq.n	1000304e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10003026:	687b      	ldr	r3, [r7, #4]
10003028:	681b      	ldr	r3, [r3, #0]
1000302a:	681a      	ldr	r2, [r3, #0]
1000302c:	687b      	ldr	r3, [r7, #4]
1000302e:	681b      	ldr	r3, [r3, #0]
10003030:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
10003034:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
10003036:	687b      	ldr	r3, [r7, #4]
10003038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000303a:	2b00      	cmp	r3, #0
1000303c:	d020      	beq.n	10003080 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
1000303e:	687b      	ldr	r3, [r7, #4]
10003040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10003042:	681b      	ldr	r3, [r3, #0]
10003044:	685b      	ldr	r3, [r3, #4]
10003046:	b29a      	uxth	r2, r3
10003048:	687b      	ldr	r3, [r7, #4]
1000304a:	855a      	strh	r2, [r3, #42]	@ 0x2a
1000304c:	e018      	b.n	10003080 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = I2C_GET_MDMA_REMAIN_DATA_TX(hi2c);
    }
#endif /* HAL_MDMA_MODULE_ENABLED */
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
1000304e:	693b      	ldr	r3, [r7, #16]
10003050:	0bdb      	lsrs	r3, r3, #15
10003052:	f003 0301 	and.w	r3, r3, #1
10003056:	2b00      	cmp	r3, #0
10003058:	d012      	beq.n	10003080 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
1000305a:	687b      	ldr	r3, [r7, #4]
1000305c:	681b      	ldr	r3, [r3, #0]
1000305e:	681a      	ldr	r2, [r3, #0]
10003060:	687b      	ldr	r3, [r7, #4]
10003062:	681b      	ldr	r3, [r3, #0]
10003064:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
10003068:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
1000306a:	687b      	ldr	r3, [r7, #4]
1000306c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1000306e:	2b00      	cmp	r3, #0
10003070:	d006      	beq.n	10003080 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
10003072:	687b      	ldr	r3, [r7, #4]
10003074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10003076:	681b      	ldr	r3, [r3, #0]
10003078:	685b      	ldr	r3, [r3, #4]
1000307a:	b29a      	uxth	r2, r3
1000307c:	687b      	ldr	r3, [r7, #4]
1000307e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
10003080:	697b      	ldr	r3, [r7, #20]
10003082:	089b      	lsrs	r3, r3, #2
10003084:	f003 0301 	and.w	r3, r3, #1
10003088:	2b00      	cmp	r3, #0
1000308a:	d020      	beq.n	100030ce <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
1000308c:	697b      	ldr	r3, [r7, #20]
1000308e:	f023 0304 	bic.w	r3, r3, #4
10003092:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10003094:	687b      	ldr	r3, [r7, #4]
10003096:	681b      	ldr	r3, [r3, #0]
10003098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1000309a:	687b      	ldr	r3, [r7, #4]
1000309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000309e:	b2d2      	uxtb	r2, r2
100030a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
100030a2:	687b      	ldr	r3, [r7, #4]
100030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100030a6:	1c5a      	adds	r2, r3, #1
100030a8:	687b      	ldr	r3, [r7, #4]
100030aa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
100030ac:	687b      	ldr	r3, [r7, #4]
100030ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100030b0:	2b00      	cmp	r3, #0
100030b2:	d00c      	beq.n	100030ce <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
100030b4:	687b      	ldr	r3, [r7, #4]
100030b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100030b8:	3b01      	subs	r3, #1
100030ba:	b29a      	uxth	r2, r3
100030bc:	687b      	ldr	r3, [r7, #4]
100030be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
100030c0:	687b      	ldr	r3, [r7, #4]
100030c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100030c4:	b29b      	uxth	r3, r3
100030c6:	3b01      	subs	r3, #1
100030c8:	b29a      	uxth	r2, r3
100030ca:	687b      	ldr	r3, [r7, #4]
100030cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
100030ce:	687b      	ldr	r3, [r7, #4]
100030d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100030d2:	b29b      	uxth	r3, r3
100030d4:	2b00      	cmp	r3, #0
100030d6:	d005      	beq.n	100030e4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100030d8:	687b      	ldr	r3, [r7, #4]
100030da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100030dc:	f043 0204 	orr.w	r2, r3, #4
100030e0:	687b      	ldr	r3, [r7, #4]
100030e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
100030e4:	687b      	ldr	r3, [r7, #4]
100030e6:	2200      	movs	r2, #0
100030e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
100030ec:	687b      	ldr	r3, [r7, #4]
100030ee:	2200      	movs	r2, #0
100030f0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
100030f2:	687b      	ldr	r3, [r7, #4]
100030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100030f6:	2b00      	cmp	r3, #0
100030f8:	d010      	beq.n	1000311c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
100030fa:	687b      	ldr	r3, [r7, #4]
100030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100030fe:	4619      	mov	r1, r3
10003100:	6878      	ldr	r0, [r7, #4]
10003102:	f000 f8a7 	bl	10003254 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
10003106:	687b      	ldr	r3, [r7, #4]
10003108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
1000310c:	b2db      	uxtb	r3, r3
1000310e:	2b28      	cmp	r3, #40	@ 0x28
10003110:	d141      	bne.n	10003196 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
10003112:	6979      	ldr	r1, [r7, #20]
10003114:	6878      	ldr	r0, [r7, #4]
10003116:	f000 f847 	bl	100031a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
1000311a:	e03c      	b.n	10003196 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
1000311c:	687b      	ldr	r3, [r7, #4]
1000311e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003120:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
10003124:	d014      	beq.n	10003150 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
10003126:	6878      	ldr	r0, [r7, #4]
10003128:	f7ff fed6 	bl	10002ed8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1000312c:	687b      	ldr	r3, [r7, #4]
1000312e:	4a1d      	ldr	r2, [pc, #116]	@ (100031a4 <I2C_ITSlaveCplt+0x210>)
10003130:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
10003132:	687b      	ldr	r3, [r7, #4]
10003134:	2220      	movs	r2, #32
10003136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
1000313a:	687b      	ldr	r3, [r7, #4]
1000313c:	2200      	movs	r2, #0
1000313e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10003140:	687b      	ldr	r3, [r7, #4]
10003142:	2200      	movs	r2, #0
10003144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
10003148:	6878      	ldr	r0, [r7, #4]
1000314a:	f7ff fcca 	bl	10002ae2 <HAL_I2C_ListenCpltCallback>
}
1000314e:	e022      	b.n	10003196 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10003150:	687b      	ldr	r3, [r7, #4]
10003152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10003156:	b2db      	uxtb	r3, r3
10003158:	2b22      	cmp	r3, #34	@ 0x22
1000315a:	d10e      	bne.n	1000317a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
1000315c:	687b      	ldr	r3, [r7, #4]
1000315e:	2220      	movs	r2, #32
10003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
10003164:	687b      	ldr	r3, [r7, #4]
10003166:	2200      	movs	r2, #0
10003168:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1000316a:	687b      	ldr	r3, [r7, #4]
1000316c:	2200      	movs	r2, #0
1000316e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10003172:	6878      	ldr	r0, [r7, #4]
10003174:	f7ff fc9d 	bl	10002ab2 <HAL_I2C_SlaveRxCpltCallback>
}
10003178:	e00d      	b.n	10003196 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
1000317a:	687b      	ldr	r3, [r7, #4]
1000317c:	2220      	movs	r2, #32
1000317e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
10003182:	687b      	ldr	r3, [r7, #4]
10003184:	2200      	movs	r2, #0
10003186:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10003188:	687b      	ldr	r3, [r7, #4]
1000318a:	2200      	movs	r2, #0
1000318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10003190:	6878      	ldr	r0, [r7, #4]
10003192:	f7ff fc84 	bl	10002a9e <HAL_I2C_SlaveTxCpltCallback>
}
10003196:	bf00      	nop
10003198:	3718      	adds	r7, #24
1000319a:	46bd      	mov	sp, r7
1000319c:	bd80      	pop	{r7, pc}
1000319e:	bf00      	nop
100031a0:	fe00e800 	.word	0xfe00e800
100031a4:	ffff0000 	.word	0xffff0000

100031a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
100031a8:	b580      	push	{r7, lr}
100031aa:	b082      	sub	sp, #8
100031ac:	af00      	add	r7, sp, #0
100031ae:	6078      	str	r0, [r7, #4]
100031b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
100031b2:	687b      	ldr	r3, [r7, #4]
100031b4:	4a26      	ldr	r2, [pc, #152]	@ (10003250 <I2C_ITListenCplt+0xa8>)
100031b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
100031b8:	687b      	ldr	r3, [r7, #4]
100031ba:	2200      	movs	r2, #0
100031bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
100031be:	687b      	ldr	r3, [r7, #4]
100031c0:	2220      	movs	r2, #32
100031c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
100031c6:	687b      	ldr	r3, [r7, #4]
100031c8:	2200      	movs	r2, #0
100031ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
100031ce:	687b      	ldr	r3, [r7, #4]
100031d0:	2200      	movs	r2, #0
100031d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
100031d4:	683b      	ldr	r3, [r7, #0]
100031d6:	089b      	lsrs	r3, r3, #2
100031d8:	f003 0301 	and.w	r3, r3, #1
100031dc:	2b00      	cmp	r3, #0
100031de:	d022      	beq.n	10003226 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100031e0:	687b      	ldr	r3, [r7, #4]
100031e2:	681b      	ldr	r3, [r3, #0]
100031e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100031e6:	687b      	ldr	r3, [r7, #4]
100031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100031ea:	b2d2      	uxtb	r2, r2
100031ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
100031ee:	687b      	ldr	r3, [r7, #4]
100031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100031f2:	1c5a      	adds	r2, r3, #1
100031f4:	687b      	ldr	r3, [r7, #4]
100031f6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
100031f8:	687b      	ldr	r3, [r7, #4]
100031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100031fc:	2b00      	cmp	r3, #0
100031fe:	d012      	beq.n	10003226 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
10003200:	687b      	ldr	r3, [r7, #4]
10003202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10003204:	3b01      	subs	r3, #1
10003206:	b29a      	uxth	r2, r3
10003208:	687b      	ldr	r3, [r7, #4]
1000320a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
1000320c:	687b      	ldr	r3, [r7, #4]
1000320e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10003210:	b29b      	uxth	r3, r3
10003212:	3b01      	subs	r3, #1
10003214:	b29a      	uxth	r2, r3
10003216:	687b      	ldr	r3, [r7, #4]
10003218:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1000321a:	687b      	ldr	r3, [r7, #4]
1000321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1000321e:	f043 0204 	orr.w	r2, r3, #4
10003222:	687b      	ldr	r3, [r7, #4]
10003224:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10003226:	f248 0103 	movw	r1, #32771	@ 0x8003
1000322a:	6878      	ldr	r0, [r7, #4]
1000322c:	f000 fb2e 	bl	1000388c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10003230:	687b      	ldr	r3, [r7, #4]
10003232:	681b      	ldr	r3, [r3, #0]
10003234:	2210      	movs	r2, #16
10003236:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10003238:	687b      	ldr	r3, [r7, #4]
1000323a:	2200      	movs	r2, #0
1000323c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
10003240:	6878      	ldr	r0, [r7, #4]
10003242:	f7ff fc4e 	bl	10002ae2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
10003246:	bf00      	nop
10003248:	3708      	adds	r7, #8
1000324a:	46bd      	mov	sp, r7
1000324c:	bd80      	pop	{r7, pc}
1000324e:	bf00      	nop
10003250:	ffff0000 	.word	0xffff0000

10003254 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
10003254:	b580      	push	{r7, lr}
10003256:	b084      	sub	sp, #16
10003258:	af00      	add	r7, sp, #0
1000325a:	6078      	str	r0, [r7, #4]
1000325c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
1000325e:	687b      	ldr	r3, [r7, #4]
10003260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10003264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
10003266:	687b      	ldr	r3, [r7, #4]
10003268:	2200      	movs	r2, #0
1000326a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
1000326e:	687b      	ldr	r3, [r7, #4]
10003270:	4a61      	ldr	r2, [pc, #388]	@ (100033f8 <I2C_ITError+0x1a4>)
10003272:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
10003274:	687b      	ldr	r3, [r7, #4]
10003276:	2200      	movs	r2, #0
10003278:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
1000327a:	687b      	ldr	r3, [r7, #4]
1000327c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1000327e:	683b      	ldr	r3, [r7, #0]
10003280:	431a      	orrs	r2, r3
10003282:	687b      	ldr	r3, [r7, #4]
10003284:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
10003286:	7bfb      	ldrb	r3, [r7, #15]
10003288:	2b28      	cmp	r3, #40	@ 0x28
1000328a:	d005      	beq.n	10003298 <I2C_ITError+0x44>
1000328c:	7bfb      	ldrb	r3, [r7, #15]
1000328e:	2b29      	cmp	r3, #41	@ 0x29
10003290:	d002      	beq.n	10003298 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
10003292:	7bfb      	ldrb	r3, [r7, #15]
10003294:	2b2a      	cmp	r3, #42	@ 0x2a
10003296:	d10b      	bne.n	100032b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10003298:	2103      	movs	r1, #3
1000329a:	6878      	ldr	r0, [r7, #4]
1000329c:	f000 faf6 	bl	1000388c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
100032a0:	687b      	ldr	r3, [r7, #4]
100032a2:	2228      	movs	r2, #40	@ 0x28
100032a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
100032a8:	687b      	ldr	r3, [r7, #4]
100032aa:	4a54      	ldr	r2, [pc, #336]	@ (100033fc <I2C_ITError+0x1a8>)
100032ac:	635a      	str	r2, [r3, #52]	@ 0x34
100032ae:	e011      	b.n	100032d4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
100032b0:	f248 0103 	movw	r1, #32771	@ 0x8003
100032b4:	6878      	ldr	r0, [r7, #4]
100032b6:	f000 fae9 	bl	1000388c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
100032ba:	687b      	ldr	r3, [r7, #4]
100032bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
100032c0:	b2db      	uxtb	r3, r3
100032c2:	2b60      	cmp	r3, #96	@ 0x60
100032c4:	d003      	beq.n	100032ce <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
100032c6:	687b      	ldr	r3, [r7, #4]
100032c8:	2220      	movs	r2, #32
100032ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
    hi2c->XferISR       = NULL;
100032ce:	687b      	ldr	r3, [r7, #4]
100032d0:	2200      	movs	r2, #0
100032d2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
100032d4:	687b      	ldr	r3, [r7, #4]
100032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100032d8:	60bb      	str	r3, [r7, #8]
#ifdef HAL_MDMA_MODULE_ENABLED
  if (((hi2c->hdmatx != NULL) || (hi2c->hmdmatx != NULL)) && \
      ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
#else
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
100032da:	687b      	ldr	r3, [r7, #4]
100032dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100032de:	2b00      	cmp	r3, #0
100032e0:	d03e      	beq.n	10003360 <I2C_ITError+0x10c>
100032e2:	68bb      	ldr	r3, [r7, #8]
100032e4:	2b11      	cmp	r3, #17
100032e6:	d002      	beq.n	100032ee <I2C_ITError+0x9a>
100032e8:	68bb      	ldr	r3, [r7, #8]
100032ea:	2b21      	cmp	r3, #33	@ 0x21
100032ec:	d138      	bne.n	10003360 <I2C_ITError+0x10c>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
#endif /* HAL_MDMA_MODULE_ENABLED */
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
100032ee:	687b      	ldr	r3, [r7, #4]
100032f0:	681b      	ldr	r3, [r3, #0]
100032f2:	681b      	ldr	r3, [r3, #0]
100032f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
100032f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
100032fc:	d107      	bne.n	1000330e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
100032fe:	687b      	ldr	r3, [r7, #4]
10003300:	681b      	ldr	r3, [r3, #0]
10003302:	681a      	ldr	r2, [r3, #0]
10003304:	687b      	ldr	r3, [r7, #4]
10003306:	681b      	ldr	r3, [r3, #0]
10003308:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
1000330c:	601a      	str	r2, [r3, #0]
    }

    if ((hi2c->hdmatx != NULL) && (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY))
1000330e:	687b      	ldr	r3, [r7, #4]
10003310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10003312:	2b00      	cmp	r3, #0
10003314:	d01f      	beq.n	10003356 <I2C_ITError+0x102>
10003316:	687b      	ldr	r3, [r7, #4]
10003318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000331a:	4618      	mov	r0, r3
1000331c:	f7fe fe1f 	bl	10001f5e <HAL_DMA_GetState>
10003320:	4603      	mov	r3, r0
10003322:	2b01      	cmp	r3, #1
10003324:	d017      	beq.n	10003356 <I2C_ITError+0x102>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
10003326:	687b      	ldr	r3, [r7, #4]
10003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000332a:	4a35      	ldr	r2, [pc, #212]	@ (10003400 <I2C_ITError+0x1ac>)
1000332c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1000332e:	687b      	ldr	r3, [r7, #4]
10003330:	2200      	movs	r2, #0
10003332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
10003336:	687b      	ldr	r3, [r7, #4]
10003338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000333a:	4618      	mov	r0, r3
1000333c:	f7fe fde8 	bl	10001f10 <HAL_DMA_Abort_IT>
10003340:	4603      	mov	r3, r0
10003342:	2b00      	cmp	r3, #0
10003344:	d00b      	beq.n	1000335e <I2C_ITError+0x10a>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
10003346:	687b      	ldr	r3, [r7, #4]
10003348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000334a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1000334c:	687a      	ldr	r2, [r7, #4]
1000334e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
10003350:	4610      	mov	r0, r2
10003352:	4798      	blx	r3
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
10003354:	e003      	b.n	1000335e <I2C_ITError+0x10a>
      }
    }
#endif /* HAL_MDMA_MODULE_ENABLED */
    else
    {
      I2C_TreatErrorCallback(hi2c);
10003356:	6878      	ldr	r0, [r7, #4]
10003358:	f000 f854 	bl	10003404 <I2C_TreatErrorCallback>
    if ((hi2c->hdmatx != NULL) && (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY))
1000335c:	e047      	b.n	100033ee <I2C_ITError+0x19a>
1000335e:	e046      	b.n	100033ee <I2C_ITError+0x19a>
  /* Abort DMA RX transfer if any */
#ifdef HAL_MDMA_MODULE_ENABLED
  else if (((hi2c->hdmarx != NULL) || (hi2c->hmdmarx != NULL)) && \
           ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
#else
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
10003360:	687b      	ldr	r3, [r7, #4]
10003362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10003364:	2b00      	cmp	r3, #0
10003366:	d03e      	beq.n	100033e6 <I2C_ITError+0x192>
10003368:	68bb      	ldr	r3, [r7, #8]
1000336a:	2b12      	cmp	r3, #18
1000336c:	d002      	beq.n	10003374 <I2C_ITError+0x120>
1000336e:	68bb      	ldr	r3, [r7, #8]
10003370:	2b22      	cmp	r3, #34	@ 0x22
10003372:	d138      	bne.n	100033e6 <I2C_ITError+0x192>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
#endif /* HAL_MDMA_MODULE_ENABLED */
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
10003374:	687b      	ldr	r3, [r7, #4]
10003376:	681b      	ldr	r3, [r3, #0]
10003378:	681b      	ldr	r3, [r3, #0]
1000337a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
1000337e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
10003382:	d107      	bne.n	10003394 <I2C_ITError+0x140>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10003384:	687b      	ldr	r3, [r7, #4]
10003386:	681b      	ldr	r3, [r3, #0]
10003388:	681a      	ldr	r2, [r3, #0]
1000338a:	687b      	ldr	r3, [r7, #4]
1000338c:	681b      	ldr	r3, [r3, #0]
1000338e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
10003392:	601a      	str	r2, [r3, #0]
    }

    if ((hi2c->hdmarx != NULL) && (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY))
10003394:	687b      	ldr	r3, [r7, #4]
10003396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10003398:	2b00      	cmp	r3, #0
1000339a:	d01f      	beq.n	100033dc <I2C_ITError+0x188>
1000339c:	687b      	ldr	r3, [r7, #4]
1000339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100033a0:	4618      	mov	r0, r3
100033a2:	f7fe fddc 	bl	10001f5e <HAL_DMA_GetState>
100033a6:	4603      	mov	r3, r0
100033a8:	2b01      	cmp	r3, #1
100033aa:	d017      	beq.n	100033dc <I2C_ITError+0x188>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
100033ac:	687b      	ldr	r3, [r7, #4]
100033ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100033b0:	4a13      	ldr	r2, [pc, #76]	@ (10003400 <I2C_ITError+0x1ac>)
100033b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
100033b4:	687b      	ldr	r3, [r7, #4]
100033b6:	2200      	movs	r2, #0
100033b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
100033bc:	687b      	ldr	r3, [r7, #4]
100033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100033c0:	4618      	mov	r0, r3
100033c2:	f7fe fda5 	bl	10001f10 <HAL_DMA_Abort_IT>
100033c6:	4603      	mov	r3, r0
100033c8:	2b00      	cmp	r3, #0
100033ca:	d00b      	beq.n	100033e4 <I2C_ITError+0x190>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
100033cc:	687b      	ldr	r3, [r7, #4]
100033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100033d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100033d2:	687a      	ldr	r2, [r7, #4]
100033d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
100033d6:	4610      	mov	r0, r2
100033d8:	4798      	blx	r3
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
100033da:	e003      	b.n	100033e4 <I2C_ITError+0x190>
      }
    }
#endif /* HAL_MDMA_MODULE_ENABLED */
    else
    {
      I2C_TreatErrorCallback(hi2c);
100033dc:	6878      	ldr	r0, [r7, #4]
100033de:	f000 f811 	bl	10003404 <I2C_TreatErrorCallback>
    if ((hi2c->hdmarx != NULL) && (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY))
100033e2:	e004      	b.n	100033ee <I2C_ITError+0x19a>
100033e4:	e003      	b.n	100033ee <I2C_ITError+0x19a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
100033e6:	6878      	ldr	r0, [r7, #4]
100033e8:	f000 f80c 	bl	10003404 <I2C_TreatErrorCallback>
  }
}
100033ec:	bf00      	nop
100033ee:	bf00      	nop
100033f0:	3710      	adds	r7, #16
100033f2:	46bd      	mov	sp, r7
100033f4:	bd80      	pop	{r7, pc}
100033f6:	bf00      	nop
100033f8:	ffff0000 	.word	0xffff0000
100033fc:	10002b23 	.word	0x10002b23
10003400:	1000349b 	.word	0x1000349b

10003404 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
10003404:	b580      	push	{r7, lr}
10003406:	b082      	sub	sp, #8
10003408:	af00      	add	r7, sp, #0
1000340a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
1000340c:	687b      	ldr	r3, [r7, #4]
1000340e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10003412:	b2db      	uxtb	r3, r3
10003414:	2b60      	cmp	r3, #96	@ 0x60
10003416:	d10e      	bne.n	10003436 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
10003418:	687b      	ldr	r3, [r7, #4]
1000341a:	2220      	movs	r2, #32
1000341c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
10003420:	687b      	ldr	r3, [r7, #4]
10003422:	2200      	movs	r2, #0
10003424:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10003426:	687b      	ldr	r3, [r7, #4]
10003428:	2200      	movs	r2, #0
1000342a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
1000342e:	6878      	ldr	r0, [r7, #4]
10003430:	f7ff fb61 	bl	10002af6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10003434:	e009      	b.n	1000344a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
10003436:	687b      	ldr	r3, [r7, #4]
10003438:	2200      	movs	r2, #0
1000343a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1000343c:	687b      	ldr	r3, [r7, #4]
1000343e:	2200      	movs	r2, #0
10003440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
10003444:	6878      	ldr	r0, [r7, #4]
10003446:	f7fd fc1c 	bl	10000c82 <HAL_I2C_ErrorCallback>
}
1000344a:	bf00      	nop
1000344c:	3708      	adds	r7, #8
1000344e:	46bd      	mov	sp, r7
10003450:	bd80      	pop	{r7, pc}

10003452 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
10003452:	b480      	push	{r7}
10003454:	b083      	sub	sp, #12
10003456:	af00      	add	r7, sp, #0
10003458:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
1000345a:	687b      	ldr	r3, [r7, #4]
1000345c:	681b      	ldr	r3, [r3, #0]
1000345e:	699b      	ldr	r3, [r3, #24]
10003460:	f003 0302 	and.w	r3, r3, #2
10003464:	2b02      	cmp	r3, #2
10003466:	d103      	bne.n	10003470 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
10003468:	687b      	ldr	r3, [r7, #4]
1000346a:	681b      	ldr	r3, [r3, #0]
1000346c:	2200      	movs	r2, #0
1000346e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
10003470:	687b      	ldr	r3, [r7, #4]
10003472:	681b      	ldr	r3, [r3, #0]
10003474:	699b      	ldr	r3, [r3, #24]
10003476:	f003 0301 	and.w	r3, r3, #1
1000347a:	2b01      	cmp	r3, #1
1000347c:	d007      	beq.n	1000348e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
1000347e:	687b      	ldr	r3, [r7, #4]
10003480:	681b      	ldr	r3, [r3, #0]
10003482:	699a      	ldr	r2, [r3, #24]
10003484:	687b      	ldr	r3, [r7, #4]
10003486:	681b      	ldr	r3, [r3, #0]
10003488:	f042 0201 	orr.w	r2, r2, #1
1000348c:	619a      	str	r2, [r3, #24]
  }
}
1000348e:	bf00      	nop
10003490:	370c      	adds	r7, #12
10003492:	46bd      	mov	sp, r7
10003494:	f85d 7b04 	ldr.w	r7, [sp], #4
10003498:	4770      	bx	lr

1000349a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
1000349a:	b580      	push	{r7, lr}
1000349c:	b084      	sub	sp, #16
1000349e:	af00      	add	r7, sp, #0
100034a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
100034a2:	687b      	ldr	r3, [r7, #4]
100034a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100034a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
100034a8:	68fb      	ldr	r3, [r7, #12]
100034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100034ac:	2b00      	cmp	r3, #0
100034ae:	d003      	beq.n	100034b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
100034b0:	68fb      	ldr	r3, [r7, #12]
100034b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100034b4:	2200      	movs	r2, #0
100034b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
100034b8:	68fb      	ldr	r3, [r7, #12]
100034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100034bc:	2b00      	cmp	r3, #0
100034be:	d003      	beq.n	100034c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
100034c0:	68fb      	ldr	r3, [r7, #12]
100034c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100034c4:	2200      	movs	r2, #0
100034c6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
100034c8:	68f8      	ldr	r0, [r7, #12]
100034ca:	f7ff ff9b 	bl	10003404 <I2C_TreatErrorCallback>
}
100034ce:	bf00      	nop
100034d0:	3710      	adds	r7, #16
100034d2:	46bd      	mov	sp, r7
100034d4:	bd80      	pop	{r7, pc}

100034d6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
100034d6:	b580      	push	{r7, lr}
100034d8:	b084      	sub	sp, #16
100034da:	af00      	add	r7, sp, #0
100034dc:	60f8      	str	r0, [r7, #12]
100034de:	60b9      	str	r1, [r7, #8]
100034e0:	603b      	str	r3, [r7, #0]
100034e2:	4613      	mov	r3, r2
100034e4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
100034e6:	e022      	b.n	1000352e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
100034e8:	683b      	ldr	r3, [r7, #0]
100034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
100034ee:	d01e      	beq.n	1000352e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
100034f0:	f7fe fbb6 	bl	10001c60 <HAL_GetTick>
100034f4:	4602      	mov	r2, r0
100034f6:	69bb      	ldr	r3, [r7, #24]
100034f8:	1ad3      	subs	r3, r2, r3
100034fa:	683a      	ldr	r2, [r7, #0]
100034fc:	429a      	cmp	r2, r3
100034fe:	d302      	bcc.n	10003506 <I2C_WaitOnFlagUntilTimeout+0x30>
10003500:	683b      	ldr	r3, [r7, #0]
10003502:	2b00      	cmp	r3, #0
10003504:	d113      	bne.n	1000352e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10003506:	68fb      	ldr	r3, [r7, #12]
10003508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1000350a:	f043 0220 	orr.w	r2, r3, #32
1000350e:	68fb      	ldr	r3, [r7, #12]
10003510:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
10003512:	68fb      	ldr	r3, [r7, #12]
10003514:	2220      	movs	r2, #32
10003516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
1000351a:	68fb      	ldr	r3, [r7, #12]
1000351c:	2200      	movs	r2, #0
1000351e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
10003522:	68fb      	ldr	r3, [r7, #12]
10003524:	2200      	movs	r2, #0
10003526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
1000352a:	2301      	movs	r3, #1
1000352c:	e00f      	b.n	1000354e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
1000352e:	68fb      	ldr	r3, [r7, #12]
10003530:	681b      	ldr	r3, [r3, #0]
10003532:	699a      	ldr	r2, [r3, #24]
10003534:	68bb      	ldr	r3, [r7, #8]
10003536:	4013      	ands	r3, r2
10003538:	68ba      	ldr	r2, [r7, #8]
1000353a:	429a      	cmp	r2, r3
1000353c:	bf0c      	ite	eq
1000353e:	2301      	moveq	r3, #1
10003540:	2300      	movne	r3, #0
10003542:	b2db      	uxtb	r3, r3
10003544:	461a      	mov	r2, r3
10003546:	79fb      	ldrb	r3, [r7, #7]
10003548:	429a      	cmp	r2, r3
1000354a:	d0cd      	beq.n	100034e8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
1000354c:	2300      	movs	r3, #0
}
1000354e:	4618      	mov	r0, r3
10003550:	3710      	adds	r7, #16
10003552:	46bd      	mov	sp, r7
10003554:	bd80      	pop	{r7, pc}

10003556 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
10003556:	b580      	push	{r7, lr}
10003558:	b084      	sub	sp, #16
1000355a:	af00      	add	r7, sp, #0
1000355c:	60f8      	str	r0, [r7, #12]
1000355e:	60b9      	str	r1, [r7, #8]
10003560:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10003562:	e02c      	b.n	100035be <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
10003564:	687a      	ldr	r2, [r7, #4]
10003566:	68b9      	ldr	r1, [r7, #8]
10003568:	68f8      	ldr	r0, [r7, #12]
1000356a:	f000 f871 	bl	10003650 <I2C_IsErrorOccurred>
1000356e:	4603      	mov	r3, r0
10003570:	2b00      	cmp	r3, #0
10003572:	d001      	beq.n	10003578 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
10003574:	2301      	movs	r3, #1
10003576:	e02a      	b.n	100035ce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10003578:	68bb      	ldr	r3, [r7, #8]
1000357a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000357e:	d01e      	beq.n	100035be <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10003580:	f7fe fb6e 	bl	10001c60 <HAL_GetTick>
10003584:	4602      	mov	r2, r0
10003586:	687b      	ldr	r3, [r7, #4]
10003588:	1ad3      	subs	r3, r2, r3
1000358a:	68ba      	ldr	r2, [r7, #8]
1000358c:	429a      	cmp	r2, r3
1000358e:	d302      	bcc.n	10003596 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
10003590:	68bb      	ldr	r3, [r7, #8]
10003592:	2b00      	cmp	r3, #0
10003594:	d113      	bne.n	100035be <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10003596:	68fb      	ldr	r3, [r7, #12]
10003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1000359a:	f043 0220 	orr.w	r2, r3, #32
1000359e:	68fb      	ldr	r3, [r7, #12]
100035a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
100035a2:	68fb      	ldr	r3, [r7, #12]
100035a4:	2220      	movs	r2, #32
100035a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
100035aa:	68fb      	ldr	r3, [r7, #12]
100035ac:	2200      	movs	r2, #0
100035ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
100035b2:	68fb      	ldr	r3, [r7, #12]
100035b4:	2200      	movs	r2, #0
100035b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
100035ba:	2301      	movs	r3, #1
100035bc:	e007      	b.n	100035ce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
100035be:	68fb      	ldr	r3, [r7, #12]
100035c0:	681b      	ldr	r3, [r3, #0]
100035c2:	699b      	ldr	r3, [r3, #24]
100035c4:	f003 0302 	and.w	r3, r3, #2
100035c8:	2b02      	cmp	r3, #2
100035ca:	d1cb      	bne.n	10003564 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
100035cc:	2300      	movs	r3, #0
}
100035ce:	4618      	mov	r0, r3
100035d0:	3710      	adds	r7, #16
100035d2:	46bd      	mov	sp, r7
100035d4:	bd80      	pop	{r7, pc}

100035d6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
100035d6:	b580      	push	{r7, lr}
100035d8:	b084      	sub	sp, #16
100035da:	af00      	add	r7, sp, #0
100035dc:	60f8      	str	r0, [r7, #12]
100035de:	60b9      	str	r1, [r7, #8]
100035e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
100035e2:	e028      	b.n	10003636 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
100035e4:	687a      	ldr	r2, [r7, #4]
100035e6:	68b9      	ldr	r1, [r7, #8]
100035e8:	68f8      	ldr	r0, [r7, #12]
100035ea:	f000 f831 	bl	10003650 <I2C_IsErrorOccurred>
100035ee:	4603      	mov	r3, r0
100035f0:	2b00      	cmp	r3, #0
100035f2:	d001      	beq.n	100035f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
100035f4:	2301      	movs	r3, #1
100035f6:	e026      	b.n	10003646 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
100035f8:	f7fe fb32 	bl	10001c60 <HAL_GetTick>
100035fc:	4602      	mov	r2, r0
100035fe:	687b      	ldr	r3, [r7, #4]
10003600:	1ad3      	subs	r3, r2, r3
10003602:	68ba      	ldr	r2, [r7, #8]
10003604:	429a      	cmp	r2, r3
10003606:	d302      	bcc.n	1000360e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
10003608:	68bb      	ldr	r3, [r7, #8]
1000360a:	2b00      	cmp	r3, #0
1000360c:	d113      	bne.n	10003636 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
1000360e:	68fb      	ldr	r3, [r7, #12]
10003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10003612:	f043 0220 	orr.w	r2, r3, #32
10003616:	68fb      	ldr	r3, [r7, #12]
10003618:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
1000361a:	68fb      	ldr	r3, [r7, #12]
1000361c:	2220      	movs	r2, #32
1000361e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
10003622:	68fb      	ldr	r3, [r7, #12]
10003624:	2200      	movs	r2, #0
10003626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1000362a:	68fb      	ldr	r3, [r7, #12]
1000362c:	2200      	movs	r2, #0
1000362e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
10003632:	2301      	movs	r3, #1
10003634:	e007      	b.n	10003646 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10003636:	68fb      	ldr	r3, [r7, #12]
10003638:	681b      	ldr	r3, [r3, #0]
1000363a:	699b      	ldr	r3, [r3, #24]
1000363c:	f003 0320 	and.w	r3, r3, #32
10003640:	2b20      	cmp	r3, #32
10003642:	d1cf      	bne.n	100035e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
10003644:	2300      	movs	r3, #0
}
10003646:	4618      	mov	r0, r3
10003648:	3710      	adds	r7, #16
1000364a:	46bd      	mov	sp, r7
1000364c:	bd80      	pop	{r7, pc}
	...

10003650 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
10003650:	b580      	push	{r7, lr}
10003652:	b08a      	sub	sp, #40	@ 0x28
10003654:	af00      	add	r7, sp, #0
10003656:	60f8      	str	r0, [r7, #12]
10003658:	60b9      	str	r1, [r7, #8]
1000365a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
1000365c:	2300      	movs	r3, #0
1000365e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
10003662:	68fb      	ldr	r3, [r7, #12]
10003664:	681b      	ldr	r3, [r3, #0]
10003666:	699b      	ldr	r3, [r3, #24]
10003668:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
1000366a:	2300      	movs	r3, #0
1000366c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
1000366e:	687b      	ldr	r3, [r7, #4]
10003670:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
10003672:	69bb      	ldr	r3, [r7, #24]
10003674:	f003 0310 	and.w	r3, r3, #16
10003678:	2b00      	cmp	r3, #0
1000367a:	d075      	beq.n	10003768 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1000367c:	68fb      	ldr	r3, [r7, #12]
1000367e:	681b      	ldr	r3, [r3, #0]
10003680:	2210      	movs	r2, #16
10003682:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
10003684:	e056      	b.n	10003734 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
10003686:	68bb      	ldr	r3, [r7, #8]
10003688:	f1b3 3fff 	cmp.w	r3, #4294967295
1000368c:	d052      	beq.n	10003734 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
1000368e:	f7fe fae7 	bl	10001c60 <HAL_GetTick>
10003692:	4602      	mov	r2, r0
10003694:	69fb      	ldr	r3, [r7, #28]
10003696:	1ad3      	subs	r3, r2, r3
10003698:	68ba      	ldr	r2, [r7, #8]
1000369a:	429a      	cmp	r2, r3
1000369c:	d302      	bcc.n	100036a4 <I2C_IsErrorOccurred+0x54>
1000369e:	68bb      	ldr	r3, [r7, #8]
100036a0:	2b00      	cmp	r3, #0
100036a2:	d147      	bne.n	10003734 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
100036a4:	68fb      	ldr	r3, [r7, #12]
100036a6:	681b      	ldr	r3, [r3, #0]
100036a8:	685b      	ldr	r3, [r3, #4]
100036aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
100036ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
100036b0:	68fb      	ldr	r3, [r7, #12]
100036b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
100036b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
100036b8:	68fb      	ldr	r3, [r7, #12]
100036ba:	681b      	ldr	r3, [r3, #0]
100036bc:	699b      	ldr	r3, [r3, #24]
100036be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
100036c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
100036c6:	d12e      	bne.n	10003726 <I2C_IsErrorOccurred+0xd6>
100036c8:	697b      	ldr	r3, [r7, #20]
100036ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
100036ce:	d02a      	beq.n	10003726 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
100036d0:	7cfb      	ldrb	r3, [r7, #19]
100036d2:	2b20      	cmp	r3, #32
100036d4:	d027      	beq.n	10003726 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
100036d6:	68fb      	ldr	r3, [r7, #12]
100036d8:	681b      	ldr	r3, [r3, #0]
100036da:	685a      	ldr	r2, [r3, #4]
100036dc:	68fb      	ldr	r3, [r7, #12]
100036de:	681b      	ldr	r3, [r3, #0]
100036e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
100036e4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
100036e6:	f7fe fabb 	bl	10001c60 <HAL_GetTick>
100036ea:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
100036ec:	e01b      	b.n	10003726 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
100036ee:	f7fe fab7 	bl	10001c60 <HAL_GetTick>
100036f2:	4602      	mov	r2, r0
100036f4:	69fb      	ldr	r3, [r7, #28]
100036f6:	1ad3      	subs	r3, r2, r3
100036f8:	2b19      	cmp	r3, #25
100036fa:	d914      	bls.n	10003726 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
100036fc:	68fb      	ldr	r3, [r7, #12]
100036fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10003700:	f043 0220 	orr.w	r2, r3, #32
10003704:	68fb      	ldr	r3, [r7, #12]
10003706:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
10003708:	68fb      	ldr	r3, [r7, #12]
1000370a:	2220      	movs	r2, #32
1000370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
10003710:	68fb      	ldr	r3, [r7, #12]
10003712:	2200      	movs	r2, #0
10003714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
10003718:	68fb      	ldr	r3, [r7, #12]
1000371a:	2200      	movs	r2, #0
1000371c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              
              status = HAL_ERROR;
10003720:	2301      	movs	r3, #1
10003722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10003726:	68fb      	ldr	r3, [r7, #12]
10003728:	681b      	ldr	r3, [r3, #0]
1000372a:	699b      	ldr	r3, [r3, #24]
1000372c:	f003 0320 	and.w	r3, r3, #32
10003730:	2b20      	cmp	r3, #32
10003732:	d1dc      	bne.n	100036ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
10003734:	68fb      	ldr	r3, [r7, #12]
10003736:	681b      	ldr	r3, [r3, #0]
10003738:	699b      	ldr	r3, [r3, #24]
1000373a:	f003 0320 	and.w	r3, r3, #32
1000373e:	2b20      	cmp	r3, #32
10003740:	d003      	beq.n	1000374a <I2C_IsErrorOccurred+0xfa>
10003742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10003746:	2b00      	cmp	r3, #0
10003748:	d09d      	beq.n	10003686 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
1000374a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
1000374e:	2b00      	cmp	r3, #0
10003750:	d103      	bne.n	1000375a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10003752:	68fb      	ldr	r3, [r7, #12]
10003754:	681b      	ldr	r3, [r3, #0]
10003756:	2220      	movs	r2, #32
10003758:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
1000375a:	6a3b      	ldr	r3, [r7, #32]
1000375c:	f043 0304 	orr.w	r3, r3, #4
10003760:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
10003762:	2301      	movs	r3, #1
10003764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
10003768:	68fb      	ldr	r3, [r7, #12]
1000376a:	681b      	ldr	r3, [r3, #0]
1000376c:	699b      	ldr	r3, [r3, #24]
1000376e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
10003770:	69bb      	ldr	r3, [r7, #24]
10003772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10003776:	2b00      	cmp	r3, #0
10003778:	d00b      	beq.n	10003792 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
1000377a:	6a3b      	ldr	r3, [r7, #32]
1000377c:	f043 0301 	orr.w	r3, r3, #1
10003780:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
10003782:	68fb      	ldr	r3, [r7, #12]
10003784:	681b      	ldr	r3, [r3, #0]
10003786:	f44f 7280 	mov.w	r2, #256	@ 0x100
1000378a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
1000378c:	2301      	movs	r3, #1
1000378e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
10003792:	69bb      	ldr	r3, [r7, #24]
10003794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10003798:	2b00      	cmp	r3, #0
1000379a:	d00b      	beq.n	100037b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
1000379c:	6a3b      	ldr	r3, [r7, #32]
1000379e:	f043 0308 	orr.w	r3, r3, #8
100037a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
100037a4:	68fb      	ldr	r3, [r7, #12]
100037a6:	681b      	ldr	r3, [r3, #0]
100037a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
100037ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
100037ae:	2301      	movs	r3, #1
100037b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
100037b4:	69bb      	ldr	r3, [r7, #24]
100037b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
100037ba:	2b00      	cmp	r3, #0
100037bc:	d00b      	beq.n	100037d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
100037be:	6a3b      	ldr	r3, [r7, #32]
100037c0:	f043 0302 	orr.w	r3, r3, #2
100037c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
100037c6:	68fb      	ldr	r3, [r7, #12]
100037c8:	681b      	ldr	r3, [r3, #0]
100037ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
100037ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
100037d0:	2301      	movs	r3, #1
100037d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
100037d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
100037da:	2b00      	cmp	r3, #0
100037dc:	d01c      	beq.n	10003818 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
100037de:	68f8      	ldr	r0, [r7, #12]
100037e0:	f7ff fe37 	bl	10003452 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
100037e4:	68fb      	ldr	r3, [r7, #12]
100037e6:	681b      	ldr	r3, [r3, #0]
100037e8:	6859      	ldr	r1, [r3, #4]
100037ea:	68fb      	ldr	r3, [r7, #12]
100037ec:	681a      	ldr	r2, [r3, #0]
100037ee:	4b0d      	ldr	r3, [pc, #52]	@ (10003824 <I2C_IsErrorOccurred+0x1d4>)
100037f0:	400b      	ands	r3, r1
100037f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
100037f4:	68fb      	ldr	r3, [r7, #12]
100037f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100037f8:	6a3b      	ldr	r3, [r7, #32]
100037fa:	431a      	orrs	r2, r3
100037fc:	68fb      	ldr	r3, [r7, #12]
100037fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
10003800:	68fb      	ldr	r3, [r7, #12]
10003802:	2220      	movs	r2, #32
10003804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
10003808:	68fb      	ldr	r3, [r7, #12]
1000380a:	2200      	movs	r2, #0
1000380c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10003810:	68fb      	ldr	r3, [r7, #12]
10003812:	2200      	movs	r2, #0
10003814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
10003818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
1000381c:	4618      	mov	r0, r3
1000381e:	3728      	adds	r7, #40	@ 0x28
10003820:	46bd      	mov	sp, r7
10003822:	bd80      	pop	{r7, pc}
10003824:	fe00e800 	.word	0xfe00e800

10003828 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
10003828:	b480      	push	{r7}
1000382a:	b087      	sub	sp, #28
1000382c:	af00      	add	r7, sp, #0
1000382e:	60f8      	str	r0, [r7, #12]
10003830:	607b      	str	r3, [r7, #4]
10003832:	460b      	mov	r3, r1
10003834:	817b      	strh	r3, [r7, #10]
10003836:	4613      	mov	r3, r2
10003838:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
1000383a:	897b      	ldrh	r3, [r7, #10]
1000383c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10003840:	7a7b      	ldrb	r3, [r7, #9]
10003842:	041b      	lsls	r3, r3, #16
10003844:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10003848:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
1000384a:	687b      	ldr	r3, [r7, #4]
1000384c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
1000384e:	6a3b      	ldr	r3, [r7, #32]
10003850:	4313      	orrs	r3, r2
10003852:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
10003856:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
10003858:	68fb      	ldr	r3, [r7, #12]
1000385a:	681b      	ldr	r3, [r3, #0]
1000385c:	685a      	ldr	r2, [r3, #4]
1000385e:	6a3b      	ldr	r3, [r7, #32]
10003860:	0d5b      	lsrs	r3, r3, #21
10003862:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
10003866:	4b08      	ldr	r3, [pc, #32]	@ (10003888 <I2C_TransferConfig+0x60>)
10003868:	430b      	orrs	r3, r1
1000386a:	43db      	mvns	r3, r3
1000386c:	ea02 0103 	and.w	r1, r2, r3
10003870:	68fb      	ldr	r3, [r7, #12]
10003872:	681b      	ldr	r3, [r3, #0]
10003874:	697a      	ldr	r2, [r7, #20]
10003876:	430a      	orrs	r2, r1
10003878:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
1000387a:	bf00      	nop
1000387c:	371c      	adds	r7, #28
1000387e:	46bd      	mov	sp, r7
10003880:	f85d 7b04 	ldr.w	r7, [sp], #4
10003884:	4770      	bx	lr
10003886:	bf00      	nop
10003888:	03ff63ff 	.word	0x03ff63ff

1000388c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
1000388c:	b480      	push	{r7}
1000388e:	b085      	sub	sp, #20
10003890:	af00      	add	r7, sp, #0
10003892:	6078      	str	r0, [r7, #4]
10003894:	460b      	mov	r3, r1
10003896:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
10003898:	2300      	movs	r3, #0
1000389a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1000389c:	887b      	ldrh	r3, [r7, #2]
1000389e:	f003 0301 	and.w	r3, r3, #1
100038a2:	2b00      	cmp	r3, #0
100038a4:	d00f      	beq.n	100038c6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
100038a6:	68fb      	ldr	r3, [r7, #12]
100038a8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
100038ac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
100038ae:	687b      	ldr	r3, [r7, #4]
100038b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
100038b4:	b2db      	uxtb	r3, r3
100038b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
100038ba:	2b28      	cmp	r3, #40	@ 0x28
100038bc:	d003      	beq.n	100038c6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100038be:	68fb      	ldr	r3, [r7, #12]
100038c0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
100038c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
100038c6:	887b      	ldrh	r3, [r7, #2]
100038c8:	f003 0302 	and.w	r3, r3, #2
100038cc:	2b00      	cmp	r3, #0
100038ce:	d00f      	beq.n	100038f0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
100038d0:	68fb      	ldr	r3, [r7, #12]
100038d2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
100038d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
100038d8:	687b      	ldr	r3, [r7, #4]
100038da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
100038de:	b2db      	uxtb	r3, r3
100038e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
100038e4:	2b28      	cmp	r3, #40	@ 0x28
100038e6:	d003      	beq.n	100038f0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100038e8:	68fb      	ldr	r3, [r7, #12]
100038ea:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
100038ee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
100038f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
100038f4:	2b00      	cmp	r3, #0
100038f6:	da03      	bge.n	10003900 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100038f8:	68fb      	ldr	r3, [r7, #12]
100038fa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
100038fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
10003900:	887b      	ldrh	r3, [r7, #2]
10003902:	2b10      	cmp	r3, #16
10003904:	d103      	bne.n	1000390e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
10003906:	68fb      	ldr	r3, [r7, #12]
10003908:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
1000390c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
1000390e:	887b      	ldrh	r3, [r7, #2]
10003910:	2b20      	cmp	r3, #32
10003912:	d103      	bne.n	1000391c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
10003914:	68fb      	ldr	r3, [r7, #12]
10003916:	f043 0320 	orr.w	r3, r3, #32
1000391a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
1000391c:	887b      	ldrh	r3, [r7, #2]
1000391e:	2b40      	cmp	r3, #64	@ 0x40
10003920:	d103      	bne.n	1000392a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
10003922:	68fb      	ldr	r3, [r7, #12]
10003924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10003928:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
1000392a:	687b      	ldr	r3, [r7, #4]
1000392c:	681b      	ldr	r3, [r3, #0]
1000392e:	6819      	ldr	r1, [r3, #0]
10003930:	68fb      	ldr	r3, [r7, #12]
10003932:	43da      	mvns	r2, r3
10003934:	687b      	ldr	r3, [r7, #4]
10003936:	681b      	ldr	r3, [r3, #0]
10003938:	400a      	ands	r2, r1
1000393a:	601a      	str	r2, [r3, #0]
}
1000393c:	bf00      	nop
1000393e:	3714      	adds	r7, #20
10003940:	46bd      	mov	sp, r7
10003942:	f85d 7b04 	ldr.w	r7, [sp], #4
10003946:	4770      	bx	lr

10003948 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
10003948:	b480      	push	{r7}
1000394a:	b083      	sub	sp, #12
1000394c:	af00      	add	r7, sp, #0
1000394e:	6078      	str	r0, [r7, #4]
10003950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10003952:	687b      	ldr	r3, [r7, #4]
10003954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10003958:	b2db      	uxtb	r3, r3
1000395a:	2b20      	cmp	r3, #32
1000395c:	d138      	bne.n	100039d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
1000395e:	687b      	ldr	r3, [r7, #4]
10003960:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
10003964:	2b01      	cmp	r3, #1
10003966:	d101      	bne.n	1000396c <HAL_I2CEx_ConfigAnalogFilter+0x24>
10003968:	2302      	movs	r3, #2
1000396a:	e032      	b.n	100039d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
1000396c:	687b      	ldr	r3, [r7, #4]
1000396e:	2201      	movs	r2, #1
10003970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
10003974:	687b      	ldr	r3, [r7, #4]
10003976:	2224      	movs	r2, #36	@ 0x24
10003978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
1000397c:	687b      	ldr	r3, [r7, #4]
1000397e:	681b      	ldr	r3, [r3, #0]
10003980:	681a      	ldr	r2, [r3, #0]
10003982:	687b      	ldr	r3, [r7, #4]
10003984:	681b      	ldr	r3, [r3, #0]
10003986:	f022 0201 	bic.w	r2, r2, #1
1000398a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
1000398c:	687b      	ldr	r3, [r7, #4]
1000398e:	681b      	ldr	r3, [r3, #0]
10003990:	681a      	ldr	r2, [r3, #0]
10003992:	687b      	ldr	r3, [r7, #4]
10003994:	681b      	ldr	r3, [r3, #0]
10003996:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
1000399a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
1000399c:	687b      	ldr	r3, [r7, #4]
1000399e:	681b      	ldr	r3, [r3, #0]
100039a0:	6819      	ldr	r1, [r3, #0]
100039a2:	687b      	ldr	r3, [r7, #4]
100039a4:	681b      	ldr	r3, [r3, #0]
100039a6:	683a      	ldr	r2, [r7, #0]
100039a8:	430a      	orrs	r2, r1
100039aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
100039ac:	687b      	ldr	r3, [r7, #4]
100039ae:	681b      	ldr	r3, [r3, #0]
100039b0:	681a      	ldr	r2, [r3, #0]
100039b2:	687b      	ldr	r3, [r7, #4]
100039b4:	681b      	ldr	r3, [r3, #0]
100039b6:	f042 0201 	orr.w	r2, r2, #1
100039ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
100039bc:	687b      	ldr	r3, [r7, #4]
100039be:	2220      	movs	r2, #32
100039c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100039c4:	687b      	ldr	r3, [r7, #4]
100039c6:	2200      	movs	r2, #0
100039c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
100039cc:	2300      	movs	r3, #0
100039ce:	e000      	b.n	100039d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
100039d0:	2302      	movs	r3, #2
  }
}
100039d2:	4618      	mov	r0, r3
100039d4:	370c      	adds	r7, #12
100039d6:	46bd      	mov	sp, r7
100039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
100039dc:	4770      	bx	lr

100039de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
100039de:	b480      	push	{r7}
100039e0:	b085      	sub	sp, #20
100039e2:	af00      	add	r7, sp, #0
100039e4:	6078      	str	r0, [r7, #4]
100039e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
100039e8:	687b      	ldr	r3, [r7, #4]
100039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
100039ee:	b2db      	uxtb	r3, r3
100039f0:	2b20      	cmp	r3, #32
100039f2:	d139      	bne.n	10003a68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
100039f4:	687b      	ldr	r3, [r7, #4]
100039f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
100039fa:	2b01      	cmp	r3, #1
100039fc:	d101      	bne.n	10003a02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
100039fe:	2302      	movs	r3, #2
10003a00:	e033      	b.n	10003a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
10003a02:	687b      	ldr	r3, [r7, #4]
10003a04:	2201      	movs	r2, #1
10003a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
10003a0a:	687b      	ldr	r3, [r7, #4]
10003a0c:	2224      	movs	r2, #36	@ 0x24
10003a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10003a12:	687b      	ldr	r3, [r7, #4]
10003a14:	681b      	ldr	r3, [r3, #0]
10003a16:	681a      	ldr	r2, [r3, #0]
10003a18:	687b      	ldr	r3, [r7, #4]
10003a1a:	681b      	ldr	r3, [r3, #0]
10003a1c:	f022 0201 	bic.w	r2, r2, #1
10003a20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
10003a22:	687b      	ldr	r3, [r7, #4]
10003a24:	681b      	ldr	r3, [r3, #0]
10003a26:	681b      	ldr	r3, [r3, #0]
10003a28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
10003a2a:	68fb      	ldr	r3, [r7, #12]
10003a2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
10003a30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
10003a32:	683b      	ldr	r3, [r7, #0]
10003a34:	021b      	lsls	r3, r3, #8
10003a36:	68fa      	ldr	r2, [r7, #12]
10003a38:	4313      	orrs	r3, r2
10003a3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
10003a3c:	687b      	ldr	r3, [r7, #4]
10003a3e:	681b      	ldr	r3, [r3, #0]
10003a40:	68fa      	ldr	r2, [r7, #12]
10003a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10003a44:	687b      	ldr	r3, [r7, #4]
10003a46:	681b      	ldr	r3, [r3, #0]
10003a48:	681a      	ldr	r2, [r3, #0]
10003a4a:	687b      	ldr	r3, [r7, #4]
10003a4c:	681b      	ldr	r3, [r3, #0]
10003a4e:	f042 0201 	orr.w	r2, r2, #1
10003a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10003a54:	687b      	ldr	r3, [r7, #4]
10003a56:	2220      	movs	r2, #32
10003a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10003a5c:	687b      	ldr	r3, [r7, #4]
10003a5e:	2200      	movs	r2, #0
10003a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
10003a64:	2300      	movs	r3, #0
10003a66:	e000      	b.n	10003a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
10003a68:	2302      	movs	r3, #2
  }
}
10003a6a:	4618      	mov	r0, r3
10003a6c:	3714      	adds	r7, #20
10003a6e:	46bd      	mov	sp, r7
10003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
10003a74:	4770      	bx	lr
	...

10003a78 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C6 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C6 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
10003a78:	b480      	push	{r7}
10003a7a:	b083      	sub	sp, #12
10003a7c:	af00      	add	r7, sp, #0
10003a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
10003a80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003a84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
10003a88:	f8c3 2a90 	str.w	r2, [r3, #2704]	@ 0xa90

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCSETR, (uint32_t)ConfigFastModePlus);
10003a8c:	4b05      	ldr	r3, [pc, #20]	@ (10003aa4 <HAL_I2CEx_EnableFastModePlus+0x2c>)
10003a8e:	685a      	ldr	r2, [r3, #4]
10003a90:	4904      	ldr	r1, [pc, #16]	@ (10003aa4 <HAL_I2CEx_EnableFastModePlus+0x2c>)
10003a92:	687b      	ldr	r3, [r7, #4]
10003a94:	4313      	orrs	r3, r2
10003a96:	604b      	str	r3, [r1, #4]
}
10003a98:	bf00      	nop
10003a9a:	370c      	adds	r7, #12
10003a9c:	46bd      	mov	sp, r7
10003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
10003aa2:	4770      	bx	lr
10003aa4:	50020000 	.word	0x50020000

10003aa8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
10003aa8:	b580      	push	{r7, lr}
10003aaa:	b084      	sub	sp, #16
10003aac:	af00      	add	r7, sp, #0
10003aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10003ab0:	2300      	movs	r3, #0
10003ab2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10003ab4:	687b      	ldr	r3, [r7, #4]
10003ab6:	2b00      	cmp	r3, #0
10003ab8:	d01e      	beq.n	10003af8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003aba:	4b13      	ldr	r3, [pc, #76]	@ (10003b08 <HAL_IPCC_Init+0x60>)
10003abc:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
10003abe:	687b      	ldr	r3, [r7, #4]
10003ac0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10003ac4:	b2db      	uxtb	r3, r3
10003ac6:	2b00      	cmp	r3, #0
10003ac8:	d102      	bne.n	10003ad0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10003aca:	6878      	ldr	r0, [r7, #4]
10003acc:	f7fd fbd0 	bl	10001270 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
10003ad0:	68b8      	ldr	r0, [r7, #8]
10003ad2:	f000 f99d 	bl	10003e10 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10003ad6:	68bb      	ldr	r3, [r7, #8]
10003ad8:	681b      	ldr	r3, [r3, #0]
10003ada:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
10003ade:	68bb      	ldr	r3, [r7, #8]
10003ae0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
10003ae2:	6878      	ldr	r0, [r7, #4]
10003ae4:	f000 f96e 	bl	10003dc4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10003ae8:	687b      	ldr	r3, [r7, #4]
10003aea:	2200      	movs	r2, #0
10003aec:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
10003aee:	687b      	ldr	r3, [r7, #4]
10003af0:	2201      	movs	r2, #1
10003af2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
10003af6:	e001      	b.n	10003afc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10003af8:	2301      	movs	r3, #1
10003afa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10003afc:	7bfb      	ldrb	r3, [r7, #15]
}
10003afe:	4618      	mov	r0, r3
10003b00:	3710      	adds	r7, #16
10003b02:	46bd      	mov	sp, r7
10003b04:	bd80      	pop	{r7, pc}
10003b06:	bf00      	nop
10003b08:	4c001010 	.word	0x4c001010

10003b0c <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10003b0c:	b580      	push	{r7, lr}
10003b0e:	b086      	sub	sp, #24
10003b10:	af00      	add	r7, sp, #0
10003b12:	60f8      	str	r0, [r7, #12]
10003b14:	60b9      	str	r1, [r7, #8]
10003b16:	603b      	str	r3, [r7, #0]
10003b18:	4613      	mov	r3, r2
10003b1a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10003b1c:	2300      	movs	r3, #0
10003b1e:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
10003b20:	68fb      	ldr	r3, [r7, #12]
10003b22:	2b00      	cmp	r3, #0
10003b24:	d039      	beq.n	10003b9a <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10003b26:	68fb      	ldr	r3, [r7, #12]
10003b28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10003b2c:	b2db      	uxtb	r3, r3
10003b2e:	2b01      	cmp	r3, #1
10003b30:	d130      	bne.n	10003b94 <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10003b32:	79fb      	ldrb	r3, [r7, #7]
10003b34:	2b00      	cmp	r3, #0
10003b36:	d113      	bne.n	10003b60 <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10003b38:	68fa      	ldr	r2, [r7, #12]
10003b3a:	68bb      	ldr	r3, [r7, #8]
10003b3c:	3306      	adds	r3, #6
10003b3e:	009b      	lsls	r3, r3, #2
10003b40:	4413      	add	r3, r2
10003b42:	683a      	ldr	r2, [r7, #0]
10003b44:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003b46:	68fb      	ldr	r3, [r7, #12]
10003b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10003b4a:	68bb      	ldr	r3, [r7, #8]
10003b4c:	f003 030f 	and.w	r3, r3, #15
10003b50:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10003b54:	fa01 f303 	lsl.w	r3, r1, r3
10003b58:	431a      	orrs	r2, r3
10003b5a:	68fb      	ldr	r3, [r7, #12]
10003b5c:	635a      	str	r2, [r3, #52]	@ 0x34
10003b5e:	e010      	b.n	10003b82 <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
10003b60:	68fa      	ldr	r2, [r7, #12]
10003b62:	68bb      	ldr	r3, [r7, #8]
10003b64:	009b      	lsls	r3, r3, #2
10003b66:	4413      	add	r3, r2
10003b68:	683a      	ldr	r2, [r7, #0]
10003b6a:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003b6c:	68fb      	ldr	r3, [r7, #12]
10003b6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10003b70:	68bb      	ldr	r3, [r7, #8]
10003b72:	f003 030f 	and.w	r3, r3, #15
10003b76:	2101      	movs	r1, #1
10003b78:	fa01 f303 	lsl.w	r3, r1, r3
10003b7c:	431a      	orrs	r2, r3
10003b7e:	68fb      	ldr	r3, [r7, #12]
10003b80:	635a      	str	r2, [r3, #52]	@ 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
10003b82:	79fb      	ldrb	r3, [r7, #7]
10003b84:	2b01      	cmp	r3, #1
10003b86:	d10a      	bne.n	10003b9e <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10003b88:	79fb      	ldrb	r3, [r7, #7]
10003b8a:	4619      	mov	r1, r3
10003b8c:	68b8      	ldr	r0, [r7, #8]
10003b8e:	f000 f8eb 	bl	10003d68 <IPCC_UnmaskInterrupt>
10003b92:	e004      	b.n	10003b9e <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
10003b94:	2301      	movs	r3, #1
10003b96:	75fb      	strb	r3, [r7, #23]
10003b98:	e001      	b.n	10003b9e <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
10003b9a:	2301      	movs	r3, #1
10003b9c:	75fb      	strb	r3, [r7, #23]
  }
  return err;
10003b9e:	7dfb      	ldrb	r3, [r7, #23]
}
10003ba0:	4618      	mov	r0, r3
10003ba2:	3718      	adds	r7, #24
10003ba4:	46bd      	mov	sp, r7
10003ba6:	bd80      	pop	{r7, pc}

10003ba8 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003ba8:	b480      	push	{r7}
10003baa:	b089      	sub	sp, #36	@ 0x24
10003bac:	af00      	add	r7, sp, #0
10003bae:	60f8      	str	r0, [r7, #12]
10003bb0:	60b9      	str	r1, [r7, #8]
10003bb2:	4613      	mov	r3, r2
10003bb4:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003bb6:	4b14      	ldr	r3, [pc, #80]	@ (10003c08 <HAL_IPCC_GetChannelStatus+0x60>)
10003bb8:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10003bba:	4b14      	ldr	r3, [pc, #80]	@ (10003c0c <HAL_IPCC_GetChannelStatus+0x64>)
10003bbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10003bbe:	79fb      	ldrb	r3, [r7, #7]
10003bc0:	2b00      	cmp	r3, #0
10003bc2:	d10a      	bne.n	10003bda <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003bc4:	69bb      	ldr	r3, [r7, #24]
10003bc6:	68da      	ldr	r2, [r3, #12]
10003bc8:	68bb      	ldr	r3, [r7, #8]
10003bca:	f003 030f 	and.w	r3, r3, #15
10003bce:	2101      	movs	r1, #1
10003bd0:	fa01 f303 	lsl.w	r3, r1, r3
10003bd4:	4013      	ands	r3, r2
10003bd6:	61fb      	str	r3, [r7, #28]
10003bd8:	e009      	b.n	10003bee <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003bda:	697b      	ldr	r3, [r7, #20]
10003bdc:	68da      	ldr	r2, [r3, #12]
10003bde:	68bb      	ldr	r3, [r7, #8]
10003be0:	f003 030f 	and.w	r3, r3, #15
10003be4:	2101      	movs	r1, #1
10003be6:	fa01 f303 	lsl.w	r3, r1, r3
10003bea:	4013      	ands	r3, r2
10003bec:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
10003bee:	69fb      	ldr	r3, [r7, #28]
10003bf0:	2b00      	cmp	r3, #0
10003bf2:	bf14      	ite	ne
10003bf4:	2301      	movne	r3, #1
10003bf6:	2300      	moveq	r3, #0
10003bf8:	b2db      	uxtb	r3, r3
}
10003bfa:	4618      	mov	r0, r3
10003bfc:	3724      	adds	r7, #36	@ 0x24
10003bfe:	46bd      	mov	sp, r7
10003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
10003c04:	4770      	bx	lr
10003c06:	bf00      	nop
10003c08:	4c001010 	.word	0x4c001010
10003c0c:	4c001000 	.word	0x4c001000

10003c10 <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003c10:	b580      	push	{r7, lr}
10003c12:	b088      	sub	sp, #32
10003c14:	af00      	add	r7, sp, #0
10003c16:	60f8      	str	r0, [r7, #12]
10003c18:	60b9      	str	r1, [r7, #8]
10003c1a:	4613      	mov	r3, r2
10003c1c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10003c1e:	2300      	movs	r3, #0
10003c20:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003c22:	4b1d      	ldr	r3, [pc, #116]	@ (10003c98 <HAL_IPCC_NotifyCPU+0x88>)
10003c24:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10003c26:	68fb      	ldr	r3, [r7, #12]
10003c28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10003c2c:	b2db      	uxtb	r3, r3
10003c2e:	2b01      	cmp	r3, #1
10003c30:	d12a      	bne.n	10003c88 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10003c32:	69bb      	ldr	r3, [r7, #24]
10003c34:	689a      	ldr	r2, [r3, #8]
10003c36:	79fb      	ldrb	r3, [r7, #7]
10003c38:	2b00      	cmp	r3, #0
10003c3a:	d102      	bne.n	10003c42 <HAL_IPCC_NotifyCPU+0x32>
10003c3c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10003c40:	e000      	b.n	10003c44 <HAL_IPCC_NotifyCPU+0x34>
10003c42:	2101      	movs	r1, #1
10003c44:	68bb      	ldr	r3, [r7, #8]
10003c46:	f003 030f 	and.w	r3, r3, #15
10003c4a:	fa01 f303 	lsl.w	r3, r1, r3
10003c4e:	431a      	orrs	r2, r3
10003c50:	69bb      	ldr	r3, [r7, #24]
10003c52:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10003c54:	79fb      	ldrb	r3, [r7, #7]
10003c56:	2b00      	cmp	r3, #0
10003c58:	d102      	bne.n	10003c60 <HAL_IPCC_NotifyCPU+0x50>
10003c5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
10003c5e:	e000      	b.n	10003c62 <HAL_IPCC_NotifyCPU+0x52>
10003c60:	2201      	movs	r2, #1
10003c62:	68bb      	ldr	r3, [r7, #8]
10003c64:	f003 030f 	and.w	r3, r3, #15
10003c68:	fa02 f303 	lsl.w	r3, r2, r3
10003c6c:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
10003c6e:	68fb      	ldr	r3, [r7, #12]
10003c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10003c72:	697b      	ldr	r3, [r7, #20]
10003c74:	4013      	ands	r3, r2
10003c76:	697a      	ldr	r2, [r7, #20]
10003c78:	429a      	cmp	r2, r3
10003c7a:	d107      	bne.n	10003c8c <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
10003c7c:	79fb      	ldrb	r3, [r7, #7]
10003c7e:	4619      	mov	r1, r3
10003c80:	68b8      	ldr	r0, [r7, #8]
10003c82:	f000 f871 	bl	10003d68 <IPCC_UnmaskInterrupt>
10003c86:	e001      	b.n	10003c8c <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
10003c88:	2301      	movs	r3, #1
10003c8a:	77fb      	strb	r3, [r7, #31]
  }

  return err;
10003c8c:	7ffb      	ldrb	r3, [r7, #31]
}
10003c8e:	4618      	mov	r0, r3
10003c90:	3720      	adds	r7, #32
10003c92:	46bd      	mov	sp, r7
10003c94:	bd80      	pop	{r7, pc}
10003c96:	bf00      	nop
10003c98:	4c001010 	.word	0x4c001010

10003c9c <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
10003c9c:	b580      	push	{r7, lr}
10003c9e:	b088      	sub	sp, #32
10003ca0:	af00      	add	r7, sp, #0
10003ca2:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
10003ca4:	2300      	movs	r3, #0
10003ca6:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003ca8:	4b20      	ldr	r3, [pc, #128]	@ (10003d2c <HAL_IPCC_RX_IRQHandler+0x90>)
10003caa:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
10003cac:	4b20      	ldr	r3, [pc, #128]	@ (10003d30 <HAL_IPCC_RX_IRQHandler+0x94>)
10003cae:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10003cb0:	697b      	ldr	r3, [r7, #20]
10003cb2:	685b      	ldr	r3, [r3, #4]
10003cb4:	43db      	mvns	r3, r3
10003cb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10003cba:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
10003cbc:	693b      	ldr	r3, [r7, #16]
10003cbe:	68db      	ldr	r3, [r3, #12]
10003cc0:	69fa      	ldr	r2, [r7, #28]
10003cc2:	4013      	ands	r3, r2
10003cc4:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10003cc6:	e029      	b.n	10003d1c <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10003cc8:	69bb      	ldr	r3, [r7, #24]
10003cca:	f003 030f 	and.w	r3, r3, #15
10003cce:	2201      	movs	r2, #1
10003cd0:	fa02 f303 	lsl.w	r3, r2, r3
10003cd4:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
10003cd6:	69fa      	ldr	r2, [r7, #28]
10003cd8:	68fb      	ldr	r3, [r7, #12]
10003cda:	4013      	ands	r3, r2
10003cdc:	2b00      	cmp	r3, #0
10003cde:	d01a      	beq.n	10003d16 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
10003ce0:	697b      	ldr	r3, [r7, #20]
10003ce2:	685a      	ldr	r2, [r3, #4]
10003ce4:	68fb      	ldr	r3, [r7, #12]
10003ce6:	431a      	orrs	r2, r3
10003ce8:	697b      	ldr	r3, [r7, #20]
10003cea:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10003cec:	687a      	ldr	r2, [r7, #4]
10003cee:	69bb      	ldr	r3, [r7, #24]
10003cf0:	009b      	lsls	r3, r3, #2
10003cf2:	4413      	add	r3, r2
10003cf4:	685b      	ldr	r3, [r3, #4]
10003cf6:	2b00      	cmp	r3, #0
10003cf8:	d008      	beq.n	10003d0c <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10003cfa:	687a      	ldr	r2, [r7, #4]
10003cfc:	69bb      	ldr	r3, [r7, #24]
10003cfe:	009b      	lsls	r3, r3, #2
10003d00:	4413      	add	r3, r2
10003d02:	685b      	ldr	r3, [r3, #4]
10003d04:	2201      	movs	r2, #1
10003d06:	69b9      	ldr	r1, [r7, #24]
10003d08:	6878      	ldr	r0, [r7, #4]
10003d0a:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10003d0c:	68fb      	ldr	r3, [r7, #12]
10003d0e:	43db      	mvns	r3, r3
10003d10:	69fa      	ldr	r2, [r7, #28]
10003d12:	4013      	ands	r3, r2
10003d14:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
10003d16:	69bb      	ldr	r3, [r7, #24]
10003d18:	3301      	adds	r3, #1
10003d1a:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10003d1c:	69fb      	ldr	r3, [r7, #28]
10003d1e:	2b00      	cmp	r3, #0
10003d20:	d1d2      	bne.n	10003cc8 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
10003d22:	bf00      	nop
10003d24:	bf00      	nop
10003d26:	3720      	adds	r7, #32
10003d28:	46bd      	mov	sp, r7
10003d2a:	bd80      	pop	{r7, pc}
10003d2c:	4c001010 	.word	0x4c001010
10003d30:	4c001000 	.word	0x4c001000

10003d34 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003d34:	b480      	push	{r7}
10003d36:	b085      	sub	sp, #20
10003d38:	af00      	add	r7, sp, #0
10003d3a:	60f8      	str	r0, [r7, #12]
10003d3c:	60b9      	str	r1, [r7, #8]
10003d3e:	4613      	mov	r3, r2
10003d40:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
10003d42:	bf00      	nop
10003d44:	3714      	adds	r7, #20
10003d46:	46bd      	mov	sp, r7
10003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
10003d4c:	4770      	bx	lr

10003d4e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003d4e:	b480      	push	{r7}
10003d50:	b085      	sub	sp, #20
10003d52:	af00      	add	r7, sp, #0
10003d54:	60f8      	str	r0, [r7, #12]
10003d56:	60b9      	str	r1, [r7, #8]
10003d58:	4613      	mov	r3, r2
10003d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10003d5c:	bf00      	nop
10003d5e:	3714      	adds	r7, #20
10003d60:	46bd      	mov	sp, r7
10003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
10003d66:	4770      	bx	lr

10003d68 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10003d68:	b480      	push	{r7}
10003d6a:	b085      	sub	sp, #20
10003d6c:	af00      	add	r7, sp, #0
10003d6e:	6078      	str	r0, [r7, #4]
10003d70:	460b      	mov	r3, r1
10003d72:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
10003d74:	4b12      	ldr	r3, [pc, #72]	@ (10003dc0 <IPCC_UnmaskInterrupt+0x58>)
10003d76:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10003d78:	78fb      	ldrb	r3, [r7, #3]
10003d7a:	2b00      	cmp	r3, #0
10003d7c:	d10d      	bne.n	10003d9a <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003d7e:	68fb      	ldr	r3, [r7, #12]
10003d80:	685a      	ldr	r2, [r3, #4]
10003d82:	687b      	ldr	r3, [r7, #4]
10003d84:	f003 030f 	and.w	r3, r3, #15
10003d88:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10003d8c:	fa01 f303 	lsl.w	r3, r1, r3
10003d90:	43db      	mvns	r3, r3
10003d92:	401a      	ands	r2, r3
10003d94:	68fb      	ldr	r3, [r7, #12]
10003d96:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
10003d98:	e00b      	b.n	10003db2 <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10003d9a:	68fb      	ldr	r3, [r7, #12]
10003d9c:	685a      	ldr	r2, [r3, #4]
10003d9e:	687b      	ldr	r3, [r7, #4]
10003da0:	f003 030f 	and.w	r3, r3, #15
10003da4:	2101      	movs	r1, #1
10003da6:	fa01 f303 	lsl.w	r3, r1, r3
10003daa:	43db      	mvns	r3, r3
10003dac:	401a      	ands	r2, r3
10003dae:	68fb      	ldr	r3, [r7, #12]
10003db0:	605a      	str	r2, [r3, #4]
}
10003db2:	bf00      	nop
10003db4:	3714      	adds	r7, #20
10003db6:	46bd      	mov	sp, r7
10003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
10003dbc:	4770      	bx	lr
10003dbe:	bf00      	nop
10003dc0:	4c001010 	.word	0x4c001010

10003dc4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
10003dc4:	b480      	push	{r7}
10003dc6:	b085      	sub	sp, #20
10003dc8:	af00      	add	r7, sp, #0
10003dca:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10003dcc:	2300      	movs	r3, #0
10003dce:	60fb      	str	r3, [r7, #12]
10003dd0:	e00f      	b.n	10003df2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
10003dd2:	687a      	ldr	r2, [r7, #4]
10003dd4:	68fb      	ldr	r3, [r7, #12]
10003dd6:	009b      	lsls	r3, r3, #2
10003dd8:	4413      	add	r3, r2
10003dda:	4a0b      	ldr	r2, [pc, #44]	@ (10003e08 <IPCC_SetDefaultCallbacks+0x44>)
10003ddc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
10003dde:	687a      	ldr	r2, [r7, #4]
10003de0:	68fb      	ldr	r3, [r7, #12]
10003de2:	3306      	adds	r3, #6
10003de4:	009b      	lsls	r3, r3, #2
10003de6:	4413      	add	r3, r2
10003de8:	4a08      	ldr	r2, [pc, #32]	@ (10003e0c <IPCC_SetDefaultCallbacks+0x48>)
10003dea:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10003dec:	68fb      	ldr	r3, [r7, #12]
10003dee:	3301      	adds	r3, #1
10003df0:	60fb      	str	r3, [r7, #12]
10003df2:	68fb      	ldr	r3, [r7, #12]
10003df4:	2b05      	cmp	r3, #5
10003df6:	d9ec      	bls.n	10003dd2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
10003df8:	bf00      	nop
10003dfa:	bf00      	nop
10003dfc:	3714      	adds	r7, #20
10003dfe:	46bd      	mov	sp, r7
10003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
10003e04:	4770      	bx	lr
10003e06:	bf00      	nop
10003e08:	10003d35 	.word	0x10003d35
10003e0c:	10003d4f 	.word	0x10003d4f

10003e10 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
10003e10:	b480      	push	{r7}
10003e12:	b083      	sub	sp, #12
10003e14:	af00      	add	r7, sp, #0
10003e16:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10003e18:	687b      	ldr	r3, [r7, #4]
10003e1a:	2200      	movs	r2, #0
10003e1c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10003e1e:	687b      	ldr	r3, [r7, #4]
10003e20:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
10003e24:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
10003e26:	687b      	ldr	r3, [r7, #4]
10003e28:	223f      	movs	r2, #63	@ 0x3f
10003e2a:	609a      	str	r2, [r3, #8]
}
10003e2c:	bf00      	nop
10003e2e:	370c      	adds	r7, #12
10003e30:	46bd      	mov	sp, r7
10003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
10003e36:	4770      	bx	lr

10003e38 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10003e38:	b480      	push	{r7}
10003e3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10003e3c:	4b05      	ldr	r3, [pc, #20]	@ (10003e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
10003e3e:	681b      	ldr	r3, [r3, #0]
10003e40:	4a04      	ldr	r2, [pc, #16]	@ (10003e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
10003e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10003e46:	6013      	str	r3, [r2, #0]
}
10003e48:	bf00      	nop
10003e4a:	46bd      	mov	sp, r7
10003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
10003e50:	4770      	bx	lr
10003e52:	bf00      	nop
10003e54:	50001000 	.word	0x50001000

10003e58 <HAL_RCC_DeInit>:
  *            - LSI, LSE and RTC clock
  *            - HSECSS and LSECSS
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
10003e58:	b580      	push	{r7, lr}
10003e5a:	b082      	sub	sp, #8
10003e5c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set HSION bit to enable HSI oscillator */
  SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSION);
10003e5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e62:	68db      	ldr	r3, [r3, #12]
10003e64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003e68:	f043 0301 	orr.w	r3, r3, #1
10003e6c:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10003e6e:	f7fd fef7 	bl	10001c60 <HAL_GetTick>
10003e72:	6078      	str	r0, [r7, #4]

  /* Wait till HSI is ready */
  while ((RCC->OCRDYR & RCC_OCRDYR_HSIRDY) == 0U)
10003e74:	e008      	b.n	10003e88 <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10003e76:	f7fd fef3 	bl	10001c60 <HAL_GetTick>
10003e7a:	4602      	mov	r2, r0
10003e7c:	687b      	ldr	r3, [r7, #4]
10003e7e:	1ad3      	subs	r3, r2, r3
10003e80:	2b64      	cmp	r3, #100	@ 0x64
10003e82:	d901      	bls.n	10003e88 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
10003e84:	2303      	movs	r3, #3
10003e86:	e215      	b.n	100042b4 <HAL_RCC_DeInit+0x45c>
  while ((RCC->OCRDYR & RCC_OCRDYR_HSIRDY) == 0U)
10003e88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e8c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10003e90:	f003 0301 	and.w	r3, r3, #1
10003e94:	2b00      	cmp	r3, #0
10003e96:	d0ee      	beq.n	10003e76 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Reset MCO1 Configuration Register */
  CLEAR_REG(RCC->MCO1CFGR);
10003e98:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003e9c:	2200      	movs	r2, #0
10003e9e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  /* Reset MCO2 Configuration Register */
  CLEAR_REG(RCC->MCO2CFGR);
10003ea2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ea6:	2200      	movs	r2, #0
10003ea8:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  /* Reset MPU Clock Selection Register */
  MODIFY_REG(RCC->MPCKSELR, (RCC_MPCKSELR_MPUSRC), 0U);
10003eac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003eb0:	6a1b      	ldr	r3, [r3, #32]
10003eb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003eb6:	f023 0303 	bic.w	r3, r3, #3
10003eba:	6213      	str	r3, [r2, #32]

  /* Reset AXI Sub-System Clock Selection Register */
  MODIFY_REG(RCC->ASSCKSELR, (RCC_ASSCKSELR_AXISSRC), 0U);
10003ebc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003ec2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ec6:	f023 0307 	bic.w	r3, r3, #7
10003eca:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Reset MCU Sub-System Clock Selection Register */
  MODIFY_REG(RCC->MSSCKSELR, (RCC_MSSCKSELR_MCUSSRC), 0U);
10003ecc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10003ed2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ed6:	f023 0303 	bic.w	r3, r3, #3
10003eda:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Reset RCC MPU Clock Divider Register */
  MODIFY_REG(RCC->MPCKDIVR, (RCC_MPCKDIVR_MPUDIV), RCC_MPCKDIVR_MPUDIV_0);
10003edc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10003ee2:	f023 0307 	bic.w	r3, r3, #7
10003ee6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003eea:	f043 0301 	orr.w	r3, r3, #1
10003eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset RCC AXI Clock Divider Register */
  MODIFY_REG(RCC->AXIDIVR, (RCC_AXIDIVR_AXIDIV), 0U);
10003ef0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10003ef6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003efa:	f023 0307 	bic.w	r3, r3, #7
10003efe:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Reset RCC APB4 Clock Divider Register */
  MODIFY_REG(RCC->APB4DIVR, (RCC_APB4DIVR_APB4DIV), 0U);
10003f00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10003f06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f0a:	f023 0307 	bic.w	r3, r3, #7
10003f0e:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset RCC APB5 Clock Divider Register */
  MODIFY_REG(RCC->APB5DIVR, (RCC_APB5DIVR_APB5DIV), 0U);
10003f10:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10003f16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f1a:	f023 0307 	bic.w	r3, r3, #7
10003f1e:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Reset RCC MCU Clock Divider Register */
  MODIFY_REG(RCC->MCUDIVR, (RCC_MCUDIVR_MCUDIV), 0U);
10003f20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f24:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10003f28:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f2c:	f023 030f 	bic.w	r3, r3, #15
10003f30:	f8c2 3830 	str.w	r3, [r2, #2096]	@ 0x830

  /* Reset RCC APB1 Clock Divider Register */
  MODIFY_REG(RCC->APB1DIVR, (RCC_APB1DIVR_APB1DIV), 0U);
10003f34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f38:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10003f3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f40:	f023 0307 	bic.w	r3, r3, #7
10003f44:	f8c2 3834 	str.w	r3, [r2, #2100]	@ 0x834

  /* Reset RCC APB2 Clock Divider Register */
  MODIFY_REG(RCC->APB2DIVR, (RCC_APB2DIVR_APB2DIV), 0U);
10003f48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f4c:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10003f50:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f54:	f023 0307 	bic.w	r3, r3, #7
10003f58:	f8c2 3838 	str.w	r3, [r2, #2104]	@ 0x838

  /* Reset RCC APB3 Clock Divider Register */
  MODIFY_REG(RCC->APB3DIVR, (RCC_APB3DIVR_APB3DIV), 0U);
10003f5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f60:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10003f64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f68:	f023 0307 	bic.w	r3, r3, #7
10003f6c:	f8c2 383c 	str.w	r3, [r2, #2108]	@ 0x83c

  /* Disable PLL1 outputs */
  CLEAR_BIT(RCC->PLL1CR, RCC_PLL1CR_DIVPEN | RCC_PLL1CR_DIVQEN |
10003f70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10003f78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003f80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            RCC_PLL1CR_DIVREN);

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10003f84:	f7fd fe6c 	bl	10001c60 <HAL_GetTick>
10003f88:	6078      	str	r0, [r7, #4]

  /* Disable PLL1 */
  CLEAR_BIT(RCC->PLL1CR, RCC_PLL1CR_PLLON);
10003f8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10003f92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003f96:	f023 0301 	bic.w	r3, r3, #1
10003f9a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Wait till PLL is disabled */
  while ((RCC->PLL1CR & RCC_PLL1CR_PLL1RDY) != 0U)
10003f9e:	e008      	b.n	10003fb2 <HAL_RCC_DeInit+0x15a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003fa0:	f7fd fe5e 	bl	10001c60 <HAL_GetTick>
10003fa4:	4602      	mov	r2, r0
10003fa6:	687b      	ldr	r3, [r7, #4]
10003fa8:	1ad3      	subs	r3, r2, r3
10003faa:	2b64      	cmp	r3, #100	@ 0x64
10003fac:	d901      	bls.n	10003fb2 <HAL_RCC_DeInit+0x15a>
    {
      return HAL_TIMEOUT;
10003fae:	2303      	movs	r3, #3
10003fb0:	e180      	b.n	100042b4 <HAL_RCC_DeInit+0x45c>
  while ((RCC->PLL1CR & RCC_PLL1CR_PLL1RDY) != 0U)
10003fb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10003fba:	f003 0302 	and.w	r3, r3, #2
10003fbe:	2b00      	cmp	r3, #0
10003fc0:	d1ee      	bne.n	10003fa0 <HAL_RCC_DeInit+0x148>
    }
  }

  /* Clear remaining SSCG_CTRL bit */
  CLEAR_BIT(RCC->PLL1CR, RCC_PLL1CR_SSCG_CTRL);
10003fc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10003fca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003fce:	f023 0304 	bic.w	r3, r3, #4
10003fd2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Disable PLL2 outputs */
  CLEAR_BIT(RCC->PLL2CR, RCC_PLL2CR_DIVPEN | RCC_PLL2CR_DIVQEN |
10003fd6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003fde:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10003fe6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
            RCC_PLL2CR_DIVREN);

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10003fea:	f7fd fe39 	bl	10001c60 <HAL_GetTick>
10003fee:	6078      	str	r0, [r7, #4]

  /* Disable PLL2 */
  CLEAR_BIT(RCC->PLL2CR, RCC_PLL2CR_PLLON);
10003ff0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10003ff8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10003ffc:	f023 0301 	bic.w	r3, r3, #1
10004000:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Wait till PLL is disabled */
  while ((RCC->PLL2CR & RCC_PLL2CR_PLL2RDY) != 0U)
10004004:	e008      	b.n	10004018 <HAL_RCC_DeInit+0x1c0>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004006:	f7fd fe2b 	bl	10001c60 <HAL_GetTick>
1000400a:	4602      	mov	r2, r0
1000400c:	687b      	ldr	r3, [r7, #4]
1000400e:	1ad3      	subs	r3, r2, r3
10004010:	2b64      	cmp	r3, #100	@ 0x64
10004012:	d901      	bls.n	10004018 <HAL_RCC_DeInit+0x1c0>
    {
      return HAL_TIMEOUT;
10004014:	2303      	movs	r3, #3
10004016:	e14d      	b.n	100042b4 <HAL_RCC_DeInit+0x45c>
  while ((RCC->PLL2CR & RCC_PLL2CR_PLL2RDY) != 0U)
10004018:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000401c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10004020:	f003 0302 	and.w	r3, r3, #2
10004024:	2b00      	cmp	r3, #0
10004026:	d1ee      	bne.n	10004006 <HAL_RCC_DeInit+0x1ae>
    }
  }

  /* Clear remaining SSCG_CTRL bit */
  CLEAR_BIT(RCC->PLL2CR, RCC_PLL2CR_SSCG_CTRL);
10004028:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000402c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10004030:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004034:	f023 0304 	bic.w	r3, r3, #4
10004038:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Disable PLL3 outputs */
  CLEAR_BIT(RCC->PLL3CR, RCC_PLL3CR_DIVPEN | RCC_PLL3CR_DIVQEN |
1000403c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004040:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004044:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
1000404c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
            RCC_PLL3CR_DIVREN);

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004050:	f7fd fe06 	bl	10001c60 <HAL_GetTick>
10004054:	6078      	str	r0, [r7, #4]

  /* Disable PLL3 */
  CLEAR_BIT(RCC->PLL3CR, RCC_PLL3CR_PLLON);
10004056:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000405a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000405e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004062:	f023 0301 	bic.w	r3, r3, #1
10004066:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

  /* Wait till PLL is disabled */
  while ((RCC->PLL3CR & RCC_PLL3CR_PLL3RDY) != 0U)
1000406a:	e008      	b.n	1000407e <HAL_RCC_DeInit+0x226>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000406c:	f7fd fdf8 	bl	10001c60 <HAL_GetTick>
10004070:	4602      	mov	r2, r0
10004072:	687b      	ldr	r3, [r7, #4]
10004074:	1ad3      	subs	r3, r2, r3
10004076:	2b64      	cmp	r3, #100	@ 0x64
10004078:	d901      	bls.n	1000407e <HAL_RCC_DeInit+0x226>
    {
      return HAL_TIMEOUT;
1000407a:	2303      	movs	r3, #3
1000407c:	e11a      	b.n	100042b4 <HAL_RCC_DeInit+0x45c>
  while ((RCC->PLL3CR & RCC_PLL3CR_PLL3RDY) != 0U)
1000407e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004082:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004086:	f003 0302 	and.w	r3, r3, #2
1000408a:	2b00      	cmp	r3, #0
1000408c:	d1ee      	bne.n	1000406c <HAL_RCC_DeInit+0x214>
    }
  }

  /* Clear remaining SSCG_CTRL bit */
  CLEAR_BIT(RCC->PLL3CR, RCC_PLL3CR_SSCG_CTRL);
1000408e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004092:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004096:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000409a:	f023 0304 	bic.w	r3, r3, #4
1000409e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

  /* Disable PLL4 outputs */
  CLEAR_BIT(RCC->PLL4CR, RCC_PLL4CR_DIVPEN | RCC_PLL4CR_DIVQEN |
100040a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040a6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100040aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100040ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100040b2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
            RCC_PLL4CR_DIVREN);

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100040b6:	f7fd fdd3 	bl	10001c60 <HAL_GetTick>
100040ba:	6078      	str	r0, [r7, #4]

  /* Disable PLL4 */
  CLEAR_BIT(RCC->PLL4CR, RCC_PLL4CR_PLLON);
100040bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040c0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100040c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100040c8:	f023 0301 	bic.w	r3, r3, #1
100040cc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

  /* Wait till PLL is disabled */
  while ((RCC->PLL4CR & RCC_PLL4CR_PLL4RDY) != 0U)
100040d0:	e008      	b.n	100040e4 <HAL_RCC_DeInit+0x28c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100040d2:	f7fd fdc5 	bl	10001c60 <HAL_GetTick>
100040d6:	4602      	mov	r2, r0
100040d8:	687b      	ldr	r3, [r7, #4]
100040da:	1ad3      	subs	r3, r2, r3
100040dc:	2b64      	cmp	r3, #100	@ 0x64
100040de:	d901      	bls.n	100040e4 <HAL_RCC_DeInit+0x28c>
    {
      return HAL_TIMEOUT;
100040e0:	2303      	movs	r3, #3
100040e2:	e0e7      	b.n	100042b4 <HAL_RCC_DeInit+0x45c>
  while ((RCC->PLL4CR & RCC_PLL4CR_PLL4RDY) != 0U)
100040e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040e8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100040ec:	f003 0302 	and.w	r3, r3, #2
100040f0:	2b00      	cmp	r3, #0
100040f2:	d1ee      	bne.n	100040d2 <HAL_RCC_DeInit+0x27a>
    }
  }

  /* Clear remaining SSCG_CTRL bit */
  CLEAR_BIT(RCC->PLL4CR, RCC_PLL4CR_SSCG_CTRL);
100040f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100040f8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100040fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004100:	f023 0304 	bic.w	r3, r3, #4
10004104:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

  /* Reset PLL 1 and 2 Ref. Clock Selection Register */
  MODIFY_REG(RCC->RCK12SELR, (RCC_RCK12SELR_PLL12SRC), 0U);
10004108:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000410c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000410e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004112:	f023 0303 	bic.w	r3, r3, #3
10004116:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Reset RCC PLL 3 Ref. Clock Selection Register */
  MODIFY_REG(RCC->RCK3SELR, (RCC_RCK3SELR_PLL3SRC), 0U);
10004118:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000411c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10004120:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004124:	f023 0303 	bic.w	r3, r3, #3
10004128:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820

  /* Reset PLL4 Ref. Clock Selection Register */
  MODIFY_REG(RCC->RCK4SELR, (RCC_RCK4SELR_PLL4SRC), 0U);
1000412c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004130:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10004134:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004138:	f023 0303 	bic.w	r3, r3, #3
1000413c:	f8c2 3824 	str.w	r3, [r2, #2084]	@ 0x824

  /* Reset RCC PLL1 Configuration Register 1 */
  WRITE_REG(RCC->PLL1CFGR1, 0x00010031U);
10004140:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004144:	4a5d      	ldr	r2, [pc, #372]	@ (100042bc <HAL_RCC_DeInit+0x464>)
10004146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset RCC PLL1 Configuration Register 2 */
  WRITE_REG(RCC->PLL1CFGR2, 0x00010100U);
1000414a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000414e:	4a5c      	ldr	r2, [pc, #368]	@ (100042c0 <HAL_RCC_DeInit+0x468>)
10004150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Reset RCC PLL1 Fractional Register */
  CLEAR_REG(RCC->PLL1FRACR);
10004154:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004158:	2200      	movs	r2, #0
1000415a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Reset RCC PLL1 Clock Spreading Generator Register */
  CLEAR_REG(RCC->PLL1CSGR);
1000415e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004162:	2200      	movs	r2, #0
10004164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Reset RCC PLL2 Configuration Register 1 */
  WRITE_REG(RCC->PLL2CFGR1, 0x00010063U);
10004168:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000416c:	4a55      	ldr	r2, [pc, #340]	@ (100042c4 <HAL_RCC_DeInit+0x46c>)
1000416e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Reset RCC PLL2 Configuration Register 2 */
  WRITE_REG(RCC->PLL2CFGR2, 0x00010101U);
10004172:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004176:	4a54      	ldr	r2, [pc, #336]	@ (100042c8 <HAL_RCC_DeInit+0x470>)
10004178:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Reset RCC PLL2 Fractional Register */
  CLEAR_REG(RCC->PLL2FRACR);
1000417c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004180:	2200      	movs	r2, #0
10004182:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Reset RCC PLL2 Clock Spreading Generator Register */
  CLEAR_REG(RCC->PLL2CSGR);
10004186:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000418a:	2200      	movs	r2, #0
1000418c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Reset RCC PLL3 Configuration Register 1 */
  WRITE_REG(RCC->PLL3CFGR1, 0x00010031U);
10004190:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004194:	4a49      	ldr	r2, [pc, #292]	@ (100042bc <HAL_RCC_DeInit+0x464>)
10004196:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884

  /* Reset RCC PLL3 Configuration Register 2 */
  WRITE_REG(RCC->PLL3CFGR2, 0x00010101U);
1000419a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000419e:	4a4a      	ldr	r2, [pc, #296]	@ (100042c8 <HAL_RCC_DeInit+0x470>)
100041a0:	f8c3 2888 	str.w	r2, [r3, #2184]	@ 0x888

  /* Reset RCC PLL3 Fractional Register */
  CLEAR_REG(RCC->PLL3FRACR);
100041a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041a8:	2200      	movs	r2, #0
100041aa:	f8c3 288c 	str.w	r2, [r3, #2188]	@ 0x88c

  /* Reset RCC PLL3 Clock Spreading Generator Register */
  CLEAR_REG(RCC->PLL3CSGR);
100041ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041b2:	2200      	movs	r2, #0
100041b4:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890

  /* Reset RCC PLL4 Configuration Register 1 */
  WRITE_REG(RCC->PLL4CFGR1, 0x00010031U);
100041b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041bc:	4a3f      	ldr	r2, [pc, #252]	@ (100042bc <HAL_RCC_DeInit+0x464>)
100041be:	f8c3 2898 	str.w	r2, [r3, #2200]	@ 0x898

  /* Reset RCC PLL4 Configuration Register 2 */
  WRITE_REG(RCC->PLL4CFGR2, 0x00000000U);
100041c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041c6:	2200      	movs	r2, #0
100041c8:	f8c3 289c 	str.w	r2, [r3, #2204]	@ 0x89c

  /* Reset RCC PLL4 Fractional Register */
  CLEAR_REG(RCC->PLL4FRACR);
100041cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041d0:	2200      	movs	r2, #0
100041d2:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0

  /* Reset RCC PLL4 Clock Spreading Generator Register */
  CLEAR_REG(RCC->PLL4CSGR);
100041d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041da:	2200      	movs	r2, #0
100041dc:	f8c3 28a4 	str.w	r2, [r3, #2212]	@ 0x8a4

  /* Reset HSIDIV once PLLs are off */
  CLEAR_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV);
100041e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100041e4:	699b      	ldr	r3, [r3, #24]
100041e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100041ea:	f023 0303 	bic.w	r3, r3, #3
100041ee:	6193      	str	r3, [r2, #24]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100041f0:	f7fd fd36 	bl	10001c60 <HAL_GetTick>
100041f4:	6078      	str	r0, [r7, #4]

  /* Wait till HSIDIV is ready */
  while ((RCC->OCRDYR & RCC_OCRDYR_HSIDIVRDY) == 0U)
100041f6:	e008      	b.n	1000420a <HAL_RCC_DeInit+0x3b2>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100041f8:	f7fd fd32 	bl	10001c60 <HAL_GetTick>
100041fc:	4602      	mov	r2, r0
100041fe:	687b      	ldr	r3, [r7, #4]
10004200:	1ad3      	subs	r3, r2, r3
10004202:	2b64      	cmp	r3, #100	@ 0x64
10004204:	d901      	bls.n	1000420a <HAL_RCC_DeInit+0x3b2>
    {
      return HAL_TIMEOUT;
10004206:	2303      	movs	r3, #3
10004208:	e054      	b.n	100042b4 <HAL_RCC_DeInit+0x45c>
  while ((RCC->OCRDYR & RCC_OCRDYR_HSIDIVRDY) == 0U)
1000420a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000420e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10004212:	f003 0304 	and.w	r3, r3, #4
10004216:	2b00      	cmp	r3, #0
10004218:	d0ee      	beq.n	100041f8 <HAL_RCC_DeInit+0x3a0>
    }
  }

  /* Reset HSITRIM value */
  CLEAR_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM);
1000421a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000421e:	699b      	ldr	r3, [r3, #24]
10004220:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004224:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10004228:	6193      	str	r3, [r2, #24]

  /* Reset the Oscillator Enable Control registers */
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSIKERON | RCC_OCENCLRR_CSION |
1000422a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000422e:	f240 72b2 	movw	r2, #1970	@ 0x7b2
10004232:	611a      	str	r2, [r3, #16]
            RCC_OCENCLRR_CSIKERON | RCC_OCENCLRR_DIGBYP | RCC_OCENCLRR_HSEON |
            RCC_OCENCLRR_HSEKERON | RCC_OCENCLRR_HSEBYP);

  /* Clear LSION bit */
  CLEAR_BIT(RCC->RDLSICR, RCC_RDLSICR_LSION);
10004234:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004238:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000423c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004240:	f023 0301 	bic.w	r3, r3, #1
10004244:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

  /* Reset CSITRIM value */
  CLEAR_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM);
10004248:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000424c:	69db      	ldr	r3, [r3, #28]
1000424e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004252:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
10004256:	61d3      	str	r3, [r2, #28]
                             RCC_MP_RSTSCLRR_BORRSTF | RCC_MP_RSTSCLRR_PORRSTF));
#endif

#ifdef CORE_CM4
  /* Reset RCC Clock Source Interrupt Enable Register */
  CLEAR_BIT(RCC->MC_CIER, (RCC_MC_CIER_LSIRDYIE | RCC_MC_CIER_LSERDYIE |
10004258:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000425c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	@ 0xc14
10004260:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004264:	4b19      	ldr	r3, [pc, #100]	@ (100042cc <HAL_RCC_DeInit+0x474>)
10004266:	4013      	ands	r3, r2
10004268:	f8c1 3c14 	str.w	r3, [r1, #3092]	@ 0xc14
                           RCC_MC_CIER_HSIRDYIE | RCC_MC_CIER_HSERDYIE | RCC_MC_CIER_CSIRDYIE |
                           RCC_MC_CIER_PLL1DYIE | RCC_MC_CIER_PLL2DYIE | RCC_MC_CIER_PLL3DYIE |
                           RCC_MC_CIER_PLL4DYIE | RCC_MC_CIER_LSECSSIE | RCC_MC_CIER_WKUPIE));

  /* Clear all RCC MCU interrupt flags */
  SET_BIT(RCC->MC_CIFR, (RCC_MC_CIFR_LSIRDYF | RCC_MC_CIFR_LSERDYF |
1000426c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004270:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	@ 0xc18
10004274:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004278:	4b15      	ldr	r3, [pc, #84]	@ (100042d0 <HAL_RCC_DeInit+0x478>)
1000427a:	4313      	orrs	r3, r2
1000427c:	f8c1 3c18 	str.w	r3, [r1, #3096]	@ 0xc18
                         RCC_MC_CIFR_HSIRDYF | RCC_MC_CIFR_HSERDYF | RCC_MC_CIFR_CSIRDYF |
                         RCC_MC_CIFR_PLL1DYF | RCC_MC_CIFR_PLL2DYF | RCC_MC_CIFR_PLL3DYF |
                         RCC_MC_CIFR_PLL4DYF | RCC_MC_CIFR_LSECSSF | RCC_MC_CIFR_WKUPF));

  /* Clear all RCC MCU Reset Flags */
  SET_BIT(RCC->MC_RSTSCLRR, RCC_MC_RSTSCLRR_WWDG1RSTF |
10004280:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004284:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
10004288:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000428c:	ea6f 23d3 	mvn.w	r3, r3, lsr #11
10004290:	ea6f 23c3 	mvn.w	r3, r3, lsl #11
10004294:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
          RCC_MC_RSTSCLRR_HCSSRSTF | RCC_MC_RSTSCLRR_PADRSTF |
          RCC_MC_RSTSCLRR_BORRSTF | RCC_MC_RSTSCLRR_PORRSTF);
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
10004298:	4b0e      	ldr	r3, [pc, #56]	@ (100042d4 <HAL_RCC_DeInit+0x47c>)
1000429a:	4a0f      	ldr	r2, [pc, #60]	@ (100042d8 <HAL_RCC_DeInit+0x480>)
1000429c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
1000429e:	4b0f      	ldr	r3, [pc, #60]	@ (100042dc <HAL_RCC_DeInit+0x484>)
100042a0:	681b      	ldr	r3, [r3, #0]
100042a2:	4618      	mov	r0, r3
100042a4:	f7fd fc92 	bl	10001bcc <HAL_InitTick>
100042a8:	4603      	mov	r3, r0
100042aa:	2b00      	cmp	r3, #0
100042ac:	d001      	beq.n	100042b2 <HAL_RCC_DeInit+0x45a>
  {
    return HAL_ERROR;
100042ae:	2301      	movs	r3, #1
100042b0:	e000      	b.n	100042b4 <HAL_RCC_DeInit+0x45c>
  }

  return HAL_OK;
100042b2:	2300      	movs	r3, #0
}
100042b4:	4618      	mov	r0, r3
100042b6:	3708      	adds	r7, #8
100042b8:	46bd      	mov	sp, r7
100042ba:	bd80      	pop	{r7, pc}
100042bc:	00010031 	.word	0x00010031
100042c0:	00010100 	.word	0x00010100
100042c4:	00010063 	.word	0x00010063
100042c8:	00010101 	.word	0x00010101
100042cc:	ffeef0e0 	.word	0xffeef0e0
100042d0:	00110f1f 	.word	0x00110f1f
100042d4:	1002009c 	.word	0x1002009c
100042d8:	03d09000 	.word	0x03d09000
100042dc:	100200a0 	.word	0x100200a0

100042e0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100042e0:	b580      	push	{r7, lr}
100042e2:	b084      	sub	sp, #16
100042e4:	af00      	add	r7, sp, #0
100042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
100042e8:	2300      	movs	r3, #0
100042ea:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100042ec:	687b      	ldr	r3, [r7, #4]
100042ee:	2b00      	cmp	r3, #0
100042f0:	d101      	bne.n	100042f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
100042f2:	2301      	movs	r3, #1
100042f4:	e320      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
100042f6:	687b      	ldr	r3, [r7, #4]
100042f8:	681b      	ldr	r3, [r3, #0]
100042fa:	f003 0301 	and.w	r3, r3, #1
100042fe:	2b00      	cmp	r3, #0
10004300:	f000 8081 	beq.w	10004406 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10004304:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004308:	6a1b      	ldr	r3, [r3, #32]
1000430a:	f003 0303 	and.w	r3, r3, #3
1000430e:	2b01      	cmp	r3, #1
10004310:	d107      	bne.n	10004322 <HAL_RCC_OscConfig+0x42>
10004312:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004316:	6a1b      	ldr	r3, [r3, #32]
10004318:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000431c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004320:	d054      	beq.n	100043cc <HAL_RCC_OscConfig+0xec>
10004322:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004328:	f003 0307 	and.w	r3, r3, #7
1000432c:	2b01      	cmp	r3, #1
1000432e:	d107      	bne.n	10004340 <HAL_RCC_OscConfig+0x60>
10004330:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000433a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000433e:	d045      	beq.n	100043cc <HAL_RCC_OscConfig+0xec>
10004340:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10004346:	f003 0303 	and.w	r3, r3, #3
1000434a:	2b01      	cmp	r3, #1
1000434c:	d107      	bne.n	1000435e <HAL_RCC_OscConfig+0x7e>
1000434e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10004354:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004358:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000435c:	d036      	beq.n	100043cc <HAL_RCC_OscConfig+0xec>
1000435e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10004364:	f003 0303 	and.w	r3, r3, #3
10004368:	2b01      	cmp	r3, #1
1000436a:	d10f      	bne.n	1000438c <HAL_RCC_OscConfig+0xac>
1000436c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004374:	f003 0302 	and.w	r3, r3, #2
10004378:	2b02      	cmp	r3, #2
1000437a:	d027      	beq.n	100043cc <HAL_RCC_OscConfig+0xec>
1000437c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004380:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10004384:	f003 0302 	and.w	r3, r3, #2
10004388:	2b02      	cmp	r3, #2
1000438a:	d01f      	beq.n	100043cc <HAL_RCC_OscConfig+0xec>
1000438c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004390:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10004394:	f003 0303 	and.w	r3, r3, #3
10004398:	2b01      	cmp	r3, #1
1000439a:	d107      	bne.n	100043ac <HAL_RCC_OscConfig+0xcc>
1000439c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043a0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100043a4:	f003 0302 	and.w	r3, r3, #2
100043a8:	2b02      	cmp	r3, #2
100043aa:	d00f      	beq.n	100043cc <HAL_RCC_OscConfig+0xec>
100043ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043b0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100043b4:	f003 0303 	and.w	r3, r3, #3
100043b8:	2b01      	cmp	r3, #1
100043ba:	d117      	bne.n	100043ec <HAL_RCC_OscConfig+0x10c>
100043bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043c0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100043c4:	f003 0302 	and.w	r3, r3, #2
100043c8:	2b02      	cmp	r3, #2
100043ca:	d10f      	bne.n	100043ec <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100043cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100043d0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100043d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100043dc:	d112      	bne.n	10004404 <HAL_RCC_OscConfig+0x124>
100043de:	687b      	ldr	r3, [r7, #4]
100043e0:	685b      	ldr	r3, [r3, #4]
100043e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100043e6:	d00d      	beq.n	10004404 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
100043e8:	2301      	movs	r3, #1
100043ea:	e2a5      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
100043ec:	687b      	ldr	r3, [r7, #4]
100043ee:	685b      	ldr	r3, [r3, #4]
100043f0:	4618      	mov	r0, r3
100043f2:	f000 faa7 	bl	10004944 <HAL_RCC_HSEConfig>
100043f6:	4603      	mov	r3, r0
100043f8:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
100043fa:	7bfb      	ldrb	r3, [r7, #15]
100043fc:	2b00      	cmp	r3, #0
100043fe:	d002      	beq.n	10004406 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10004400:	7bfb      	ldrb	r3, [r7, #15]
10004402:	e299      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10004404:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10004406:	687b      	ldr	r3, [r7, #4]
10004408:	681b      	ldr	r3, [r3, #0]
1000440a:	f003 0302 	and.w	r3, r3, #2
1000440e:	2b00      	cmp	r3, #0
10004410:	f000 814e 	beq.w	100046b0 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10004414:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004418:	6a1b      	ldr	r3, [r3, #32]
1000441a:	f003 0303 	and.w	r3, r3, #3
1000441e:	2b00      	cmp	r3, #0
10004420:	d107      	bne.n	10004432 <HAL_RCC_OscConfig+0x152>
10004422:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004426:	6a1b      	ldr	r3, [r3, #32]
10004428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000442c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004430:	d055      	beq.n	100044de <HAL_RCC_OscConfig+0x1fe>
10004432:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004438:	f003 0307 	and.w	r3, r3, #7
1000443c:	2b00      	cmp	r3, #0
1000443e:	d107      	bne.n	10004450 <HAL_RCC_OscConfig+0x170>
10004440:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004446:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000444a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000444e:	d046      	beq.n	100044de <HAL_RCC_OscConfig+0x1fe>
10004450:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10004456:	f003 0303 	and.w	r3, r3, #3
1000445a:	2b00      	cmp	r3, #0
1000445c:	d107      	bne.n	1000446e <HAL_RCC_OscConfig+0x18e>
1000445e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10004464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000446c:	d037      	beq.n	100044de <HAL_RCC_OscConfig+0x1fe>
1000446e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10004474:	f003 0303 	and.w	r3, r3, #3
10004478:	2b00      	cmp	r3, #0
1000447a:	d10f      	bne.n	1000449c <HAL_RCC_OscConfig+0x1bc>
1000447c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004484:	f003 0302 	and.w	r3, r3, #2
10004488:	2b02      	cmp	r3, #2
1000448a:	d028      	beq.n	100044de <HAL_RCC_OscConfig+0x1fe>
1000448c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10004494:	f003 0302 	and.w	r3, r3, #2
10004498:	2b02      	cmp	r3, #2
1000449a:	d020      	beq.n	100044de <HAL_RCC_OscConfig+0x1fe>
1000449c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044a0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100044a4:	f003 0303 	and.w	r3, r3, #3
100044a8:	2b00      	cmp	r3, #0
100044aa:	d107      	bne.n	100044bc <HAL_RCC_OscConfig+0x1dc>
100044ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044b0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100044b4:	f003 0302 	and.w	r3, r3, #2
100044b8:	2b02      	cmp	r3, #2
100044ba:	d010      	beq.n	100044de <HAL_RCC_OscConfig+0x1fe>
100044bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044c0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100044c4:	f003 0303 	and.w	r3, r3, #3
100044c8:	2b00      	cmp	r3, #0
100044ca:	f040 8088 	bne.w	100045de <HAL_RCC_OscConfig+0x2fe>
100044ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044d2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100044d6:	f003 0302 	and.w	r3, r3, #2
100044da:	2b02      	cmp	r3, #2
100044dc:	d17f      	bne.n	100045de <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100044de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044e2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100044e6:	f003 0301 	and.w	r3, r3, #1
100044ea:	2b01      	cmp	r3, #1
100044ec:	d105      	bne.n	100044fa <HAL_RCC_OscConfig+0x21a>
100044ee:	687b      	ldr	r3, [r7, #4]
100044f0:	68db      	ldr	r3, [r3, #12]
100044f2:	2b01      	cmp	r3, #1
100044f4:	d001      	beq.n	100044fa <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
100044f6:	2301      	movs	r3, #1
100044f8:	e21e      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100044fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100044fe:	699b      	ldr	r3, [r3, #24]
10004500:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
10004504:	687b      	ldr	r3, [r7, #4]
10004506:	691b      	ldr	r3, [r3, #16]
10004508:	021b      	lsls	r3, r3, #8
1000450a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000450e:	4313      	orrs	r3, r2
10004510:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10004512:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10004518:	f003 0303 	and.w	r3, r3, #3
1000451c:	2b00      	cmp	r3, #0
1000451e:	d10f      	bne.n	10004540 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10004520:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004528:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
1000452c:	2b02      	cmp	r3, #2
1000452e:	d047      	beq.n	100045c0 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10004530:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10004538:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
1000453c:	2b02      	cmp	r3, #2
1000453e:	d03f      	beq.n	100045c0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10004540:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004544:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10004548:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
1000454c:	2b00      	cmp	r3, #0
1000454e:	d107      	bne.n	10004560 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10004550:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004554:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10004558:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
1000455c:	2b02      	cmp	r3, #2
1000455e:	d02f      	beq.n	100045c0 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10004560:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004564:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10004568:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
1000456c:	2b00      	cmp	r3, #0
1000456e:	d107      	bne.n	10004580 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10004570:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004574:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004578:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
1000457c:	2b02      	cmp	r3, #2
1000457e:	d01f      	beq.n	100045c0 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10004580:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004584:	699b      	ldr	r3, [r3, #24]
10004586:	f023 0203 	bic.w	r2, r3, #3
1000458a:	687b      	ldr	r3, [r7, #4]
1000458c:	695b      	ldr	r3, [r3, #20]
1000458e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004592:	4313      	orrs	r3, r2
10004594:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10004596:	f7fd fb63 	bl	10001c60 <HAL_GetTick>
1000459a:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000459c:	e008      	b.n	100045b0 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000459e:	f7fd fb5f 	bl	10001c60 <HAL_GetTick>
100045a2:	4602      	mov	r2, r0
100045a4:	68bb      	ldr	r3, [r7, #8]
100045a6:	1ad3      	subs	r3, r2, r3
100045a8:	2b64      	cmp	r3, #100	@ 0x64
100045aa:	d901      	bls.n	100045b0 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
100045ac:	2303      	movs	r3, #3
100045ae:	e1c3      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
100045b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045b4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100045b8:	f003 0304 	and.w	r3, r3, #4
100045bc:	2b04      	cmp	r3, #4
100045be:	d1ee      	bne.n	1000459e <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
100045c0:	f001 f809 	bl	100055d6 <HAL_RCC_GetSystemCoreClockFreq>
100045c4:	4603      	mov	r3, r0
100045c6:	4ab3      	ldr	r2, [pc, #716]	@ (10004894 <HAL_RCC_OscConfig+0x5b4>)
100045c8:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
100045ca:	4bb3      	ldr	r3, [pc, #716]	@ (10004898 <HAL_RCC_OscConfig+0x5b8>)
100045cc:	681b      	ldr	r3, [r3, #0]
100045ce:	4618      	mov	r0, r3
100045d0:	f7fd fafc 	bl	10001bcc <HAL_InitTick>
100045d4:	4603      	mov	r3, r0
100045d6:	2b00      	cmp	r3, #0
100045d8:	d069      	beq.n	100046ae <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
100045da:	2301      	movs	r3, #1
100045dc:	e1ac      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
100045de:	687b      	ldr	r3, [r7, #4]
100045e0:	68db      	ldr	r3, [r3, #12]
100045e2:	2b00      	cmp	r3, #0
100045e4:	d049      	beq.n	1000467a <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
100045e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100045ea:	68db      	ldr	r3, [r3, #12]
100045ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100045f0:	f043 0301 	orr.w	r3, r3, #1
100045f4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100045f6:	f7fd fb33 	bl	10001c60 <HAL_GetTick>
100045fa:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100045fc:	e008      	b.n	10004610 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100045fe:	f7fd fb2f 	bl	10001c60 <HAL_GetTick>
10004602:	4602      	mov	r2, r0
10004604:	68bb      	ldr	r3, [r7, #8]
10004606:	1ad3      	subs	r3, r2, r3
10004608:	2b64      	cmp	r3, #100	@ 0x64
1000460a:	d901      	bls.n	10004610 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
1000460c:	2303      	movs	r3, #3
1000460e:	e193      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10004610:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004614:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10004618:	f003 0301 	and.w	r3, r3, #1
1000461c:	2b01      	cmp	r3, #1
1000461e:	d1ee      	bne.n	100045fe <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10004620:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004624:	699b      	ldr	r3, [r3, #24]
10004626:	f023 0203 	bic.w	r2, r3, #3
1000462a:	687b      	ldr	r3, [r7, #4]
1000462c:	695b      	ldr	r3, [r3, #20]
1000462e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004632:	4313      	orrs	r3, r2
10004634:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004636:	f7fd fb13 	bl	10001c60 <HAL_GetTick>
1000463a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000463c:	e008      	b.n	10004650 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000463e:	f7fd fb0f 	bl	10001c60 <HAL_GetTick>
10004642:	4602      	mov	r2, r0
10004644:	68bb      	ldr	r3, [r7, #8]
10004646:	1ad3      	subs	r3, r2, r3
10004648:	2b64      	cmp	r3, #100	@ 0x64
1000464a:	d901      	bls.n	10004650 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
1000464c:	2303      	movs	r3, #3
1000464e:	e173      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10004650:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004654:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10004658:	f003 0304 	and.w	r3, r3, #4
1000465c:	2b04      	cmp	r3, #4
1000465e:	d1ee      	bne.n	1000463e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10004660:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004664:	699b      	ldr	r3, [r3, #24]
10004666:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
1000466a:	687b      	ldr	r3, [r7, #4]
1000466c:	691b      	ldr	r3, [r3, #16]
1000466e:	021b      	lsls	r3, r3, #8
10004670:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004674:	4313      	orrs	r3, r2
10004676:	618b      	str	r3, [r1, #24]
10004678:	e01a      	b.n	100046b0 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
1000467a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000467e:	2201      	movs	r2, #1
10004680:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004682:	f7fd faed 	bl	10001c60 <HAL_GetTick>
10004686:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10004688:	e008      	b.n	1000469c <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000468a:	f7fd fae9 	bl	10001c60 <HAL_GetTick>
1000468e:	4602      	mov	r2, r0
10004690:	68bb      	ldr	r3, [r7, #8]
10004692:	1ad3      	subs	r3, r2, r3
10004694:	2b64      	cmp	r3, #100	@ 0x64
10004696:	d901      	bls.n	1000469c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10004698:	2303      	movs	r3, #3
1000469a:	e14d      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
1000469c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046a0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100046a4:	f003 0301 	and.w	r3, r3, #1
100046a8:	2b01      	cmp	r3, #1
100046aa:	d0ee      	beq.n	1000468a <HAL_RCC_OscConfig+0x3aa>
100046ac:	e000      	b.n	100046b0 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100046ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
100046b0:	687b      	ldr	r3, [r7, #4]
100046b2:	681b      	ldr	r3, [r3, #0]
100046b4:	f003 0310 	and.w	r3, r3, #16
100046b8:	2b00      	cmp	r3, #0
100046ba:	f000 8091 	beq.w	100047e0 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
100046be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046c2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100046c6:	f003 0303 	and.w	r3, r3, #3
100046ca:	2b02      	cmp	r3, #2
100046cc:	d107      	bne.n	100046de <HAL_RCC_OscConfig+0x3fe>
100046ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046d2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100046d6:	f003 0302 	and.w	r3, r3, #2
100046da:	2b02      	cmp	r3, #2
100046dc:	d01e      	beq.n	1000471c <HAL_RCC_OscConfig+0x43c>
100046de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100046e4:	f003 0303 	and.w	r3, r3, #3
100046e8:	2b02      	cmp	r3, #2
100046ea:	d107      	bne.n	100046fc <HAL_RCC_OscConfig+0x41c>
100046ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100046f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100046f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100046f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100046fa:	d00f      	beq.n	1000471c <HAL_RCC_OscConfig+0x43c>
100046fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004700:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10004704:	f003 0303 	and.w	r3, r3, #3
10004708:	2b02      	cmp	r3, #2
1000470a:	d122      	bne.n	10004752 <HAL_RCC_OscConfig+0x472>
1000470c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004710:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10004714:	f003 0302 	and.w	r3, r3, #2
10004718:	2b02      	cmp	r3, #2
1000471a:	d11a      	bne.n	10004752 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
1000471c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004720:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10004724:	f003 0310 	and.w	r3, r3, #16
10004728:	2b10      	cmp	r3, #16
1000472a:	d105      	bne.n	10004738 <HAL_RCC_OscConfig+0x458>
1000472c:	687b      	ldr	r3, [r7, #4]
1000472e:	69db      	ldr	r3, [r3, #28]
10004730:	2b10      	cmp	r3, #16
10004732:	d001      	beq.n	10004738 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10004734:	2301      	movs	r3, #1
10004736:	e0ff      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10004738:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000473c:	69db      	ldr	r3, [r3, #28]
1000473e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
10004742:	687b      	ldr	r3, [r7, #4]
10004744:	6a1b      	ldr	r3, [r3, #32]
10004746:	021b      	lsls	r3, r3, #8
10004748:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000474c:	4313      	orrs	r3, r2
1000474e:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10004750:	e046      	b.n	100047e0 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10004752:	687b      	ldr	r3, [r7, #4]
10004754:	69db      	ldr	r3, [r3, #28]
10004756:	2b00      	cmp	r3, #0
10004758:	d029      	beq.n	100047ae <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
1000475a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000475e:	68db      	ldr	r3, [r3, #12]
10004760:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004764:	f043 0310 	orr.w	r3, r3, #16
10004768:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000476a:	f7fd fa79 	bl	10001c60 <HAL_GetTick>
1000476e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10004770:	e008      	b.n	10004784 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10004772:	f7fd fa75 	bl	10001c60 <HAL_GetTick>
10004776:	4602      	mov	r2, r0
10004778:	68bb      	ldr	r3, [r7, #8]
1000477a:	1ad3      	subs	r3, r2, r3
1000477c:	2b64      	cmp	r3, #100	@ 0x64
1000477e:	d901      	bls.n	10004784 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10004780:	2303      	movs	r3, #3
10004782:	e0d9      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10004784:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004788:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000478c:	f003 0310 	and.w	r3, r3, #16
10004790:	2b10      	cmp	r3, #16
10004792:	d1ee      	bne.n	10004772 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10004794:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004798:	69db      	ldr	r3, [r3, #28]
1000479a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
1000479e:	687b      	ldr	r3, [r7, #4]
100047a0:	6a1b      	ldr	r3, [r3, #32]
100047a2:	021b      	lsls	r3, r3, #8
100047a4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100047a8:	4313      	orrs	r3, r2
100047aa:	61cb      	str	r3, [r1, #28]
100047ac:	e018      	b.n	100047e0 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
100047ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047b2:	2210      	movs	r2, #16
100047b4:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100047b6:	f7fd fa53 	bl	10001c60 <HAL_GetTick>
100047ba:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100047bc:	e008      	b.n	100047d0 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100047be:	f7fd fa4f 	bl	10001c60 <HAL_GetTick>
100047c2:	4602      	mov	r2, r0
100047c4:	68bb      	ldr	r3, [r7, #8]
100047c6:	1ad3      	subs	r3, r2, r3
100047c8:	2b64      	cmp	r3, #100	@ 0x64
100047ca:	d901      	bls.n	100047d0 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
100047cc:	2303      	movs	r3, #3
100047ce:	e0b3      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100047d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047d4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100047d8:	f003 0310 	and.w	r3, r3, #16
100047dc:	2b10      	cmp	r3, #16
100047de:	d0ee      	beq.n	100047be <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
100047e0:	687b      	ldr	r3, [r7, #4]
100047e2:	681b      	ldr	r3, [r3, #0]
100047e4:	f003 0308 	and.w	r3, r3, #8
100047e8:	2b00      	cmp	r3, #0
100047ea:	d042      	beq.n	10004872 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
100047ec:	687b      	ldr	r3, [r7, #4]
100047ee:	699b      	ldr	r3, [r3, #24]
100047f0:	2b00      	cmp	r3, #0
100047f2:	d01f      	beq.n	10004834 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
100047f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100047f8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100047fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004800:	f043 0301 	orr.w	r3, r3, #1
10004804:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10004808:	f7fd fa2a 	bl	10001c60 <HAL_GetTick>
1000480c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000480e:	e008      	b.n	10004822 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10004810:	f7fd fa26 	bl	10001c60 <HAL_GetTick>
10004814:	4602      	mov	r2, r0
10004816:	68bb      	ldr	r3, [r7, #8]
10004818:	1ad3      	subs	r3, r2, r3
1000481a:	2b64      	cmp	r3, #100	@ 0x64
1000481c:	d901      	bls.n	10004822 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
1000481e:	2303      	movs	r3, #3
10004820:	e08a      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10004822:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004826:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000482a:	f003 0302 	and.w	r3, r3, #2
1000482e:	2b02      	cmp	r3, #2
10004830:	d1ee      	bne.n	10004810 <HAL_RCC_OscConfig+0x530>
10004832:	e01e      	b.n	10004872 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10004834:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004838:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000483c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004840:	f023 0301 	bic.w	r3, r3, #1
10004844:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10004848:	f7fd fa0a 	bl	10001c60 <HAL_GetTick>
1000484c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000484e:	e008      	b.n	10004862 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10004850:	f7fd fa06 	bl	10001c60 <HAL_GetTick>
10004854:	4602      	mov	r2, r0
10004856:	68bb      	ldr	r3, [r7, #8]
10004858:	1ad3      	subs	r3, r2, r3
1000485a:	2b64      	cmp	r3, #100	@ 0x64
1000485c:	d901      	bls.n	10004862 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
1000485e:	2303      	movs	r3, #3
10004860:	e06a      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10004862:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004866:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000486a:	f003 0302 	and.w	r3, r3, #2
1000486e:	2b02      	cmp	r3, #2
10004870:	d0ee      	beq.n	10004850 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10004872:	687b      	ldr	r3, [r7, #4]
10004874:	681b      	ldr	r3, [r3, #0]
10004876:	f003 0304 	and.w	r3, r3, #4
1000487a:	2b00      	cmp	r3, #0
1000487c:	d02b      	beq.n	100048d6 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000487e:	4b07      	ldr	r3, [pc, #28]	@ (1000489c <HAL_RCC_OscConfig+0x5bc>)
10004880:	681b      	ldr	r3, [r3, #0]
10004882:	4a06      	ldr	r2, [pc, #24]	@ (1000489c <HAL_RCC_OscConfig+0x5bc>)
10004884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10004888:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000488a:	f7fd f9e9 	bl	10001c60 <HAL_GetTick>
1000488e:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10004890:	e00f      	b.n	100048b2 <HAL_RCC_OscConfig+0x5d2>
10004892:	bf00      	nop
10004894:	1002009c 	.word	0x1002009c
10004898:	100200a0 	.word	0x100200a0
1000489c:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100048a0:	f7fd f9de 	bl	10001c60 <HAL_GetTick>
100048a4:	4602      	mov	r2, r0
100048a6:	68bb      	ldr	r3, [r7, #8]
100048a8:	1ad3      	subs	r3, r2, r3
100048aa:	2b64      	cmp	r3, #100	@ 0x64
100048ac:	d901      	bls.n	100048b2 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
100048ae:	2303      	movs	r3, #3
100048b0:	e042      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100048b2:	4b23      	ldr	r3, [pc, #140]	@ (10004940 <HAL_RCC_OscConfig+0x660>)
100048b4:	681b      	ldr	r3, [r3, #0]
100048b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100048ba:	2b00      	cmp	r3, #0
100048bc:	d0f0      	beq.n	100048a0 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
100048be:	687b      	ldr	r3, [r7, #4]
100048c0:	689b      	ldr	r3, [r3, #8]
100048c2:	4618      	mov	r0, r3
100048c4:	f000 f8a9 	bl	10004a1a <HAL_RCC_LSEConfig>
100048c8:	4603      	mov	r3, r0
100048ca:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
100048cc:	7bfb      	ldrb	r3, [r7, #15]
100048ce:	2b00      	cmp	r3, #0
100048d0:	d001      	beq.n	100048d6 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
100048d2:	7bfb      	ldrb	r3, [r7, #15]
100048d4:	e030      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
100048d6:	687b      	ldr	r3, [r7, #4]
100048d8:	3324      	adds	r3, #36	@ 0x24
100048da:	4618      	mov	r0, r3
100048dc:	f000 f91a 	bl	10004b14 <RCC_PLL1_Config>
100048e0:	4603      	mov	r3, r0
100048e2:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100048e4:	7bfb      	ldrb	r3, [r7, #15]
100048e6:	2b00      	cmp	r3, #0
100048e8:	d001      	beq.n	100048ee <HAL_RCC_OscConfig+0x60e>
  {
    return result;
100048ea:	7bfb      	ldrb	r3, [r7, #15]
100048ec:	e024      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
100048ee:	687b      	ldr	r3, [r7, #4]
100048f0:	3360      	adds	r3, #96	@ 0x60
100048f2:	4618      	mov	r0, r3
100048f4:	f000 feb0 	bl	10005658 <RCCEx_PLL2_Config>
100048f8:	4603      	mov	r3, r0
100048fa:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100048fc:	7bfb      	ldrb	r3, [r7, #15]
100048fe:	2b00      	cmp	r3, #0
10004900:	d001      	beq.n	10004906 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10004902:	7bfb      	ldrb	r3, [r7, #15]
10004904:	e018      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10004906:	687b      	ldr	r3, [r7, #4]
10004908:	339c      	adds	r3, #156	@ 0x9c
1000490a:	4618      	mov	r0, r3
1000490c:	f001 f826 	bl	1000595c <RCCEx_PLL3_Config>
10004910:	4603      	mov	r3, r0
10004912:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10004914:	7bfb      	ldrb	r3, [r7, #15]
10004916:	2b00      	cmp	r3, #0
10004918:	d001      	beq.n	1000491e <HAL_RCC_OscConfig+0x63e>
  {
    return result;
1000491a:	7bfb      	ldrb	r3, [r7, #15]
1000491c:	e00c      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000491e:	687b      	ldr	r3, [r7, #4]
10004920:	33d8      	adds	r3, #216	@ 0xd8
10004922:	4618      	mov	r0, r3
10004924:	f001 f984 	bl	10005c30 <RCCEx_PLL4_Config>
10004928:	4603      	mov	r3, r0
1000492a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000492c:	7bfb      	ldrb	r3, [r7, #15]
1000492e:	2b00      	cmp	r3, #0
10004930:	d001      	beq.n	10004936 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10004932:	7bfb      	ldrb	r3, [r7, #15]
10004934:	e000      	b.n	10004938 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10004936:	2300      	movs	r3, #0
}
10004938:	4618      	mov	r0, r3
1000493a:	3710      	adds	r7, #16
1000493c:	46bd      	mov	sp, r7
1000493e:	bd80      	pop	{r7, pc}
10004940:	50001000 	.word	0x50001000

10004944 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10004944:	b580      	push	{r7, lr}
10004946:	b084      	sub	sp, #16
10004948:	af00      	add	r7, sp, #0
1000494a:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
1000494c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004950:	f44f 7280 	mov.w	r2, #256	@ 0x100
10004954:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004956:	f7fd f983 	bl	10001c60 <HAL_GetTick>
1000495a:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
1000495c:	e008      	b.n	10004970 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000495e:	f7fd f97f 	bl	10001c60 <HAL_GetTick>
10004962:	4602      	mov	r2, r0
10004964:	68fb      	ldr	r3, [r7, #12]
10004966:	1ad3      	subs	r3, r2, r3
10004968:	2b64      	cmp	r3, #100	@ 0x64
1000496a:	d901      	bls.n	10004970 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
1000496c:	2303      	movs	r3, #3
1000496e:	e050      	b.n	10004a12 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10004970:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004974:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10004978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000497c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10004980:	d0ed      	beq.n	1000495e <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10004982:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004986:	f44f 6290 	mov.w	r2, #1152	@ 0x480
1000498a:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
1000498c:	687b      	ldr	r3, [r7, #4]
1000498e:	2b00      	cmp	r3, #0
10004990:	d03e      	beq.n	10004a10 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10004992:	687b      	ldr	r3, [r7, #4]
10004994:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
10004998:	d108      	bne.n	100049ac <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
1000499a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000499e:	68db      	ldr	r3, [r3, #12]
100049a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
100049a8:	60d3      	str	r3, [r2, #12]
100049aa:	e013      	b.n	100049d4 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
100049ac:	687b      	ldr	r3, [r7, #4]
100049ae:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
100049b2:	d10f      	bne.n	100049d4 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100049b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049b8:	68db      	ldr	r3, [r3, #12]
100049ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
100049c2:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100049c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049c8:	68db      	ldr	r3, [r3, #12]
100049ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
100049d2:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
100049d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100049d8:	68db      	ldr	r3, [r3, #12]
100049da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100049de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
100049e2:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100049e4:	f7fd f93c 	bl	10001c60 <HAL_GetTick>
100049e8:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100049ea:	e008      	b.n	100049fe <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100049ec:	f7fd f938 	bl	10001c60 <HAL_GetTick>
100049f0:	4602      	mov	r2, r0
100049f2:	68fb      	ldr	r3, [r7, #12]
100049f4:	1ad3      	subs	r3, r2, r3
100049f6:	2b64      	cmp	r3, #100	@ 0x64
100049f8:	d901      	bls.n	100049fe <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
100049fa:	2303      	movs	r3, #3
100049fc:	e009      	b.n	10004a12 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100049fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a02:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10004a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10004a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10004a0e:	d1ed      	bne.n	100049ec <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10004a10:	2300      	movs	r3, #0
}
10004a12:	4618      	mov	r0, r3
10004a14:	3710      	adds	r7, #16
10004a16:	46bd      	mov	sp, r7
10004a18:	bd80      	pop	{r7, pc}

10004a1a <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10004a1a:	b580      	push	{r7, lr}
10004a1c:	b084      	sub	sp, #16
10004a1e:	af00      	add	r7, sp, #0
10004a20:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10004a22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004a2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a2e:	f023 0301 	bic.w	r3, r3, #1
10004a32:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004a36:	f7fd f913 	bl	10001c60 <HAL_GetTick>
10004a3a:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10004a3c:	e00a      	b.n	10004a54 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10004a3e:	f7fd f90f 	bl	10001c60 <HAL_GetTick>
10004a42:	4602      	mov	r2, r0
10004a44:	68fb      	ldr	r3, [r7, #12]
10004a46:	1ad3      	subs	r3, r2, r3
10004a48:	f241 3288 	movw	r2, #5000	@ 0x1388
10004a4c:	4293      	cmp	r3, r2
10004a4e:	d901      	bls.n	10004a54 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10004a50:	2303      	movs	r3, #3
10004a52:	e05b      	b.n	10004b0c <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10004a54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004a5c:	f003 0304 	and.w	r3, r3, #4
10004a60:	2b04      	cmp	r3, #4
10004a62:	d0ec      	beq.n	10004a3e <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10004a64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004a6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a70:	f023 030a 	bic.w	r3, r3, #10
10004a74:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10004a78:	687b      	ldr	r3, [r7, #4]
10004a7a:	2b00      	cmp	r3, #0
10004a7c:	d045      	beq.n	10004b0a <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10004a7e:	687b      	ldr	r3, [r7, #4]
10004a80:	2b03      	cmp	r3, #3
10004a82:	d10a      	bne.n	10004a9a <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10004a84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004a8c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004a90:	f043 0302 	orr.w	r3, r3, #2
10004a94:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10004a98:	e016      	b.n	10004ac8 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10004a9a:	687b      	ldr	r3, [r7, #4]
10004a9c:	2b0b      	cmp	r3, #11
10004a9e:	d113      	bne.n	10004ac8 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10004aa0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004aa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004aa8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004aac:	f043 0308 	orr.w	r3, r3, #8
10004ab0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10004ab4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004abc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004ac0:	f043 0302 	orr.w	r3, r3, #2
10004ac4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10004ac8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004acc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004ad0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004ad4:	f043 0301 	orr.w	r3, r3, #1
10004ad8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004adc:	f7fd f8c0 	bl	10001c60 <HAL_GetTick>
10004ae0:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10004ae2:	e00a      	b.n	10004afa <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10004ae4:	f7fd f8bc 	bl	10001c60 <HAL_GetTick>
10004ae8:	4602      	mov	r2, r0
10004aea:	68fb      	ldr	r3, [r7, #12]
10004aec:	1ad3      	subs	r3, r2, r3
10004aee:	f241 3288 	movw	r2, #5000	@ 0x1388
10004af2:	4293      	cmp	r3, r2
10004af4:	d901      	bls.n	10004afa <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10004af6:	2303      	movs	r3, #3
10004af8:	e008      	b.n	10004b0c <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10004afa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004afe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10004b02:	f003 0304 	and.w	r3, r3, #4
10004b06:	2b04      	cmp	r3, #4
10004b08:	d1ec      	bne.n	10004ae4 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10004b0a:	2300      	movs	r3, #0
}
10004b0c:	4618      	mov	r0, r3
10004b0e:	3710      	adds	r7, #16
10004b10:	46bd      	mov	sp, r7
10004b12:	bd80      	pop	{r7, pc}

10004b14 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10004b14:	b580      	push	{r7, lr}
10004b16:	b084      	sub	sp, #16
10004b18:	af00      	add	r7, sp, #0
10004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10004b1c:	687b      	ldr	r3, [r7, #4]
10004b1e:	681b      	ldr	r3, [r3, #0]
10004b20:	2b00      	cmp	r3, #0
10004b22:	f000 8174 	beq.w	10004e0e <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10004b26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b2a:	6a1b      	ldr	r3, [r3, #32]
10004b2c:	f003 0303 	and.w	r3, r3, #3
10004b30:	2b02      	cmp	r3, #2
10004b32:	d108      	bne.n	10004b46 <RCC_PLL1_Config+0x32>
10004b34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b38:	6a1b      	ldr	r3, [r3, #32]
10004b3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004b42:	f000 8162 	beq.w	10004e0a <RCC_PLL1_Config+0x2f6>
10004b46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b4a:	6a1b      	ldr	r3, [r3, #32]
10004b4c:	f003 0303 	and.w	r3, r3, #3
10004b50:	2b03      	cmp	r3, #3
10004b52:	d108      	bne.n	10004b66 <RCC_PLL1_Config+0x52>
10004b54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b58:	6a1b      	ldr	r3, [r3, #32]
10004b5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004b62:	f000 8152 	beq.w	10004e0a <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10004b66:	687b      	ldr	r3, [r7, #4]
10004b68:	681b      	ldr	r3, [r3, #0]
10004b6a:	2b02      	cmp	r3, #2
10004b6c:	f040 8123 	bne.w	10004db6 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004b70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004b78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10004b80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10004b84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004b8c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004b90:	f023 0301 	bic.w	r3, r3, #1
10004b94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004b98:	f7fd f862 	bl	10001c60 <HAL_GetTick>
10004b9c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004b9e:	e008      	b.n	10004bb2 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004ba0:	f7fd f85e 	bl	10001c60 <HAL_GetTick>
10004ba4:	4602      	mov	r2, r0
10004ba6:	68fb      	ldr	r3, [r7, #12]
10004ba8:	1ad3      	subs	r3, r2, r3
10004baa:	2b64      	cmp	r3, #100	@ 0x64
10004bac:	d901      	bls.n	10004bb2 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10004bae:	2303      	movs	r3, #3
10004bb0:	e12e      	b.n	10004e10 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004bb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004bba:	f003 0302 	and.w	r3, r3, #2
10004bbe:	2b02      	cmp	r3, #2
10004bc0:	d0ee      	beq.n	10004ba0 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10004bc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004bc8:	f003 0307 	and.w	r3, r3, #7
10004bcc:	2b02      	cmp	r3, #2
10004bce:	d112      	bne.n	10004bf6 <RCC_PLL1_Config+0xe2>
10004bd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004bd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004bda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004bde:	d10a      	bne.n	10004bf6 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10004be0:	687b      	ldr	r3, [r7, #4]
10004be2:	685a      	ldr	r2, [r3, #4]
10004be4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10004bea:	f003 0303 	and.w	r3, r3, #3
10004bee:	429a      	cmp	r2, r3
10004bf0:	d00c      	beq.n	10004c0c <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10004bf2:	2301      	movs	r3, #1
10004bf4:	e10c      	b.n	10004e10 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10004bf6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10004bfc:	f023 0203 	bic.w	r2, r3, #3
10004c00:	687b      	ldr	r3, [r7, #4]
10004c02:	685b      	ldr	r3, [r3, #4]
10004c04:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004c08:	4313      	orrs	r3, r2
10004c0a:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10004c0c:	e008      	b.n	10004c20 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004c0e:	f7fd f827 	bl	10001c60 <HAL_GetTick>
10004c12:	4602      	mov	r2, r0
10004c14:	68fb      	ldr	r3, [r7, #12]
10004c16:	1ad3      	subs	r3, r2, r3
10004c18:	2b64      	cmp	r3, #100	@ 0x64
10004c1a:	d901      	bls.n	10004c20 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10004c1c:	2303      	movs	r3, #3
10004c1e:	e0f7      	b.n	10004e10 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10004c20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10004c26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004c2e:	d1ee      	bne.n	10004c0e <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10004c30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c34:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
10004c38:	4b77      	ldr	r3, [pc, #476]	@ (10004e18 <RCC_PLL1_Config+0x304>)
10004c3a:	4013      	ands	r3, r2
10004c3c:	687a      	ldr	r2, [r7, #4]
10004c3e:	68d2      	ldr	r2, [r2, #12]
10004c40:	1e51      	subs	r1, r2, #1
10004c42:	687a      	ldr	r2, [r7, #4]
10004c44:	6892      	ldr	r2, [r2, #8]
10004c46:	3a01      	subs	r2, #1
10004c48:	0412      	lsls	r2, r2, #16
10004c4a:	430a      	orrs	r2, r1
10004c4c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004c50:	4313      	orrs	r3, r2
10004c52:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
10004c56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
10004c5e:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10004c62:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10004c66:	687a      	ldr	r2, [r7, #4]
10004c68:	6912      	ldr	r2, [r2, #16]
10004c6a:	1e51      	subs	r1, r2, #1
10004c6c:	687a      	ldr	r2, [r7, #4]
10004c6e:	6952      	ldr	r2, [r2, #20]
10004c70:	3a01      	subs	r2, #1
10004c72:	0212      	lsls	r2, r2, #8
10004c74:	4311      	orrs	r1, r2
10004c76:	687a      	ldr	r2, [r7, #4]
10004c78:	6992      	ldr	r2, [r2, #24]
10004c7a:	3a01      	subs	r2, #1
10004c7c:	0412      	lsls	r2, r2, #16
10004c7e:	430a      	orrs	r2, r1
10004c80:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004c84:	4313      	orrs	r3, r2
10004c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10004c8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10004c92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10004c9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10004c9e:	687b      	ldr	r3, [r7, #4]
10004ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004ca2:	2b02      	cmp	r3, #2
10004ca4:	d003      	beq.n	10004cae <RCC_PLL1_Config+0x19a>
10004ca6:	687b      	ldr	r3, [r7, #4]
10004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004caa:	2b00      	cmp	r3, #0
10004cac:	d10c      	bne.n	10004cc8 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10004cae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10004cb6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004cba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10004cbe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10004cc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
10004cc6:	e00f      	b.n	10004ce8 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10004cc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10004cd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10004cd4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10004cd8:	687a      	ldr	r2, [r7, #4]
10004cda:	6a12      	ldr	r2, [r2, #32]
10004cdc:	00d2      	lsls	r2, r2, #3
10004cde:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004ce2:	4313      	orrs	r3, r2
10004ce4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10004ce8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
10004cf0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10004cf8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10004cfc:	687b      	ldr	r3, [r7, #4]
10004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004d00:	2b02      	cmp	r3, #2
10004d02:	d124      	bne.n	10004d4e <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10004d04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
10004d0c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10004d10:	687b      	ldr	r3, [r7, #4]
10004d12:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10004d14:	687b      	ldr	r3, [r7, #4]
10004d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10004d18:	4319      	orrs	r1, r3
10004d1a:	687b      	ldr	r3, [r7, #4]
10004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10004d1e:	4319      	orrs	r1, r3
10004d20:	687b      	ldr	r3, [r7, #4]
10004d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10004d24:	4319      	orrs	r1, r3
10004d26:	687b      	ldr	r3, [r7, #4]
10004d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10004d2a:	041b      	lsls	r3, r3, #16
10004d2c:	430b      	orrs	r3, r1
10004d2e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004d32:	4313      	orrs	r3, r2
10004d34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10004d38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004d40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d44:	f043 0304 	orr.w	r3, r3, #4
10004d48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
10004d4c:	e009      	b.n	10004d62 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10004d4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004d56:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d5a:	f023 0304 	bic.w	r3, r3, #4
10004d5e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10004d62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004d6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004d6e:	f043 0301 	orr.w	r3, r3, #1
10004d72:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004d76:	f7fc ff73 	bl	10001c60 <HAL_GetTick>
10004d7a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004d7c:	e008      	b.n	10004d90 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004d7e:	f7fc ff6f 	bl	10001c60 <HAL_GetTick>
10004d82:	4602      	mov	r2, r0
10004d84:	68fb      	ldr	r3, [r7, #12]
10004d86:	1ad3      	subs	r3, r2, r3
10004d88:	2b64      	cmp	r3, #100	@ 0x64
10004d8a:	d901      	bls.n	10004d90 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10004d8c:	2303      	movs	r3, #3
10004d8e:	e03f      	b.n	10004e10 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10004d90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004d98:	f003 0302 	and.w	r3, r3, #2
10004d9c:	2b02      	cmp	r3, #2
10004d9e:	d1ee      	bne.n	10004d7e <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004da0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004da8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004dac:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10004db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10004db4:	e02b      	b.n	10004e0e <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004db6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004dbe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10004dc6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10004dca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004dd2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10004dd6:	f023 0301 	bic.w	r3, r3, #1
10004dda:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10004dde:	f7fc ff3f 	bl	10001c60 <HAL_GetTick>
10004de2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004de4:	e008      	b.n	10004df8 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004de6:	f7fc ff3b 	bl	10001c60 <HAL_GetTick>
10004dea:	4602      	mov	r2, r0
10004dec:	68fb      	ldr	r3, [r7, #12]
10004dee:	1ad3      	subs	r3, r2, r3
10004df0:	2b64      	cmp	r3, #100	@ 0x64
10004df2:	d901      	bls.n	10004df8 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10004df4:	2303      	movs	r3, #3
10004df6:	e00b      	b.n	10004e10 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004df8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10004e00:	f003 0302 	and.w	r3, r3, #2
10004e04:	2b02      	cmp	r3, #2
10004e06:	d0ee      	beq.n	10004de6 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10004e08:	e001      	b.n	10004e0e <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10004e0a:	2301      	movs	r3, #1
10004e0c:	e000      	b.n	10004e10 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
10004e0e:	2300      	movs	r3, #0

}
10004e10:	4618      	mov	r0, r3
10004e12:	3710      	adds	r7, #16
10004e14:	46bd      	mov	sp, r7
10004e16:	bd80      	pop	{r7, pc}
10004e18:	ffc0fe00 	.word	0xffc0fe00

10004e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10004e1c:	b580      	push	{r7, lr}
10004e1e:	b084      	sub	sp, #16
10004e20:	af00      	add	r7, sp, #0
10004e22:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10004e24:	2300      	movs	r3, #0
10004e26:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10004e28:	687b      	ldr	r3, [r7, #4]
10004e2a:	2b00      	cmp	r3, #0
10004e2c:	d101      	bne.n	10004e32 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10004e2e:	2301      	movs	r3, #1
10004e30:	e102      	b.n	10005038 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10004e32:	687b      	ldr	r3, [r7, #4]
10004e34:	681b      	ldr	r3, [r3, #0]
10004e36:	f003 0301 	and.w	r3, r3, #1
10004e3a:	2b00      	cmp	r3, #0
10004e3c:	d00b      	beq.n	10004e56 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10004e3e:	687b      	ldr	r3, [r7, #4]
10004e40:	3304      	adds	r3, #4
10004e42:	4618      	mov	r0, r3
10004e44:	f000 f8fc 	bl	10005040 <RCC_MPUConfig>
10004e48:	4603      	mov	r3, r0
10004e4a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004e4c:	7bfb      	ldrb	r3, [r7, #15]
10004e4e:	2b00      	cmp	r3, #0
10004e50:	d001      	beq.n	10004e56 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10004e52:	7bfb      	ldrb	r3, [r7, #15]
10004e54:	e0f0      	b.n	10005038 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10004e56:	687b      	ldr	r3, [r7, #4]
10004e58:	681b      	ldr	r3, [r3, #0]
10004e5a:	f003 0302 	and.w	r3, r3, #2
10004e5e:	2b00      	cmp	r3, #0
10004e60:	d00b      	beq.n	10004e7a <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10004e62:	687b      	ldr	r3, [r7, #4]
10004e64:	330c      	adds	r3, #12
10004e66:	4618      	mov	r0, r3
10004e68:	f000 f960 	bl	1000512c <RCC_AXISSConfig>
10004e6c:	4603      	mov	r3, r0
10004e6e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004e70:	7bfb      	ldrb	r3, [r7, #15]
10004e72:	2b00      	cmp	r3, #0
10004e74:	d001      	beq.n	10004e7a <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10004e76:	7bfb      	ldrb	r3, [r7, #15]
10004e78:	e0de      	b.n	10005038 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10004e7a:	687b      	ldr	r3, [r7, #4]
10004e7c:	681b      	ldr	r3, [r3, #0]
10004e7e:	f003 0304 	and.w	r3, r3, #4
10004e82:	2b00      	cmp	r3, #0
10004e84:	d00b      	beq.n	10004e9e <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10004e86:	687b      	ldr	r3, [r7, #4]
10004e88:	3314      	adds	r3, #20
10004e8a:	4618      	mov	r0, r3
10004e8c:	f000 f9e6 	bl	1000525c <RCC_MCUConfig>
10004e90:	4603      	mov	r3, r0
10004e92:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10004e94:	7bfb      	ldrb	r3, [r7, #15]
10004e96:	2b00      	cmp	r3, #0
10004e98:	d001      	beq.n	10004e9e <HAL_RCC_ClockConfig+0x82>
    {
      return status;
10004e9a:	7bfb      	ldrb	r3, [r7, #15]
10004e9c:	e0cc      	b.n	10005038 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10004e9e:	687b      	ldr	r3, [r7, #4]
10004ea0:	681b      	ldr	r3, [r3, #0]
10004ea2:	f003 0308 	and.w	r3, r3, #8
10004ea6:	2b00      	cmp	r3, #0
10004ea8:	d020      	beq.n	10004eec <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
10004eaa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10004eb0:	f023 0207 	bic.w	r2, r3, #7
10004eb4:	687b      	ldr	r3, [r7, #4]
10004eb6:	69db      	ldr	r3, [r3, #28]
10004eb8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004ebc:	4313      	orrs	r3, r2
10004ebe:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004ec0:	f7fc fece 	bl	10001c60 <HAL_GetTick>
10004ec4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10004ec6:	e009      	b.n	10004edc <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004ec8:	f7fc feca 	bl	10001c60 <HAL_GetTick>
10004ecc:	4602      	mov	r2, r0
10004ece:	68bb      	ldr	r3, [r7, #8]
10004ed0:	1ad3      	subs	r3, r2, r3
10004ed2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10004ed6:	d901      	bls.n	10004edc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10004ed8:	2303      	movs	r3, #3
10004eda:	e0ad      	b.n	10005038 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10004edc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10004ee2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004eea:	d1ed      	bne.n	10004ec8 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10004eec:	687b      	ldr	r3, [r7, #4]
10004eee:	681b      	ldr	r3, [r3, #0]
10004ef0:	f003 0310 	and.w	r3, r3, #16
10004ef4:	2b00      	cmp	r3, #0
10004ef6:	d020      	beq.n	10004f3a <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10004ef8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10004efe:	f023 0207 	bic.w	r2, r3, #7
10004f02:	687b      	ldr	r3, [r7, #4]
10004f04:	6a1b      	ldr	r3, [r3, #32]
10004f06:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004f0a:	4313      	orrs	r3, r2
10004f0c:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004f0e:	f7fc fea7 	bl	10001c60 <HAL_GetTick>
10004f12:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10004f14:	e009      	b.n	10004f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004f16:	f7fc fea3 	bl	10001c60 <HAL_GetTick>
10004f1a:	4602      	mov	r2, r0
10004f1c:	68bb      	ldr	r3, [r7, #8]
10004f1e:	1ad3      	subs	r3, r2, r3
10004f20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10004f24:	d901      	bls.n	10004f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10004f26:	2303      	movs	r3, #3
10004f28:	e086      	b.n	10005038 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10004f2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10004f30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004f34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004f38:	d1ed      	bne.n	10004f16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10004f3a:	687b      	ldr	r3, [r7, #4]
10004f3c:	681b      	ldr	r3, [r3, #0]
10004f3e:	f003 0320 	and.w	r3, r3, #32
10004f42:	2b00      	cmp	r3, #0
10004f44:	d023      	beq.n	10004f8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10004f46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f4a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10004f4e:	f023 0207 	bic.w	r2, r3, #7
10004f52:	687b      	ldr	r3, [r7, #4]
10004f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10004f56:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004f5a:	4313      	orrs	r3, r2
10004f5c:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004f60:	f7fc fe7e 	bl	10001c60 <HAL_GetTick>
10004f64:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10004f66:	e009      	b.n	10004f7c <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004f68:	f7fc fe7a 	bl	10001c60 <HAL_GetTick>
10004f6c:	4602      	mov	r2, r0
10004f6e:	68bb      	ldr	r3, [r7, #8]
10004f70:	1ad3      	subs	r3, r2, r3
10004f72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10004f76:	d901      	bls.n	10004f7c <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10004f78:	2303      	movs	r3, #3
10004f7a:	e05d      	b.n	10005038 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10004f7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f80:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10004f84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004f88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004f8c:	d1ec      	bne.n	10004f68 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10004f8e:	687b      	ldr	r3, [r7, #4]
10004f90:	681b      	ldr	r3, [r3, #0]
10004f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10004f96:	2b00      	cmp	r3, #0
10004f98:	d023      	beq.n	10004fe2 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10004f9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004f9e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10004fa2:	f023 0207 	bic.w	r2, r3, #7
10004fa6:	687b      	ldr	r3, [r7, #4]
10004fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10004faa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10004fae:	4313      	orrs	r3, r2
10004fb0:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004fb4:	f7fc fe54 	bl	10001c60 <HAL_GetTick>
10004fb8:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10004fba:	e009      	b.n	10004fd0 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004fbc:	f7fc fe50 	bl	10001c60 <HAL_GetTick>
10004fc0:	4602      	mov	r2, r0
10004fc2:	68bb      	ldr	r3, [r7, #8]
10004fc4:	1ad3      	subs	r3, r2, r3
10004fc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10004fca:	d901      	bls.n	10004fd0 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10004fcc:	2303      	movs	r3, #3
10004fce:	e033      	b.n	10005038 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10004fd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004fd4:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10004fd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10004fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10004fe0:	d1ec      	bne.n	10004fbc <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10004fe2:	687b      	ldr	r3, [r7, #4]
10004fe4:	681b      	ldr	r3, [r3, #0]
10004fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
10004fea:	2b00      	cmp	r3, #0
10004fec:	d023      	beq.n	10005036 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10004fee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10004ff2:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10004ff6:	f023 0207 	bic.w	r2, r3, #7
10004ffa:	687b      	ldr	r3, [r7, #4]
10004ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10004ffe:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005002:	4313      	orrs	r3, r2
10005004:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10005008:	f7fc fe2a 	bl	10001c60 <HAL_GetTick>
1000500c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000500e:	e009      	b.n	10005024 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005010:	f7fc fe26 	bl	10001c60 <HAL_GetTick>
10005014:	4602      	mov	r2, r0
10005016:	68bb      	ldr	r3, [r7, #8]
10005018:	1ad3      	subs	r3, r2, r3
1000501a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000501e:	d901      	bls.n	10005024 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10005020:	2303      	movs	r3, #3
10005022:	e009      	b.n	10005038 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10005024:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005028:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
1000502c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005034:	d1ec      	bne.n	10005010 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10005036:	2300      	movs	r3, #0
}
10005038:	4618      	mov	r0, r3
1000503a:	3710      	adds	r7, #16
1000503c:	46bd      	mov	sp, r7
1000503e:	bd80      	pop	{r7, pc}

10005040 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10005040:	b580      	push	{r7, lr}
10005042:	b084      	sub	sp, #16
10005044:	af00      	add	r7, sp, #0
10005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10005048:	687b      	ldr	r3, [r7, #4]
1000504a:	681b      	ldr	r3, [r3, #0]
1000504c:	2b03      	cmp	r3, #3
1000504e:	d840      	bhi.n	100050d2 <RCC_MPUConfig+0x92>
10005050:	a201      	add	r2, pc, #4	@ (adr r2, 10005058 <RCC_MPUConfig+0x18>)
10005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005056:	bf00      	nop
10005058:	10005069 	.word	0x10005069
1000505c:	1000507d 	.word	0x1000507d
10005060:	10005093 	.word	0x10005093
10005064:	100050a7 	.word	0x100050a7
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10005068:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000506c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10005070:	f003 0301 	and.w	r3, r3, #1
10005074:	2b01      	cmp	r3, #1
10005076:	d02e      	beq.n	100050d6 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10005078:	2301      	movs	r3, #1
1000507a:	e053      	b.n	10005124 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000507c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005080:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10005084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10005088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000508c:	d025      	beq.n	100050da <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
1000508e:	2301      	movs	r3, #1
10005090:	e048      	b.n	10005124 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10005092:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000509a:	f003 0302 	and.w	r3, r3, #2
1000509e:	2b02      	cmp	r3, #2
100050a0:	d01d      	beq.n	100050de <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
100050a2:	2301      	movs	r3, #1
100050a4:	e03e      	b.n	10005124 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100050a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100050aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100050ae:	f003 0302 	and.w	r3, r3, #2
100050b2:	2b02      	cmp	r3, #2
100050b4:	d001      	beq.n	100050ba <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
100050b6:	2301      	movs	r3, #1
100050b8:	e034      	b.n	10005124 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
100050ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100050c0:	f023 0207 	bic.w	r2, r3, #7
100050c4:	687b      	ldr	r3, [r7, #4]
100050c6:	685b      	ldr	r3, [r3, #4]
100050c8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100050cc:	4313      	orrs	r3, r2
100050ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
100050d0:	e006      	b.n	100050e0 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
100050d2:	2301      	movs	r3, #1
100050d4:	e026      	b.n	10005124 <RCC_MPUConfig+0xe4>
      break;
100050d6:	bf00      	nop
100050d8:	e002      	b.n	100050e0 <RCC_MPUConfig+0xa0>
      break;
100050da:	bf00      	nop
100050dc:	e000      	b.n	100050e0 <RCC_MPUConfig+0xa0>
      break;
100050de:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100050e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100050e4:	6a1b      	ldr	r3, [r3, #32]
100050e6:	f023 0203 	bic.w	r2, r3, #3
100050ea:	687b      	ldr	r3, [r7, #4]
100050ec:	681b      	ldr	r3, [r3, #0]
100050ee:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100050f2:	4313      	orrs	r3, r2
100050f4:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100050f6:	f7fc fdb3 	bl	10001c60 <HAL_GetTick>
100050fa:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100050fc:	e009      	b.n	10005112 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100050fe:	f7fc fdaf 	bl	10001c60 <HAL_GetTick>
10005102:	4602      	mov	r2, r0
10005104:	68fb      	ldr	r3, [r7, #12]
10005106:	1ad3      	subs	r3, r2, r3
10005108:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000510c:	d901      	bls.n	10005112 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
1000510e:	2303      	movs	r3, #3
10005110:	e008      	b.n	10005124 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10005112:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005116:	6a1b      	ldr	r3, [r3, #32]
10005118:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000511c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005120:	d1ed      	bne.n	100050fe <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10005122:	2300      	movs	r3, #0
}
10005124:	4618      	mov	r0, r3
10005126:	3710      	adds	r7, #16
10005128:	46bd      	mov	sp, r7
1000512a:	bd80      	pop	{r7, pc}

1000512c <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
1000512c:	b580      	push	{r7, lr}
1000512e:	b084      	sub	sp, #16
10005130:	af00      	add	r7, sp, #0
10005132:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10005134:	687b      	ldr	r3, [r7, #4]
10005136:	681b      	ldr	r3, [r3, #0]
10005138:	2b02      	cmp	r3, #2
1000513a:	d01b      	beq.n	10005174 <RCC_AXISSConfig+0x48>
1000513c:	2b02      	cmp	r3, #2
1000513e:	d823      	bhi.n	10005188 <RCC_AXISSConfig+0x5c>
10005140:	2b00      	cmp	r3, #0
10005142:	d002      	beq.n	1000514a <RCC_AXISSConfig+0x1e>
10005144:	2b01      	cmp	r3, #1
10005146:	d00a      	beq.n	1000515e <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10005148:	e01e      	b.n	10005188 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000514a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000514e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10005152:	f003 0301 	and.w	r3, r3, #1
10005156:	2b01      	cmp	r3, #1
10005158:	d018      	beq.n	1000518c <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
1000515a:	2301      	movs	r3, #1
1000515c:	e079      	b.n	10005252 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000515e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005162:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10005166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000516a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000516e:	d00f      	beq.n	10005190 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10005170:	2301      	movs	r3, #1
10005172:	e06e      	b.n	10005252 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10005174:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000517c:	f003 0302 	and.w	r3, r3, #2
10005180:	2b02      	cmp	r3, #2
10005182:	d007      	beq.n	10005194 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10005184:	2301      	movs	r3, #1
10005186:	e064      	b.n	10005252 <RCC_AXISSConfig+0x126>
      break;
10005188:	bf00      	nop
1000518a:	e004      	b.n	10005196 <RCC_AXISSConfig+0x6a>
      break;
1000518c:	bf00      	nop
1000518e:	e002      	b.n	10005196 <RCC_AXISSConfig+0x6a>
      break;
10005190:	bf00      	nop
10005192:	e000      	b.n	10005196 <RCC_AXISSConfig+0x6a>
      break;
10005194:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10005196:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000519c:	f023 0207 	bic.w	r2, r3, #7
100051a0:	687b      	ldr	r3, [r7, #4]
100051a2:	681b      	ldr	r3, [r3, #0]
100051a4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100051a8:	4313      	orrs	r3, r2
100051aa:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
100051ac:	687b      	ldr	r3, [r7, #4]
100051ae:	681b      	ldr	r3, [r3, #0]
100051b0:	2b03      	cmp	r3, #3
100051b2:	d016      	beq.n	100051e2 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100051b4:	f7fc fd54 	bl	10001c60 <HAL_GetTick>
100051b8:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100051ba:	e009      	b.n	100051d0 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100051bc:	f7fc fd50 	bl	10001c60 <HAL_GetTick>
100051c0:	4602      	mov	r2, r0
100051c2:	68fb      	ldr	r3, [r7, #12]
100051c4:	1ad3      	subs	r3, r2, r3
100051c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100051ca:	d901      	bls.n	100051d0 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
100051cc:	2303      	movs	r3, #3
100051ce:	e040      	b.n	10005252 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
100051d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100051d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100051da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100051de:	d1ed      	bne.n	100051bc <RCC_AXISSConfig+0x90>
100051e0:	e015      	b.n	1000520e <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100051e2:	f7fc fd3d 	bl	10001c60 <HAL_GetTick>
100051e6:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100051e8:	e009      	b.n	100051fe <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100051ea:	f7fc fd39 	bl	10001c60 <HAL_GetTick>
100051ee:	4602      	mov	r2, r0
100051f0:	68fb      	ldr	r3, [r7, #12]
100051f2:	1ad3      	subs	r3, r2, r3
100051f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100051f8:	d901      	bls.n	100051fe <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
100051fa:	2303      	movs	r3, #3
100051fc:	e029      	b.n	10005252 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100051fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000520c:	d0ed      	beq.n	100051ea <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
1000520e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10005214:	f023 0207 	bic.w	r2, r3, #7
10005218:	687b      	ldr	r3, [r7, #4]
1000521a:	685b      	ldr	r3, [r3, #4]
1000521c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005220:	4313      	orrs	r3, r2
10005222:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10005224:	f7fc fd1c 	bl	10001c60 <HAL_GetTick>
10005228:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
1000522a:	e009      	b.n	10005240 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000522c:	f7fc fd18 	bl	10001c60 <HAL_GetTick>
10005230:	4602      	mov	r2, r0
10005232:	68fb      	ldr	r3, [r7, #12]
10005234:	1ad3      	subs	r3, r2, r3
10005236:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000523a:	d901      	bls.n	10005240 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
1000523c:	2303      	movs	r3, #3
1000523e:	e008      	b.n	10005252 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10005240:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10005246:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000524a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000524e:	d1ed      	bne.n	1000522c <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10005250:	2300      	movs	r3, #0
}
10005252:	4618      	mov	r0, r3
10005254:	3710      	adds	r7, #16
10005256:	46bd      	mov	sp, r7
10005258:	bd80      	pop	{r7, pc}
	...

1000525c <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
1000525c:	b580      	push	{r7, lr}
1000525e:	b084      	sub	sp, #16
10005260:	af00      	add	r7, sp, #0
10005262:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10005264:	687b      	ldr	r3, [r7, #4]
10005266:	681b      	ldr	r3, [r3, #0]
10005268:	2b03      	cmp	r3, #3
1000526a:	d834      	bhi.n	100052d6 <RCC_MCUConfig+0x7a>
1000526c:	a201      	add	r2, pc, #4	@ (adr r2, 10005274 <RCC_MCUConfig+0x18>)
1000526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005272:	bf00      	nop
10005274:	10005285 	.word	0x10005285
10005278:	10005299 	.word	0x10005299
1000527c:	100052af 	.word	0x100052af
10005280:	100052c3 	.word	0x100052c3
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10005284:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005288:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
1000528c:	f003 0301 	and.w	r3, r3, #1
10005290:	2b01      	cmp	r3, #1
10005292:	d022      	beq.n	100052da <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10005294:	2301      	movs	r3, #1
10005296:	e081      	b.n	1000539c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10005298:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000529c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100052a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100052a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100052a8:	d019      	beq.n	100052de <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
100052aa:	2301      	movs	r3, #1
100052ac:	e076      	b.n	1000539c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100052ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100052b2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100052b6:	f003 0310 	and.w	r3, r3, #16
100052ba:	2b10      	cmp	r3, #16
100052bc:	d011      	beq.n	100052e2 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
100052be:	2301      	movs	r3, #1
100052c0:	e06c      	b.n	1000539c <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100052c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100052c6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100052ca:	f003 0302 	and.w	r3, r3, #2
100052ce:	2b02      	cmp	r3, #2
100052d0:	d009      	beq.n	100052e6 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
100052d2:	2301      	movs	r3, #1
100052d4:	e062      	b.n	1000539c <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
100052d6:	bf00      	nop
100052d8:	e006      	b.n	100052e8 <RCC_MCUConfig+0x8c>
      break;
100052da:	bf00      	nop
100052dc:	e004      	b.n	100052e8 <RCC_MCUConfig+0x8c>
      break;
100052de:	bf00      	nop
100052e0:	e002      	b.n	100052e8 <RCC_MCUConfig+0x8c>
      break;
100052e2:	bf00      	nop
100052e4:	e000      	b.n	100052e8 <RCC_MCUConfig+0x8c>
      break;
100052e6:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
100052e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100052ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100052ee:	f023 0203 	bic.w	r2, r3, #3
100052f2:	687b      	ldr	r3, [r7, #4]
100052f4:	681b      	ldr	r3, [r3, #0]
100052f6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100052fa:	4313      	orrs	r3, r2
100052fc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100052fe:	f7fc fcaf 	bl	10001c60 <HAL_GetTick>
10005302:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10005304:	e009      	b.n	1000531a <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005306:	f7fc fcab 	bl	10001c60 <HAL_GetTick>
1000530a:	4602      	mov	r2, r0
1000530c:	68fb      	ldr	r3, [r7, #12]
1000530e:	1ad3      	subs	r3, r2, r3
10005310:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10005314:	d901      	bls.n	1000531a <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10005316:	2303      	movs	r3, #3
10005318:	e040      	b.n	1000539c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
1000531a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000531e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10005320:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005328:	d1ed      	bne.n	10005306 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000532a:	f000 f954 	bl	100055d6 <HAL_RCC_GetSystemCoreClockFreq>
1000532e:	4603      	mov	r3, r0
10005330:	4a1c      	ldr	r2, [pc, #112]	@ (100053a4 <RCC_MCUConfig+0x148>)
10005332:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10005334:	4b1c      	ldr	r3, [pc, #112]	@ (100053a8 <RCC_MCUConfig+0x14c>)
10005336:	681b      	ldr	r3, [r3, #0]
10005338:	4618      	mov	r0, r3
1000533a:	f7fc fc47 	bl	10001bcc <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
1000533e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005342:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10005346:	f023 020f 	bic.w	r2, r3, #15
1000534a:	687b      	ldr	r3, [r7, #4]
1000534c:	685b      	ldr	r3, [r3, #4]
1000534e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005352:	4313      	orrs	r3, r2
10005354:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10005358:	f7fc fc82 	bl	10001c60 <HAL_GetTick>
1000535c:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
1000535e:	e009      	b.n	10005374 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005360:	f7fc fc7e 	bl	10001c60 <HAL_GetTick>
10005364:	4602      	mov	r2, r0
10005366:	68fb      	ldr	r3, [r7, #12]
10005368:	1ad3      	subs	r3, r2, r3
1000536a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000536e:	d901      	bls.n	10005374 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10005370:	2303      	movs	r3, #3
10005372:	e013      	b.n	1000539c <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10005374:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005378:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
1000537c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005380:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005384:	d1ec      	bne.n	10005360 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10005386:	f000 f926 	bl	100055d6 <HAL_RCC_GetSystemCoreClockFreq>
1000538a:	4603      	mov	r3, r0
1000538c:	4a05      	ldr	r2, [pc, #20]	@ (100053a4 <RCC_MCUConfig+0x148>)
1000538e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10005390:	4b05      	ldr	r3, [pc, #20]	@ (100053a8 <RCC_MCUConfig+0x14c>)
10005392:	681b      	ldr	r3, [r3, #0]
10005394:	4618      	mov	r0, r3
10005396:	f7fc fc19 	bl	10001bcc <HAL_InitTick>
#endif

  return HAL_OK;
1000539a:	2300      	movs	r3, #0
}
1000539c:	4618      	mov	r0, r3
1000539e:	3710      	adds	r7, #16
100053a0:	46bd      	mov	sp, r7
100053a2:	bd80      	pop	{r7, pc}
100053a4:	1002009c 	.word	0x1002009c
100053a8:	100200a0 	.word	0x100200a0

100053ac <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
100053ac:	b480      	push	{r7}
100053ae:	b089      	sub	sp, #36	@ 0x24
100053b0:	af00      	add	r7, sp, #0
100053b2:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
100053b4:	2300      	movs	r3, #0
100053b6:	61bb      	str	r3, [r7, #24]
100053b8:	2301      	movs	r3, #1
100053ba:	617b      	str	r3, [r7, #20]
100053bc:	2300      	movs	r3, #0
100053be:	613b      	str	r3, [r7, #16]
100053c0:	2300      	movs	r3, #0
100053c2:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
100053c4:	f04f 0300 	mov.w	r3, #0
100053c8:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
100053ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100053ce:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100053d2:	f003 0303 	and.w	r3, r3, #3
100053d6:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
100053d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100053dc:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
100053e0:	0c1b      	lsrs	r3, r3, #16
100053e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
100053e6:	3301      	adds	r3, #1
100053e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
100053ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100053ee:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100053f2:	0c1b      	lsrs	r3, r3, #16
100053f4:	f003 0301 	and.w	r3, r3, #1
100053f8:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
100053fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100053fe:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10005402:	08db      	lsrs	r3, r3, #3
10005404:	f3c3 030c 	ubfx	r3, r3, #0, #13
10005408:	693a      	ldr	r2, [r7, #16]
1000540a:	fb02 f303 	mul.w	r3, r2, r3
1000540e:	ee07 3a90 	vmov	s15, r3
10005412:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005416:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
1000541a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000541e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10005422:	f3c3 0308 	ubfx	r3, r3, #0, #9
10005426:	3301      	adds	r3, #1
10005428:	ee07 3a90 	vmov	s15, r3
1000542c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005430:	edd7 6a02 	vldr	s13, [r7, #8]
10005434:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 10005590 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10005438:	eec6 7a86 	vdiv.f32	s15, s13, s12
1000543c:	ee77 7a27 	vadd.f32	s15, s14, s15
10005440:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10005444:	69bb      	ldr	r3, [r7, #24]
10005446:	2b03      	cmp	r3, #3
10005448:	d85b      	bhi.n	10005502 <HAL_RCC_GetPLL3ClockFreq+0x156>
1000544a:	a201      	add	r2, pc, #4	@ (adr r2, 10005450 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
1000544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005450:	10005461 	.word	0x10005461
10005454:	100054bf 	.word	0x100054bf
10005458:	100054dd 	.word	0x100054dd
1000545c:	100054fb 	.word	0x100054fb
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10005460:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005464:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10005468:	f003 0304 	and.w	r3, r3, #4
1000546c:	2b04      	cmp	r3, #4
1000546e:	d117      	bne.n	100054a0 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005470:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005474:	699b      	ldr	r3, [r3, #24]
10005476:	f003 0303 	and.w	r3, r3, #3
1000547a:	4a46      	ldr	r2, [pc, #280]	@ (10005594 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
1000547c:	fa22 f303 	lsr.w	r3, r2, r3
10005480:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10005482:	68fa      	ldr	r2, [r7, #12]
10005484:	697b      	ldr	r3, [r7, #20]
10005486:	fbb2 f3f3 	udiv	r3, r2, r3
1000548a:	ee07 3a90 	vmov	s15, r3
1000548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10005492:	ed97 7a07 	vldr	s14, [r7, #28]
10005496:	ee67 7a27 	vmul.f32	s15, s14, s15
1000549a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
1000549e:	e030      	b.n	10005502 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
100054a0:	4a3c      	ldr	r2, [pc, #240]	@ (10005594 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
100054a2:	697b      	ldr	r3, [r7, #20]
100054a4:	fbb2 f3f3 	udiv	r3, r2, r3
100054a8:	ee07 3a90 	vmov	s15, r3
100054ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
100054b0:	ed97 7a07 	vldr	s14, [r7, #28]
100054b4:	ee67 7a27 	vmul.f32	s15, s14, s15
100054b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100054bc:	e021      	b.n	10005502 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
100054be:	4a36      	ldr	r2, [pc, #216]	@ (10005598 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
100054c0:	697b      	ldr	r3, [r7, #20]
100054c2:	fbb2 f3f3 	udiv	r3, r2, r3
100054c6:	ee07 3a90 	vmov	s15, r3
100054ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
100054ce:	ed97 7a07 	vldr	s14, [r7, #28]
100054d2:	ee67 7a27 	vmul.f32	s15, s14, s15
100054d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100054da:	e012      	b.n	10005502 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
100054dc:	4a2f      	ldr	r2, [pc, #188]	@ (1000559c <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
100054de:	697b      	ldr	r3, [r7, #20]
100054e0:	fbb2 f3f3 	udiv	r3, r2, r3
100054e4:	ee07 3a90 	vmov	s15, r3
100054e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
100054ec:	ed97 7a07 	vldr	s14, [r7, #28]
100054f0:	ee67 7a27 	vmul.f32	s15, s14, s15
100054f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100054f8:	e003      	b.n	10005502 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
100054fa:	f04f 0300 	mov.w	r3, #0
100054fe:	61fb      	str	r3, [r7, #28]
      break;
10005500:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10005502:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005506:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
1000550a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000550e:	3301      	adds	r3, #1
10005510:	ee07 3a90 	vmov	s15, r3
10005514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005518:	edd7 6a07 	vldr	s13, [r7, #28]
1000551c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10005520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10005524:	ee17 2a90 	vmov	r2, s15
10005528:	687b      	ldr	r3, [r7, #4]
1000552a:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
1000552c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005530:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10005534:	0a1b      	lsrs	r3, r3, #8
10005536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000553a:	3301      	adds	r3, #1
1000553c:	ee07 3a90 	vmov	s15, r3
10005540:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005544:	edd7 6a07 	vldr	s13, [r7, #28]
10005548:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000554c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10005550:	ee17 2a90 	vmov	r2, s15
10005554:	687b      	ldr	r3, [r7, #4]
10005556:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10005558:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000555c:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10005560:	0c1b      	lsrs	r3, r3, #16
10005562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10005566:	3301      	adds	r3, #1
10005568:	ee07 3a90 	vmov	s15, r3
1000556c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10005570:	edd7 6a07 	vldr	s13, [r7, #28]
10005574:	eec6 7a87 	vdiv.f32	s15, s13, s14
10005578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000557c:	ee17 2a90 	vmov	r2, s15
10005580:	687b      	ldr	r3, [r7, #4]
10005582:	609a      	str	r2, [r3, #8]
}
10005584:	bf00      	nop
10005586:	3724      	adds	r7, #36	@ 0x24
10005588:	46bd      	mov	sp, r7
1000558a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000558e:	4770      	bx	lr
10005590:	46000000 	.word	0x46000000
10005594:	03d09000 	.word	0x03d09000
10005598:	016e3600 	.word	0x016e3600
1000559c:	003d0900 	.word	0x003d0900

100055a0 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
100055a0:	b580      	push	{r7, lr}
100055a2:	b082      	sub	sp, #8
100055a4:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
100055a6:	2300      	movs	r3, #0
100055a8:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
100055aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100055ae:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
100055b2:	f003 030f 	and.w	r3, r3, #15
100055b6:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
100055b8:	687b      	ldr	r3, [r7, #4]
100055ba:	2b09      	cmp	r3, #9
100055bc:	d901      	bls.n	100055c2 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
100055be:	2309      	movs	r3, #9
100055c0:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
100055c2:	f000 f80f 	bl	100055e4 <HAL_RCC_GetMCUSSFreq>
100055c6:	4602      	mov	r2, r0
100055c8:	687b      	ldr	r3, [r7, #4]
100055ca:	fa22 f303 	lsr.w	r3, r2, r3
}
100055ce:	4618      	mov	r0, r3
100055d0:	3708      	adds	r7, #8
100055d2:	46bd      	mov	sp, r7
100055d4:	bd80      	pop	{r7, pc}

100055d6 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
100055d6:	b580      	push	{r7, lr}
100055d8:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
100055da:	f7ff ffe1 	bl	100055a0 <HAL_RCC_GetMCUFreq>
100055de:	4603      	mov	r3, r0
#endif
}
100055e0:	4618      	mov	r0, r3
100055e2:	bd80      	pop	{r7, pc}

100055e4 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
100055e4:	b580      	push	{r7, lr}
100055e6:	b084      	sub	sp, #16
100055e8:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
100055ea:	2300      	movs	r3, #0
100055ec:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
100055ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100055f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100055f4:	f003 0303 	and.w	r3, r3, #3
100055f8:	2b03      	cmp	r3, #3
100055fa:	d822      	bhi.n	10005642 <HAL_RCC_GetMCUSSFreq+0x5e>
100055fc:	a201      	add	r2, pc, #4	@ (adr r2, 10005604 <HAL_RCC_GetMCUSSFreq+0x20>)
100055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005602:	bf00      	nop
10005604:	10005623 	.word	0x10005623
10005608:	10005637 	.word	0x10005637
1000560c:	1000563d 	.word	0x1000563d
10005610:	10005615 	.word	0x10005615
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10005614:	463b      	mov	r3, r7
10005616:	4618      	mov	r0, r3
10005618:	f7ff fec8 	bl	100053ac <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
1000561c:	683b      	ldr	r3, [r7, #0]
1000561e:	60fb      	str	r3, [r7, #12]
      break;
10005620:	e00f      	b.n	10005642 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10005622:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005626:	699b      	ldr	r3, [r3, #24]
10005628:	f003 0303 	and.w	r3, r3, #3
1000562c:	4a07      	ldr	r2, [pc, #28]	@ (1000564c <HAL_RCC_GetMCUSSFreq+0x68>)
1000562e:	fa22 f303 	lsr.w	r3, r2, r3
10005632:	60fb      	str	r3, [r7, #12]

      break;
10005634:	e005      	b.n	10005642 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10005636:	4b06      	ldr	r3, [pc, #24]	@ (10005650 <HAL_RCC_GetMCUSSFreq+0x6c>)
10005638:	60fb      	str	r3, [r7, #12]
      break;
1000563a:	e002      	b.n	10005642 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
1000563c:	4b05      	ldr	r3, [pc, #20]	@ (10005654 <HAL_RCC_GetMCUSSFreq+0x70>)
1000563e:	60fb      	str	r3, [r7, #12]
      break;
10005640:	bf00      	nop
  }

  return mcussfreq;
10005642:	68fb      	ldr	r3, [r7, #12]
}
10005644:	4618      	mov	r0, r3
10005646:	3710      	adds	r7, #16
10005648:	46bd      	mov	sp, r7
1000564a:	bd80      	pop	{r7, pc}
1000564c:	03d09000 	.word	0x03d09000
10005650:	016e3600 	.word	0x016e3600
10005654:	003d0900 	.word	0x003d0900

10005658 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10005658:	b580      	push	{r7, lr}
1000565a:	b084      	sub	sp, #16
1000565c:	af00      	add	r7, sp, #0
1000565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10005660:	687b      	ldr	r3, [r7, #4]
10005662:	681b      	ldr	r3, [r3, #0]
10005664:	2b00      	cmp	r3, #0
10005666:	f000 8171 	beq.w	1000594c <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
1000566a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005670:	f003 0307 	and.w	r3, r3, #7
10005674:	2b02      	cmp	r3, #2
10005676:	d108      	bne.n	1000568a <RCCEx_PLL2_Config+0x32>
10005678:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000567e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005682:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005686:	f000 815f 	beq.w	10005948 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
1000568a:	687b      	ldr	r3, [r7, #4]
1000568c:	681b      	ldr	r3, [r3, #0]
1000568e:	2b02      	cmp	r3, #2
10005690:	f040 8130 	bne.w	100058f4 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10005694:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000569a:	f003 0303 	and.w	r3, r3, #3
1000569e:	2b00      	cmp	r3, #0
100056a0:	d008      	beq.n	100056b4 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
100056a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100056a8:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100056ac:	2b01      	cmp	r3, #1
100056ae:	d001      	beq.n	100056b4 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100056b0:	2301      	movs	r3, #1
100056b2:	e14c      	b.n	1000594e <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100056b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100056b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100056bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100056c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100056c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
100056c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100056cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100056d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100056d4:	f023 0301 	bic.w	r3, r3, #1
100056d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100056dc:	f7fc fac0 	bl	10001c60 <HAL_GetTick>
100056e0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100056e2:	e008      	b.n	100056f6 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100056e4:	f7fc fabc 	bl	10001c60 <HAL_GetTick>
100056e8:	4602      	mov	r2, r0
100056ea:	68fb      	ldr	r3, [r7, #12]
100056ec:	1ad3      	subs	r3, r2, r3
100056ee:	2b64      	cmp	r3, #100	@ 0x64
100056f0:	d901      	bls.n	100056f6 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
100056f2:	2303      	movs	r3, #3
100056f4:	e12b      	b.n	1000594e <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100056f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100056fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100056fe:	f003 0302 	and.w	r3, r3, #2
10005702:	2b02      	cmp	r3, #2
10005704:	d0ee      	beq.n	100056e4 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10005706:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000570a:	6a1b      	ldr	r3, [r3, #32]
1000570c:	f003 0303 	and.w	r3, r3, #3
10005710:	2b02      	cmp	r3, #2
10005712:	d107      	bne.n	10005724 <RCCEx_PLL2_Config+0xcc>
10005714:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005718:	6a1b      	ldr	r3, [r3, #32]
1000571a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000571e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005722:	d00e      	beq.n	10005742 <RCCEx_PLL2_Config+0xea>
10005724:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005728:	6a1b      	ldr	r3, [r3, #32]
1000572a:	f003 0303 	and.w	r3, r3, #3
1000572e:	2b03      	cmp	r3, #3
10005730:	d112      	bne.n	10005758 <RCCEx_PLL2_Config+0x100>
10005732:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005736:	6a1b      	ldr	r3, [r3, #32]
10005738:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000573c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005740:	d10a      	bne.n	10005758 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10005742:	687b      	ldr	r3, [r7, #4]
10005744:	685a      	ldr	r2, [r3, #4]
10005746:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000574a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000574c:	f003 0303 	and.w	r3, r3, #3
10005750:	429a      	cmp	r2, r3
10005752:	d00c      	beq.n	1000576e <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10005754:	2301      	movs	r3, #1
10005756:	e0fa      	b.n	1000594e <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10005758:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000575c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000575e:	f023 0203 	bic.w	r2, r3, #3
10005762:	687b      	ldr	r3, [r7, #4]
10005764:	685b      	ldr	r3, [r3, #4]
10005766:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000576a:	4313      	orrs	r3, r2
1000576c:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
1000576e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005772:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
10005776:	4b78      	ldr	r3, [pc, #480]	@ (10005958 <RCCEx_PLL2_Config+0x300>)
10005778:	4013      	ands	r3, r2
1000577a:	687a      	ldr	r2, [r7, #4]
1000577c:	68d2      	ldr	r2, [r2, #12]
1000577e:	1e51      	subs	r1, r2, #1
10005780:	687a      	ldr	r2, [r7, #4]
10005782:	6892      	ldr	r2, [r2, #8]
10005784:	3a01      	subs	r2, #1
10005786:	0412      	lsls	r2, r2, #16
10005788:	430a      	orrs	r2, r1
1000578a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000578e:	4313      	orrs	r3, r2
10005790:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
10005794:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005798:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
1000579c:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100057a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100057a4:	687a      	ldr	r2, [r7, #4]
100057a6:	6912      	ldr	r2, [r2, #16]
100057a8:	1e51      	subs	r1, r2, #1
100057aa:	687a      	ldr	r2, [r7, #4]
100057ac:	6952      	ldr	r2, [r2, #20]
100057ae:	3a01      	subs	r2, #1
100057b0:	0212      	lsls	r2, r2, #8
100057b2:	4311      	orrs	r1, r2
100057b4:	687a      	ldr	r2, [r7, #4]
100057b6:	6992      	ldr	r2, [r2, #24]
100057b8:	3a01      	subs	r2, #1
100057ba:	0412      	lsls	r2, r2, #16
100057bc:	430a      	orrs	r2, r1
100057be:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100057c2:	4313      	orrs	r3, r2
100057c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
100057c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100057cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
100057d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100057d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
100057d8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
100057dc:	687b      	ldr	r3, [r7, #4]
100057de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100057e0:	2b02      	cmp	r3, #2
100057e2:	d003      	beq.n	100057ec <RCCEx_PLL2_Config+0x194>
100057e4:	687b      	ldr	r3, [r7, #4]
100057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100057e8:	2b00      	cmp	r3, #0
100057ea:	d10c      	bne.n	10005806 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
100057ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100057f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
100057f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100057f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100057fc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10005800:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
10005804:	e00f      	b.n	10005826 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10005806:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000580a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000580e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10005812:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10005816:	687a      	ldr	r2, [r7, #4]
10005818:	6a12      	ldr	r2, [r2, #32]
1000581a:	00d2      	lsls	r2, r2, #3
1000581c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005820:	4313      	orrs	r3, r2
10005822:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10005826:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000582a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000582e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10005836:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000583a:	687b      	ldr	r3, [r7, #4]
1000583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000583e:	2b02      	cmp	r3, #2
10005840:	d124      	bne.n	1000588c <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10005842:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005846:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
1000584a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
1000584e:	687b      	ldr	r3, [r7, #4]
10005850:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10005852:	687b      	ldr	r3, [r7, #4]
10005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10005856:	4319      	orrs	r1, r3
10005858:	687b      	ldr	r3, [r7, #4]
1000585a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000585c:	4319      	orrs	r1, r3
1000585e:	687b      	ldr	r3, [r7, #4]
10005860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10005862:	4319      	orrs	r1, r3
10005864:	687b      	ldr	r3, [r7, #4]
10005866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005868:	041b      	lsls	r3, r3, #16
1000586a:	430b      	orrs	r3, r1
1000586c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005870:	4313      	orrs	r3, r2
10005872:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10005876:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000587a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000587e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005882:	f043 0304 	orr.w	r3, r3, #4
10005886:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
1000588a:	e009      	b.n	100058a0 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
1000588c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10005894:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005898:	f023 0304 	bic.w	r3, r3, #4
1000589c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
100058a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100058a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100058a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100058ac:	f043 0301 	orr.w	r3, r3, #1
100058b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100058b4:	f7fc f9d4 	bl	10001c60 <HAL_GetTick>
100058b8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100058ba:	e008      	b.n	100058ce <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100058bc:	f7fc f9d0 	bl	10001c60 <HAL_GetTick>
100058c0:	4602      	mov	r2, r0
100058c2:	68fb      	ldr	r3, [r7, #12]
100058c4:	1ad3      	subs	r3, r2, r3
100058c6:	2b64      	cmp	r3, #100	@ 0x64
100058c8:	d901      	bls.n	100058ce <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
100058ca:	2303      	movs	r3, #3
100058cc:	e03f      	b.n	1000594e <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100058ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100058d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100058d6:	f003 0302 	and.w	r3, r3, #2
100058da:	2b02      	cmp	r3, #2
100058dc:	d1ee      	bne.n	100058bc <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100058de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100058e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100058e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100058ea:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100058ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
100058f2:	e02b      	b.n	1000594c <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100058f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100058f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100058fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10005904:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10005908:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000590c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10005910:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005914:	f023 0301 	bic.w	r3, r3, #1
10005918:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000591c:	f7fc f9a0 	bl	10001c60 <HAL_GetTick>
10005920:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005922:	e008      	b.n	10005936 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005924:	f7fc f99c 	bl	10001c60 <HAL_GetTick>
10005928:	4602      	mov	r2, r0
1000592a:	68fb      	ldr	r3, [r7, #12]
1000592c:	1ad3      	subs	r3, r2, r3
1000592e:	2b64      	cmp	r3, #100	@ 0x64
10005930:	d901      	bls.n	10005936 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10005932:	2303      	movs	r3, #3
10005934:	e00b      	b.n	1000594e <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005936:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000593a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000593e:	f003 0302 	and.w	r3, r3, #2
10005942:	2b02      	cmp	r3, #2
10005944:	d0ee      	beq.n	10005924 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10005946:	e001      	b.n	1000594c <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10005948:	2301      	movs	r3, #1
1000594a:	e000      	b.n	1000594e <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
1000594c:	2300      	movs	r3, #0

}
1000594e:	4618      	mov	r0, r3
10005950:	3710      	adds	r7, #16
10005952:	46bd      	mov	sp, r7
10005954:	bd80      	pop	{r7, pc}
10005956:	bf00      	nop
10005958:	ffc0fe00 	.word	0xffc0fe00

1000595c <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
1000595c:	b580      	push	{r7, lr}
1000595e:	b084      	sub	sp, #16
10005960:	af00      	add	r7, sp, #0
10005962:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10005964:	687b      	ldr	r3, [r7, #4]
10005966:	681b      	ldr	r3, [r3, #0]
10005968:	2b00      	cmp	r3, #0
1000596a:	f000 815a 	beq.w	10005c22 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
1000596e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10005974:	f003 0303 	and.w	r3, r3, #3
10005978:	2b03      	cmp	r3, #3
1000597a:	d108      	bne.n	1000598e <RCCEx_PLL3_Config+0x32>
1000597c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10005982:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005986:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000598a:	f000 8148 	beq.w	10005c1e <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
1000598e:	687b      	ldr	r3, [r7, #4]
10005990:	681b      	ldr	r3, [r3, #0]
10005992:	2b02      	cmp	r3, #2
10005994:	f040 8119 	bne.w	10005bca <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10005998:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000599c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100059a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100059a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100059a8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100059ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100059b0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100059b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100059b8:	f023 0301 	bic.w	r3, r3, #1
100059bc:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100059c0:	f7fc f94e 	bl	10001c60 <HAL_GetTick>
100059c4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100059c6:	e008      	b.n	100059da <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100059c8:	f7fc f94a 	bl	10001c60 <HAL_GetTick>
100059cc:	4602      	mov	r2, r0
100059ce:	68fb      	ldr	r3, [r7, #12]
100059d0:	1ad3      	subs	r3, r2, r3
100059d2:	2b64      	cmp	r3, #100	@ 0x64
100059d4:	d901      	bls.n	100059da <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
100059d6:	2303      	movs	r3, #3
100059d8:	e124      	b.n	10005c24 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100059da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100059de:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100059e2:	f003 0302 	and.w	r3, r3, #2
100059e6:	2b02      	cmp	r3, #2
100059e8:	d0ee      	beq.n	100059c8 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
100059ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100059ee:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
100059f2:	f023 0203 	bic.w	r2, r3, #3
100059f6:	687b      	ldr	r3, [r7, #4]
100059f8:	685b      	ldr	r3, [r3, #4]
100059fa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100059fe:	4313      	orrs	r3, r2
10005a00:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10005a04:	e008      	b.n	10005a18 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005a06:	f7fc f92b 	bl	10001c60 <HAL_GetTick>
10005a0a:	4602      	mov	r2, r0
10005a0c:	68fb      	ldr	r3, [r7, #12]
10005a0e:	1ad3      	subs	r3, r2, r3
10005a10:	2b64      	cmp	r3, #100	@ 0x64
10005a12:	d901      	bls.n	10005a18 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10005a14:	2303      	movs	r3, #3
10005a16:	e105      	b.n	10005c24 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10005a18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005a1c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10005a20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005a24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005a28:	d1ed      	bne.n	10005a06 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10005a2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005a2e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10005a32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10005a36:	687b      	ldr	r3, [r7, #4]
10005a38:	69db      	ldr	r3, [r3, #28]
10005a3a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005a3e:	4313      	orrs	r3, r2
10005a40:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10005a44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005a48:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
10005a4c:	4b77      	ldr	r3, [pc, #476]	@ (10005c2c <RCCEx_PLL3_Config+0x2d0>)
10005a4e:	4013      	ands	r3, r2
10005a50:	687a      	ldr	r2, [r7, #4]
10005a52:	68d2      	ldr	r2, [r2, #12]
10005a54:	1e51      	subs	r1, r2, #1
10005a56:	687a      	ldr	r2, [r7, #4]
10005a58:	6892      	ldr	r2, [r2, #8]
10005a5a:	3a01      	subs	r2, #1
10005a5c:	0412      	lsls	r2, r2, #16
10005a5e:	430a      	orrs	r2, r1
10005a60:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005a64:	4313      	orrs	r3, r2
10005a66:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
10005a6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005a6e:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10005a72:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10005a76:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10005a7a:	687a      	ldr	r2, [r7, #4]
10005a7c:	6912      	ldr	r2, [r2, #16]
10005a7e:	1e51      	subs	r1, r2, #1
10005a80:	687a      	ldr	r2, [r7, #4]
10005a82:	6952      	ldr	r2, [r2, #20]
10005a84:	3a01      	subs	r2, #1
10005a86:	0212      	lsls	r2, r2, #8
10005a88:	4311      	orrs	r1, r2
10005a8a:	687a      	ldr	r2, [r7, #4]
10005a8c:	6992      	ldr	r2, [r2, #24]
10005a8e:	3a01      	subs	r2, #1
10005a90:	0412      	lsls	r2, r2, #16
10005a92:	430a      	orrs	r2, r1
10005a94:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005a98:	4313      	orrs	r3, r2
10005a9a:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10005a9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005aa2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10005aa6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10005aae:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10005ab2:	687b      	ldr	r3, [r7, #4]
10005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005ab6:	2b02      	cmp	r3, #2
10005ab8:	d003      	beq.n	10005ac2 <RCCEx_PLL3_Config+0x166>
10005aba:	687b      	ldr	r3, [r7, #4]
10005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005abe:	2b00      	cmp	r3, #0
10005ac0:	d10c      	bne.n	10005adc <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10005ac2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005ac6:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10005aca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005ace:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10005ad2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10005ad6:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
10005ada:	e00f      	b.n	10005afc <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10005adc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005ae0:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10005ae4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10005ae8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10005aec:	687a      	ldr	r2, [r7, #4]
10005aee:	6a12      	ldr	r2, [r2, #32]
10005af0:	00d2      	lsls	r2, r2, #3
10005af2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005af6:	4313      	orrs	r3, r2
10005af8:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10005afc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005b00:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10005b04:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10005b0c:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005b10:	687b      	ldr	r3, [r7, #4]
10005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005b14:	2b02      	cmp	r3, #2
10005b16:	d124      	bne.n	10005b62 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10005b18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005b1c:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
10005b20:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10005b24:	687b      	ldr	r3, [r7, #4]
10005b26:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10005b28:	687b      	ldr	r3, [r7, #4]
10005b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10005b2c:	4319      	orrs	r1, r3
10005b2e:	687b      	ldr	r3, [r7, #4]
10005b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10005b32:	4319      	orrs	r1, r3
10005b34:	687b      	ldr	r3, [r7, #4]
10005b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10005b38:	4319      	orrs	r1, r3
10005b3a:	687b      	ldr	r3, [r7, #4]
10005b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005b3e:	041b      	lsls	r3, r3, #16
10005b40:	430b      	orrs	r3, r1
10005b42:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005b46:	4313      	orrs	r3, r2
10005b48:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10005b4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005b50:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005b54:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005b58:	f043 0304 	orr.w	r3, r3, #4
10005b5c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
10005b60:	e009      	b.n	10005b76 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10005b62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005b66:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005b6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005b6e:	f023 0304 	bic.w	r3, r3, #4
10005b72:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10005b76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005b7a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005b7e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005b82:	f043 0301 	orr.w	r3, r3, #1
10005b86:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005b8a:	f7fc f869 	bl	10001c60 <HAL_GetTick>
10005b8e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10005b90:	e008      	b.n	10005ba4 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005b92:	f7fc f865 	bl	10001c60 <HAL_GetTick>
10005b96:	4602      	mov	r2, r0
10005b98:	68fb      	ldr	r3, [r7, #12]
10005b9a:	1ad3      	subs	r3, r2, r3
10005b9c:	2b64      	cmp	r3, #100	@ 0x64
10005b9e:	d901      	bls.n	10005ba4 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10005ba0:	2303      	movs	r3, #3
10005ba2:	e03f      	b.n	10005c24 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10005ba4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005ba8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005bac:	f003 0302 	and.w	r3, r3, #2
10005bb0:	2b02      	cmp	r3, #2
10005bb2:	d1ee      	bne.n	10005b92 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10005bb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005bb8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005bbc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005bc0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10005bc4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10005bc8:	e02b      	b.n	10005c22 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10005bca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005bce:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005bd2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10005bda:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10005bde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005be2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005be6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005bea:	f023 0301 	bic.w	r3, r3, #1
10005bee:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005bf2:	f7fc f835 	bl	10001c60 <HAL_GetTick>
10005bf6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005bf8:	e008      	b.n	10005c0c <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005bfa:	f7fc f831 	bl	10001c60 <HAL_GetTick>
10005bfe:	4602      	mov	r2, r0
10005c00:	68fb      	ldr	r3, [r7, #12]
10005c02:	1ad3      	subs	r3, r2, r3
10005c04:	2b64      	cmp	r3, #100	@ 0x64
10005c06:	d901      	bls.n	10005c0c <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10005c08:	2303      	movs	r3, #3
10005c0a:	e00b      	b.n	10005c24 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005c0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005c10:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10005c14:	f003 0302 	and.w	r3, r3, #2
10005c18:	2b02      	cmp	r3, #2
10005c1a:	d0ee      	beq.n	10005bfa <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10005c1c:	e001      	b.n	10005c22 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10005c1e:	2301      	movs	r3, #1
10005c20:	e000      	b.n	10005c24 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10005c22:	2300      	movs	r3, #0
}
10005c24:	4618      	mov	r0, r3
10005c26:	3710      	adds	r7, #16
10005c28:	46bd      	mov	sp, r7
10005c2a:	bd80      	pop	{r7, pc}
10005c2c:	ffc0fe00 	.word	0xffc0fe00

10005c30 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10005c30:	b580      	push	{r7, lr}
10005c32:	b084      	sub	sp, #16
10005c34:	af00      	add	r7, sp, #0
10005c36:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10005c38:	687b      	ldr	r3, [r7, #4]
10005c3a:	681b      	ldr	r3, [r3, #0]
10005c3c:	2b00      	cmp	r3, #0
10005c3e:	f000 8147 	beq.w	10005ed0 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10005c42:	687b      	ldr	r3, [r7, #4]
10005c44:	681b      	ldr	r3, [r3, #0]
10005c46:	2b02      	cmp	r3, #2
10005c48:	f040 8119 	bne.w	10005e7e <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005c4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005c50:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005c54:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10005c5c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10005c60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005c64:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005c68:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005c6c:	f023 0301 	bic.w	r3, r3, #1
10005c70:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10005c74:	f7fb fff4 	bl	10001c60 <HAL_GetTick>
10005c78:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005c7a:	e008      	b.n	10005c8e <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005c7c:	f7fb fff0 	bl	10001c60 <HAL_GetTick>
10005c80:	4602      	mov	r2, r0
10005c82:	68fb      	ldr	r3, [r7, #12]
10005c84:	1ad3      	subs	r3, r2, r3
10005c86:	2b64      	cmp	r3, #100	@ 0x64
10005c88:	d901      	bls.n	10005c8e <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10005c8a:	2303      	movs	r3, #3
10005c8c:	e121      	b.n	10005ed2 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005c8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005c92:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005c96:	f003 0302 	and.w	r3, r3, #2
10005c9a:	2b02      	cmp	r3, #2
10005c9c:	d0ee      	beq.n	10005c7c <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10005c9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005ca2:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10005ca6:	f023 0203 	bic.w	r2, r3, #3
10005caa:	687b      	ldr	r3, [r7, #4]
10005cac:	685b      	ldr	r3, [r3, #4]
10005cae:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005cb2:	4313      	orrs	r3, r2
10005cb4:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10005cb8:	e008      	b.n	10005ccc <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005cba:	f7fb ffd1 	bl	10001c60 <HAL_GetTick>
10005cbe:	4602      	mov	r2, r0
10005cc0:	68fb      	ldr	r3, [r7, #12]
10005cc2:	1ad3      	subs	r3, r2, r3
10005cc4:	2b64      	cmp	r3, #100	@ 0x64
10005cc6:	d901      	bls.n	10005ccc <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10005cc8:	2303      	movs	r3, #3
10005cca:	e102      	b.n	10005ed2 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10005ccc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005cd0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10005cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10005cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10005cdc:	d1ed      	bne.n	10005cba <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10005cde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005ce2:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10005ce6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10005cea:	687b      	ldr	r3, [r7, #4]
10005cec:	69db      	ldr	r3, [r3, #28]
10005cee:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005cf2:	4313      	orrs	r3, r2
10005cf4:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10005cf8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005cfc:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
10005d00:	4b76      	ldr	r3, [pc, #472]	@ (10005edc <RCCEx_PLL4_Config+0x2ac>)
10005d02:	4013      	ands	r3, r2
10005d04:	687a      	ldr	r2, [r7, #4]
10005d06:	68d2      	ldr	r2, [r2, #12]
10005d08:	1e51      	subs	r1, r2, #1
10005d0a:	687a      	ldr	r2, [r7, #4]
10005d0c:	6892      	ldr	r2, [r2, #8]
10005d0e:	3a01      	subs	r2, #1
10005d10:	0412      	lsls	r2, r2, #16
10005d12:	430a      	orrs	r2, r1
10005d14:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005d18:	4313      	orrs	r3, r2
10005d1a:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
10005d1e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005d22:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10005d26:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10005d2a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10005d2e:	687a      	ldr	r2, [r7, #4]
10005d30:	6912      	ldr	r2, [r2, #16]
10005d32:	1e51      	subs	r1, r2, #1
10005d34:	687a      	ldr	r2, [r7, #4]
10005d36:	6952      	ldr	r2, [r2, #20]
10005d38:	3a01      	subs	r2, #1
10005d3a:	0212      	lsls	r2, r2, #8
10005d3c:	4311      	orrs	r1, r2
10005d3e:	687a      	ldr	r2, [r7, #4]
10005d40:	6992      	ldr	r2, [r2, #24]
10005d42:	3a01      	subs	r2, #1
10005d44:	0412      	lsls	r2, r2, #16
10005d46:	430a      	orrs	r2, r1
10005d48:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005d4c:	4313      	orrs	r3, r2
10005d4e:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10005d52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005d56:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10005d5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10005d62:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10005d66:	687b      	ldr	r3, [r7, #4]
10005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d6a:	2b02      	cmp	r3, #2
10005d6c:	d003      	beq.n	10005d76 <RCCEx_PLL4_Config+0x146>
10005d6e:	687b      	ldr	r3, [r7, #4]
10005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005d72:	2b00      	cmp	r3, #0
10005d74:	d10c      	bne.n	10005d90 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10005d76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005d7a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10005d7e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10005d86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10005d8a:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
10005d8e:	e00f      	b.n	10005db0 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10005d90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005d94:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10005d98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10005d9c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10005da0:	687a      	ldr	r2, [r7, #4]
10005da2:	6a12      	ldr	r2, [r2, #32]
10005da4:	00d2      	lsls	r2, r2, #3
10005da6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005daa:	4313      	orrs	r3, r2
10005dac:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10005db0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005db4:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10005db8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10005dc0:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005dc4:	687b      	ldr	r3, [r7, #4]
10005dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005dc8:	2b02      	cmp	r3, #2
10005dca:	d124      	bne.n	10005e16 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10005dcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005dd0:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
10005dd4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10005dd8:	687b      	ldr	r3, [r7, #4]
10005dda:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10005ddc:	687b      	ldr	r3, [r7, #4]
10005dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10005de0:	4319      	orrs	r1, r3
10005de2:	687b      	ldr	r3, [r7, #4]
10005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10005de6:	4319      	orrs	r1, r3
10005de8:	687b      	ldr	r3, [r7, #4]
10005dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10005dec:	4319      	orrs	r1, r3
10005dee:	687b      	ldr	r3, [r7, #4]
10005df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005df2:	041b      	lsls	r3, r3, #16
10005df4:	430b      	orrs	r3, r1
10005df6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10005dfa:	4313      	orrs	r3, r2
10005dfc:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10005e00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e04:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005e08:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005e0c:	f043 0304 	orr.w	r3, r3, #4
10005e10:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10005e14:	e009      	b.n	10005e2a <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10005e16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e1a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005e1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005e22:	f023 0304 	bic.w	r3, r3, #4
10005e26:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10005e2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e2e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005e32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005e36:	f043 0301 	orr.w	r3, r3, #1
10005e3a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10005e3e:	f7fb ff0f 	bl	10001c60 <HAL_GetTick>
10005e42:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10005e44:	e008      	b.n	10005e58 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005e46:	f7fb ff0b 	bl	10001c60 <HAL_GetTick>
10005e4a:	4602      	mov	r2, r0
10005e4c:	68fb      	ldr	r3, [r7, #12]
10005e4e:	1ad3      	subs	r3, r2, r3
10005e50:	2b64      	cmp	r3, #100	@ 0x64
10005e52:	d901      	bls.n	10005e58 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10005e54:	2303      	movs	r3, #3
10005e56:	e03c      	b.n	10005ed2 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10005e58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e5c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005e60:	f003 0302 	and.w	r3, r3, #2
10005e64:	2b02      	cmp	r3, #2
10005e66:	d1ee      	bne.n	10005e46 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005e68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e6c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005e70:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005e74:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10005e78:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10005e7c:	e028      	b.n	10005ed0 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005e7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e82:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005e86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10005e8e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10005e92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005e96:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005e9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005e9e:	f023 0301 	bic.w	r3, r3, #1
10005ea2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10005ea6:	f7fb fedb 	bl	10001c60 <HAL_GetTick>
10005eaa:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005eac:	e008      	b.n	10005ec0 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005eae:	f7fb fed7 	bl	10001c60 <HAL_GetTick>
10005eb2:	4602      	mov	r2, r0
10005eb4:	68fb      	ldr	r3, [r7, #12]
10005eb6:	1ad3      	subs	r3, r2, r3
10005eb8:	2b64      	cmp	r3, #100	@ 0x64
10005eba:	d901      	bls.n	10005ec0 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10005ebc:	2303      	movs	r3, #3
10005ebe:	e008      	b.n	10005ed2 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10005ec0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005ec4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005ec8:	f003 0302 	and.w	r3, r3, #2
10005ecc:	2b02      	cmp	r3, #2
10005ece:	d0ee      	beq.n	10005eae <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10005ed0:	2300      	movs	r3, #0
}
10005ed2:	4618      	mov	r0, r3
10005ed4:	3710      	adds	r7, #16
10005ed6:	46bd      	mov	sp, r7
10005ed8:	bd80      	pop	{r7, pc}
10005eda:	bf00      	nop
10005edc:	ffc0fe00 	.word	0xffc0fe00

10005ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10005ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10005ee4:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
10005ee8:	af00      	add	r7, sp, #0
10005eea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005eee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005ef2:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10005ef4:	2300      	movs	r3, #0
10005ef6:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
10005efa:	2300      	movs	r3, #0
10005efc:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10005f00:	2300      	movs	r3, #0
10005f02:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10005f06:	2300      	movs	r3, #0
10005f08:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10005f0c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005f10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005f14:	681b      	ldr	r3, [r3, #0]
10005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
10005f1a:	f402 0400 	and.w	r4, r2, #8388608	@ 0x800000
10005f1e:	2500      	movs	r5, #0
10005f20:	ea54 0305 	orrs.w	r3, r4, r5
10005f24:	d011      	beq.n	10005f4a <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10005f26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005f2a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10005f2e:	f023 0103 	bic.w	r1, r3, #3
10005f32:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005f36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005f3a:	681b      	ldr	r3, [r3, #0]
10005f3c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
10005f40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005f44:	430b      	orrs	r3, r1
10005f46:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10005f4a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005f4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005f52:	681b      	ldr	r3, [r3, #0]
10005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
10005f58:	f002 0810 	and.w	r8, r2, #16
10005f5c:	f04f 0900 	mov.w	r9, #0
10005f60:	ea58 0309 	orrs.w	r3, r8, r9
10005f64:	d038      	beq.n	10005fd8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10005f66:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005f6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005f6e:	681b      	ldr	r3, [r3, #0]
10005f70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10005f74:	2b01      	cmp	r3, #1
10005f76:	d11d      	bne.n	10005fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005f78:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005f7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005f80:	681b      	ldr	r3, [r3, #0]
10005f82:	3380      	adds	r3, #128	@ 0x80
10005f84:	4618      	mov	r0, r3
10005f86:	f7ff fe53 	bl	10005c30 <RCCEx_PLL4_Config>
10005f8a:	4603      	mov	r3, r0
10005f8c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10005f90:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005f94:	2b00      	cmp	r3, #0
10005f96:	d003      	beq.n	10005fa0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10005f98:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10005f9c:	f001 be2a 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005fa0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005fa4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10005fa8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005fb0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10005fb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10005fb8:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
10005fbc:	f023 0107 	bic.w	r1, r3, #7
10005fc0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005fc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005fc8:	681b      	ldr	r3, [r3, #0]
10005fca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10005fce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10005fd2:	430b      	orrs	r3, r1
10005fd4:	f8c2 38c0 	str.w	r3, [r2, #2240]	@ 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10005fd8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005fdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005fe0:	681b      	ldr	r3, [r3, #0]
10005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
10005fe6:	f002 0a20 	and.w	sl, r2, #32
10005fea:	f04f 0b00 	mov.w	fp, #0
10005fee:	ea5a 030b 	orrs.w	r3, sl, fp
10005ff2:	d038      	beq.n	10006066 <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10005ff4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10005ff8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10005ffc:	681b      	ldr	r3, [r3, #0]
10005ffe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10006002:	2b01      	cmp	r3, #1
10006004:	d11d      	bne.n	10006042 <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006006:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000600a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000600e:	681b      	ldr	r3, [r3, #0]
10006010:	3380      	adds	r3, #128	@ 0x80
10006012:	4618      	mov	r0, r3
10006014:	f7ff fe0c 	bl	10005c30 <RCCEx_PLL4_Config>
10006018:	4603      	mov	r3, r0
1000601a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000601e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006022:	2b00      	cmp	r3, #0
10006024:	d003      	beq.n	1000602e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10006026:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000602a:	f001 bde3 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000602e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006032:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006036:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000603a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000603e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10006042:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006046:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
1000604a:	f023 0107 	bic.w	r1, r3, #7
1000604e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006052:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006056:	681b      	ldr	r3, [r3, #0]
10006058:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
1000605c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006060:	430b      	orrs	r3, r1
10006062:	f8c2 38c4 	str.w	r3, [r2, #2244]	@ 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10006066:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000606a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000606e:	681b      	ldr	r3, [r3, #0]
10006070:	e9d3 2300 	ldrd	r2, r3, [r3]
10006074:	2100      	movs	r1, #0
10006076:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
1000607a:	f003 0320 	and.w	r3, r3, #32
1000607e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
10006082:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
10006086:	460b      	mov	r3, r1
10006088:	4313      	orrs	r3, r2
1000608a:	d038      	beq.n	100060fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
1000608c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006090:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006094:	681b      	ldr	r3, [r3, #0]
10006096:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
1000609a:	2b01      	cmp	r3, #1
1000609c:	d11d      	bne.n	100060da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000609e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100060a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100060a6:	681b      	ldr	r3, [r3, #0]
100060a8:	3344      	adds	r3, #68	@ 0x44
100060aa:	4618      	mov	r0, r3
100060ac:	f7ff fc56 	bl	1000595c <RCCEx_PLL3_Config>
100060b0:	4603      	mov	r3, r0
100060b2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100060b6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100060ba:	2b00      	cmp	r3, #0
100060bc:	d003      	beq.n	100060c6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
100060be:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100060c2:	f001 bd97 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100060c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100060ca:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100060ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100060d2:	f043 0320 	orr.w	r3, r3, #32
100060d6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
100060da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100060de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
100060e2:	f023 0107 	bic.w	r1, r3, #7
100060e6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100060ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100060ee:	681b      	ldr	r3, [r3, #0]
100060f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
100060f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100060f8:	430b      	orrs	r3, r1
100060fa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
100060fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006102:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006106:	681b      	ldr	r3, [r3, #0]
10006108:	e9d3 2300 	ldrd	r2, r3, [r3]
1000610c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
10006110:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
10006114:	2300      	movs	r3, #0
10006116:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
1000611a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
1000611e:	460b      	mov	r3, r1
10006120:	4313      	orrs	r3, r2
10006122:	d07e      	beq.n	10006222 <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10006124:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006128:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000612c:	681b      	ldr	r3, [r3, #0]
1000612e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10006132:	2b04      	cmp	r3, #4
10006134:	d044      	beq.n	100061c0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10006136:	2b04      	cmp	r3, #4
10006138:	d861      	bhi.n	100061fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
1000613a:	2b00      	cmp	r3, #0
1000613c:	d002      	beq.n	10006144 <HAL_RCCEx_PeriphCLKConfig+0x264>
1000613e:	2b01      	cmp	r3, #1
10006140:	d01f      	beq.n	10006182 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10006142:	e05c      	b.n	100061fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006144:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006148:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000614c:	681b      	ldr	r3, [r3, #0]
1000614e:	3380      	adds	r3, #128	@ 0x80
10006150:	4618      	mov	r0, r3
10006152:	f7ff fd6d 	bl	10005c30 <RCCEx_PLL4_Config>
10006156:	4603      	mov	r3, r0
10006158:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000615c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006160:	2b00      	cmp	r3, #0
10006162:	d003      	beq.n	1000616c <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10006164:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006168:	f001 bd44 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000616c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006170:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006174:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006178:	f043 0320 	orr.w	r3, r3, #32
1000617c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10006180:	e03d      	b.n	100061fe <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006182:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006186:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000618a:	681b      	ldr	r3, [r3, #0]
1000618c:	3344      	adds	r3, #68	@ 0x44
1000618e:	4618      	mov	r0, r3
10006190:	f7ff fbe4 	bl	1000595c <RCCEx_PLL3_Config>
10006194:	4603      	mov	r3, r0
10006196:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000619a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000619e:	2b00      	cmp	r3, #0
100061a0:	d003      	beq.n	100061aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
100061a2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100061a6:	f001 bd25 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100061aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100061ae:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100061b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100061b6:	f043 0320 	orr.w	r3, r3, #32
100061ba:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100061be:	e01e      	b.n	100061fe <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100061c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100061c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100061c8:	681b      	ldr	r3, [r3, #0]
100061ca:	3344      	adds	r3, #68	@ 0x44
100061cc:	4618      	mov	r0, r3
100061ce:	f7ff fbc5 	bl	1000595c <RCCEx_PLL3_Config>
100061d2:	4603      	mov	r3, r0
100061d4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100061d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100061dc:	2b00      	cmp	r3, #0
100061de:	d003      	beq.n	100061e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
100061e0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100061e4:	f001 bd06 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100061e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100061ec:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100061f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100061f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100061f8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100061fc:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
100061fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006202:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	@ 0x8c8
10006206:	f023 0107 	bic.w	r1, r3, #7
1000620a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000620e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006212:	681b      	ldr	r3, [r3, #0]
10006214:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10006218:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000621c:	430b      	orrs	r3, r1
1000621e:	f8c2 38c8 	str.w	r3, [r2, #2248]	@ 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10006222:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006226:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000622a:	681b      	ldr	r3, [r3, #0]
1000622c:	e9d3 2300 	ldrd	r2, r3, [r3]
10006230:	f402 7380 	and.w	r3, r2, #256	@ 0x100
10006234:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
10006238:	2300      	movs	r3, #0
1000623a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
1000623e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
10006242:	460b      	mov	r3, r1
10006244:	4313      	orrs	r3, r2
10006246:	d07e      	beq.n	10006346 <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10006248:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000624c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006250:	681b      	ldr	r3, [r3, #0]
10006252:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10006256:	2b05      	cmp	r3, #5
10006258:	d044      	beq.n	100062e4 <HAL_RCCEx_PeriphCLKConfig+0x404>
1000625a:	2b05      	cmp	r3, #5
1000625c:	d861      	bhi.n	10006322 <HAL_RCCEx_PeriphCLKConfig+0x442>
1000625e:	2b00      	cmp	r3, #0
10006260:	d002      	beq.n	10006268 <HAL_RCCEx_PeriphCLKConfig+0x388>
10006262:	2b01      	cmp	r3, #1
10006264:	d01f      	beq.n	100062a6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
10006266:	e05c      	b.n	10006322 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006268:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000626c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006270:	681b      	ldr	r3, [r3, #0]
10006272:	3380      	adds	r3, #128	@ 0x80
10006274:	4618      	mov	r0, r3
10006276:	f7ff fcdb 	bl	10005c30 <RCCEx_PLL4_Config>
1000627a:	4603      	mov	r3, r0
1000627c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006280:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006284:	2b00      	cmp	r3, #0
10006286:	d003      	beq.n	10006290 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10006288:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000628c:	f001 bcb2 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006290:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006294:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006298:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000629c:	f043 0320 	orr.w	r3, r3, #32
100062a0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100062a4:	e03d      	b.n	10006322 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100062a6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100062aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100062ae:	681b      	ldr	r3, [r3, #0]
100062b0:	3344      	adds	r3, #68	@ 0x44
100062b2:	4618      	mov	r0, r3
100062b4:	f7ff fb52 	bl	1000595c <RCCEx_PLL3_Config>
100062b8:	4603      	mov	r3, r0
100062ba:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100062be:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100062c2:	2b00      	cmp	r3, #0
100062c4:	d003      	beq.n	100062ce <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
100062c6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100062ca:	f001 bc93 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100062ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100062d2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100062d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100062da:	f043 0320 	orr.w	r3, r3, #32
100062de:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100062e2:	e01e      	b.n	10006322 <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100062e4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100062e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100062ec:	681b      	ldr	r3, [r3, #0]
100062ee:	3344      	adds	r3, #68	@ 0x44
100062f0:	4618      	mov	r0, r3
100062f2:	f7ff fb33 	bl	1000595c <RCCEx_PLL3_Config>
100062f6:	4603      	mov	r3, r0
100062f8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100062fc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006300:	2b00      	cmp	r3, #0
10006302:	d003      	beq.n	1000630c <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
10006304:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006308:	f001 bc74 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000630c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006310:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006314:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000631c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10006320:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
10006322:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006326:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	@ 0x8cc
1000632a:	f023 0107 	bic.w	r1, r3, #7
1000632e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006332:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006336:	681b      	ldr	r3, [r3, #0]
10006338:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
1000633c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006340:	430b      	orrs	r3, r1
10006342:	f8c2 38cc 	str.w	r3, [r2, #2252]	@ 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
10006346:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000634a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000634e:	681b      	ldr	r3, [r3, #0]
10006350:	e9d3 2300 	ldrd	r2, r3, [r3]
10006354:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
10006358:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
1000635c:	2300      	movs	r3, #0
1000635e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
10006362:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
10006366:	460b      	mov	r3, r1
10006368:	4313      	orrs	r3, r2
1000636a:	d07e      	beq.n	1000646a <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
1000636c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006370:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006374:	681b      	ldr	r3, [r3, #0]
10006376:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
1000637a:	2b04      	cmp	r3, #4
1000637c:	d044      	beq.n	10006408 <HAL_RCCEx_PeriphCLKConfig+0x528>
1000637e:	2b04      	cmp	r3, #4
10006380:	d861      	bhi.n	10006446 <HAL_RCCEx_PeriphCLKConfig+0x566>
10006382:	2b00      	cmp	r3, #0
10006384:	d002      	beq.n	1000638c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
10006386:	2b01      	cmp	r3, #1
10006388:	d01f      	beq.n	100063ca <HAL_RCCEx_PeriphCLKConfig+0x4ea>
1000638a:	e05c      	b.n	10006446 <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000638c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006390:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006394:	681b      	ldr	r3, [r3, #0]
10006396:	3380      	adds	r3, #128	@ 0x80
10006398:	4618      	mov	r0, r3
1000639a:	f7ff fc49 	bl	10005c30 <RCCEx_PLL4_Config>
1000639e:	4603      	mov	r3, r0
100063a0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100063a4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100063a8:	2b00      	cmp	r3, #0
100063aa:	d003      	beq.n	100063b4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
100063ac:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100063b0:	f001 bc20 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100063b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100063b8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100063bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100063c0:	f043 0320 	orr.w	r3, r3, #32
100063c4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100063c8:	e03d      	b.n	10006446 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100063ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100063ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100063d2:	681b      	ldr	r3, [r3, #0]
100063d4:	3344      	adds	r3, #68	@ 0x44
100063d6:	4618      	mov	r0, r3
100063d8:	f7ff fac0 	bl	1000595c <RCCEx_PLL3_Config>
100063dc:	4603      	mov	r3, r0
100063de:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100063e2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100063e6:	2b00      	cmp	r3, #0
100063e8:	d003      	beq.n	100063f2 <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
100063ea:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100063ee:	f001 bc01 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100063f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100063f6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100063fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100063fe:	f043 0320 	orr.w	r3, r3, #32
10006402:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10006406:	e01e      	b.n	10006446 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006408:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000640c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006410:	681b      	ldr	r3, [r3, #0]
10006412:	3344      	adds	r3, #68	@ 0x44
10006414:	4618      	mov	r0, r3
10006416:	f7ff faa1 	bl	1000595c <RCCEx_PLL3_Config>
1000641a:	4603      	mov	r3, r0
1000641c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006420:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006424:	2b00      	cmp	r3, #0
10006426:	d003      	beq.n	10006430 <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10006428:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000642c:	f001 bbe2 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006430:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006434:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006438:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000643c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10006440:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10006444:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
10006446:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000644a:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	@ 0x8d0
1000644e:	f023 0107 	bic.w	r1, r3, #7
10006452:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006456:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000645a:	681b      	ldr	r3, [r3, #0]
1000645c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10006460:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006464:	430b      	orrs	r3, r1
10006466:	f8c2 38d0 	str.w	r3, [r2, #2256]	@ 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
1000646a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000646e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006472:	681b      	ldr	r3, [r3, #0]
10006474:	e9d3 2300 	ldrd	r2, r3, [r3]
10006478:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
1000647c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
10006480:	2300      	movs	r3, #0
10006482:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
10006486:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
1000648a:	460b      	mov	r3, r1
1000648c:	4313      	orrs	r3, r2
1000648e:	d07e      	beq.n	1000658e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10006490:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006494:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006498:	681b      	ldr	r3, [r3, #0]
1000649a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
1000649e:	2b04      	cmp	r3, #4
100064a0:	d044      	beq.n	1000652c <HAL_RCCEx_PeriphCLKConfig+0x64c>
100064a2:	2b04      	cmp	r3, #4
100064a4:	d861      	bhi.n	1000656a <HAL_RCCEx_PeriphCLKConfig+0x68a>
100064a6:	2b00      	cmp	r3, #0
100064a8:	d002      	beq.n	100064b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
100064aa:	2b01      	cmp	r3, #1
100064ac:	d01f      	beq.n	100064ee <HAL_RCCEx_PeriphCLKConfig+0x60e>
100064ae:	e05c      	b.n	1000656a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100064b0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100064b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100064b8:	681b      	ldr	r3, [r3, #0]
100064ba:	3380      	adds	r3, #128	@ 0x80
100064bc:	4618      	mov	r0, r3
100064be:	f7ff fbb7 	bl	10005c30 <RCCEx_PLL4_Config>
100064c2:	4603      	mov	r3, r0
100064c4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100064c8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100064cc:	2b00      	cmp	r3, #0
100064ce:	d003      	beq.n	100064d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
100064d0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100064d4:	f001 bb8e 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100064d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100064dc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100064e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100064e4:	f043 0320 	orr.w	r3, r3, #32
100064e8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100064ec:	e03d      	b.n	1000656a <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100064ee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100064f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100064f6:	681b      	ldr	r3, [r3, #0]
100064f8:	3344      	adds	r3, #68	@ 0x44
100064fa:	4618      	mov	r0, r3
100064fc:	f7ff fa2e 	bl	1000595c <RCCEx_PLL3_Config>
10006500:	4603      	mov	r3, r0
10006502:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006506:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000650a:	2b00      	cmp	r3, #0
1000650c:	d003      	beq.n	10006516 <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
1000650e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006512:	f001 bb6f 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006516:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000651a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000651e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006522:	f043 0320 	orr.w	r3, r3, #32
10006526:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000652a:	e01e      	b.n	1000656a <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000652c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006530:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006534:	681b      	ldr	r3, [r3, #0]
10006536:	3344      	adds	r3, #68	@ 0x44
10006538:	4618      	mov	r0, r3
1000653a:	f7ff fa0f 	bl	1000595c <RCCEx_PLL3_Config>
1000653e:	4603      	mov	r3, r0
10006540:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006544:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006548:	2b00      	cmp	r3, #0
1000654a:	d003      	beq.n	10006554 <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
1000654c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006550:	f001 bb50 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006554:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006558:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000655c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10006564:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10006568:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
1000656a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000656e:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	@ 0x8d4
10006572:	f023 0107 	bic.w	r1, r3, #7
10006576:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000657a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000657e:	681b      	ldr	r3, [r3, #0]
10006580:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10006584:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006588:	430b      	orrs	r3, r1
1000658a:	f8c2 38d4 	str.w	r3, [r2, #2260]	@ 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
1000658e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006592:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006596:	681b      	ldr	r3, [r3, #0]
10006598:	e9d3 2300 	ldrd	r2, r3, [r3]
1000659c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
100065a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
100065a4:	2300      	movs	r3, #0
100065a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
100065aa:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
100065ae:	460b      	mov	r3, r1
100065b0:	4313      	orrs	r3, r2
100065b2:	d07e      	beq.n	100066b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
100065b4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100065b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100065bc:	681b      	ldr	r3, [r3, #0]
100065be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
100065c2:	2b04      	cmp	r3, #4
100065c4:	d044      	beq.n	10006650 <HAL_RCCEx_PeriphCLKConfig+0x770>
100065c6:	2b04      	cmp	r3, #4
100065c8:	d861      	bhi.n	1000668e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
100065ca:	2b00      	cmp	r3, #0
100065cc:	d002      	beq.n	100065d4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
100065ce:	2b01      	cmp	r3, #1
100065d0:	d01f      	beq.n	10006612 <HAL_RCCEx_PeriphCLKConfig+0x732>
100065d2:	e05c      	b.n	1000668e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100065d4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100065d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100065dc:	681b      	ldr	r3, [r3, #0]
100065de:	3380      	adds	r3, #128	@ 0x80
100065e0:	4618      	mov	r0, r3
100065e2:	f7ff fb25 	bl	10005c30 <RCCEx_PLL4_Config>
100065e6:	4603      	mov	r3, r0
100065e8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100065ec:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100065f0:	2b00      	cmp	r3, #0
100065f2:	d003      	beq.n	100065fc <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
100065f4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100065f8:	f001 bafc 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100065fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006600:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006604:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006608:	f043 0310 	orr.w	r3, r3, #16
1000660c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10006610:	e03d      	b.n	1000668e <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006612:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006616:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000661a:	681b      	ldr	r3, [r3, #0]
1000661c:	3344      	adds	r3, #68	@ 0x44
1000661e:	4618      	mov	r0, r3
10006620:	f7ff f99c 	bl	1000595c <RCCEx_PLL3_Config>
10006624:	4603      	mov	r3, r0
10006626:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000662a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000662e:	2b00      	cmp	r3, #0
10006630:	d003      	beq.n	1000663a <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
10006632:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006636:	f001 badd 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000663a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000663e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006642:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006646:	f043 0320 	orr.w	r3, r3, #32
1000664a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000664e:	e01e      	b.n	1000668e <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006650:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006654:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006658:	681b      	ldr	r3, [r3, #0]
1000665a:	3344      	adds	r3, #68	@ 0x44
1000665c:	4618      	mov	r0, r3
1000665e:	f7ff f97d 	bl	1000595c <RCCEx_PLL3_Config>
10006662:	4603      	mov	r3, r0
10006664:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006668:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000666c:	2b00      	cmp	r3, #0
1000666e:	d003      	beq.n	10006678 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
10006670:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006674:	f001 babe 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006678:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000667c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006680:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10006688:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000668c:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
1000668e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006692:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	@ 0x8d8
10006696:	f023 0107 	bic.w	r1, r3, #7
1000669a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000669e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100066a2:	681b      	ldr	r3, [r3, #0]
100066a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
100066a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100066ac:	430b      	orrs	r3, r1
100066ae:	f8c2 38d8 	str.w	r3, [r2, #2264]	@ 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
100066b2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100066b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100066ba:	681b      	ldr	r3, [r3, #0]
100066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
100066c0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
100066c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
100066c8:	2300      	movs	r3, #0
100066ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
100066ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
100066d2:	460b      	mov	r3, r1
100066d4:	4313      	orrs	r3, r2
100066d6:	d07e      	beq.n	100067d6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
100066d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100066dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100066e0:	681b      	ldr	r3, [r3, #0]
100066e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
100066e6:	2b04      	cmp	r3, #4
100066e8:	d044      	beq.n	10006774 <HAL_RCCEx_PeriphCLKConfig+0x894>
100066ea:	2b04      	cmp	r3, #4
100066ec:	d861      	bhi.n	100067b2 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
100066ee:	2b00      	cmp	r3, #0
100066f0:	d002      	beq.n	100066f8 <HAL_RCCEx_PeriphCLKConfig+0x818>
100066f2:	2b01      	cmp	r3, #1
100066f4:	d01f      	beq.n	10006736 <HAL_RCCEx_PeriphCLKConfig+0x856>
100066f6:	e05c      	b.n	100067b2 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100066f8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100066fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006700:	681b      	ldr	r3, [r3, #0]
10006702:	3380      	adds	r3, #128	@ 0x80
10006704:	4618      	mov	r0, r3
10006706:	f7ff fa93 	bl	10005c30 <RCCEx_PLL4_Config>
1000670a:	4603      	mov	r3, r0
1000670c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006710:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006714:	2b00      	cmp	r3, #0
10006716:	d003      	beq.n	10006720 <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10006718:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000671c:	f001 ba6a 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006720:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006724:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006728:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000672c:	f043 0310 	orr.w	r3, r3, #16
10006730:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10006734:	e03d      	b.n	100067b2 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006736:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000673a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000673e:	681b      	ldr	r3, [r3, #0]
10006740:	3344      	adds	r3, #68	@ 0x44
10006742:	4618      	mov	r0, r3
10006744:	f7ff f90a 	bl	1000595c <RCCEx_PLL3_Config>
10006748:	4603      	mov	r3, r0
1000674a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000674e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006752:	2b00      	cmp	r3, #0
10006754:	d003      	beq.n	1000675e <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
10006756:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000675a:	f001 ba4b 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000675e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006762:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006766:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000676a:	f043 0320 	orr.w	r3, r3, #32
1000676e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10006772:	e01e      	b.n	100067b2 <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006774:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006778:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000677c:	681b      	ldr	r3, [r3, #0]
1000677e:	3344      	adds	r3, #68	@ 0x44
10006780:	4618      	mov	r0, r3
10006782:	f7ff f8eb 	bl	1000595c <RCCEx_PLL3_Config>
10006786:	4603      	mov	r3, r0
10006788:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000678c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006790:	2b00      	cmp	r3, #0
10006792:	d003      	beq.n	1000679c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
10006794:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006798:	f001 ba2c 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000679c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100067a0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100067a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100067a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100067ac:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100067b0:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
100067b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100067b6:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	@ 0x8dc
100067ba:	f023 0107 	bic.w	r1, r3, #7
100067be:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100067c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100067c6:	681b      	ldr	r3, [r3, #0]
100067c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
100067cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100067d0:	430b      	orrs	r3, r1
100067d2:	f8c2 38dc 	str.w	r3, [r2, #2268]	@ 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
100067d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100067da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100067de:	681b      	ldr	r3, [r3, #0]
100067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
100067e4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
100067e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
100067ec:	2300      	movs	r3, #0
100067ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
100067f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
100067f6:	460b      	mov	r3, r1
100067f8:	4313      	orrs	r3, r2
100067fa:	d038      	beq.n	1000686e <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
100067fc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006800:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006804:	681b      	ldr	r3, [r3, #0]
10006806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
1000680a:	2b01      	cmp	r3, #1
1000680c:	d11d      	bne.n	1000684a <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000680e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006812:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006816:	681b      	ldr	r3, [r3, #0]
10006818:	3380      	adds	r3, #128	@ 0x80
1000681a:	4618      	mov	r0, r3
1000681c:	f7ff fa08 	bl	10005c30 <RCCEx_PLL4_Config>
10006820:	4603      	mov	r3, r0
10006822:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10006826:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000682a:	2b00      	cmp	r3, #0
1000682c:	d003      	beq.n	10006836 <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
1000682e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006832:	f001 b9df 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006836:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000683a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000683e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006842:	f043 0320 	orr.w	r3, r3, #32
10006846:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
1000684a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000684e:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	@ 0x8e0
10006852:	f023 0107 	bic.w	r1, r3, #7
10006856:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000685a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000685e:	681b      	ldr	r3, [r3, #0]
10006860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10006864:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006868:	430b      	orrs	r3, r1
1000686a:	f8c2 38e0 	str.w	r3, [r2, #2272]	@ 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
1000686e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006872:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006876:	681b      	ldr	r3, [r3, #0]
10006878:	e9d3 2300 	ldrd	r2, r3, [r3]
1000687c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
10006880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
10006884:	2300      	movs	r3, #0
10006886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
1000688a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
1000688e:	460b      	mov	r3, r1
10006890:	4313      	orrs	r3, r2
10006892:	d05b      	beq.n	1000694c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10006894:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006898:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000689c:	681b      	ldr	r3, [r3, #0]
1000689e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
100068a2:	2b01      	cmp	r3, #1
100068a4:	d002      	beq.n	100068ac <HAL_RCCEx_PeriphCLKConfig+0x9cc>
100068a6:	2b05      	cmp	r3, #5
100068a8:	d01f      	beq.n	100068ea <HAL_RCCEx_PeriphCLKConfig+0xa0a>
100068aa:	e03d      	b.n	10006928 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100068ac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100068b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100068b4:	681b      	ldr	r3, [r3, #0]
100068b6:	3380      	adds	r3, #128	@ 0x80
100068b8:	4618      	mov	r0, r3
100068ba:	f7ff f9b9 	bl	10005c30 <RCCEx_PLL4_Config>
100068be:	4603      	mov	r3, r0
100068c0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100068c4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100068c8:	2b00      	cmp	r3, #0
100068ca:	d003      	beq.n	100068d4 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
100068cc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100068d0:	f001 b990 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100068d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100068d8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100068dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100068e0:	f043 0320 	orr.w	r3, r3, #32
100068e4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100068e8:	e01e      	b.n	10006928 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100068ea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100068ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100068f2:	681b      	ldr	r3, [r3, #0]
100068f4:	3344      	adds	r3, #68	@ 0x44
100068f6:	4618      	mov	r0, r3
100068f8:	f7ff f830 	bl	1000595c <RCCEx_PLL3_Config>
100068fc:	4603      	mov	r3, r0
100068fe:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006902:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006906:	2b00      	cmp	r3, #0
10006908:	d003      	beq.n	10006912 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
1000690a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000690e:	f001 b971 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006912:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006916:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000691a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000691e:	f043 0320 	orr.w	r3, r3, #32
10006922:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10006926:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10006928:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000692c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10006930:	f023 0107 	bic.w	r1, r3, #7
10006934:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006938:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000693c:	681b      	ldr	r3, [r3, #0]
1000693e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
10006942:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006946:	430b      	orrs	r3, r1
10006948:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
1000694c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006950:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006954:	681b      	ldr	r3, [r3, #0]
10006956:	e9d3 2300 	ldrd	r2, r3, [r3]
1000695a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
1000695e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
10006962:	2300      	movs	r3, #0
10006964:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
10006968:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
1000696c:	460b      	mov	r3, r1
1000696e:	4313      	orrs	r3, r2
10006970:	d038      	beq.n	100069e4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10006972:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006976:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000697a:	681b      	ldr	r3, [r3, #0]
1000697c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10006980:	2b01      	cmp	r3, #1
10006982:	d11d      	bne.n	100069c0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006984:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006988:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000698c:	681b      	ldr	r3, [r3, #0]
1000698e:	3380      	adds	r3, #128	@ 0x80
10006990:	4618      	mov	r0, r3
10006992:	f7ff f94d 	bl	10005c30 <RCCEx_PLL4_Config>
10006996:	4603      	mov	r3, r0
10006998:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000699c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100069a0:	2b00      	cmp	r3, #0
100069a2:	d003      	beq.n	100069ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
100069a4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100069a8:	f001 b924 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100069ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100069b0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100069b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100069b8:	f043 0320 	orr.w	r3, r3, #32
100069bc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
100069c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100069c4:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
100069c8:	f023 0107 	bic.w	r1, r3, #7
100069cc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100069d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100069d4:	681b      	ldr	r3, [r3, #0]
100069d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
100069da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100069de:	430b      	orrs	r3, r1
100069e0:	f8c2 38e4 	str.w	r3, [r2, #2276]	@ 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
100069e4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100069e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100069ec:	681b      	ldr	r3, [r3, #0]
100069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
100069f2:	f002 0302 	and.w	r3, r2, #2
100069f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
100069fa:	2300      	movs	r3, #0
100069fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
10006a00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
10006a04:	460b      	mov	r3, r1
10006a06:	4313      	orrs	r3, r2
10006a08:	d038      	beq.n	10006a7c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10006a0a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006a0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006a12:	681b      	ldr	r3, [r3, #0]
10006a14:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10006a18:	2b01      	cmp	r3, #1
10006a1a:	d11d      	bne.n	10006a58 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006a1c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006a20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006a24:	681b      	ldr	r3, [r3, #0]
10006a26:	3380      	adds	r3, #128	@ 0x80
10006a28:	4618      	mov	r0, r3
10006a2a:	f7ff f901 	bl	10005c30 <RCCEx_PLL4_Config>
10006a2e:	4603      	mov	r3, r0
10006a30:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10006a34:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006a38:	2b00      	cmp	r3, #0
10006a3a:	d003      	beq.n	10006a44 <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10006a3c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006a40:	f001 b8d8 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006a44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006a48:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006a4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006a50:	f043 0320 	orr.w	r3, r3, #32
10006a54:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
10006a58:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006a5c:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
10006a60:	f023 0107 	bic.w	r1, r3, #7
10006a64:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006a68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006a6c:	681b      	ldr	r3, [r3, #0]
10006a6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10006a72:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006a76:	430b      	orrs	r3, r1
10006a78:	f8c2 38e8 	str.w	r3, [r2, #2280]	@ 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10006a7c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006a80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006a84:	681b      	ldr	r3, [r3, #0]
10006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
10006a8a:	f002 0304 	and.w	r3, r2, #4
10006a8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
10006a92:	2300      	movs	r3, #0
10006a94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
10006a98:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
10006a9c:	460b      	mov	r3, r1
10006a9e:	4313      	orrs	r3, r2
10006aa0:	d038      	beq.n	10006b14 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
10006aa2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006aa6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006aaa:	681b      	ldr	r3, [r3, #0]
10006aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10006ab0:	2b01      	cmp	r3, #1
10006ab2:	d11d      	bne.n	10006af0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006ab4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006ab8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006abc:	681b      	ldr	r3, [r3, #0]
10006abe:	3380      	adds	r3, #128	@ 0x80
10006ac0:	4618      	mov	r0, r3
10006ac2:	f7ff f8b5 	bl	10005c30 <RCCEx_PLL4_Config>
10006ac6:	4603      	mov	r3, r0
10006ac8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10006acc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006ad0:	2b00      	cmp	r3, #0
10006ad2:	d003      	beq.n	10006adc <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
10006ad4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006ad8:	f001 b88c 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006adc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006ae0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006ae4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006ae8:	f043 0320 	orr.w	r3, r3, #32
10006aec:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10006af0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006af4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
10006af8:	f023 0107 	bic.w	r1, r3, #7
10006afc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006b00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006b04:	681b      	ldr	r3, [r3, #0]
10006b06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10006b0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006b0e:	430b      	orrs	r3, r1
10006b10:	f8c2 38ec 	str.w	r3, [r2, #2284]	@ 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10006b14:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006b18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006b1c:	681b      	ldr	r3, [r3, #0]
10006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
10006b22:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
10006b26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
10006b2a:	2300      	movs	r3, #0
10006b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
10006b30:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
10006b34:	460b      	mov	r3, r1
10006b36:	4313      	orrs	r3, r2
10006b38:	d038      	beq.n	10006bac <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10006b3a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006b3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006b42:	681b      	ldr	r3, [r3, #0]
10006b44:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
10006b48:	2b01      	cmp	r3, #1
10006b4a:	d11d      	bne.n	10006b88 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006b4c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006b50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006b54:	681b      	ldr	r3, [r3, #0]
10006b56:	3380      	adds	r3, #128	@ 0x80
10006b58:	4618      	mov	r0, r3
10006b5a:	f7ff f869 	bl	10005c30 <RCCEx_PLL4_Config>
10006b5e:	4603      	mov	r3, r0
10006b60:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10006b64:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006b68:	2b00      	cmp	r3, #0
10006b6a:	d003      	beq.n	10006b74 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
10006b6c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006b70:	f001 b840 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006b74:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006b78:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006b7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006b80:	f043 0320 	orr.w	r3, r3, #32
10006b84:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
10006b88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006b8c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
10006b90:	f023 0107 	bic.w	r1, r3, #7
10006b94:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006b98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006b9c:	681b      	ldr	r3, [r3, #0]
10006b9e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
10006ba2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006ba6:	430b      	orrs	r3, r1
10006ba8:	f8c2 38f0 	str.w	r3, [r2, #2288]	@ 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10006bac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006bb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006bb4:	681b      	ldr	r3, [r3, #0]
10006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
10006bba:	f002 0301 	and.w	r3, r2, #1
10006bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
10006bc2:	2300      	movs	r3, #0
10006bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
10006bc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
10006bcc:	460b      	mov	r3, r1
10006bce:	4313      	orrs	r3, r2
10006bd0:	d05b      	beq.n	10006c8a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
10006bd2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006bd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006bda:	681b      	ldr	r3, [r3, #0]
10006bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10006be0:	2b01      	cmp	r3, #1
10006be2:	d002      	beq.n	10006bea <HAL_RCCEx_PeriphCLKConfig+0xd0a>
10006be4:	2b04      	cmp	r3, #4
10006be6:	d01f      	beq.n	10006c28 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10006be8:	e03d      	b.n	10006c66 <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006bea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006bee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006bf2:	681b      	ldr	r3, [r3, #0]
10006bf4:	3344      	adds	r3, #68	@ 0x44
10006bf6:	4618      	mov	r0, r3
10006bf8:	f7fe feb0 	bl	1000595c <RCCEx_PLL3_Config>
10006bfc:	4603      	mov	r3, r0
10006bfe:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006c02:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006c06:	2b00      	cmp	r3, #0
10006c08:	d003      	beq.n	10006c12 <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10006c0a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006c0e:	f000 bff1 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006c12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c16:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006c1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006c1e:	f043 0320 	orr.w	r3, r3, #32
10006c22:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10006c26:	e01e      	b.n	10006c66 <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006c28:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006c2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006c30:	681b      	ldr	r3, [r3, #0]
10006c32:	3380      	adds	r3, #128	@ 0x80
10006c34:	4618      	mov	r0, r3
10006c36:	f7fe fffb 	bl	10005c30 <RCCEx_PLL4_Config>
10006c3a:	4603      	mov	r3, r0
10006c3c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006c40:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006c44:	2b00      	cmp	r3, #0
10006c46:	d003      	beq.n	10006c50 <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
10006c48:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006c4c:	f000 bfd2 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006c50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c54:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006c58:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006c5c:	f043 0320 	orr.w	r3, r3, #32
10006c60:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10006c64:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
10006c66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10006c6e:	f023 0107 	bic.w	r1, r3, #7
10006c72:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006c76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006c7a:	681b      	ldr	r3, [r3, #0]
10006c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
10006c80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006c84:	430b      	orrs	r3, r1
10006c86:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
10006c8a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006c8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006c92:	681b      	ldr	r3, [r3, #0]
10006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
10006c98:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
10006c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
10006ca0:	2300      	movs	r3, #0
10006ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
10006ca6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
10006caa:	460b      	mov	r3, r1
10006cac:	4313      	orrs	r3, r2
10006cae:	d05b      	beq.n	10006d68 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10006cb0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006cb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006cb8:	681b      	ldr	r3, [r3, #0]
10006cba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10006cbe:	2b01      	cmp	r3, #1
10006cc0:	d002      	beq.n	10006cc8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
10006cc2:	2b02      	cmp	r3, #2
10006cc4:	d01f      	beq.n	10006d06 <HAL_RCCEx_PeriphCLKConfig+0xe26>
10006cc6:	e03d      	b.n	10006d44 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006cc8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006ccc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006cd0:	681b      	ldr	r3, [r3, #0]
10006cd2:	3344      	adds	r3, #68	@ 0x44
10006cd4:	4618      	mov	r0, r3
10006cd6:	f7fe fe41 	bl	1000595c <RCCEx_PLL3_Config>
10006cda:	4603      	mov	r3, r0
10006cdc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006ce0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006ce4:	2b00      	cmp	r3, #0
10006ce6:	d003      	beq.n	10006cf0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10006ce8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006cec:	f000 bf82 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006cf0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006cf4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006cf8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10006d00:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10006d04:	e01e      	b.n	10006d44 <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006d06:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006d0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006d0e:	681b      	ldr	r3, [r3, #0]
10006d10:	3380      	adds	r3, #128	@ 0x80
10006d12:	4618      	mov	r0, r3
10006d14:	f7fe ff8c 	bl	10005c30 <RCCEx_PLL4_Config>
10006d18:	4603      	mov	r3, r0
10006d1a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006d1e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006d22:	2b00      	cmp	r3, #0
10006d24:	d003      	beq.n	10006d2e <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
10006d26:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006d2a:	f000 bf63 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006d2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006d32:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006d36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006d3a:	f043 0310 	orr.w	r3, r3, #16
10006d3e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10006d42:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10006d44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006d48:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
10006d4c:	f023 0107 	bic.w	r1, r3, #7
10006d50:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006d54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006d58:	681b      	ldr	r3, [r3, #0]
10006d5a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
10006d5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006d62:	430b      	orrs	r3, r1
10006d64:	f8c2 38f4 	str.w	r3, [r2, #2292]	@ 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10006d68:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006d6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006d70:	681b      	ldr	r3, [r3, #0]
10006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
10006d76:	2100      	movs	r1, #0
10006d78:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
10006d7c:	f003 0301 	and.w	r3, r3, #1
10006d80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
10006d84:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
10006d88:	460b      	mov	r3, r1
10006d8a:	4313      	orrs	r3, r2
10006d8c:	d05b      	beq.n	10006e46 <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10006d8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006d92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006d96:	681b      	ldr	r3, [r3, #0]
10006d98:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10006d9c:	2b01      	cmp	r3, #1
10006d9e:	d002      	beq.n	10006da6 <HAL_RCCEx_PeriphCLKConfig+0xec6>
10006da0:	2b02      	cmp	r3, #2
10006da2:	d01f      	beq.n	10006de4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
10006da4:	e03d      	b.n	10006e22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006da6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006daa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006dae:	681b      	ldr	r3, [r3, #0]
10006db0:	3344      	adds	r3, #68	@ 0x44
10006db2:	4618      	mov	r0, r3
10006db4:	f7fe fdd2 	bl	1000595c <RCCEx_PLL3_Config>
10006db8:	4603      	mov	r3, r0
10006dba:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006dbe:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006dc2:	2b00      	cmp	r3, #0
10006dc4:	d003      	beq.n	10006dce <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
10006dc6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006dca:	f000 bf13 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006dce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006dd2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006dd6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10006dde:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10006de2:	e01e      	b.n	10006e22 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006de4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006de8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006dec:	681b      	ldr	r3, [r3, #0]
10006dee:	3380      	adds	r3, #128	@ 0x80
10006df0:	4618      	mov	r0, r3
10006df2:	f7fe ff1d 	bl	10005c30 <RCCEx_PLL4_Config>
10006df6:	4603      	mov	r3, r0
10006df8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006dfc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006e00:	2b00      	cmp	r3, #0
10006e02:	d003      	beq.n	10006e0c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10006e04:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006e08:	f000 bef4 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006e0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006e10:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006e14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006e18:	f043 0310 	orr.w	r3, r3, #16
10006e1c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10006e20:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10006e22:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006e26:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
10006e2a:	f023 0107 	bic.w	r1, r3, #7
10006e2e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006e32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006e36:	681b      	ldr	r3, [r3, #0]
10006e38:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10006e3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006e40:	430b      	orrs	r3, r1
10006e42:	f8c2 38f8 	str.w	r3, [r2, #2296]	@ 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10006e46:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006e4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006e4e:	681b      	ldr	r3, [r3, #0]
10006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
10006e54:	2100      	movs	r1, #0
10006e56:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
10006e5a:	f003 0302 	and.w	r3, r3, #2
10006e5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
10006e62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
10006e66:	460b      	mov	r3, r1
10006e68:	4313      	orrs	r3, r2
10006e6a:	d05b      	beq.n	10006f24 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10006e6c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006e70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006e74:	681b      	ldr	r3, [r3, #0]
10006e76:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10006e7a:	2b00      	cmp	r3, #0
10006e7c:	d002      	beq.n	10006e84 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10006e7e:	2b01      	cmp	r3, #1
10006e80:	d01f      	beq.n	10006ec2 <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10006e82:	e03d      	b.n	10006f00 <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006e84:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006e88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006e8c:	681b      	ldr	r3, [r3, #0]
10006e8e:	3380      	adds	r3, #128	@ 0x80
10006e90:	4618      	mov	r0, r3
10006e92:	f7fe fecd 	bl	10005c30 <RCCEx_PLL4_Config>
10006e96:	4603      	mov	r3, r0
10006e98:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006e9c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006ea0:	2b00      	cmp	r3, #0
10006ea2:	d003      	beq.n	10006eac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
10006ea4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006ea8:	f000 bea4 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006eac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006eb0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006eb4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006eb8:	f043 0310 	orr.w	r3, r3, #16
10006ebc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10006ec0:	e01e      	b.n	10006f00 <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006ec2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006ec6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006eca:	681b      	ldr	r3, [r3, #0]
10006ecc:	3344      	adds	r3, #68	@ 0x44
10006ece:	4618      	mov	r0, r3
10006ed0:	f7fe fd44 	bl	1000595c <RCCEx_PLL3_Config>
10006ed4:	4603      	mov	r3, r0
10006ed6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006eda:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006ede:	2b00      	cmp	r3, #0
10006ee0:	d003      	beq.n	10006eea <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10006ee2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006ee6:	f000 be85 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006eea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006eee:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006ef2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006ef6:	f043 0320 	orr.w	r3, r3, #32
10006efa:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10006efe:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10006f00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006f04:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
10006f08:	f023 0103 	bic.w	r1, r3, #3
10006f0c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006f10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006f14:	681b      	ldr	r3, [r3, #0]
10006f16:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10006f1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006f1e:	430b      	orrs	r3, r1
10006f20:	f8c2 38fc 	str.w	r3, [r2, #2300]	@ 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10006f24:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006f28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006f2c:	681b      	ldr	r3, [r3, #0]
10006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
10006f32:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
10006f36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
10006f3a:	2300      	movs	r3, #0
10006f3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
10006f40:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
10006f44:	460b      	mov	r3, r1
10006f46:	4313      	orrs	r3, r2
10006f48:	d05b      	beq.n	10007002 <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10006f4a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006f4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006f52:	681b      	ldr	r3, [r3, #0]
10006f54:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10006f58:	2b01      	cmp	r3, #1
10006f5a:	d002      	beq.n	10006f62 <HAL_RCCEx_PeriphCLKConfig+0x1082>
10006f5c:	2b02      	cmp	r3, #2
10006f5e:	d01f      	beq.n	10006fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10006f60:	e03d      	b.n	10006fde <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006f62:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006f66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006f6a:	681b      	ldr	r3, [r3, #0]
10006f6c:	3344      	adds	r3, #68	@ 0x44
10006f6e:	4618      	mov	r0, r3
10006f70:	f7fe fcf4 	bl	1000595c <RCCEx_PLL3_Config>
10006f74:	4603      	mov	r3, r0
10006f76:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006f7a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006f7e:	2b00      	cmp	r3, #0
10006f80:	d003      	beq.n	10006f8a <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
10006f82:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006f86:	f000 be35 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006f8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006f8e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006f92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10006f9a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10006f9e:	e01e      	b.n	10006fde <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006fa0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006fa4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006fa8:	681b      	ldr	r3, [r3, #0]
10006faa:	3380      	adds	r3, #128	@ 0x80
10006fac:	4618      	mov	r0, r3
10006fae:	f7fe fe3f 	bl	10005c30 <RCCEx_PLL4_Config>
10006fb2:	4603      	mov	r3, r0
10006fb4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10006fb8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006fbc:	2b00      	cmp	r3, #0
10006fbe:	d003      	beq.n	10006fc8 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10006fc0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10006fc4:	f000 be16 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006fc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006fcc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006fd0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006fd4:	f043 0310 	orr.w	r3, r3, #16
10006fd8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10006fdc:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10006fde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006fe2:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
10006fe6:	f023 0103 	bic.w	r1, r3, #3
10006fea:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10006fee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10006ff2:	681b      	ldr	r3, [r3, #0]
10006ff4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10006ff8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006ffc:	430b      	orrs	r3, r1
10006ffe:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10007002:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007006:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000700a:	681b      	ldr	r3, [r3, #0]
1000700c:	e9d3 2300 	ldrd	r2, r3, [r3]
10007010:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
10007014:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
10007018:	2300      	movs	r3, #0
1000701a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
1000701e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
10007022:	460b      	mov	r3, r1
10007024:	4313      	orrs	r3, r2
10007026:	d05b      	beq.n	100070e0 <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10007028:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000702c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007030:	681b      	ldr	r3, [r3, #0]
10007032:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10007036:	2b01      	cmp	r3, #1
10007038:	d002      	beq.n	10007040 <HAL_RCCEx_PeriphCLKConfig+0x1160>
1000703a:	2b02      	cmp	r3, #2
1000703c:	d01f      	beq.n	1000707e <HAL_RCCEx_PeriphCLKConfig+0x119e>
1000703e:	e03d      	b.n	100070bc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007040:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007044:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007048:	681b      	ldr	r3, [r3, #0]
1000704a:	3344      	adds	r3, #68	@ 0x44
1000704c:	4618      	mov	r0, r3
1000704e:	f7fe fc85 	bl	1000595c <RCCEx_PLL3_Config>
10007052:	4603      	mov	r3, r0
10007054:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10007058:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000705c:	2b00      	cmp	r3, #0
1000705e:	d003      	beq.n	10007068 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10007060:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007064:	f000 bdc6 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10007068:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000706c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10007070:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10007078:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000707c:	e01e      	b.n	100070bc <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000707e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007082:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007086:	681b      	ldr	r3, [r3, #0]
10007088:	3380      	adds	r3, #128	@ 0x80
1000708a:	4618      	mov	r0, r3
1000708c:	f7fe fdd0 	bl	10005c30 <RCCEx_PLL4_Config>
10007090:	4603      	mov	r3, r0
10007092:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10007096:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000709a:	2b00      	cmp	r3, #0
1000709c:	d003      	beq.n	100070a6 <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
1000709e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100070a2:	f000 bda7 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100070a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100070aa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100070ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100070b2:	f043 0310 	orr.w	r3, r3, #16
100070b6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100070ba:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
100070bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100070c0:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
100070c4:	f023 0103 	bic.w	r1, r3, #3
100070c8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100070cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100070d0:	681b      	ldr	r3, [r3, #0]
100070d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
100070d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100070da:	430b      	orrs	r3, r1
100070dc:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
100070e0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100070e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100070e8:	681b      	ldr	r3, [r3, #0]
100070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
100070ee:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
100070f2:	67bb      	str	r3, [r7, #120]	@ 0x78
100070f4:	2300      	movs	r3, #0
100070f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
100070f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
100070fc:	460b      	mov	r3, r1
100070fe:	4313      	orrs	r3, r2
10007100:	d07e      	beq.n	10007200 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10007102:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007106:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000710a:	681b      	ldr	r3, [r3, #0]
1000710c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10007110:	2b03      	cmp	r3, #3
10007112:	d044      	beq.n	1000719e <HAL_RCCEx_PeriphCLKConfig+0x12be>
10007114:	2b03      	cmp	r3, #3
10007116:	d861      	bhi.n	100071dc <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10007118:	2b01      	cmp	r3, #1
1000711a:	d002      	beq.n	10007122 <HAL_RCCEx_PeriphCLKConfig+0x1242>
1000711c:	2b02      	cmp	r3, #2
1000711e:	d01f      	beq.n	10007160 <HAL_RCCEx_PeriphCLKConfig+0x1280>
10007120:	e05c      	b.n	100071dc <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007122:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007126:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000712a:	681b      	ldr	r3, [r3, #0]
1000712c:	3344      	adds	r3, #68	@ 0x44
1000712e:	4618      	mov	r0, r3
10007130:	f7fe fc14 	bl	1000595c <RCCEx_PLL3_Config>
10007134:	4603      	mov	r3, r0
10007136:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000713a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000713e:	2b00      	cmp	r3, #0
10007140:	d003      	beq.n	1000714a <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10007142:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007146:	f000 bd55 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000714a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000714e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10007152:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007156:	f043 0320 	orr.w	r3, r3, #32
1000715a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000715e:	e03d      	b.n	100071dc <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007160:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007164:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007168:	681b      	ldr	r3, [r3, #0]
1000716a:	3380      	adds	r3, #128	@ 0x80
1000716c:	4618      	mov	r0, r3
1000716e:	f7fe fd5f 	bl	10005c30 <RCCEx_PLL4_Config>
10007172:	4603      	mov	r3, r0
10007174:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10007178:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000717c:	2b00      	cmp	r3, #0
1000717e:	d003      	beq.n	10007188 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10007180:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007184:	f000 bd36 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10007188:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000718c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10007190:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007194:	f043 0320 	orr.w	r3, r3, #32
10007198:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000719c:	e01e      	b.n	100071dc <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000719e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100071a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100071a6:	681b      	ldr	r3, [r3, #0]
100071a8:	3380      	adds	r3, #128	@ 0x80
100071aa:	4618      	mov	r0, r3
100071ac:	f7fe fd40 	bl	10005c30 <RCCEx_PLL4_Config>
100071b0:	4603      	mov	r3, r0
100071b2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100071b6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100071ba:	2b00      	cmp	r3, #0
100071bc:	d003      	beq.n	100071c6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
100071be:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100071c2:	f000 bd17 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100071c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100071ca:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100071ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100071d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100071d6:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100071da:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
100071dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100071e0:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
100071e4:	f023 0103 	bic.w	r1, r3, #3
100071e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100071ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100071f0:	681b      	ldr	r3, [r3, #0]
100071f2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
100071f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100071fa:	430b      	orrs	r3, r1
100071fc:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10007200:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007204:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007208:	681b      	ldr	r3, [r3, #0]
1000720a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000720e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
10007212:	673b      	str	r3, [r7, #112]	@ 0x70
10007214:	2300      	movs	r3, #0
10007216:	677b      	str	r3, [r7, #116]	@ 0x74
10007218:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
1000721c:	460b      	mov	r3, r1
1000721e:	4313      	orrs	r3, r2
10007220:	d05b      	beq.n	100072da <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10007222:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007226:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000722a:	681b      	ldr	r3, [r3, #0]
1000722c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10007230:	2b00      	cmp	r3, #0
10007232:	d002      	beq.n	1000723a <HAL_RCCEx_PeriphCLKConfig+0x135a>
10007234:	2b01      	cmp	r3, #1
10007236:	d01f      	beq.n	10007278 <HAL_RCCEx_PeriphCLKConfig+0x1398>
10007238:	e03d      	b.n	100072b6 <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000723a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000723e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007242:	681b      	ldr	r3, [r3, #0]
10007244:	3380      	adds	r3, #128	@ 0x80
10007246:	4618      	mov	r0, r3
10007248:	f7fe fcf2 	bl	10005c30 <RCCEx_PLL4_Config>
1000724c:	4603      	mov	r3, r0
1000724e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10007252:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007256:	2b00      	cmp	r3, #0
10007258:	d003      	beq.n	10007262 <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
1000725a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000725e:	f000 bcc9 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007262:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007266:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000726a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000726e:	f043 0310 	orr.w	r3, r3, #16
10007272:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10007276:	e01e      	b.n	100072b6 <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007278:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000727c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007280:	681b      	ldr	r3, [r3, #0]
10007282:	3344      	adds	r3, #68	@ 0x44
10007284:	4618      	mov	r0, r3
10007286:	f7fe fb69 	bl	1000595c <RCCEx_PLL3_Config>
1000728a:	4603      	mov	r3, r0
1000728c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10007290:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007294:	2b00      	cmp	r3, #0
10007296:	d003      	beq.n	100072a0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10007298:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000729c:	f000 bcaa 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100072a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100072a4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100072a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100072ac:	f043 0320 	orr.w	r3, r3, #32
100072b0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100072b4:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
100072b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100072ba:	f8d3 3914 	ldr.w	r3, [r3, #2324]	@ 0x914
100072be:	f023 0103 	bic.w	r1, r3, #3
100072c2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100072c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100072ca:	681b      	ldr	r3, [r3, #0]
100072cc:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
100072d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100072d4:	430b      	orrs	r3, r1
100072d6:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
100072da:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100072de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100072e2:	681b      	ldr	r3, [r3, #0]
100072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
100072e8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
100072ec:	66bb      	str	r3, [r7, #104]	@ 0x68
100072ee:	2300      	movs	r3, #0
100072f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
100072f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
100072f6:	460b      	mov	r3, r1
100072f8:	4313      	orrs	r3, r2
100072fa:	d011      	beq.n	10007320 <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
100072fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007300:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
10007304:	f023 0103 	bic.w	r1, r3, #3
10007308:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000730c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007310:	681b      	ldr	r3, [r3, #0]
10007312:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
10007316:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000731a:	430b      	orrs	r3, r1
1000731c:	f8c2 3918 	str.w	r3, [r2, #2328]	@ 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10007320:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007328:	681b      	ldr	r3, [r3, #0]
1000732a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000732e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
10007332:	663b      	str	r3, [r7, #96]	@ 0x60
10007334:	2300      	movs	r3, #0
10007336:	667b      	str	r3, [r7, #100]	@ 0x64
10007338:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
1000733c:	460b      	mov	r3, r1
1000733e:	4313      	orrs	r3, r2
10007340:	d038      	beq.n	100073b4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10007342:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007346:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000734a:	681b      	ldr	r3, [r3, #0]
1000734c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10007350:	2b01      	cmp	r3, #1
10007352:	d11d      	bne.n	10007390 <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007354:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007358:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000735c:	681b      	ldr	r3, [r3, #0]
1000735e:	3380      	adds	r3, #128	@ 0x80
10007360:	4618      	mov	r0, r3
10007362:	f7fe fc65 	bl	10005c30 <RCCEx_PLL4_Config>
10007366:	4603      	mov	r3, r0
10007368:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000736c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007370:	2b00      	cmp	r3, #0
10007372:	d003      	beq.n	1000737c <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
10007374:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007378:	f000 bc3c 	b.w	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000737c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007380:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10007384:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000738c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10007390:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007394:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10007398:	f023 0103 	bic.w	r1, r3, #3
1000739c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100073a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100073a4:	681b      	ldr	r3, [r3, #0]
100073a6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
100073aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100073ae:	430b      	orrs	r3, r1
100073b0:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
100073b4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100073b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100073bc:	681b      	ldr	r3, [r3, #0]
100073be:	e9d3 2300 	ldrd	r2, r3, [r3]
100073c2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
100073c6:	65bb      	str	r3, [r7, #88]	@ 0x58
100073c8:	2300      	movs	r3, #0
100073ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
100073cc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
100073d0:	460b      	mov	r3, r1
100073d2:	4313      	orrs	r3, r2
100073d4:	d037      	beq.n	10007446 <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
100073d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100073da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100073de:	681b      	ldr	r3, [r3, #0]
100073e0:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
100073e4:	2b00      	cmp	r3, #0
100073e6:	d11c      	bne.n	10007422 <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100073e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100073ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100073f0:	681b      	ldr	r3, [r3, #0]
100073f2:	3380      	adds	r3, #128	@ 0x80
100073f4:	4618      	mov	r0, r3
100073f6:	f7fe fc1b 	bl	10005c30 <RCCEx_PLL4_Config>
100073fa:	4603      	mov	r3, r0
100073fc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10007400:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007404:	2b00      	cmp	r3, #0
10007406:	d002      	beq.n	1000740e <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10007408:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000740c:	e3f2      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000740e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007412:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10007416:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000741a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000741e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
10007422:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007426:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
1000742a:	f023 0110 	bic.w	r1, r3, #16
1000742e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007432:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007436:	681b      	ldr	r3, [r3, #0]
10007438:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
1000743c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007440:	430b      	orrs	r3, r1
10007442:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10007446:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000744a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000744e:	681b      	ldr	r3, [r3, #0]
10007450:	e9d3 2300 	ldrd	r2, r3, [r3]
10007454:	2100      	movs	r1, #0
10007456:	6539      	str	r1, [r7, #80]	@ 0x50
10007458:	f003 0304 	and.w	r3, r3, #4
1000745c:	657b      	str	r3, [r7, #84]	@ 0x54
1000745e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
10007462:	460b      	mov	r3, r1
10007464:	4313      	orrs	r3, r2
10007466:	d037      	beq.n	100074d8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10007468:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000746c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007470:	681b      	ldr	r3, [r3, #0]
10007472:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
10007476:	2b01      	cmp	r3, #1
10007478:	d11c      	bne.n	100074b4 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000747a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000747e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007482:	681b      	ldr	r3, [r3, #0]
10007484:	3380      	adds	r3, #128	@ 0x80
10007486:	4618      	mov	r0, r3
10007488:	f7fe fbd2 	bl	10005c30 <RCCEx_PLL4_Config>
1000748c:	4603      	mov	r3, r0
1000748e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10007492:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007496:	2b00      	cmp	r3, #0
10007498:	d002      	beq.n	100074a0 <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
1000749a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000749e:	e3a9      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100074a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100074a4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100074a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100074ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100074b0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
100074b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100074b8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
100074bc:	f023 0103 	bic.w	r1, r3, #3
100074c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100074c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100074c8:	681b      	ldr	r3, [r3, #0]
100074ca:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
100074ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100074d2:	430b      	orrs	r3, r1
100074d4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
100074d8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100074dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100074e0:	681b      	ldr	r3, [r3, #0]
100074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
100074e6:	2100      	movs	r1, #0
100074e8:	64b9      	str	r1, [r7, #72]	@ 0x48
100074ea:	f003 0308 	and.w	r3, r3, #8
100074ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
100074f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
100074f4:	460b      	mov	r3, r1
100074f6:	4313      	orrs	r3, r2
100074f8:	d037      	beq.n	1000756a <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
100074fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100074fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007502:	681b      	ldr	r3, [r3, #0]
10007504:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10007508:	2b01      	cmp	r3, #1
1000750a:	d11c      	bne.n	10007546 <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000750c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007510:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007514:	681b      	ldr	r3, [r3, #0]
10007516:	3380      	adds	r3, #128	@ 0x80
10007518:	4618      	mov	r0, r3
1000751a:	f7fe fb89 	bl	10005c30 <RCCEx_PLL4_Config>
1000751e:	4603      	mov	r3, r0
10007520:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10007524:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007528:	2b00      	cmp	r3, #0
1000752a:	d002      	beq.n	10007532 <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
1000752c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007530:	e360      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10007532:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007536:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000753a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000753e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10007542:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
10007546:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000754a:	f8d3 3920 	ldr.w	r3, [r3, #2336]	@ 0x920
1000754e:	f023 0103 	bic.w	r1, r3, #3
10007552:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007556:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000755a:	681b      	ldr	r3, [r3, #0]
1000755c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10007560:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007564:	430b      	orrs	r3, r1
10007566:	f8c2 3920 	str.w	r3, [r2, #2336]	@ 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
1000756a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000756e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007572:	681b      	ldr	r3, [r3, #0]
10007574:	e9d3 2300 	ldrd	r2, r3, [r3]
10007578:	2100      	movs	r1, #0
1000757a:	6439      	str	r1, [r7, #64]	@ 0x40
1000757c:	f003 0310 	and.w	r3, r3, #16
10007580:	647b      	str	r3, [r7, #68]	@ 0x44
10007582:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
10007586:	460b      	mov	r3, r1
10007588:	4313      	orrs	r3, r2
1000758a:	d011      	beq.n	100075b0 <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
1000758c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007590:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10007594:	f023 0103 	bic.w	r1, r3, #3
10007598:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000759c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100075a0:	681b      	ldr	r3, [r3, #0]
100075a2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
100075a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100075aa:	430b      	orrs	r3, r1
100075ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
100075b0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100075b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100075b8:	681b      	ldr	r3, [r3, #0]
100075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
100075be:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
100075c2:	63bb      	str	r3, [r7, #56]	@ 0x38
100075c4:	2300      	movs	r3, #0
100075c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
100075c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
100075cc:	460b      	mov	r3, r1
100075ce:	4313      	orrs	r3, r2
100075d0:	d037      	beq.n	10007642 <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
100075d2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100075d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100075da:	681b      	ldr	r3, [r3, #0]
100075dc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
100075e0:	2b01      	cmp	r3, #1
100075e2:	d11c      	bne.n	1000761e <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100075e4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100075e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100075ec:	681b      	ldr	r3, [r3, #0]
100075ee:	3380      	adds	r3, #128	@ 0x80
100075f0:	4618      	mov	r0, r3
100075f2:	f7fe fb1d 	bl	10005c30 <RCCEx_PLL4_Config>
100075f6:	4603      	mov	r3, r0
100075f8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100075fc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007600:	2b00      	cmp	r3, #0
10007602:	d002      	beq.n	1000760a <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
10007604:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007608:	e2f4      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000760a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000760e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10007612:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007616:	f043 0310 	orr.w	r3, r3, #16
1000761a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
1000761e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007622:	f8d3 3924 	ldr.w	r3, [r3, #2340]	@ 0x924
10007626:	f023 0101 	bic.w	r1, r3, #1
1000762a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000762e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007632:	681b      	ldr	r3, [r3, #0]
10007634:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
10007638:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000763c:	430b      	orrs	r3, r1
1000763e:	f8c2 3924 	str.w	r3, [r2, #2340]	@ 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
10007642:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007646:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000764a:	681b      	ldr	r3, [r3, #0]
1000764c:	e9d3 2300 	ldrd	r2, r3, [r3]
10007650:	f002 0308 	and.w	r3, r2, #8
10007654:	633b      	str	r3, [r7, #48]	@ 0x30
10007656:	2300      	movs	r3, #0
10007658:	637b      	str	r3, [r7, #52]	@ 0x34
1000765a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
1000765e:	460b      	mov	r3, r1
10007660:	4313      	orrs	r3, r2
10007662:	d059      	beq.n	10007718 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
10007664:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007668:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000766c:	681b      	ldr	r3, [r3, #0]
1000766e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10007672:	2b00      	cmp	r3, #0
10007674:	d002      	beq.n	1000767c <HAL_RCCEx_PeriphCLKConfig+0x179c>
10007676:	2b02      	cmp	r3, #2
10007678:	d01e      	beq.n	100076b8 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
1000767a:	e03b      	b.n	100076f4 <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000767c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007680:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007684:	681b      	ldr	r3, [r3, #0]
10007686:	3380      	adds	r3, #128	@ 0x80
10007688:	4618      	mov	r0, r3
1000768a:	f7fe fad1 	bl	10005c30 <RCCEx_PLL4_Config>
1000768e:	4603      	mov	r3, r0
10007690:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10007694:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007698:	2b00      	cmp	r3, #0
1000769a:	d002      	beq.n	100076a2 <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
1000769c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100076a0:	e2a8      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100076a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100076a6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100076aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100076ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100076b2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
        break;
100076b6:	e01d      	b.n	100076f4 <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100076b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100076bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100076c0:	681b      	ldr	r3, [r3, #0]
100076c2:	3344      	adds	r3, #68	@ 0x44
100076c4:	4618      	mov	r0, r3
100076c6:	f7fe f949 	bl	1000595c <RCCEx_PLL3_Config>
100076ca:	4603      	mov	r3, r0
100076cc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100076d0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100076d4:	2b00      	cmp	r3, #0
100076d6:	d002      	beq.n	100076de <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
100076d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100076dc:	e28a      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100076de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100076e2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100076e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100076ea:	f043 0320 	orr.w	r3, r3, #32
100076ee:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100076f2:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
100076f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100076f8:	f8d3 3928 	ldr.w	r3, [r3, #2344]	@ 0x928
100076fc:	f023 0103 	bic.w	r1, r3, #3
10007700:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007704:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007708:	681b      	ldr	r3, [r3, #0]
1000770a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000770e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007712:	430b      	orrs	r3, r1
10007714:	f8c2 3928 	str.w	r3, [r2, #2344]	@ 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10007718:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000771c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007720:	681b      	ldr	r3, [r3, #0]
10007722:	e9d3 2300 	ldrd	r2, r3, [r3]
10007726:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
1000772a:	62bb      	str	r3, [r7, #40]	@ 0x28
1000772c:	2300      	movs	r3, #0
1000772e:	62fb      	str	r3, [r7, #44]	@ 0x2c
10007730:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
10007734:	460b      	mov	r3, r1
10007736:	4313      	orrs	r3, r2
10007738:	d058      	beq.n	100077ec <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
1000773a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000773e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007742:	681b      	ldr	r3, [r3, #0]
10007744:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10007748:	2b01      	cmp	r3, #1
1000774a:	d01f      	beq.n	1000778c <HAL_RCCEx_PeriphCLKConfig+0x18ac>
1000774c:	2b02      	cmp	r3, #2
1000774e:	d13b      	bne.n	100077c8 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10007750:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007754:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007758:	681b      	ldr	r3, [r3, #0]
1000775a:	3344      	adds	r3, #68	@ 0x44
1000775c:	4618      	mov	r0, r3
1000775e:	f7fe f8fd 	bl	1000595c <RCCEx_PLL3_Config>
10007762:	4603      	mov	r3, r0
10007764:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10007768:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000776c:	2b00      	cmp	r3, #0
1000776e:	d002      	beq.n	10007776 <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
10007770:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007774:	e23e      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10007776:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000777a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000777e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007782:	f043 0320 	orr.w	r3, r3, #32
10007786:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000778a:	e01d      	b.n	100077c8 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000778c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007790:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007794:	681b      	ldr	r3, [r3, #0]
10007796:	3380      	adds	r3, #128	@ 0x80
10007798:	4618      	mov	r0, r3
1000779a:	f7fe fa49 	bl	10005c30 <RCCEx_PLL4_Config>
1000779e:	4603      	mov	r3, r0
100077a0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100077a4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100077a8:	2b00      	cmp	r3, #0
100077aa:	d002      	beq.n	100077b2 <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
100077ac:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100077b0:	e220      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100077b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100077b6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100077ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100077be:	f043 0310 	orr.w	r3, r3, #16
100077c2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100077c6:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
100077c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100077cc:	f8d3 392c 	ldr.w	r3, [r3, #2348]	@ 0x92c
100077d0:	f023 0207 	bic.w	r2, r3, #7
100077d4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100077d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100077dc:	681b      	ldr	r3, [r3, #0]
100077de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100077e2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100077e6:	4313      	orrs	r3, r2
100077e8:	f8c1 392c 	str.w	r3, [r1, #2348]	@ 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
100077ec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100077f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100077f4:	681b      	ldr	r3, [r3, #0]
100077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
100077fa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
100077fe:	623b      	str	r3, [r7, #32]
10007800:	2300      	movs	r3, #0
10007802:	627b      	str	r3, [r7, #36]	@ 0x24
10007804:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10007808:	460b      	mov	r3, r1
1000780a:	4313      	orrs	r3, r2
1000780c:	d037      	beq.n	1000787e <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
1000780e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007812:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007816:	681b      	ldr	r3, [r3, #0]
10007818:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
1000781c:	2b01      	cmp	r3, #1
1000781e:	d11c      	bne.n	1000785a <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10007820:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007824:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007828:	681b      	ldr	r3, [r3, #0]
1000782a:	3380      	adds	r3, #128	@ 0x80
1000782c:	4618      	mov	r0, r3
1000782e:	f7fe f9ff 	bl	10005c30 <RCCEx_PLL4_Config>
10007832:	4603      	mov	r3, r0
10007834:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10007838:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000783c:	2b00      	cmp	r3, #0
1000783e:	d002      	beq.n	10007846 <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
10007840:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007844:	e1d6      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10007846:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000784a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000784e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007852:	f043 0320 	orr.w	r3, r3, #32
10007856:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
1000785a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000785e:	f8d3 3930 	ldr.w	r3, [r3, #2352]	@ 0x930
10007862:	f023 0207 	bic.w	r2, r3, #7
10007866:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000786a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000786e:	681b      	ldr	r3, [r3, #0]
10007870:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
10007874:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007878:	4313      	orrs	r3, r2
1000787a:	f8c1 3930 	str.w	r3, [r1, #2352]	@ 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
1000787e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007882:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007886:	681b      	ldr	r3, [r3, #0]
10007888:	e9d3 2300 	ldrd	r2, r3, [r3]
1000788c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
10007890:	61bb      	str	r3, [r7, #24]
10007892:	2300      	movs	r3, #0
10007894:	61fb      	str	r3, [r7, #28]
10007896:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
1000789a:	460b      	mov	r3, r1
1000789c:	4313      	orrs	r3, r2
1000789e:	d058      	beq.n	10007952 <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
100078a0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100078a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100078a8:	681b      	ldr	r3, [r3, #0]
100078aa:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
100078ae:	2b01      	cmp	r3, #1
100078b0:	d01f      	beq.n	100078f2 <HAL_RCCEx_PeriphCLKConfig+0x1a12>
100078b2:	2b02      	cmp	r3, #2
100078b4:	d13b      	bne.n	1000792e <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100078b6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100078ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100078be:	681b      	ldr	r3, [r3, #0]
100078c0:	3344      	adds	r3, #68	@ 0x44
100078c2:	4618      	mov	r0, r3
100078c4:	f7fe f84a 	bl	1000595c <RCCEx_PLL3_Config>
100078c8:	4603      	mov	r3, r0
100078ca:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100078ce:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100078d2:	2b00      	cmp	r3, #0
100078d4:	d002      	beq.n	100078dc <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
100078d6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100078da:	e18b      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100078dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100078e0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100078e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100078e8:	f043 0320 	orr.w	r3, r3, #32
100078ec:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100078f0:	e01d      	b.n	1000792e <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100078f2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100078f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100078fa:	681b      	ldr	r3, [r3, #0]
100078fc:	3380      	adds	r3, #128	@ 0x80
100078fe:	4618      	mov	r0, r3
10007900:	f7fe f996 	bl	10005c30 <RCCEx_PLL4_Config>
10007904:	4603      	mov	r3, r0
10007906:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000790a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000790e:	2b00      	cmp	r3, #0
10007910:	d002      	beq.n	10007918 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
10007912:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10007916:	e16d      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10007918:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000791c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10007920:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007924:	f043 0310 	orr.w	r3, r3, #16
10007928:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000792c:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
1000792e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007932:	f8d3 3934 	ldr.w	r3, [r3, #2356]	@ 0x934
10007936:	f023 0207 	bic.w	r2, r3, #7
1000793a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000793e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007942:	681b      	ldr	r3, [r3, #0]
10007944:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
10007948:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000794c:	4313      	orrs	r3, r2
1000794e:	f8c1 3934 	str.w	r3, [r1, #2356]	@ 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10007952:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007956:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000795a:	681b      	ldr	r3, [r3, #0]
1000795c:	e9d3 2300 	ldrd	r2, r3, [r3]
10007960:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
10007964:	613b      	str	r3, [r7, #16]
10007966:	2300      	movs	r3, #0
10007968:	617b      	str	r3, [r7, #20]
1000796a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
1000796e:	460b      	mov	r3, r1
10007970:	4313      	orrs	r3, r2
10007972:	f000 80c6 	beq.w	10007b02 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10007976:	4ba2      	ldr	r3, [pc, #648]	@ (10007c00 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
10007978:	681b      	ldr	r3, [r3, #0]
1000797a:	4aa1      	ldr	r2, [pc, #644]	@ (10007c00 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
1000797c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10007980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10007982:	f7fa f96d 	bl	10001c60 <HAL_GetTick>
10007986:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000798a:	e00a      	b.n	100079a2 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
1000798c:	f7fa f968 	bl	10001c60 <HAL_GetTick>
10007990:	4602      	mov	r2, r0
10007992:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10007996:	1ad3      	subs	r3, r2, r3
10007998:	2b64      	cmp	r3, #100	@ 0x64
1000799a:	d902      	bls.n	100079a2 <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
1000799c:	2303      	movs	r3, #3
1000799e:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100079a2:	4b97      	ldr	r3, [pc, #604]	@ (10007c00 <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100079a4:	681b      	ldr	r3, [r3, #0]
100079a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100079aa:	2b00      	cmp	r3, #0
100079ac:	d0ee      	beq.n	1000798c <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
100079ae:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
100079b2:	2b00      	cmp	r3, #0
100079b4:	f040 80a2 	bne.w	10007afc <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
100079b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100079bc:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
100079c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100079c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100079c8:	681b      	ldr	r3, [r3, #0]
100079ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
100079ce:	4053      	eors	r3, r2
100079d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
100079d4:	2b00      	cmp	r3, #0
100079d6:	f000 8086 	beq.w	10007ae6 <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
100079da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100079de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100079e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
100079e6:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
100079ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100079ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100079f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100079f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
100079fa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
100079fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007a02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10007a06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007a0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
10007a0e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
10007a12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007a16:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10007a1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
10007a1e:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10007a22:	f003 0330 	and.w	r3, r3, #48	@ 0x30
10007a26:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007a2a:	4313      	orrs	r3, r2
10007a2c:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10007a30:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007a34:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10007a38:	2204      	movs	r2, #4
10007a3a:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10007a3c:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
10007a40:	f003 020b 	and.w	r2, r3, #11
10007a44:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007a48:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10007a4c:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10007a4e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007a52:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10007a56:	2200      	movs	r2, #0
10007a58:	625a      	str	r2, [r3, #36]	@ 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
10007a5a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007a5e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10007a62:	2200      	movs	r2, #0
10007a64:	661a      	str	r2, [r3, #96]	@ 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
10007a66:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007a6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10007a6e:	2200      	movs	r2, #0
10007a70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10007a74:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007a78:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
10007a7c:	2200      	movs	r2, #0
10007a7e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
10007a82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
10007a86:	4618      	mov	r0, r3
10007a88:	f7fc fc2a 	bl	100042e0 <HAL_RCC_OscConfig>
10007a8c:	4603      	mov	r3, r0
10007a8e:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
        if (ret != HAL_OK)
10007a92:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10007a96:	2b00      	cmp	r3, #0
10007a98:	d002      	beq.n	10007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
10007a9a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10007a9e:	e0a9      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
10007aa0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007aa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10007aa8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
10007aac:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007ab0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007ab4:	681b      	ldr	r3, [r3, #0]
10007ab6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
10007aba:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007abe:	4313      	orrs	r3, r2
10007ac0:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
10007ac4:	4b4f      	ldr	r3, [pc, #316]	@ (10007c04 <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
10007ac6:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
10007aca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007ace:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
10007ad2:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
10007ad6:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
10007ada:	400b      	ands	r3, r1
10007adc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007ae0:	4313      	orrs	r3, r2
10007ae2:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
10007ae6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007aea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10007aee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
10007af6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
10007afa:	e002      	b.n	10007b02 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10007afc:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
10007b00:	e078      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
10007b02:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007b06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007b0a:	681b      	ldr	r3, [r3, #0]
10007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
10007b10:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
10007b14:	60bb      	str	r3, [r7, #8]
10007b16:	2300      	movs	r3, #0
10007b18:	60fb      	str	r3, [r7, #12]
10007b1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
10007b1e:	460b      	mov	r3, r1
10007b20:	4313      	orrs	r3, r2
10007b22:	d02a      	beq.n	10007b7a <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10007b24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007b28:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10007b2c:	f023 0201 	bic.w	r2, r3, #1
10007b30:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007b34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007b38:	681b      	ldr	r3, [r3, #0]
10007b3a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
10007b3e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007b42:	4313      	orrs	r3, r2
10007b44:	f8c1 3828 	str.w	r3, [r1, #2088]	@ 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007b48:	f7fa f88a 	bl	10001c60 <HAL_GetTick>
10007b4c:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10007b50:	e00a      	b.n	10007b68 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007b52:	f7fa f885 	bl	10001c60 <HAL_GetTick>
10007b56:	4602      	mov	r2, r0
10007b58:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10007b5c:	1ad3      	subs	r3, r2, r3
10007b5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007b62:	d901      	bls.n	10007b68 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
10007b64:	2303      	movs	r3, #3
10007b66:	e045      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10007b68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007b6c:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
10007b70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007b74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007b78:	d1eb      	bne.n	10007b52 <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
10007b7a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007b7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007b82:	681b      	ldr	r3, [r3, #0]
10007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
10007b88:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
10007b8c:	603b      	str	r3, [r7, #0]
10007b8e:	2300      	movs	r3, #0
10007b90:	607b      	str	r3, [r7, #4]
10007b92:	e9d7 1200 	ldrd	r1, r2, [r7]
10007b96:	460b      	mov	r3, r1
10007b98:	4313      	orrs	r3, r2
10007b9a:	d02a      	beq.n	10007bf2 <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10007b9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007ba0:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10007ba4:	f023 0201 	bic.w	r2, r3, #1
10007ba8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10007bac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10007bb0:	681b      	ldr	r3, [r3, #0]
10007bb2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
10007bb6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007bba:	4313      	orrs	r3, r2
10007bbc:	f8c1 382c 	str.w	r3, [r1, #2092]	@ 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007bc0:	f7fa f84e 	bl	10001c60 <HAL_GetTick>
10007bc4:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10007bc8:	e00a      	b.n	10007be0 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007bca:	f7fa f849 	bl	10001c60 <HAL_GetTick>
10007bce:	4602      	mov	r2, r0
10007bd0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
10007bd4:	1ad3      	subs	r3, r2, r3
10007bd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007bda:	d901      	bls.n	10007be0 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10007bdc:	2303      	movs	r3, #3
10007bde:	e009      	b.n	10007bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10007be0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007be4:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
10007be8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007bec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007bf0:	d1eb      	bne.n	10007bca <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
10007bf2:	2300      	movs	r3, #0
}
10007bf4:	4618      	mov	r0, r3
10007bf6:	f507 7712 	add.w	r7, r7, #584	@ 0x248
10007bfa:	46bd      	mov	sp, r7
10007bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10007c00:	50001000 	.word	0x50001000
10007c04:	7fecfdc0 	.word	0x7fecfdc0

10007c08 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
10007c08:	b480      	push	{r7}
10007c0a:	b083      	sub	sp, #12
10007c0c:	af00      	add	r7, sp, #0
10007c0e:	6078      	str	r0, [r7, #4]
	list->prev = list;
10007c10:	687b      	ldr	r3, [r7, #4]
10007c12:	687a      	ldr	r2, [r7, #4]
10007c14:	605a      	str	r2, [r3, #4]
	list->next = list;
10007c16:	687b      	ldr	r3, [r7, #4]
10007c18:	687a      	ldr	r2, [r7, #4]
10007c1a:	601a      	str	r2, [r3, #0]
}
10007c1c:	bf00      	nop
10007c1e:	370c      	adds	r7, #12
10007c20:	46bd      	mov	sp, r7
10007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
10007c26:	4770      	bx	lr

10007c28 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
10007c28:	b480      	push	{r7}
10007c2a:	b083      	sub	sp, #12
10007c2c:	af00      	add	r7, sp, #0
10007c2e:	6078      	str	r0, [r7, #4]
10007c30:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10007c32:	687b      	ldr	r3, [r7, #4]
10007c34:	685a      	ldr	r2, [r3, #4]
10007c36:	683b      	ldr	r3, [r7, #0]
10007c38:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10007c3a:	683b      	ldr	r3, [r7, #0]
10007c3c:	687a      	ldr	r2, [r7, #4]
10007c3e:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10007c40:	683b      	ldr	r3, [r7, #0]
10007c42:	681b      	ldr	r3, [r3, #0]
10007c44:	683a      	ldr	r2, [r7, #0]
10007c46:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10007c48:	683b      	ldr	r3, [r7, #0]
10007c4a:	685b      	ldr	r3, [r3, #4]
10007c4c:	683a      	ldr	r2, [r7, #0]
10007c4e:	601a      	str	r2, [r3, #0]
}
10007c50:	bf00      	nop
10007c52:	370c      	adds	r7, #12
10007c54:	46bd      	mov	sp, r7
10007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
10007c5a:	4770      	bx	lr

10007c5c <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
10007c5c:	b580      	push	{r7, lr}
10007c5e:	b082      	sub	sp, #8
10007c60:	af00      	add	r7, sp, #0
10007c62:	6078      	str	r0, [r7, #4]
10007c64:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10007c66:	6839      	ldr	r1, [r7, #0]
10007c68:	6878      	ldr	r0, [r7, #4]
10007c6a:	f7ff ffdd 	bl	10007c28 <metal_list_add_before>
}
10007c6e:	bf00      	nop
10007c70:	3708      	adds	r7, #8
10007c72:	46bd      	mov	sp, r7
10007c74:	bd80      	pop	{r7, pc}

10007c76 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
10007c76:	b580      	push	{r7, lr}
10007c78:	b082      	sub	sp, #8
10007c7a:	af00      	add	r7, sp, #0
10007c7c:	6078      	str	r0, [r7, #4]
10007c7e:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
10007c80:	6839      	ldr	r1, [r7, #0]
10007c82:	6878      	ldr	r0, [r7, #4]
10007c84:	f000 fbc2 	bl	1000840c <metal_machine_cache_flush>
}
10007c88:	bf00      	nop
10007c8a:	3708      	adds	r7, #8
10007c8c:	46bd      	mov	sp, r7
10007c8e:	bd80      	pop	{r7, pc}

10007c90 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
10007c90:	b580      	push	{r7, lr}
10007c92:	b082      	sub	sp, #8
10007c94:	af00      	add	r7, sp, #0
10007c96:	6078      	str	r0, [r7, #4]
10007c98:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
10007c9a:	6839      	ldr	r1, [r7, #0]
10007c9c:	6878      	ldr	r0, [r7, #4]
10007c9e:	f000 fbc0 	bl	10008422 <metal_machine_cache_invalidate>
}
10007ca2:	bf00      	nop
10007ca4:	3708      	adds	r7, #8
10007ca6:	46bd      	mov	sp, r7
10007ca8:	bd80      	pop	{r7, pc}

10007caa <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
10007caa:	b580      	push	{r7, lr}
10007cac:	b082      	sub	sp, #8
10007cae:	af00      	add	r7, sp, #0
10007cb0:	6078      	str	r0, [r7, #4]
10007cb2:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
10007cb4:	6839      	ldr	r1, [r7, #0]
10007cb6:	6878      	ldr	r0, [r7, #4]
10007cb8:	f7ff ffdd 	bl	10007c76 <__metal_cache_flush>
}
10007cbc:	bf00      	nop
10007cbe:	3708      	adds	r7, #8
10007cc0:	46bd      	mov	sp, r7
10007cc2:	bd80      	pop	{r7, pc}

10007cc4 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
10007cc4:	b580      	push	{r7, lr}
10007cc6:	b082      	sub	sp, #8
10007cc8:	af00      	add	r7, sp, #0
10007cca:	6078      	str	r0, [r7, #4]
10007ccc:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
10007cce:	6839      	ldr	r1, [r7, #0]
10007cd0:	6878      	ldr	r0, [r7, #4]
10007cd2:	f7ff ffdd 	bl	10007c90 <__metal_cache_invalidate>
}
10007cd6:	bf00      	nop
10007cd8:	3708      	adds	r7, #8
10007cda:	46bd      	mov	sp, r7
10007cdc:	bd80      	pop	{r7, pc}
	...

10007ce0 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
10007ce0:	b580      	push	{r7, lr}
10007ce2:	b082      	sub	sp, #8
10007ce4:	af00      	add	r7, sp, #0
10007ce6:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
10007ce8:	687b      	ldr	r3, [r7, #4]
10007cea:	2b00      	cmp	r3, #0
10007cec:	d008      	beq.n	10007d00 <metal_bus_register+0x20>
10007cee:	687b      	ldr	r3, [r7, #4]
10007cf0:	681b      	ldr	r3, [r3, #0]
10007cf2:	2b00      	cmp	r3, #0
10007cf4:	d004      	beq.n	10007d00 <metal_bus_register+0x20>
10007cf6:	687b      	ldr	r3, [r7, #4]
10007cf8:	681b      	ldr	r3, [r3, #0]
10007cfa:	781b      	ldrb	r3, [r3, #0]
10007cfc:	2b00      	cmp	r3, #0
10007cfe:	d102      	bne.n	10007d06 <metal_bus_register+0x26>
		return -EINVAL;
10007d00:	f06f 0315 	mvn.w	r3, #21
10007d04:	e026      	b.n	10007d54 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
10007d06:	687b      	ldr	r3, [r7, #4]
10007d08:	681b      	ldr	r3, [r3, #0]
10007d0a:	2100      	movs	r1, #0
10007d0c:	4618      	mov	r0, r3
10007d0e:	f000 f82b 	bl	10007d68 <metal_bus_find>
10007d12:	4603      	mov	r3, r0
10007d14:	2b00      	cmp	r3, #0
10007d16:	d102      	bne.n	10007d1e <metal_bus_register+0x3e>
		return -EEXIST;
10007d18:	f06f 0310 	mvn.w	r3, #16
10007d1c:	e01a      	b.n	10007d54 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
10007d1e:	687b      	ldr	r3, [r7, #4]
10007d20:	331c      	adds	r3, #28
10007d22:	4618      	mov	r0, r3
10007d24:	f7ff ff70 	bl	10007c08 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
10007d28:	687b      	ldr	r3, [r7, #4]
10007d2a:	3324      	adds	r3, #36	@ 0x24
10007d2c:	4619      	mov	r1, r3
10007d2e:	480b      	ldr	r0, [pc, #44]	@ (10007d5c <metal_bus_register+0x7c>)
10007d30:	f7ff ff94 	bl	10007c5c <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
10007d34:	4b0a      	ldr	r3, [pc, #40]	@ (10007d60 <metal_bus_register+0x80>)
10007d36:	781b      	ldrb	r3, [r3, #0]
10007d38:	2b06      	cmp	r3, #6
10007d3a:	d90a      	bls.n	10007d52 <metal_bus_register+0x72>
10007d3c:	4b08      	ldr	r3, [pc, #32]	@ (10007d60 <metal_bus_register+0x80>)
10007d3e:	685b      	ldr	r3, [r3, #4]
10007d40:	2b00      	cmp	r3, #0
10007d42:	d006      	beq.n	10007d52 <metal_bus_register+0x72>
10007d44:	4b06      	ldr	r3, [pc, #24]	@ (10007d60 <metal_bus_register+0x80>)
10007d46:	685b      	ldr	r3, [r3, #4]
10007d48:	687a      	ldr	r2, [r7, #4]
10007d4a:	6812      	ldr	r2, [r2, #0]
10007d4c:	4905      	ldr	r1, [pc, #20]	@ (10007d64 <metal_bus_register+0x84>)
10007d4e:	2007      	movs	r0, #7
10007d50:	4798      	blx	r3
	return 0;
10007d52:	2300      	movs	r3, #0
}
10007d54:	4618      	mov	r0, r3
10007d56:	3708      	adds	r7, #8
10007d58:	46bd      	mov	sp, r7
10007d5a:	bd80      	pop	{r7, pc}
10007d5c:	100213f0 	.word	0x100213f0
10007d60:	100213e8 	.word	0x100213e8
10007d64:	1000b474 	.word	0x1000b474

10007d68 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
10007d68:	b580      	push	{r7, lr}
10007d6a:	b084      	sub	sp, #16
10007d6c:	af00      	add	r7, sp, #0
10007d6e:	6078      	str	r0, [r7, #4]
10007d70:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
10007d72:	4b12      	ldr	r3, [pc, #72]	@ (10007dbc <metal_bus_find+0x54>)
10007d74:	689b      	ldr	r3, [r3, #8]
10007d76:	60fb      	str	r3, [r7, #12]
10007d78:	e016      	b.n	10007da8 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
10007d7a:	68fb      	ldr	r3, [r7, #12]
10007d7c:	3b24      	subs	r3, #36	@ 0x24
10007d7e:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
10007d80:	68bb      	ldr	r3, [r7, #8]
10007d82:	681b      	ldr	r3, [r3, #0]
10007d84:	6879      	ldr	r1, [r7, #4]
10007d86:	4618      	mov	r0, r3
10007d88:	f7f8 f95a 	bl	10000040 <strcmp>
10007d8c:	4603      	mov	r3, r0
10007d8e:	2b00      	cmp	r3, #0
10007d90:	d107      	bne.n	10007da2 <metal_bus_find+0x3a>
10007d92:	683b      	ldr	r3, [r7, #0]
10007d94:	2b00      	cmp	r3, #0
10007d96:	d004      	beq.n	10007da2 <metal_bus_find+0x3a>
			*result = bus;
10007d98:	683b      	ldr	r3, [r7, #0]
10007d9a:	68ba      	ldr	r2, [r7, #8]
10007d9c:	601a      	str	r2, [r3, #0]
			return 0;
10007d9e:	2300      	movs	r3, #0
10007da0:	e008      	b.n	10007db4 <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
10007da2:	68fb      	ldr	r3, [r7, #12]
10007da4:	681b      	ldr	r3, [r3, #0]
10007da6:	60fb      	str	r3, [r7, #12]
10007da8:	68fb      	ldr	r3, [r7, #12]
10007daa:	4a05      	ldr	r2, [pc, #20]	@ (10007dc0 <metal_bus_find+0x58>)
10007dac:	4293      	cmp	r3, r2
10007dae:	d1e4      	bne.n	10007d7a <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
10007db0:	f06f 0301 	mvn.w	r3, #1
}
10007db4:	4618      	mov	r0, r3
10007db6:	3710      	adds	r7, #16
10007db8:	46bd      	mov	sp, r7
10007dba:	bd80      	pop	{r7, pc}
10007dbc:	100213e8 	.word	0x100213e8
10007dc0:	100213f0 	.word	0x100213f0

10007dc4 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
10007dc4:	b580      	push	{r7, lr}
10007dc6:	b086      	sub	sp, #24
10007dc8:	af00      	add	r7, sp, #0
10007dca:	60f8      	str	r0, [r7, #12]
10007dcc:	60b9      	str	r1, [r7, #8]
10007dce:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
10007dd0:	68fb      	ldr	r3, [r7, #12]
10007dd2:	2b00      	cmp	r3, #0
10007dd4:	d00d      	beq.n	10007df2 <metal_device_open+0x2e>
10007dd6:	68fb      	ldr	r3, [r7, #12]
10007dd8:	781b      	ldrb	r3, [r3, #0]
10007dda:	2b00      	cmp	r3, #0
10007ddc:	d009      	beq.n	10007df2 <metal_device_open+0x2e>
10007dde:	68bb      	ldr	r3, [r7, #8]
10007de0:	2b00      	cmp	r3, #0
10007de2:	d006      	beq.n	10007df2 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
10007de4:	68bb      	ldr	r3, [r7, #8]
10007de6:	781b      	ldrb	r3, [r3, #0]
10007de8:	2b00      	cmp	r3, #0
10007dea:	d002      	beq.n	10007df2 <metal_device_open+0x2e>
10007dec:	687b      	ldr	r3, [r7, #4]
10007dee:	2b00      	cmp	r3, #0
10007df0:	d102      	bne.n	10007df8 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
10007df2:	f06f 0315 	mvn.w	r3, #21
10007df6:	e01f      	b.n	10007e38 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
10007df8:	f107 0310 	add.w	r3, r7, #16
10007dfc:	4619      	mov	r1, r3
10007dfe:	68f8      	ldr	r0, [r7, #12]
10007e00:	f7ff ffb2 	bl	10007d68 <metal_bus_find>
10007e04:	6178      	str	r0, [r7, #20]
	if (error)
10007e06:	697b      	ldr	r3, [r7, #20]
10007e08:	2b00      	cmp	r3, #0
10007e0a:	d001      	beq.n	10007e10 <metal_device_open+0x4c>
		return error;
10007e0c:	697b      	ldr	r3, [r7, #20]
10007e0e:	e013      	b.n	10007e38 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
10007e10:	693b      	ldr	r3, [r7, #16]
10007e12:	689b      	ldr	r3, [r3, #8]
10007e14:	2b00      	cmp	r3, #0
10007e16:	d102      	bne.n	10007e1e <metal_device_open+0x5a>
		return -ENODEV;
10007e18:	f06f 0312 	mvn.w	r3, #18
10007e1c:	e00c      	b.n	10007e38 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
10007e1e:	693b      	ldr	r3, [r7, #16]
10007e20:	689b      	ldr	r3, [r3, #8]
10007e22:	6938      	ldr	r0, [r7, #16]
10007e24:	687a      	ldr	r2, [r7, #4]
10007e26:	68b9      	ldr	r1, [r7, #8]
10007e28:	4798      	blx	r3
10007e2a:	6178      	str	r0, [r7, #20]
	if (error)
10007e2c:	697b      	ldr	r3, [r7, #20]
10007e2e:	2b00      	cmp	r3, #0
10007e30:	d001      	beq.n	10007e36 <metal_device_open+0x72>
		return error;
10007e32:	697b      	ldr	r3, [r7, #20]
10007e34:	e000      	b.n	10007e38 <metal_device_open+0x74>

	return 0;
10007e36:	2300      	movs	r3, #0
}
10007e38:	4618      	mov	r0, r3
10007e3a:	3718      	adds	r7, #24
10007e3c:	46bd      	mov	sp, r7
10007e3e:	bd80      	pop	{r7, pc}

10007e40 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
10007e40:	b580      	push	{r7, lr}
10007e42:	b082      	sub	sp, #8
10007e44:	af00      	add	r7, sp, #0
10007e46:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
10007e48:	687b      	ldr	r3, [r7, #4]
10007e4a:	681b      	ldr	r3, [r3, #0]
10007e4c:	2b00      	cmp	r3, #0
10007e4e:	d008      	beq.n	10007e62 <metal_register_generic_device+0x22>
10007e50:	687b      	ldr	r3, [r7, #4]
10007e52:	681b      	ldr	r3, [r3, #0]
10007e54:	781b      	ldrb	r3, [r3, #0]
10007e56:	2b00      	cmp	r3, #0
10007e58:	d003      	beq.n	10007e62 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
10007e5a:	687b      	ldr	r3, [r7, #4]
10007e5c:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
10007e5e:	2b02      	cmp	r3, #2
10007e60:	d902      	bls.n	10007e68 <metal_register_generic_device+0x28>
		return -EINVAL;
10007e62:	f06f 0315 	mvn.w	r3, #21
10007e66:	e009      	b.n	10007e7c <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
10007e68:	687b      	ldr	r3, [r7, #4]
10007e6a:	4a06      	ldr	r2, [pc, #24]	@ (10007e84 <metal_register_generic_device+0x44>)
10007e6c:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
10007e6e:	687b      	ldr	r3, [r7, #4]
10007e70:	337c      	adds	r3, #124	@ 0x7c
10007e72:	4619      	mov	r1, r3
10007e74:	4804      	ldr	r0, [pc, #16]	@ (10007e88 <metal_register_generic_device+0x48>)
10007e76:	f7ff fef1 	bl	10007c5c <metal_list_add_tail>
			    &device->node);
	return 0;
10007e7a:	2300      	movs	r3, #0
}
10007e7c:	4618      	mov	r0, r3
10007e7e:	3708      	adds	r7, #8
10007e80:	46bd      	mov	sp, r7
10007e82:	bd80      	pop	{r7, pc}
10007e84:	100200a8 	.word	0x100200a8
10007e88:	10021400 	.word	0x10021400

10007e8c <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
10007e8c:	b580      	push	{r7, lr}
10007e8e:	b086      	sub	sp, #24
10007e90:	af00      	add	r7, sp, #0
10007e92:	60f8      	str	r0, [r7, #12]
10007e94:	60b9      	str	r1, [r7, #8]
10007e96:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
10007e98:	4b12      	ldr	r3, [pc, #72]	@ (10007ee4 <metal_generic_dev_open+0x58>)
10007e9a:	699b      	ldr	r3, [r3, #24]
10007e9c:	617b      	str	r3, [r7, #20]
10007e9e:	e016      	b.n	10007ece <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
10007ea0:	697b      	ldr	r3, [r7, #20]
10007ea2:	3b7c      	subs	r3, #124	@ 0x7c
10007ea4:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
10007ea6:	693b      	ldr	r3, [r7, #16]
10007ea8:	681b      	ldr	r3, [r3, #0]
10007eaa:	68b9      	ldr	r1, [r7, #8]
10007eac:	4618      	mov	r0, r3
10007eae:	f7f8 f8c7 	bl	10000040 <strcmp>
10007eb2:	4603      	mov	r3, r0
10007eb4:	2b00      	cmp	r3, #0
10007eb6:	d107      	bne.n	10007ec8 <metal_generic_dev_open+0x3c>
			*device = dev;
10007eb8:	687b      	ldr	r3, [r7, #4]
10007eba:	693a      	ldr	r2, [r7, #16]
10007ebc:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
10007ebe:	6938      	ldr	r0, [r7, #16]
10007ec0:	f000 fa31 	bl	10008326 <metal_generic_dev_sys_open>
10007ec4:	4603      	mov	r3, r0
10007ec6:	e008      	b.n	10007eda <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
10007ec8:	697b      	ldr	r3, [r7, #20]
10007eca:	681b      	ldr	r3, [r3, #0]
10007ecc:	617b      	str	r3, [r7, #20]
10007ece:	697b      	ldr	r3, [r7, #20]
10007ed0:	4a05      	ldr	r2, [pc, #20]	@ (10007ee8 <metal_generic_dev_open+0x5c>)
10007ed2:	4293      	cmp	r3, r2
10007ed4:	d1e4      	bne.n	10007ea0 <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
10007ed6:	f06f 0312 	mvn.w	r3, #18
}
10007eda:	4618      	mov	r0, r3
10007edc:	3718      	adds	r7, #24
10007ede:	46bd      	mov	sp, r7
10007ee0:	bd80      	pop	{r7, pc}
10007ee2:	bf00      	nop
10007ee4:	100213e8 	.word	0x100213e8
10007ee8:	10021400 	.word	0x10021400

10007eec <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
10007eec:	b580      	push	{r7, lr}
10007eee:	b086      	sub	sp, #24
10007ef0:	af00      	add	r7, sp, #0
10007ef2:	60f8      	str	r0, [r7, #12]
10007ef4:	60b9      	str	r1, [r7, #8]
10007ef6:	607a      	str	r2, [r7, #4]
10007ef8:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
10007efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10007efc:	683b      	ldr	r3, [r7, #0]
10007efe:	429a      	cmp	r2, r3
10007f00:	d009      	beq.n	10007f16 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
10007f02:	6a3a      	ldr	r2, [r7, #32]
10007f04:	4613      	mov	r3, r2
10007f06:	005b      	lsls	r3, r3, #1
10007f08:	4413      	add	r3, r2
10007f0a:	009b      	lsls	r3, r3, #2
10007f0c:	461a      	mov	r2, r3
10007f0e:	6839      	ldr	r1, [r7, #0]
10007f10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10007f12:	f002 fc00 	bl	1000a716 <memcpy>
	for (i = 0; i < nents_in; i++) {
10007f16:	2300      	movs	r3, #0
10007f18:	617b      	str	r3, [r7, #20]
10007f1a:	e02f      	b.n	10007f7c <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
10007f1c:	687b      	ldr	r3, [r7, #4]
10007f1e:	2b02      	cmp	r3, #2
10007f20:	d114      	bne.n	10007f4c <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
10007f22:	697a      	ldr	r2, [r7, #20]
10007f24:	4613      	mov	r3, r2
10007f26:	005b      	lsls	r3, r3, #1
10007f28:	4413      	add	r3, r2
10007f2a:	009b      	lsls	r3, r3, #2
10007f2c:	461a      	mov	r2, r3
10007f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007f30:	4413      	add	r3, r2
10007f32:	6818      	ldr	r0, [r3, #0]
10007f34:	697a      	ldr	r2, [r7, #20]
10007f36:	4613      	mov	r3, r2
10007f38:	005b      	lsls	r3, r3, #1
10007f3a:	4413      	add	r3, r2
10007f3c:	009b      	lsls	r3, r3, #2
10007f3e:	461a      	mov	r2, r3
10007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007f42:	4413      	add	r3, r2
10007f44:	689b      	ldr	r3, [r3, #8]
10007f46:	4619      	mov	r1, r3
10007f48:	f7ff feaf 	bl	10007caa <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
10007f4c:	697a      	ldr	r2, [r7, #20]
10007f4e:	4613      	mov	r3, r2
10007f50:	005b      	lsls	r3, r3, #1
10007f52:	4413      	add	r3, r2
10007f54:	009b      	lsls	r3, r3, #2
10007f56:	461a      	mov	r2, r3
10007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007f5a:	4413      	add	r3, r2
10007f5c:	6818      	ldr	r0, [r3, #0]
10007f5e:	697a      	ldr	r2, [r7, #20]
10007f60:	4613      	mov	r3, r2
10007f62:	005b      	lsls	r3, r3, #1
10007f64:	4413      	add	r3, r2
10007f66:	009b      	lsls	r3, r3, #2
10007f68:	461a      	mov	r2, r3
10007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007f6c:	4413      	add	r3, r2
10007f6e:	689b      	ldr	r3, [r3, #8]
10007f70:	4619      	mov	r1, r3
10007f72:	f7ff fea7 	bl	10007cc4 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
10007f76:	697b      	ldr	r3, [r7, #20]
10007f78:	3301      	adds	r3, #1
10007f7a:	617b      	str	r3, [r7, #20]
10007f7c:	697a      	ldr	r2, [r7, #20]
10007f7e:	6a3b      	ldr	r3, [r7, #32]
10007f80:	429a      	cmp	r2, r3
10007f82:	dbcb      	blt.n	10007f1c <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
10007f84:	6a3b      	ldr	r3, [r7, #32]
}
10007f86:	4618      	mov	r0, r3
10007f88:	3718      	adds	r7, #24
10007f8a:	46bd      	mov	sp, r7
10007f8c:	bd80      	pop	{r7, pc}

10007f8e <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
10007f8e:	b580      	push	{r7, lr}
10007f90:	b086      	sub	sp, #24
10007f92:	af00      	add	r7, sp, #0
10007f94:	60f8      	str	r0, [r7, #12]
10007f96:	60b9      	str	r1, [r7, #8]
10007f98:	607a      	str	r2, [r7, #4]
10007f9a:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
10007f9c:	2300      	movs	r3, #0
10007f9e:	617b      	str	r3, [r7, #20]
10007fa0:	e017      	b.n	10007fd2 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
10007fa2:	697a      	ldr	r2, [r7, #20]
10007fa4:	4613      	mov	r3, r2
10007fa6:	005b      	lsls	r3, r3, #1
10007fa8:	4413      	add	r3, r2
10007faa:	009b      	lsls	r3, r3, #2
10007fac:	461a      	mov	r2, r3
10007fae:	683b      	ldr	r3, [r7, #0]
10007fb0:	4413      	add	r3, r2
10007fb2:	6818      	ldr	r0, [r3, #0]
10007fb4:	697a      	ldr	r2, [r7, #20]
10007fb6:	4613      	mov	r3, r2
10007fb8:	005b      	lsls	r3, r3, #1
10007fba:	4413      	add	r3, r2
10007fbc:	009b      	lsls	r3, r3, #2
10007fbe:	461a      	mov	r2, r3
10007fc0:	683b      	ldr	r3, [r7, #0]
10007fc2:	4413      	add	r3, r2
10007fc4:	689b      	ldr	r3, [r3, #8]
10007fc6:	4619      	mov	r1, r3
10007fc8:	f7ff fe7c 	bl	10007cc4 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
10007fcc:	697b      	ldr	r3, [r7, #20]
10007fce:	3301      	adds	r3, #1
10007fd0:	617b      	str	r3, [r7, #20]
10007fd2:	697a      	ldr	r2, [r7, #20]
10007fd4:	6a3b      	ldr	r3, [r7, #32]
10007fd6:	429a      	cmp	r2, r3
10007fd8:	dbe3      	blt.n	10007fa2 <metal_generic_dev_dma_unmap+0x14>
	}
}
10007fda:	bf00      	nop
10007fdc:	bf00      	nop
10007fde:	3718      	adds	r7, #24
10007fe0:	46bd      	mov	sp, r7
10007fe2:	bd80      	pop	{r7, pc}

10007fe4 <metal_list_init>:
{
10007fe4:	b480      	push	{r7}
10007fe6:	b083      	sub	sp, #12
10007fe8:	af00      	add	r7, sp, #0
10007fea:	6078      	str	r0, [r7, #4]
	list->prev = list;
10007fec:	687b      	ldr	r3, [r7, #4]
10007fee:	687a      	ldr	r2, [r7, #4]
10007ff0:	605a      	str	r2, [r3, #4]
	list->next = list;
10007ff2:	687b      	ldr	r3, [r7, #4]
10007ff4:	687a      	ldr	r2, [r7, #4]
10007ff6:	601a      	str	r2, [r3, #0]
}
10007ff8:	bf00      	nop
10007ffa:	370c      	adds	r7, #12
10007ffc:	46bd      	mov	sp, r7
10007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
10008002:	4770      	bx	lr

10008004 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
10008004:	b580      	push	{r7, lr}
10008006:	b084      	sub	sp, #16
10008008:	af00      	add	r7, sp, #0
1000800a:	6078      	str	r0, [r7, #4]
	int error = 0;
1000800c:	2300      	movs	r3, #0
1000800e:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
10008010:	2220      	movs	r2, #32
10008012:	2100      	movs	r1, #0
10008014:	4810      	ldr	r0, [pc, #64]	@ (10008058 <metal_init+0x54>)
10008016:	f002 face 	bl	1000a5b6 <memset>

	_metal.common.log_handler   = params->log_handler;
1000801a:	687b      	ldr	r3, [r7, #4]
1000801c:	681b      	ldr	r3, [r3, #0]
1000801e:	4a0e      	ldr	r2, [pc, #56]	@ (10008058 <metal_init+0x54>)
10008020:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
10008022:	687b      	ldr	r3, [r7, #4]
10008024:	791a      	ldrb	r2, [r3, #4]
10008026:	4b0c      	ldr	r3, [pc, #48]	@ (10008058 <metal_init+0x54>)
10008028:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
1000802a:	480c      	ldr	r0, [pc, #48]	@ (1000805c <metal_init+0x58>)
1000802c:	f7ff ffda 	bl	10007fe4 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
10008030:	480b      	ldr	r0, [pc, #44]	@ (10008060 <metal_init+0x5c>)
10008032:	f7ff ffd7 	bl	10007fe4 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
10008036:	480b      	ldr	r0, [pc, #44]	@ (10008064 <metal_init+0x60>)
10008038:	f7ff ffd4 	bl	10007fe4 <metal_list_init>

	error = metal_sys_init(params);
1000803c:	6878      	ldr	r0, [r7, #4]
1000803e:	f000 f999 	bl	10008374 <metal_sys_init>
10008042:	60f8      	str	r0, [r7, #12]
	if (error)
10008044:	68fb      	ldr	r3, [r7, #12]
10008046:	2b00      	cmp	r3, #0
10008048:	d001      	beq.n	1000804e <metal_init+0x4a>
		return error;
1000804a:	68fb      	ldr	r3, [r7, #12]
1000804c:	e000      	b.n	10008050 <metal_init+0x4c>

	return error;
1000804e:	68fb      	ldr	r3, [r7, #12]
}
10008050:	4618      	mov	r0, r3
10008052:	3710      	adds	r7, #16
10008054:	46bd      	mov	sp, r7
10008056:	bd80      	pop	{r7, pc}
10008058:	100213e8 	.word	0x100213e8
1000805c:	100213f0 	.word	0x100213f0
10008060:	100213f8 	.word	0x100213f8
10008064:	10021400 	.word	0x10021400

10008068 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
10008068:	b480      	push	{r7}
1000806a:	b083      	sub	sp, #12
1000806c:	af00      	add	r7, sp, #0
1000806e:	6078      	str	r0, [r7, #4]
10008070:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10008072:	687b      	ldr	r3, [r7, #4]
10008074:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
10008076:	f1b3 3fff 	cmp.w	r3, #4294967295
1000807a:	d00a      	beq.n	10008092 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000807c:	687b      	ldr	r3, [r7, #4]
1000807e:	689b      	ldr	r3, [r3, #8]
10008080:	683a      	ldr	r2, [r7, #0]
10008082:	429a      	cmp	r2, r3
10008084:	d205      	bcs.n	10008092 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10008086:	687b      	ldr	r3, [r7, #4]
10008088:	681b      	ldr	r3, [r3, #0]
1000808a:	461a      	mov	r2, r3
1000808c:	683b      	ldr	r3, [r7, #0]
1000808e:	4413      	add	r3, r2
		: NULL);
10008090:	e000      	b.n	10008094 <metal_io_virt+0x2c>
10008092:	2300      	movs	r3, #0
}
10008094:	4618      	mov	r0, r3
10008096:	370c      	adds	r7, #12
10008098:	46bd      	mov	sp, r7
1000809a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000809e:	4770      	bx	lr

100080a0 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
100080a0:	b5b0      	push	{r4, r5, r7, lr}
100080a2:	b08c      	sub	sp, #48	@ 0x30
100080a4:	af00      	add	r7, sp, #0
100080a6:	60f8      	str	r0, [r7, #12]
100080a8:	60b9      	str	r1, [r7, #8]
100080aa:	607a      	str	r2, [r7, #4]
100080ac:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
100080ae:	f107 0310 	add.w	r3, r7, #16
100080b2:	2220      	movs	r2, #32
100080b4:	2100      	movs	r1, #0
100080b6:	4618      	mov	r0, r3
100080b8:	f002 fa7d 	bl	1000a5b6 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
100080bc:	68fb      	ldr	r3, [r7, #12]
100080be:	68ba      	ldr	r2, [r7, #8]
100080c0:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
100080c2:	68fb      	ldr	r3, [r7, #12]
100080c4:	687a      	ldr	r2, [r7, #4]
100080c6:	605a      	str	r2, [r3, #4]
	io->size = size;
100080c8:	68fb      	ldr	r3, [r7, #12]
100080ca:	683a      	ldr	r2, [r7, #0]
100080cc:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
100080ce:	68fb      	ldr	r3, [r7, #12]
100080d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
100080d2:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
100080d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100080d6:	2b1f      	cmp	r3, #31
100080d8:	d904      	bls.n	100080e4 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
100080da:	68fb      	ldr	r3, [r7, #12]
100080dc:	f04f 32ff 	mov.w	r2, #4294967295
100080e0:	611a      	str	r2, [r3, #16]
100080e2:	e006      	b.n	100080f2 <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
100080e4:	2201      	movs	r2, #1
100080e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100080e8:	fa02 f303 	lsl.w	r3, r2, r3
100080ec:	1e5a      	subs	r2, r3, #1
100080ee:	68fb      	ldr	r3, [r7, #12]
100080f0:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
100080f2:	68fb      	ldr	r3, [r7, #12]
100080f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
100080f6:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
100080f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100080fa:	2b00      	cmp	r3, #0
100080fc:	d00b      	beq.n	10008116 <metal_io_init+0x76>
100080fe:	68fb      	ldr	r3, [r7, #12]
10008100:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10008102:	f103 0418 	add.w	r4, r3, #24
10008106:	4615      	mov	r5, r2
10008108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000810a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000810c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10008110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
10008114:	e00a      	b.n	1000812c <metal_io_init+0x8c>
10008116:	68fb      	ldr	r3, [r7, #12]
10008118:	f103 0418 	add.w	r4, r3, #24
1000811c:	f107 0510 	add.w	r5, r7, #16
10008120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
10008122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
10008124:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
10008128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
1000812c:	68f8      	ldr	r0, [r7, #12]
1000812e:	f000 f92f 	bl	10008390 <metal_sys_io_mem_map>
}
10008132:	bf00      	nop
10008134:	3730      	adds	r7, #48	@ 0x30
10008136:	46bd      	mov	sp, r7
10008138:	bdb0      	pop	{r4, r5, r7, pc}

1000813a <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
1000813a:	b590      	push	{r4, r7, lr}
1000813c:	b08b      	sub	sp, #44	@ 0x2c
1000813e:	af02      	add	r7, sp, #8
10008140:	60f8      	str	r0, [r7, #12]
10008142:	60b9      	str	r1, [r7, #8]
10008144:	607a      	str	r2, [r7, #4]
10008146:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
10008148:	68b9      	ldr	r1, [r7, #8]
1000814a:	68f8      	ldr	r0, [r7, #12]
1000814c:	f7ff ff8c 	bl	10008068 <metal_io_virt>
10008150:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
10008152:	687b      	ldr	r3, [r7, #4]
10008154:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10008156:	69fb      	ldr	r3, [r7, #28]
10008158:	2b00      	cmp	r3, #0
1000815a:	d102      	bne.n	10008162 <metal_io_block_read+0x28>
		return -ERANGE;
1000815c:	f06f 0321 	mvn.w	r3, #33	@ 0x21
10008160:	e05c      	b.n	1000821c <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
10008162:	683a      	ldr	r2, [r7, #0]
10008164:	68bb      	ldr	r3, [r7, #8]
10008166:	441a      	add	r2, r3
10008168:	68fb      	ldr	r3, [r7, #12]
1000816a:	689b      	ldr	r3, [r3, #8]
1000816c:	429a      	cmp	r2, r3
1000816e:	d904      	bls.n	1000817a <metal_io_block_read+0x40>
		len = io->size - offset;
10008170:	68fb      	ldr	r3, [r7, #12]
10008172:	689a      	ldr	r2, [r3, #8]
10008174:	68bb      	ldr	r3, [r7, #8]
10008176:	1ad3      	subs	r3, r2, r3
10008178:	603b      	str	r3, [r7, #0]
	retlen = len;
1000817a:	683b      	ldr	r3, [r7, #0]
1000817c:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
1000817e:	68fb      	ldr	r3, [r7, #12]
10008180:	6a1b      	ldr	r3, [r3, #32]
10008182:	2b00      	cmp	r3, #0
10008184:	d00a      	beq.n	1000819c <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
10008186:	68fb      	ldr	r3, [r7, #12]
10008188:	6a1c      	ldr	r4, [r3, #32]
1000818a:	683b      	ldr	r3, [r7, #0]
1000818c:	9300      	str	r3, [sp, #0]
1000818e:	2305      	movs	r3, #5
10008190:	687a      	ldr	r2, [r7, #4]
10008192:	68b9      	ldr	r1, [r7, #8]
10008194:	68f8      	ldr	r0, [r7, #12]
10008196:	47a0      	blx	r4
10008198:	6178      	str	r0, [r7, #20]
1000819a:	e03e      	b.n	1000821a <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
1000819c:	f3bf 8f5b 	dmb	ish
		while ( len && (
100081a0:	e00c      	b.n	100081bc <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
100081a2:	69fb      	ldr	r3, [r7, #28]
100081a4:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
100081a6:	69bb      	ldr	r3, [r7, #24]
100081a8:	701a      	strb	r2, [r3, #0]
			dest++;
100081aa:	69bb      	ldr	r3, [r7, #24]
100081ac:	3301      	adds	r3, #1
100081ae:	61bb      	str	r3, [r7, #24]
			ptr++;
100081b0:	69fb      	ldr	r3, [r7, #28]
100081b2:	3301      	adds	r3, #1
100081b4:	61fb      	str	r3, [r7, #28]
			len--;
100081b6:	683b      	ldr	r3, [r7, #0]
100081b8:	3b01      	subs	r3, #1
100081ba:	603b      	str	r3, [r7, #0]
		while ( len && (
100081bc:	683b      	ldr	r3, [r7, #0]
100081be:	2b00      	cmp	r3, #0
100081c0:	d017      	beq.n	100081f2 <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
100081c2:	69bb      	ldr	r3, [r7, #24]
100081c4:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
100081c8:	2b00      	cmp	r3, #0
100081ca:	d1ea      	bne.n	100081a2 <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
100081cc:	69fb      	ldr	r3, [r7, #28]
100081ce:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
100081d2:	2b00      	cmp	r3, #0
100081d4:	d1e5      	bne.n	100081a2 <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100081d6:	e00c      	b.n	100081f2 <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
100081d8:	69fb      	ldr	r3, [r7, #28]
100081da:	681a      	ldr	r2, [r3, #0]
100081dc:	69bb      	ldr	r3, [r7, #24]
100081de:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100081e0:	69bb      	ldr	r3, [r7, #24]
100081e2:	3304      	adds	r3, #4
100081e4:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
100081e6:	69fb      	ldr	r3, [r7, #28]
100081e8:	3304      	adds	r3, #4
100081ea:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
100081ec:	683b      	ldr	r3, [r7, #0]
100081ee:	3b04      	subs	r3, #4
100081f0:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
100081f2:	683b      	ldr	r3, [r7, #0]
100081f4:	2b03      	cmp	r3, #3
100081f6:	dcef      	bgt.n	100081d8 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
100081f8:	e00c      	b.n	10008214 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
100081fa:	69fb      	ldr	r3, [r7, #28]
100081fc:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
100081fe:	69bb      	ldr	r3, [r7, #24]
10008200:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
10008202:	69bb      	ldr	r3, [r7, #24]
10008204:	3301      	adds	r3, #1
10008206:	61bb      	str	r3, [r7, #24]
10008208:	69fb      	ldr	r3, [r7, #28]
1000820a:	3301      	adds	r3, #1
1000820c:	61fb      	str	r3, [r7, #28]
1000820e:	683b      	ldr	r3, [r7, #0]
10008210:	3b01      	subs	r3, #1
10008212:	603b      	str	r3, [r7, #0]
10008214:	683b      	ldr	r3, [r7, #0]
10008216:	2b00      	cmp	r3, #0
10008218:	d1ef      	bne.n	100081fa <metal_io_block_read+0xc0>
	}
	return retlen;
1000821a:	697b      	ldr	r3, [r7, #20]
}
1000821c:	4618      	mov	r0, r3
1000821e:	3724      	adds	r7, #36	@ 0x24
10008220:	46bd      	mov	sp, r7
10008222:	bd90      	pop	{r4, r7, pc}

10008224 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
10008224:	b590      	push	{r4, r7, lr}
10008226:	b08b      	sub	sp, #44	@ 0x2c
10008228:	af02      	add	r7, sp, #8
1000822a:	60f8      	str	r0, [r7, #12]
1000822c:	60b9      	str	r1, [r7, #8]
1000822e:	607a      	str	r2, [r7, #4]
10008230:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
10008232:	68b9      	ldr	r1, [r7, #8]
10008234:	68f8      	ldr	r0, [r7, #12]
10008236:	f7ff ff17 	bl	10008068 <metal_io_virt>
1000823a:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
1000823c:	687b      	ldr	r3, [r7, #4]
1000823e:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
10008240:	69fb      	ldr	r3, [r7, #28]
10008242:	2b00      	cmp	r3, #0
10008244:	d102      	bne.n	1000824c <metal_io_block_write+0x28>
		return -ERANGE;
10008246:	f06f 0321 	mvn.w	r3, #33	@ 0x21
1000824a:	e05b      	b.n	10008304 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
1000824c:	683a      	ldr	r2, [r7, #0]
1000824e:	68bb      	ldr	r3, [r7, #8]
10008250:	441a      	add	r2, r3
10008252:	68fb      	ldr	r3, [r7, #12]
10008254:	689b      	ldr	r3, [r3, #8]
10008256:	429a      	cmp	r2, r3
10008258:	d904      	bls.n	10008264 <metal_io_block_write+0x40>
		len = io->size - offset;
1000825a:	68fb      	ldr	r3, [r7, #12]
1000825c:	689a      	ldr	r2, [r3, #8]
1000825e:	68bb      	ldr	r3, [r7, #8]
10008260:	1ad3      	subs	r3, r2, r3
10008262:	603b      	str	r3, [r7, #0]
	retlen = len;
10008264:	683b      	ldr	r3, [r7, #0]
10008266:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
10008268:	68fb      	ldr	r3, [r7, #12]
1000826a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000826c:	2b00      	cmp	r3, #0
1000826e:	d017      	beq.n	100082a0 <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
10008270:	68fb      	ldr	r3, [r7, #12]
10008272:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
10008274:	683b      	ldr	r3, [r7, #0]
10008276:	9300      	str	r3, [sp, #0]
10008278:	2305      	movs	r3, #5
1000827a:	687a      	ldr	r2, [r7, #4]
1000827c:	68b9      	ldr	r1, [r7, #8]
1000827e:	68f8      	ldr	r0, [r7, #12]
10008280:	47a0      	blx	r4
10008282:	6178      	str	r0, [r7, #20]
10008284:	e03d      	b.n	10008302 <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
10008286:	69bb      	ldr	r3, [r7, #24]
10008288:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000828a:	69fb      	ldr	r3, [r7, #28]
1000828c:	701a      	strb	r2, [r3, #0]
			ptr++;
1000828e:	69fb      	ldr	r3, [r7, #28]
10008290:	3301      	adds	r3, #1
10008292:	61fb      	str	r3, [r7, #28]
			source++;
10008294:	69bb      	ldr	r3, [r7, #24]
10008296:	3301      	adds	r3, #1
10008298:	61bb      	str	r3, [r7, #24]
			len--;
1000829a:	683b      	ldr	r3, [r7, #0]
1000829c:	3b01      	subs	r3, #1
1000829e:	603b      	str	r3, [r7, #0]
		while ( len && (
100082a0:	683b      	ldr	r3, [r7, #0]
100082a2:	2b00      	cmp	r3, #0
100082a4:	d017      	beq.n	100082d6 <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
100082a6:	69fb      	ldr	r3, [r7, #28]
100082a8:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
100082ac:	2b00      	cmp	r3, #0
100082ae:	d1ea      	bne.n	10008286 <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
100082b0:	69bb      	ldr	r3, [r7, #24]
100082b2:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
100082b6:	2b00      	cmp	r3, #0
100082b8:	d1e5      	bne.n	10008286 <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
100082ba:	e00c      	b.n	100082d6 <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
100082bc:	69bb      	ldr	r3, [r7, #24]
100082be:	681a      	ldr	r2, [r3, #0]
100082c0:	69fb      	ldr	r3, [r7, #28]
100082c2:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
100082c4:	69fb      	ldr	r3, [r7, #28]
100082c6:	3304      	adds	r3, #4
100082c8:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
100082ca:	69bb      	ldr	r3, [r7, #24]
100082cc:	3304      	adds	r3, #4
100082ce:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
100082d0:	683b      	ldr	r3, [r7, #0]
100082d2:	3b04      	subs	r3, #4
100082d4:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
100082d6:	683b      	ldr	r3, [r7, #0]
100082d8:	2b03      	cmp	r3, #3
100082da:	dcef      	bgt.n	100082bc <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
100082dc:	e00c      	b.n	100082f8 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
100082de:	69bb      	ldr	r3, [r7, #24]
100082e0:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
100082e2:	69fb      	ldr	r3, [r7, #28]
100082e4:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
100082e6:	69fb      	ldr	r3, [r7, #28]
100082e8:	3301      	adds	r3, #1
100082ea:	61fb      	str	r3, [r7, #28]
100082ec:	69bb      	ldr	r3, [r7, #24]
100082ee:	3301      	adds	r3, #1
100082f0:	61bb      	str	r3, [r7, #24]
100082f2:	683b      	ldr	r3, [r7, #0]
100082f4:	3b01      	subs	r3, #1
100082f6:	603b      	str	r3, [r7, #0]
100082f8:	683b      	ldr	r3, [r7, #0]
100082fa:	2b00      	cmp	r3, #0
100082fc:	d1ef      	bne.n	100082de <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
100082fe:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
10008302:	697b      	ldr	r3, [r7, #20]
}
10008304:	4618      	mov	r0, r3
10008306:	3724      	adds	r7, #36	@ 0x24
10008308:	46bd      	mov	sp, r7
1000830a:	bd90      	pop	{r4, r7, pc}

1000830c <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
1000830c:	b40e      	push	{r1, r2, r3}
1000830e:	b480      	push	{r7}
10008310:	b082      	sub	sp, #8
10008312:	af00      	add	r7, sp, #0
10008314:	4603      	mov	r3, r0
10008316:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
10008318:	bf00      	nop
1000831a:	3708      	adds	r7, #8
1000831c:	46bd      	mov	sp, r7
1000831e:	f85d 7b04 	ldr.w	r7, [sp], #4
10008322:	b003      	add	sp, #12
10008324:	4770      	bx	lr

10008326 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
10008326:	b580      	push	{r7, lr}
10008328:	b084      	sub	sp, #16
1000832a:	af00      	add	r7, sp, #0
1000832c:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
1000832e:	2300      	movs	r3, #0
10008330:	60fb      	str	r3, [r7, #12]
10008332:	e013      	b.n	1000835c <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
10008334:	68fa      	ldr	r2, [r7, #12]
10008336:	4613      	mov	r3, r2
10008338:	00db      	lsls	r3, r3, #3
1000833a:	1a9b      	subs	r3, r3, r2
1000833c:	00db      	lsls	r3, r3, #3
1000833e:	3308      	adds	r3, #8
10008340:	687a      	ldr	r2, [r7, #4]
10008342:	4413      	add	r3, r2
10008344:	3304      	adds	r3, #4
10008346:	60bb      	str	r3, [r7, #8]
		if (!io->size)
10008348:	68bb      	ldr	r3, [r7, #8]
1000834a:	689b      	ldr	r3, [r3, #8]
1000834c:	2b00      	cmp	r3, #0
1000834e:	d00b      	beq.n	10008368 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
10008350:	68b8      	ldr	r0, [r7, #8]
10008352:	f000 f81d 	bl	10008390 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
10008356:	68fb      	ldr	r3, [r7, #12]
10008358:	3301      	adds	r3, #1
1000835a:	60fb      	str	r3, [r7, #12]
1000835c:	687b      	ldr	r3, [r7, #4]
1000835e:	689b      	ldr	r3, [r3, #8]
10008360:	68fa      	ldr	r2, [r7, #12]
10008362:	429a      	cmp	r2, r3
10008364:	d3e6      	bcc.n	10008334 <metal_generic_dev_sys_open+0xe>
10008366:	e000      	b.n	1000836a <metal_generic_dev_sys_open+0x44>
			break;
10008368:	bf00      	nop
	}

	return 0;
1000836a:	2300      	movs	r3, #0
}
1000836c:	4618      	mov	r0, r3
1000836e:	3710      	adds	r7, #16
10008370:	46bd      	mov	sp, r7
10008372:	bd80      	pop	{r7, pc}

10008374 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
10008374:	b580      	push	{r7, lr}
10008376:	b082      	sub	sp, #8
10008378:	af00      	add	r7, sp, #0
1000837a:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
1000837c:	4803      	ldr	r0, [pc, #12]	@ (1000838c <metal_sys_init+0x18>)
1000837e:	f7ff fcaf 	bl	10007ce0 <metal_bus_register>
	return 0;
10008382:	2300      	movs	r3, #0
}
10008384:	4618      	mov	r0, r3
10008386:	3708      	adds	r7, #8
10008388:	46bd      	mov	sp, r7
1000838a:	bd80      	pop	{r7, pc}
1000838c:	100200a8 	.word	0x100200a8

10008390 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
10008390:	b580      	push	{r7, lr}
10008392:	b086      	sub	sp, #24
10008394:	af00      	add	r7, sp, #0
10008396:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
10008398:	687b      	ldr	r3, [r7, #4]
1000839a:	681b      	ldr	r3, [r3, #0]
1000839c:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
1000839e:	687b      	ldr	r3, [r7, #4]
100083a0:	689b      	ldr	r3, [r3, #8]
100083a2:	613b      	str	r3, [r7, #16]
	if (psize) {
100083a4:	693b      	ldr	r3, [r7, #16]
100083a6:	2b00      	cmp	r3, #0
100083a8:	d02c      	beq.n	10008404 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
100083aa:	687b      	ldr	r3, [r7, #4]
100083ac:	68db      	ldr	r3, [r3, #12]
100083ae:	693a      	ldr	r2, [r7, #16]
100083b0:	fa22 f303 	lsr.w	r3, r2, r3
100083b4:	2b00      	cmp	r3, #0
100083b6:	d005      	beq.n	100083c4 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
100083b8:	687b      	ldr	r3, [r7, #4]
100083ba:	68db      	ldr	r3, [r3, #12]
100083bc:	2201      	movs	r2, #1
100083be:	fa02 f303 	lsl.w	r3, r2, r3
100083c2:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
100083c4:	2300      	movs	r3, #0
100083c6:	617b      	str	r3, [r7, #20]
100083c8:	e013      	b.n	100083f2 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
100083ca:	687b      	ldr	r3, [r7, #4]
100083cc:	685a      	ldr	r2, [r3, #4]
100083ce:	697b      	ldr	r3, [r7, #20]
100083d0:	009b      	lsls	r3, r3, #2
100083d2:	4413      	add	r3, r2
100083d4:	6819      	ldr	r1, [r3, #0]
100083d6:	687b      	ldr	r3, [r7, #4]
100083d8:	695b      	ldr	r3, [r3, #20]
100083da:	693a      	ldr	r2, [r7, #16]
100083dc:	68f8      	ldr	r0, [r7, #12]
100083de:	f000 f82b 	bl	10008438 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
100083e2:	693b      	ldr	r3, [r7, #16]
100083e4:	009b      	lsls	r3, r3, #2
100083e6:	68fa      	ldr	r2, [r7, #12]
100083e8:	4413      	add	r3, r2
100083ea:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
100083ec:	697b      	ldr	r3, [r7, #20]
100083ee:	3301      	adds	r3, #1
100083f0:	617b      	str	r3, [r7, #20]
100083f2:	687b      	ldr	r3, [r7, #4]
100083f4:	689a      	ldr	r2, [r3, #8]
100083f6:	687b      	ldr	r3, [r7, #4]
100083f8:	68db      	ldr	r3, [r3, #12]
100083fa:	fa22 f303 	lsr.w	r3, r2, r3
100083fe:	697a      	ldr	r2, [r7, #20]
10008400:	429a      	cmp	r2, r3
10008402:	d9e2      	bls.n	100083ca <metal_sys_io_mem_map+0x3a>
		}
	}
}
10008404:	bf00      	nop
10008406:	3718      	adds	r7, #24
10008408:	46bd      	mov	sp, r7
1000840a:	bd80      	pop	{r7, pc}

1000840c <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
1000840c:	b480      	push	{r7}
1000840e:	b083      	sub	sp, #12
10008410:	af00      	add	r7, sp, #0
10008412:	6078      	str	r0, [r7, #4]
10008414:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
10008416:	bf00      	nop
10008418:	370c      	adds	r7, #12
1000841a:	46bd      	mov	sp, r7
1000841c:	f85d 7b04 	ldr.w	r7, [sp], #4
10008420:	4770      	bx	lr

10008422 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
10008422:	b480      	push	{r7}
10008424:	b083      	sub	sp, #12
10008426:	af00      	add	r7, sp, #0
10008428:	6078      	str	r0, [r7, #4]
1000842a:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000842c:	bf00      	nop
1000842e:	370c      	adds	r7, #12
10008430:	46bd      	mov	sp, r7
10008432:	f85d 7b04 	ldr.w	r7, [sp], #4
10008436:	4770      	bx	lr

10008438 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
10008438:	b480      	push	{r7}
1000843a:	b085      	sub	sp, #20
1000843c:	af00      	add	r7, sp, #0
1000843e:	60f8      	str	r0, [r7, #12]
10008440:	60b9      	str	r1, [r7, #8]
10008442:	607a      	str	r2, [r7, #4]
10008444:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
10008446:	68fb      	ldr	r3, [r7, #12]
}
10008448:	4618      	mov	r0, r3
1000844a:	3714      	adds	r7, #20
1000844c:	46bd      	mov	sp, r7
1000844e:	f85d 7b04 	ldr.w	r7, [sp], #4
10008452:	4770      	bx	lr

10008454 <metal_io_virt>:
{
10008454:	b480      	push	{r7}
10008456:	b083      	sub	sp, #12
10008458:	af00      	add	r7, sp, #0
1000845a:	6078      	str	r0, [r7, #4]
1000845c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000845e:	687b      	ldr	r3, [r7, #4]
10008460:	681b      	ldr	r3, [r3, #0]
		: NULL);
10008462:	f1b3 3fff 	cmp.w	r3, #4294967295
10008466:	d00a      	beq.n	1000847e <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10008468:	687b      	ldr	r3, [r7, #4]
1000846a:	689b      	ldr	r3, [r3, #8]
1000846c:	683a      	ldr	r2, [r7, #0]
1000846e:	429a      	cmp	r2, r3
10008470:	d205      	bcs.n	1000847e <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10008472:	687b      	ldr	r3, [r7, #4]
10008474:	681b      	ldr	r3, [r3, #0]
10008476:	461a      	mov	r2, r3
10008478:	683b      	ldr	r3, [r7, #0]
1000847a:	4413      	add	r3, r2
		: NULL);
1000847c:	e000      	b.n	10008480 <metal_io_virt+0x2c>
1000847e:	2300      	movs	r3, #0
}
10008480:	4618      	mov	r0, r3
10008482:	370c      	adds	r7, #12
10008484:	46bd      	mov	sp, r7
10008486:	f85d 7b04 	ldr.w	r7, [sp], #4
1000848a:	4770      	bx	lr

1000848c <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
1000848c:	b480      	push	{r7}
1000848e:	b085      	sub	sp, #20
10008490:	af00      	add	r7, sp, #0
10008492:	6078      	str	r0, [r7, #4]
10008494:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10008496:	683b      	ldr	r3, [r7, #0]
10008498:	687a      	ldr	r2, [r7, #4]
1000849a:	6812      	ldr	r2, [r2, #0]
1000849c:	1a9b      	subs	r3, r3, r2
1000849e:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
100084a0:	687b      	ldr	r3, [r7, #4]
100084a2:	689b      	ldr	r3, [r3, #8]
100084a4:	68fa      	ldr	r2, [r7, #12]
100084a6:	429a      	cmp	r2, r3
100084a8:	d201      	bcs.n	100084ae <metal_io_virt_to_offset+0x22>
100084aa:	68fb      	ldr	r3, [r7, #12]
100084ac:	e001      	b.n	100084b2 <metal_io_virt_to_offset+0x26>
100084ae:	f04f 33ff 	mov.w	r3, #4294967295
}
100084b2:	4618      	mov	r0, r3
100084b4:	3714      	adds	r7, #20
100084b6:	46bd      	mov	sp, r7
100084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
100084bc:	4770      	bx	lr
	...

100084c0 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
100084c0:	b5b0      	push	{r4, r5, r7, lr}
100084c2:	b08c      	sub	sp, #48	@ 0x30
100084c4:	af00      	add	r7, sp, #0
100084c6:	60f8      	str	r0, [r7, #12]
100084c8:	60b9      	str	r1, [r7, #8]
100084ca:	603b      	str	r3, [r7, #0]
100084cc:	4613      	mov	r3, r2
100084ce:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
100084d0:	68b9      	ldr	r1, [r7, #8]
100084d2:	68f8      	ldr	r0, [r7, #12]
100084d4:	f7ff ffbe 	bl	10008454 <metal_io_virt>
100084d8:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
100084da:	68fb      	ldr	r3, [r7, #12]
100084dc:	699b      	ldr	r3, [r3, #24]
100084de:	2b00      	cmp	r3, #0
100084e0:	d009      	beq.n	100084f6 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
100084e2:	68fb      	ldr	r3, [r7, #12]
100084e4:	699c      	ldr	r4, [r3, #24]
100084e6:	79fa      	ldrb	r2, [r7, #7]
100084e8:	683b      	ldr	r3, [r7, #0]
100084ea:	68b9      	ldr	r1, [r7, #8]
100084ec:	68f8      	ldr	r0, [r7, #12]
100084ee:	47a0      	blx	r4
100084f0:	4604      	mov	r4, r0
100084f2:	460d      	mov	r5, r1
100084f4:	e059      	b.n	100085aa <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
100084f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100084f8:	2b00      	cmp	r3, #0
100084fa:	d012      	beq.n	10008522 <metal_io_read+0x62>
100084fc:	683b      	ldr	r3, [r7, #0]
100084fe:	2b01      	cmp	r3, #1
10008500:	d10f      	bne.n	10008522 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
10008502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008504:	62bb      	str	r3, [r7, #40]	@ 0x28
10008506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008508:	f3bf 8f5b 	dmb	ish
1000850c:	781b      	ldrb	r3, [r3, #0]
1000850e:	f3bf 8f5b 	dmb	ish
10008512:	b2db      	uxtb	r3, r3
10008514:	76fb      	strb	r3, [r7, #27]
10008516:	7efb      	ldrb	r3, [r7, #27]
10008518:	b2db      	uxtb	r3, r3
1000851a:	2200      	movs	r2, #0
1000851c:	461c      	mov	r4, r3
1000851e:	4615      	mov	r5, r2
10008520:	e043      	b.n	100085aa <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
10008522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008524:	2b00      	cmp	r3, #0
10008526:	d012      	beq.n	1000854e <metal_io_read+0x8e>
10008528:	683b      	ldr	r3, [r7, #0]
1000852a:	2b02      	cmp	r3, #2
1000852c:	d10f      	bne.n	1000854e <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
1000852e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008530:	627b      	str	r3, [r7, #36]	@ 0x24
10008532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008534:	f3bf 8f5b 	dmb	ish
10008538:	881b      	ldrh	r3, [r3, #0]
1000853a:	f3bf 8f5b 	dmb	ish
1000853e:	b29b      	uxth	r3, r3
10008540:	833b      	strh	r3, [r7, #24]
10008542:	8b3b      	ldrh	r3, [r7, #24]
10008544:	b29b      	uxth	r3, r3
10008546:	2200      	movs	r2, #0
10008548:	461c      	mov	r4, r3
1000854a:	4615      	mov	r5, r2
1000854c:	e02d      	b.n	100085aa <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
1000854e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008550:	2b00      	cmp	r3, #0
10008552:	d010      	beq.n	10008576 <metal_io_read+0xb6>
10008554:	683b      	ldr	r3, [r7, #0]
10008556:	2b04      	cmp	r3, #4
10008558:	d10d      	bne.n	10008576 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
1000855a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000855c:	623b      	str	r3, [r7, #32]
1000855e:	6a3b      	ldr	r3, [r7, #32]
10008560:	f3bf 8f5b 	dmb	ish
10008564:	681b      	ldr	r3, [r3, #0]
10008566:	f3bf 8f5b 	dmb	ish
1000856a:	617b      	str	r3, [r7, #20]
1000856c:	697b      	ldr	r3, [r7, #20]
1000856e:	2200      	movs	r2, #0
10008570:	461c      	mov	r4, r3
10008572:	4615      	mov	r5, r2
10008574:	e019      	b.n	100085aa <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
10008576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008578:	2b00      	cmp	r3, #0
1000857a:	d010      	beq.n	1000859e <metal_io_read+0xde>
1000857c:	683b      	ldr	r3, [r7, #0]
1000857e:	2b04      	cmp	r3, #4
10008580:	d10d      	bne.n	1000859e <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
10008582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008584:	61fb      	str	r3, [r7, #28]
10008586:	69fb      	ldr	r3, [r7, #28]
10008588:	f3bf 8f5b 	dmb	ish
1000858c:	681b      	ldr	r3, [r3, #0]
1000858e:	f3bf 8f5b 	dmb	ish
10008592:	613b      	str	r3, [r7, #16]
10008594:	693b      	ldr	r3, [r7, #16]
10008596:	2200      	movs	r2, #0
10008598:	461c      	mov	r4, r3
1000859a:	4615      	mov	r5, r2
1000859c:	e005      	b.n	100085aa <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
1000859e:	4b06      	ldr	r3, [pc, #24]	@ (100085b8 <metal_io_read+0xf8>)
100085a0:	4a06      	ldr	r2, [pc, #24]	@ (100085bc <metal_io_read+0xfc>)
100085a2:	21fe      	movs	r1, #254	@ 0xfe
100085a4:	4806      	ldr	r0, [pc, #24]	@ (100085c0 <metal_io_read+0x100>)
100085a6:	f001 fe01 	bl	1000a1ac <__assert_func>
	return 0; /* quiet compiler */
}
100085aa:	4622      	mov	r2, r4
100085ac:	462b      	mov	r3, r5
100085ae:	4610      	mov	r0, r2
100085b0:	4619      	mov	r1, r3
100085b2:	3730      	adds	r7, #48	@ 0x30
100085b4:	46bd      	mov	sp, r7
100085b6:	bdb0      	pop	{r4, r5, r7, pc}
100085b8:	1000b540 	.word	0x1000b540
100085bc:	1000d6ec 	.word	0x1000d6ec
100085c0:	1000b544 	.word	0x1000b544

100085c4 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
100085c4:	b580      	push	{r7, lr}
100085c6:	b082      	sub	sp, #8
100085c8:	af00      	add	r7, sp, #0
100085ca:	6078      	str	r0, [r7, #4]
	return malloc(size);
100085cc:	6878      	ldr	r0, [r7, #4]
100085ce:	f001 fe0b 	bl	1000a1e8 <malloc>
100085d2:	4603      	mov	r3, r0
}
100085d4:	4618      	mov	r0, r3
100085d6:	3708      	adds	r7, #8
100085d8:	46bd      	mov	sp, r7
100085da:	bd80      	pop	{r7, pc}

100085dc <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
100085dc:	b580      	push	{r7, lr}
100085de:	b082      	sub	sp, #8
100085e0:	af00      	add	r7, sp, #0
100085e2:	6078      	str	r0, [r7, #4]
	free(ptr);
100085e4:	6878      	ldr	r0, [r7, #4]
100085e6:	f001 fe07 	bl	1000a1f8 <free>
}
100085ea:	bf00      	nop
100085ec:	3708      	adds	r7, #8
100085ee:	46bd      	mov	sp, r7
100085f0:	bd80      	pop	{r7, pc}

100085f2 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
100085f2:	b580      	push	{r7, lr}
100085f4:	b084      	sub	sp, #16
100085f6:	af00      	add	r7, sp, #0
100085f8:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
100085fa:	687b      	ldr	r3, [r7, #4]
100085fc:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
100085fe:	3334      	adds	r3, #52	@ 0x34
10008600:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
10008602:	68f8      	ldr	r0, [r7, #12]
10008604:	f7ff ffde 	bl	100085c4 <metal_allocate_memory>
10008608:	60b8      	str	r0, [r7, #8]
	if (vqs) {
1000860a:	68bb      	ldr	r3, [r7, #8]
1000860c:	2b00      	cmp	r3, #0
1000860e:	d004      	beq.n	1000861a <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
10008610:	68fa      	ldr	r2, [r7, #12]
10008612:	2100      	movs	r1, #0
10008614:	68b8      	ldr	r0, [r7, #8]
10008616:	f001 ffce 	bl	1000a5b6 <memset>
	}

	return vqs;
1000861a:	68bb      	ldr	r3, [r7, #8]
}
1000861c:	4618      	mov	r0, r3
1000861e:	3710      	adds	r7, #16
10008620:	46bd      	mov	sp, r7
10008622:	bd80      	pop	{r7, pc}

10008624 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
10008624:	b580      	push	{r7, lr}
10008626:	b086      	sub	sp, #24
10008628:	af00      	add	r7, sp, #0
1000862a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
1000862c:	687b      	ldr	r3, [r7, #4]
1000862e:	891b      	ldrh	r3, [r3, #8]
10008630:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
10008632:	687b      	ldr	r3, [r7, #4]
10008634:	681b      	ldr	r3, [r3, #0]
10008636:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10008638:	693b      	ldr	r3, [r7, #16]
1000863a:	3b10      	subs	r3, #16
1000863c:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
1000863e:	693b      	ldr	r3, [r7, #16]
10008640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008642:	697a      	ldr	r2, [r7, #20]
10008644:	429a      	cmp	r2, r3
10008646:	d305      	bcc.n	10008654 <rproc_virtio_virtqueue_notify+0x30>
10008648:	4b0d      	ldr	r3, [pc, #52]	@ (10008680 <rproc_virtio_virtqueue_notify+0x5c>)
1000864a:	4a0e      	ldr	r2, [pc, #56]	@ (10008684 <rproc_virtio_virtqueue_notify+0x60>)
1000864c:	211c      	movs	r1, #28
1000864e:	480e      	ldr	r0, [pc, #56]	@ (10008688 <rproc_virtio_virtqueue_notify+0x64>)
10008650:	f001 fdac 	bl	1000a1ac <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
10008654:	693b      	ldr	r3, [r7, #16]
10008656:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10008658:	697a      	ldr	r2, [r7, #20]
1000865a:	4613      	mov	r3, r2
1000865c:	005b      	lsls	r3, r3, #1
1000865e:	4413      	add	r3, r2
10008660:	00db      	lsls	r3, r3, #3
10008662:	440b      	add	r3, r1
10008664:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
10008666:	68fb      	ldr	r3, [r7, #12]
10008668:	68db      	ldr	r3, [r3, #12]
1000866a:	68fa      	ldr	r2, [r7, #12]
1000866c:	6810      	ldr	r0, [r2, #0]
1000866e:	68ba      	ldr	r2, [r7, #8]
10008670:	6912      	ldr	r2, [r2, #16]
10008672:	4611      	mov	r1, r2
10008674:	4798      	blx	r3
}
10008676:	bf00      	nop
10008678:	3718      	adds	r7, #24
1000867a:	46bd      	mov	sp, r7
1000867c:	bd80      	pop	{r7, pc}
1000867e:	bf00      	nop
10008680:	1000b59c 	.word	0x1000b59c
10008684:	1000d6cc 	.word	0x1000d6cc
10008688:	1000b5b8 	.word	0x1000b5b8

1000868c <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
1000868c:	b580      	push	{r7, lr}
1000868e:	b086      	sub	sp, #24
10008690:	af00      	add	r7, sp, #0
10008692:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10008694:	687b      	ldr	r3, [r7, #4]
10008696:	3b10      	subs	r3, #16
10008698:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000869a:	697b      	ldr	r3, [r7, #20]
1000869c:	685b      	ldr	r3, [r3, #4]
1000869e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
100086a0:	697b      	ldr	r3, [r7, #20]
100086a2:	689b      	ldr	r3, [r3, #8]
100086a4:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
100086a6:	693b      	ldr	r3, [r7, #16]
100086a8:	3318      	adds	r3, #24
100086aa:	4619      	mov	r1, r3
100086ac:	68f8      	ldr	r0, [r7, #12]
100086ae:	f7ff feed 	bl	1000848c <metal_io_virt_to_offset>
100086b2:	4601      	mov	r1, r0
100086b4:	2301      	movs	r3, #1
100086b6:	2205      	movs	r2, #5
100086b8:	68f8      	ldr	r0, [r7, #12]
100086ba:	f7ff ff01 	bl	100084c0 <metal_io_read>
100086be:	4602      	mov	r2, r0
100086c0:	460b      	mov	r3, r1
100086c2:	4613      	mov	r3, r2
100086c4:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
100086c6:	7afb      	ldrb	r3, [r7, #11]
}
100086c8:	4618      	mov	r0, r3
100086ca:	3718      	adds	r7, #24
100086cc:	46bd      	mov	sp, r7
100086ce:	bd80      	pop	{r7, pc}

100086d0 <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
100086d0:	b580      	push	{r7, lr}
100086d2:	b086      	sub	sp, #24
100086d4:	af00      	add	r7, sp, #0
100086d6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
100086d8:	687b      	ldr	r3, [r7, #4]
100086da:	3b10      	subs	r3, #16
100086dc:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
100086de:	697b      	ldr	r3, [r7, #20]
100086e0:	685b      	ldr	r3, [r3, #4]
100086e2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
100086e4:	697b      	ldr	r3, [r7, #20]
100086e6:	689b      	ldr	r3, [r3, #8]
100086e8:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
100086ea:	693b      	ldr	r3, [r7, #16]
100086ec:	330c      	adds	r3, #12
100086ee:	4619      	mov	r1, r3
100086f0:	68f8      	ldr	r0, [r7, #12]
100086f2:	f7ff fecb 	bl	1000848c <metal_io_virt_to_offset>
100086f6:	4601      	mov	r1, r0
100086f8:	2304      	movs	r3, #4
100086fa:	2205      	movs	r2, #5
100086fc:	68f8      	ldr	r0, [r7, #12]
100086fe:	f7ff fedf 	bl	100084c0 <metal_io_read>
10008702:	4602      	mov	r2, r0
10008704:	460b      	mov	r3, r1
10008706:	4613      	mov	r3, r2
10008708:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
1000870a:	68bb      	ldr	r3, [r7, #8]
}
1000870c:	4618      	mov	r0, r3
1000870e:	3718      	adds	r7, #24
10008710:	46bd      	mov	sp, r7
10008712:	bd80      	pop	{r7, pc}

10008714 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
10008714:	b580      	push	{r7, lr}
10008716:	b088      	sub	sp, #32
10008718:	af00      	add	r7, sp, #0
1000871a:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000871c:	687b      	ldr	r3, [r7, #4]
1000871e:	3b10      	subs	r3, #16
10008720:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
10008722:	69fb      	ldr	r3, [r7, #28]
10008724:	685b      	ldr	r3, [r3, #4]
10008726:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
10008728:	69fb      	ldr	r3, [r7, #28]
1000872a:	689b      	ldr	r3, [r3, #8]
1000872c:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
1000872e:	69bb      	ldr	r3, [r7, #24]
10008730:	3310      	adds	r3, #16
10008732:	4619      	mov	r1, r3
10008734:	6978      	ldr	r0, [r7, #20]
10008736:	f7ff fea9 	bl	1000848c <metal_io_virt_to_offset>
1000873a:	4601      	mov	r1, r0
1000873c:	2304      	movs	r3, #4
1000873e:	2205      	movs	r2, #5
10008740:	6978      	ldr	r0, [r7, #20]
10008742:	f7ff febd 	bl	100084c0 <metal_io_read>
10008746:	4602      	mov	r2, r0
10008748:	460b      	mov	r3, r1
1000874a:	4613      	mov	r3, r2
1000874c:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
1000874e:	6878      	ldr	r0, [r7, #4]
10008750:	f7ff ffbe 	bl	100086d0 <rproc_virtio_get_dfeatures>
10008754:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
10008756:	68fa      	ldr	r2, [r7, #12]
10008758:	693b      	ldr	r3, [r7, #16]
1000875a:	4013      	ands	r3, r2
}
1000875c:	4618      	mov	r0, r3
1000875e:	3720      	adds	r7, #32
10008760:	46bd      	mov	sp, r7
10008762:	bd80      	pop	{r7, pc}

10008764 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
10008764:	b580      	push	{r7, lr}
10008766:	b088      	sub	sp, #32
10008768:	af00      	add	r7, sp, #0
1000876a:	60f8      	str	r0, [r7, #12]
1000876c:	60b9      	str	r1, [r7, #8]
1000876e:	607a      	str	r2, [r7, #4]
10008770:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10008772:	68fb      	ldr	r3, [r7, #12]
10008774:	3b10      	subs	r3, #16
10008776:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
10008778:	69fb      	ldr	r3, [r7, #28]
1000877a:	685b      	ldr	r3, [r3, #4]
1000877c:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
1000877e:	68fb      	ldr	r3, [r7, #12]
10008780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10008782:	4613      	mov	r3, r2
10008784:	009b      	lsls	r3, r3, #2
10008786:	4413      	add	r3, r2
10008788:	009b      	lsls	r3, r3, #2
1000878a:	3318      	adds	r3, #24
1000878c:	69ba      	ldr	r2, [r7, #24]
1000878e:	4413      	add	r3, r2
10008790:	3304      	adds	r3, #4
10008792:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
10008794:	69fb      	ldr	r3, [r7, #28]
10008796:	689b      	ldr	r3, [r3, #8]
10008798:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
1000879a:	683a      	ldr	r2, [r7, #0]
1000879c:	68bb      	ldr	r3, [r7, #8]
1000879e:	441a      	add	r2, r3
100087a0:	69bb      	ldr	r3, [r7, #24]
100087a2:	695b      	ldr	r3, [r3, #20]
100087a4:	429a      	cmp	r2, r3
100087a6:	d80c      	bhi.n	100087c2 <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
100087a8:	697a      	ldr	r2, [r7, #20]
100087aa:	68bb      	ldr	r3, [r7, #8]
100087ac:	4413      	add	r3, r2
		metal_io_block_read(io,
100087ae:	4619      	mov	r1, r3
100087b0:	6938      	ldr	r0, [r7, #16]
100087b2:	f7ff fe6b 	bl	1000848c <metal_io_virt_to_offset>
100087b6:	4601      	mov	r1, r0
100087b8:	683b      	ldr	r3, [r7, #0]
100087ba:	687a      	ldr	r2, [r7, #4]
100087bc:	6938      	ldr	r0, [r7, #16]
100087be:	f7ff fcbc 	bl	1000813a <metal_io_block_read>
				dst, length);
}
100087c2:	bf00      	nop
100087c4:	3720      	adds	r7, #32
100087c6:	46bd      	mov	sp, r7
100087c8:	bd80      	pop	{r7, pc}
	...

100087cc <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
100087cc:	b580      	push	{r7, lr}
100087ce:	b08e      	sub	sp, #56	@ 0x38
100087d0:	af00      	add	r7, sp, #0
100087d2:	60f8      	str	r0, [r7, #12]
100087d4:	60b9      	str	r1, [r7, #8]
100087d6:	607a      	str	r2, [r7, #4]
100087d8:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
100087da:	687b      	ldr	r3, [r7, #4]
100087dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
100087de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100087e0:	7e5b      	ldrb	r3, [r3, #25]
100087e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
100087e4:	2048      	movs	r0, #72	@ 0x48
100087e6:	f7ff feed 	bl	100085c4 <metal_allocate_memory>
100087ea:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
100087ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100087ee:	2b00      	cmp	r3, #0
100087f0:	d101      	bne.n	100087f6 <rproc_virtio_create_vdev+0x2a>
		return NULL;
100087f2:	2300      	movs	r3, #0
100087f4:	e092      	b.n	1000891c <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
100087f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100087f8:	4613      	mov	r3, r2
100087fa:	005b      	lsls	r3, r3, #1
100087fc:	4413      	add	r3, r2
100087fe:	00db      	lsls	r3, r3, #3
10008800:	4618      	mov	r0, r3
10008802:	f7ff fedf 	bl	100085c4 <metal_allocate_memory>
10008806:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
10008808:	6a3b      	ldr	r3, [r7, #32]
1000880a:	2b00      	cmp	r3, #0
1000880c:	f000 8081 	beq.w	10008912 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
10008810:	2248      	movs	r2, #72	@ 0x48
10008812:	2100      	movs	r1, #0
10008814:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10008816:	f001 fece 	bl	1000a5b6 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
1000881a:	2218      	movs	r2, #24
1000881c:	2100      	movs	r1, #0
1000881e:	6a38      	ldr	r0, [r7, #32]
10008820:	f001 fec9 	bl	1000a5b6 <memset>
	vdev = &rpvdev->vdev;
10008824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008826:	3310      	adds	r3, #16
10008828:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
1000882a:	2300      	movs	r3, #0
1000882c:	637b      	str	r3, [r7, #52]	@ 0x34
1000882e:	e025      	b.n	1000887c <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
10008830:	2300      	movs	r3, #0
10008832:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
10008834:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008836:	4613      	mov	r3, r2
10008838:	009b      	lsls	r3, r3, #2
1000883a:	4413      	add	r3, r2
1000883c:	009b      	lsls	r3, r3, #2
1000883e:	3318      	adds	r3, #24
10008840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10008842:	4413      	add	r3, r2
10008844:	3304      	adds	r3, #4
10008846:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
10008848:	68fb      	ldr	r3, [r7, #12]
1000884a:	2b00      	cmp	r3, #0
1000884c:	d102      	bne.n	10008854 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
1000884e:	69bb      	ldr	r3, [r7, #24]
10008850:	689b      	ldr	r3, [r3, #8]
10008852:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
10008854:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10008856:	f7ff fecc 	bl	100085f2 <virtqueue_allocate>
1000885a:	6178      	str	r0, [r7, #20]
		if (!vq)
1000885c:	697b      	ldr	r3, [r7, #20]
1000885e:	2b00      	cmp	r3, #0
10008860:	d031      	beq.n	100088c6 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
10008862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008864:	4613      	mov	r3, r2
10008866:	005b      	lsls	r3, r3, #1
10008868:	4413      	add	r3, r2
1000886a:	00db      	lsls	r3, r3, #3
1000886c:	461a      	mov	r2, r3
1000886e:	6a3b      	ldr	r3, [r7, #32]
10008870:	4413      	add	r3, r2
10008872:	697a      	ldr	r2, [r7, #20]
10008874:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
10008876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008878:	3301      	adds	r3, #1
1000887a:	637b      	str	r3, [r7, #52]	@ 0x34
1000887c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008880:	429a      	cmp	r2, r3
10008882:	d3d5      	bcc.n	10008830 <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
10008884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008886:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10008888:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
1000888a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000888c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1000888e:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
10008890:	69fb      	ldr	r3, [r7, #28]
10008892:	6a3a      	ldr	r2, [r7, #32]
10008894:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
10008896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1000889a:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
1000889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000889e:	683a      	ldr	r2, [r7, #0]
100088a0:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
100088a2:	69fb      	ldr	r3, [r7, #28]
100088a4:	68ba      	ldr	r2, [r7, #8]
100088a6:	601a      	str	r2, [r3, #0]
	vdev->role = role;
100088a8:	69fb      	ldr	r3, [r7, #28]
100088aa:	68fa      	ldr	r2, [r7, #12]
100088ac:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
100088ae:	69fb      	ldr	r3, [r7, #28]
100088b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
100088b2:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
100088b4:	69fb      	ldr	r3, [r7, #28]
100088b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100088b8:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
100088ba:	69fb      	ldr	r3, [r7, #28]
100088bc:	4a19      	ldr	r2, [pc, #100]	@ (10008924 <rproc_virtio_create_vdev+0x158>)
100088be:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
100088c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100088c2:	3310      	adds	r3, #16
100088c4:	e02a      	b.n	1000891c <rproc_virtio_create_vdev+0x150>
			goto err1;
100088c6:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
100088c8:	2300      	movs	r3, #0
100088ca:	637b      	str	r3, [r7, #52]	@ 0x34
100088cc:	e019      	b.n	10008902 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
100088ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100088d0:	4613      	mov	r3, r2
100088d2:	005b      	lsls	r3, r3, #1
100088d4:	4413      	add	r3, r2
100088d6:	00db      	lsls	r3, r3, #3
100088d8:	461a      	mov	r2, r3
100088da:	6a3b      	ldr	r3, [r7, #32]
100088dc:	4413      	add	r3, r2
100088de:	681b      	ldr	r3, [r3, #0]
100088e0:	2b00      	cmp	r3, #0
100088e2:	d00b      	beq.n	100088fc <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
100088e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100088e6:	4613      	mov	r3, r2
100088e8:	005b      	lsls	r3, r3, #1
100088ea:	4413      	add	r3, r2
100088ec:	00db      	lsls	r3, r3, #3
100088ee:	461a      	mov	r2, r3
100088f0:	6a3b      	ldr	r3, [r7, #32]
100088f2:	4413      	add	r3, r2
100088f4:	681b      	ldr	r3, [r3, #0]
100088f6:	4618      	mov	r0, r3
100088f8:	f7ff fe70 	bl	100085dc <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
100088fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100088fe:	3301      	adds	r3, #1
10008900:	637b      	str	r3, [r7, #52]	@ 0x34
10008902:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10008904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008906:	429a      	cmp	r2, r3
10008908:	d3e1      	bcc.n	100088ce <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
1000890a:	6a38      	ldr	r0, [r7, #32]
1000890c:	f7ff fe66 	bl	100085dc <metal_free_memory>
10008910:	e000      	b.n	10008914 <rproc_virtio_create_vdev+0x148>
		goto err0;
10008912:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
10008914:	6a78      	ldr	r0, [r7, #36]	@ 0x24
10008916:	f7ff fe61 	bl	100085dc <metal_free_memory>
	return NULL;
1000891a:	2300      	movs	r3, #0
}
1000891c:	4618      	mov	r0, r3
1000891e:	3738      	adds	r7, #56	@ 0x38
10008920:	46bd      	mov	sp, r7
10008922:	bd80      	pop	{r7, pc}
10008924:	1000d6a8 	.word	0x1000d6a8

10008928 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
10008928:	b480      	push	{r7}
1000892a:	b087      	sub	sp, #28
1000892c:	af00      	add	r7, sp, #0
1000892e:	60f8      	str	r0, [r7, #12]
10008930:	60b9      	str	r1, [r7, #8]
10008932:	607a      	str	r2, [r7, #4]
10008934:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
10008936:	68fb      	ldr	r3, [r7, #12]
10008938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000893a:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
1000893c:	68ba      	ldr	r2, [r7, #8]
1000893e:	697b      	ldr	r3, [r7, #20]
10008940:	429a      	cmp	r2, r3
10008942:	d302      	bcc.n	1000894a <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
10008944:	f06f 0301 	mvn.w	r3, #1
10008948:	e019      	b.n	1000897e <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
1000894a:	68fb      	ldr	r3, [r7, #12]
1000894c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000894e:	68ba      	ldr	r2, [r7, #8]
10008950:	4613      	mov	r3, r2
10008952:	005b      	lsls	r3, r3, #1
10008954:	4413      	add	r3, r2
10008956:	00db      	lsls	r3, r3, #3
10008958:	440b      	add	r3, r1
1000895a:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
1000895c:	693b      	ldr	r3, [r7, #16]
1000895e:	6a3a      	ldr	r2, [r7, #32]
10008960:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
10008962:	693b      	ldr	r3, [r7, #16]
10008964:	687a      	ldr	r2, [r7, #4]
10008966:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
10008968:	693b      	ldr	r3, [r7, #16]
1000896a:	683a      	ldr	r2, [r7, #0]
1000896c:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
1000896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008970:	b29a      	uxth	r2, r3
10008972:	693b      	ldr	r3, [r7, #16]
10008974:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
10008976:	693b      	ldr	r3, [r7, #16]
10008978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000897a:	609a      	str	r2, [r3, #8]

	return 0;
1000897c:	2300      	movs	r3, #0
}
1000897e:	4618      	mov	r0, r3
10008980:	371c      	adds	r7, #28
10008982:	46bd      	mov	sp, r7
10008984:	f85d 7b04 	ldr.w	r7, [sp], #4
10008988:	4770      	bx	lr

1000898a <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
1000898a:	b580      	push	{r7, lr}
1000898c:	b086      	sub	sp, #24
1000898e:	af00      	add	r7, sp, #0
10008990:	6078      	str	r0, [r7, #4]
10008992:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
10008994:	687b      	ldr	r3, [r7, #4]
10008996:	2b00      	cmp	r3, #0
10008998:	d102      	bne.n	100089a0 <rproc_virtio_notified+0x16>
		return -RPROC_EINVAL;
1000899a:	f06f 0301 	mvn.w	r3, #1
1000899e:	e02c      	b.n	100089fa <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
100089a0:	687b      	ldr	r3, [r7, #4]
100089a2:	681b      	ldr	r3, [r3, #0]
100089a4:	683a      	ldr	r2, [r7, #0]
100089a6:	429a      	cmp	r2, r3
100089a8:	d101      	bne.n	100089ae <rproc_virtio_notified+0x24>
		return 0;
100089aa:	2300      	movs	r3, #0
100089ac:	e025      	b.n	100089fa <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
100089ae:	687b      	ldr	r3, [r7, #4]
100089b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100089b2:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
100089b4:	2300      	movs	r3, #0
100089b6:	617b      	str	r3, [r7, #20]
100089b8:	e01a      	b.n	100089f0 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
100089ba:	687b      	ldr	r3, [r7, #4]
100089bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
100089be:	697a      	ldr	r2, [r7, #20]
100089c0:	4613      	mov	r3, r2
100089c2:	005b      	lsls	r3, r3, #1
100089c4:	4413      	add	r3, r2
100089c6:	00db      	lsls	r3, r3, #3
100089c8:	440b      	add	r3, r1
100089ca:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
100089cc:	68fb      	ldr	r3, [r7, #12]
100089ce:	691b      	ldr	r3, [r3, #16]
100089d0:	683a      	ldr	r2, [r7, #0]
100089d2:	429a      	cmp	r2, r3
100089d4:	d003      	beq.n	100089de <rproc_virtio_notified+0x54>
100089d6:	683b      	ldr	r3, [r7, #0]
100089d8:	f1b3 3fff 	cmp.w	r3, #4294967295
100089dc:	d105      	bne.n	100089ea <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
100089de:	68fb      	ldr	r3, [r7, #12]
100089e0:	681b      	ldr	r3, [r3, #0]
100089e2:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
100089e4:	68b8      	ldr	r0, [r7, #8]
100089e6:	f001 fae7 	bl	10009fb8 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
100089ea:	697b      	ldr	r3, [r7, #20]
100089ec:	3301      	adds	r3, #1
100089ee:	617b      	str	r3, [r7, #20]
100089f0:	697a      	ldr	r2, [r7, #20]
100089f2:	693b      	ldr	r3, [r7, #16]
100089f4:	429a      	cmp	r2, r3
100089f6:	d3e0      	bcc.n	100089ba <rproc_virtio_notified+0x30>
		}
	}
	return 0;
100089f8:	2300      	movs	r3, #0
}
100089fa:	4618      	mov	r0, r3
100089fc:	3718      	adds	r7, #24
100089fe:	46bd      	mov	sp, r7
10008a00:	bd80      	pop	{r7, pc}

10008a02 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
10008a02:	b580      	push	{r7, lr}
10008a04:	b084      	sub	sp, #16
10008a06:	af00      	add	r7, sp, #0
10008a08:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
10008a0a:	687b      	ldr	r3, [r7, #4]
10008a0c:	699b      	ldr	r3, [r3, #24]
10008a0e:	2b00      	cmp	r3, #0
10008a10:	d00a      	beq.n	10008a28 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
10008a12:	6878      	ldr	r0, [r7, #4]
10008a14:	f7ff fe3a 	bl	1000868c <rproc_virtio_get_status>
10008a18:	4603      	mov	r3, r0
10008a1a:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
10008a1c:	7bfb      	ldrb	r3, [r7, #15]
10008a1e:	f003 0304 	and.w	r3, r3, #4
10008a22:	2b00      	cmp	r3, #0
10008a24:	d102      	bne.n	10008a2c <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
10008a26:	e7f4      	b.n	10008a12 <rproc_virtio_wait_remote_ready+0x10>
		return;
10008a28:	bf00      	nop
10008a2a:	e000      	b.n	10008a2e <rproc_virtio_wait_remote_ready+0x2c>
			return;
10008a2c:	bf00      	nop
		metal_cpu_yield();
	}
}
10008a2e:	3710      	adds	r7, #16
10008a30:	46bd      	mov	sp, r7
10008a32:	bd80      	pop	{r7, pc}

10008a34 <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
10008a34:	b490      	push	{r4, r7}
10008a36:	b086      	sub	sp, #24
10008a38:	af00      	add	r7, sp, #0
10008a3a:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10008a3c:	2300      	movs	r3, #0
10008a3e:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10008a40:	bf00      	nop
10008a42:	687b      	ldr	r3, [r7, #4]
10008a44:	617b      	str	r3, [r7, #20]
10008a46:	2301      	movs	r3, #1
10008a48:	60fb      	str	r3, [r7, #12]
10008a4a:	68fb      	ldr	r3, [r7, #12]
10008a4c:	461c      	mov	r4, r3
10008a4e:	697a      	ldr	r2, [r7, #20]
10008a50:	f107 0310 	add.w	r3, r7, #16
10008a54:	6818      	ldr	r0, [r3, #0]
10008a56:	f3bf 8f5b 	dmb	ish
10008a5a:	e852 1f00 	ldrex	r1, [r2]
10008a5e:	4281      	cmp	r1, r0
10008a60:	d103      	bne.n	10008a6a <__metal_mutex_acquire+0x36>
10008a62:	e842 4c00 	strex	ip, r4, [r2]
10008a66:	f1bc 0f00 	cmp.w	ip, #0
10008a6a:	f3bf 8f5b 	dmb	ish
10008a6e:	bf0c      	ite	eq
10008a70:	2201      	moveq	r2, #1
10008a72:	2200      	movne	r2, #0
10008a74:	2a00      	cmp	r2, #0
10008a76:	d100      	bne.n	10008a7a <__metal_mutex_acquire+0x46>
10008a78:	6019      	str	r1, [r3, #0]
10008a7a:	4613      	mov	r3, r2
10008a7c:	f083 0301 	eor.w	r3, r3, #1
10008a80:	b2db      	uxtb	r3, r3
10008a82:	2b00      	cmp	r3, #0
10008a84:	d1dd      	bne.n	10008a42 <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
10008a86:	bf00      	nop
10008a88:	bf00      	nop
10008a8a:	3718      	adds	r7, #24
10008a8c:	46bd      	mov	sp, r7
10008a8e:	bc90      	pop	{r4, r7}
10008a90:	4770      	bx	lr

10008a92 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
10008a92:	b480      	push	{r7}
10008a94:	b085      	sub	sp, #20
10008a96:	af00      	add	r7, sp, #0
10008a98:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10008a9a:	687b      	ldr	r3, [r7, #4]
10008a9c:	60fb      	str	r3, [r7, #12]
10008a9e:	2300      	movs	r3, #0
10008aa0:	60bb      	str	r3, [r7, #8]
10008aa2:	68bb      	ldr	r3, [r7, #8]
10008aa4:	461a      	mov	r2, r3
10008aa6:	68fb      	ldr	r3, [r7, #12]
10008aa8:	f3bf 8f5b 	dmb	ish
10008aac:	601a      	str	r2, [r3, #0]
10008aae:	f3bf 8f5b 	dmb	ish
}
10008ab2:	bf00      	nop
10008ab4:	3714      	adds	r7, #20
10008ab6:	46bd      	mov	sp, r7
10008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
10008abc:	4770      	bx	lr

10008abe <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
10008abe:	b580      	push	{r7, lr}
10008ac0:	b082      	sub	sp, #8
10008ac2:	af00      	add	r7, sp, #0
10008ac4:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
10008ac6:	6878      	ldr	r0, [r7, #4]
10008ac8:	f7ff ffb4 	bl	10008a34 <__metal_mutex_acquire>
}
10008acc:	bf00      	nop
10008ace:	3708      	adds	r7, #8
10008ad0:	46bd      	mov	sp, r7
10008ad2:	bd80      	pop	{r7, pc}

10008ad4 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
10008ad4:	b580      	push	{r7, lr}
10008ad6:	b082      	sub	sp, #8
10008ad8:	af00      	add	r7, sp, #0
10008ada:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
10008adc:	6878      	ldr	r0, [r7, #4]
10008ade:	f7ff ffd8 	bl	10008a92 <__metal_mutex_release>
}
10008ae2:	bf00      	nop
10008ae4:	3708      	adds	r7, #8
10008ae6:	46bd      	mov	sp, r7
10008ae8:	bd80      	pop	{r7, pc}

10008aea <metal_list_add_before>:
{
10008aea:	b480      	push	{r7}
10008aec:	b083      	sub	sp, #12
10008aee:	af00      	add	r7, sp, #0
10008af0:	6078      	str	r0, [r7, #4]
10008af2:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
10008af4:	687b      	ldr	r3, [r7, #4]
10008af6:	685a      	ldr	r2, [r3, #4]
10008af8:	683b      	ldr	r3, [r7, #0]
10008afa:	605a      	str	r2, [r3, #4]
	new_node->next = node;
10008afc:	683b      	ldr	r3, [r7, #0]
10008afe:	687a      	ldr	r2, [r7, #4]
10008b00:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
10008b02:	683b      	ldr	r3, [r7, #0]
10008b04:	681b      	ldr	r3, [r3, #0]
10008b06:	683a      	ldr	r2, [r7, #0]
10008b08:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
10008b0a:	683b      	ldr	r3, [r7, #0]
10008b0c:	685b      	ldr	r3, [r3, #4]
10008b0e:	683a      	ldr	r2, [r7, #0]
10008b10:	601a      	str	r2, [r3, #0]
}
10008b12:	bf00      	nop
10008b14:	370c      	adds	r7, #12
10008b16:	46bd      	mov	sp, r7
10008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
10008b1c:	4770      	bx	lr

10008b1e <metal_list_add_tail>:
{
10008b1e:	b580      	push	{r7, lr}
10008b20:	b082      	sub	sp, #8
10008b22:	af00      	add	r7, sp, #0
10008b24:	6078      	str	r0, [r7, #4]
10008b26:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
10008b28:	6839      	ldr	r1, [r7, #0]
10008b2a:	6878      	ldr	r0, [r7, #4]
10008b2c:	f7ff ffdd 	bl	10008aea <metal_list_add_before>
}
10008b30:	bf00      	nop
10008b32:	3708      	adds	r7, #8
10008b34:	46bd      	mov	sp, r7
10008b36:	bd80      	pop	{r7, pc}

10008b38 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
10008b38:	b480      	push	{r7}
10008b3a:	b083      	sub	sp, #12
10008b3c:	af00      	add	r7, sp, #0
10008b3e:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
10008b40:	687b      	ldr	r3, [r7, #4]
10008b42:	681b      	ldr	r3, [r3, #0]
10008b44:	687a      	ldr	r2, [r7, #4]
10008b46:	6852      	ldr	r2, [r2, #4]
10008b48:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
10008b4a:	687b      	ldr	r3, [r7, #4]
10008b4c:	685b      	ldr	r3, [r3, #4]
10008b4e:	687a      	ldr	r2, [r7, #4]
10008b50:	6812      	ldr	r2, [r2, #0]
10008b52:	601a      	str	r2, [r3, #0]
	node->prev = node;
10008b54:	687b      	ldr	r3, [r7, #4]
10008b56:	687a      	ldr	r2, [r7, #4]
10008b58:	605a      	str	r2, [r3, #4]
	node->next = node;
10008b5a:	687b      	ldr	r3, [r7, #4]
10008b5c:	687a      	ldr	r2, [r7, #4]
10008b5e:	601a      	str	r2, [r3, #0]
}
10008b60:	bf00      	nop
10008b62:	370c      	adds	r7, #12
10008b64:	46bd      	mov	sp, r7
10008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
10008b6a:	4770      	bx	lr

10008b6c <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
10008b6c:	b480      	push	{r7}
10008b6e:	b083      	sub	sp, #12
10008b70:	af00      	add	r7, sp, #0
10008b72:	6078      	str	r0, [r7, #4]
10008b74:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
10008b76:	683b      	ldr	r3, [r7, #0]
10008b78:	095b      	lsrs	r3, r3, #5
10008b7a:	009a      	lsls	r2, r3, #2
10008b7c:	6879      	ldr	r1, [r7, #4]
10008b7e:	440a      	add	r2, r1
10008b80:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
10008b82:	683a      	ldr	r2, [r7, #0]
10008b84:	f002 021f 	and.w	r2, r2, #31
10008b88:	2001      	movs	r0, #1
10008b8a:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
10008b8e:	009b      	lsls	r3, r3, #2
10008b90:	6878      	ldr	r0, [r7, #4]
10008b92:	4403      	add	r3, r0
10008b94:	430a      	orrs	r2, r1
10008b96:	601a      	str	r2, [r3, #0]
}
10008b98:	bf00      	nop
10008b9a:	370c      	adds	r7, #12
10008b9c:	46bd      	mov	sp, r7
10008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
10008ba2:	4770      	bx	lr

10008ba4 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
10008ba4:	b480      	push	{r7}
10008ba6:	b083      	sub	sp, #12
10008ba8:	af00      	add	r7, sp, #0
10008baa:	6078      	str	r0, [r7, #4]
10008bac:	6039      	str	r1, [r7, #0]
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
10008bae:	683b      	ldr	r3, [r7, #0]
10008bb0:	095b      	lsrs	r3, r3, #5
10008bb2:	009b      	lsls	r3, r3, #2
10008bb4:	687a      	ldr	r2, [r7, #4]
10008bb6:	4413      	add	r3, r2
10008bb8:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
10008bba:	683b      	ldr	r3, [r7, #0]
10008bbc:	f003 031f 	and.w	r3, r3, #31
10008bc0:	fa22 f303 	lsr.w	r3, r2, r3
10008bc4:	f003 0301 	and.w	r3, r3, #1
10008bc8:	2b00      	cmp	r3, #0
10008bca:	bf14      	ite	ne
10008bcc:	2301      	movne	r3, #1
10008bce:	2300      	moveq	r3, #0
10008bd0:	b2db      	uxtb	r3, r3
}
10008bd2:	4618      	mov	r0, r3
10008bd4:	370c      	adds	r7, #12
10008bd6:	46bd      	mov	sp, r7
10008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
10008bdc:	4770      	bx	lr

10008bde <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
10008bde:	b480      	push	{r7}
10008be0:	b083      	sub	sp, #12
10008be2:	af00      	add	r7, sp, #0
10008be4:	6078      	str	r0, [r7, #4]
10008be6:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10008be8:	683b      	ldr	r3, [r7, #0]
10008bea:	095b      	lsrs	r3, r3, #5
10008bec:	009a      	lsls	r2, r3, #2
10008bee:	6879      	ldr	r1, [r7, #4]
10008bf0:	440a      	add	r2, r1
10008bf2:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
10008bf4:	683a      	ldr	r2, [r7, #0]
10008bf6:	f002 021f 	and.w	r2, r2, #31
10008bfa:	2001      	movs	r0, #1
10008bfc:	fa00 f202 	lsl.w	r2, r0, r2
10008c00:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
10008c02:	009b      	lsls	r3, r3, #2
10008c04:	6878      	ldr	r0, [r7, #4]
10008c06:	4403      	add	r3, r0
10008c08:	400a      	ands	r2, r1
10008c0a:	601a      	str	r2, [r3, #0]
}
10008c0c:	bf00      	nop
10008c0e:	370c      	adds	r7, #12
10008c10:	46bd      	mov	sp, r7
10008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
10008c16:	4770      	bx	lr

10008c18 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
10008c18:	b580      	push	{r7, lr}
10008c1a:	b082      	sub	sp, #8
10008c1c:	af00      	add	r7, sp, #0
10008c1e:	6078      	str	r0, [r7, #4]
10008c20:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
10008c22:	6839      	ldr	r1, [r7, #0]
10008c24:	6878      	ldr	r0, [r7, #4]
10008c26:	f7ff ffbd 	bl	10008ba4 <metal_bitmap_is_bit_set>
10008c2a:	4603      	mov	r3, r0
10008c2c:	2b00      	cmp	r3, #0
10008c2e:	bf0c      	ite	eq
10008c30:	2301      	moveq	r3, #1
10008c32:	2300      	movne	r3, #0
10008c34:	b2db      	uxtb	r3, r3
}
10008c36:	4618      	mov	r0, r3
10008c38:	3708      	adds	r7, #8
10008c3a:	46bd      	mov	sp, r7
10008c3c:	bd80      	pop	{r7, pc}

10008c3e <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
10008c3e:	b580      	push	{r7, lr}
10008c40:	b086      	sub	sp, #24
10008c42:	af00      	add	r7, sp, #0
10008c44:	60f8      	str	r0, [r7, #12]
10008c46:	60b9      	str	r1, [r7, #8]
10008c48:	607a      	str	r2, [r7, #4]
	unsigned int bit;

	for (bit = start;
10008c4a:	68bb      	ldr	r3, [r7, #8]
10008c4c:	617b      	str	r3, [r7, #20]
10008c4e:	e002      	b.n	10008c56 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
10008c50:	697b      	ldr	r3, [r7, #20]
10008c52:	3301      	adds	r3, #1
10008c54:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
10008c56:	697a      	ldr	r2, [r7, #20]
10008c58:	687b      	ldr	r3, [r7, #4]
10008c5a:	429a      	cmp	r2, r3
10008c5c:	d207      	bcs.n	10008c6e <metal_bitmap_next_clear_bit+0x30>
10008c5e:	697b      	ldr	r3, [r7, #20]
10008c60:	4619      	mov	r1, r3
10008c62:	68f8      	ldr	r0, [r7, #12]
10008c64:	f7ff ffd8 	bl	10008c18 <metal_bitmap_is_bit_clear>
10008c68:	4603      	mov	r3, r0
10008c6a:	2b00      	cmp	r3, #0
10008c6c:	d0f0      	beq.n	10008c50 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
10008c6e:	697b      	ldr	r3, [r7, #20]
}
10008c70:	4618      	mov	r0, r3
10008c72:	3718      	adds	r7, #24
10008c74:	46bd      	mov	sp, r7
10008c76:	bd80      	pop	{r7, pc}

10008c78 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
10008c78:	b580      	push	{r7, lr}
10008c7a:	b084      	sub	sp, #16
10008c7c:	af00      	add	r7, sp, #0
10008c7e:	60f8      	str	r0, [r7, #12]
10008c80:	60b9      	str	r1, [r7, #8]
10008c82:	607a      	str	r2, [r7, #4]
10008c84:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10008c86:	68f8      	ldr	r0, [r7, #12]
10008c88:	68bb      	ldr	r3, [r7, #8]
10008c8a:	2b00      	cmp	r3, #0
10008c8c:	d001      	beq.n	10008c92 <rpmsg_initialize_ept+0x1a>
10008c8e:	68bb      	ldr	r3, [r7, #8]
10008c90:	e000      	b.n	10008c94 <rpmsg_initialize_ept+0x1c>
10008c92:	4b0a      	ldr	r3, [pc, #40]	@ (10008cbc <rpmsg_initialize_ept+0x44>)
10008c94:	2220      	movs	r2, #32
10008c96:	4619      	mov	r1, r3
10008c98:	f001 fca7 	bl	1000a5ea <strncpy>
	ept->addr = src;
10008c9c:	68fb      	ldr	r3, [r7, #12]
10008c9e:	687a      	ldr	r2, [r7, #4]
10008ca0:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
10008ca2:	68fb      	ldr	r3, [r7, #12]
10008ca4:	683a      	ldr	r2, [r7, #0]
10008ca6:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
10008ca8:	68fb      	ldr	r3, [r7, #12]
10008caa:	69ba      	ldr	r2, [r7, #24]
10008cac:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
10008cae:	68fb      	ldr	r3, [r7, #12]
10008cb0:	69fa      	ldr	r2, [r7, #28]
10008cb2:	631a      	str	r2, [r3, #48]	@ 0x30
}
10008cb4:	bf00      	nop
10008cb6:	3710      	adds	r7, #16
10008cb8:	46bd      	mov	sp, r7
10008cba:	bd80      	pop	{r7, pc}
10008cbc:	1000b64c 	.word	0x1000b64c

10008cc0 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
10008cc0:	b580      	push	{r7, lr}
10008cc2:	b084      	sub	sp, #16
10008cc4:	af00      	add	r7, sp, #0
10008cc6:	6078      	str	r0, [r7, #4]
10008cc8:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
10008cca:	f04f 33ff 	mov.w	r3, #4294967295
10008cce:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
10008cd0:	683b      	ldr	r3, [r7, #0]
10008cd2:	461a      	mov	r2, r3
10008cd4:	2100      	movs	r1, #0
10008cd6:	6878      	ldr	r0, [r7, #4]
10008cd8:	f7ff ffb1 	bl	10008c3e <metal_bitmap_next_clear_bit>
10008cdc:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
10008cde:	683b      	ldr	r3, [r7, #0]
10008ce0:	68ba      	ldr	r2, [r7, #8]
10008ce2:	429a      	cmp	r2, r3
10008ce4:	d208      	bcs.n	10008cf8 <rpmsg_get_address+0x38>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
10008ce6:	68bb      	ldr	r3, [r7, #8]
10008ce8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
10008cec:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
10008cee:	68bb      	ldr	r3, [r7, #8]
10008cf0:	4619      	mov	r1, r3
10008cf2:	6878      	ldr	r0, [r7, #4]
10008cf4:	f7ff ff3a 	bl	10008b6c <metal_bitmap_set_bit>
	}

	return addr;
10008cf8:	68fb      	ldr	r3, [r7, #12]
}
10008cfa:	4618      	mov	r0, r3
10008cfc:	3710      	adds	r7, #16
10008cfe:	46bd      	mov	sp, r7
10008d00:	bd80      	pop	{r7, pc}

10008d02 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
10008d02:	b580      	push	{r7, lr}
10008d04:	b084      	sub	sp, #16
10008d06:	af00      	add	r7, sp, #0
10008d08:	60f8      	str	r0, [r7, #12]
10008d0a:	60b9      	str	r1, [r7, #8]
10008d0c:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10008d0e:	687b      	ldr	r3, [r7, #4]
10008d10:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10008d14:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10008d16:	687b      	ldr	r3, [r7, #4]
10008d18:	2b00      	cmp	r3, #0
10008d1a:	db07      	blt.n	10008d2c <rpmsg_release_address+0x2a>
10008d1c:	687a      	ldr	r2, [r7, #4]
10008d1e:	68bb      	ldr	r3, [r7, #8]
10008d20:	429a      	cmp	r2, r3
10008d22:	da03      	bge.n	10008d2c <rpmsg_release_address+0x2a>
		metal_bitmap_clear_bit(bitmap, addr);
10008d24:	6879      	ldr	r1, [r7, #4]
10008d26:	68f8      	ldr	r0, [r7, #12]
10008d28:	f7ff ff59 	bl	10008bde <metal_bitmap_clear_bit>
}
10008d2c:	bf00      	nop
10008d2e:	3710      	adds	r7, #16
10008d30:	46bd      	mov	sp, r7
10008d32:	bd80      	pop	{r7, pc}

10008d34 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
10008d34:	b580      	push	{r7, lr}
10008d36:	b084      	sub	sp, #16
10008d38:	af00      	add	r7, sp, #0
10008d3a:	60f8      	str	r0, [r7, #12]
10008d3c:	60b9      	str	r1, [r7, #8]
10008d3e:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10008d40:	687b      	ldr	r3, [r7, #4]
10008d42:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10008d46:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
10008d48:	687b      	ldr	r3, [r7, #4]
10008d4a:	2b00      	cmp	r3, #0
10008d4c:	db09      	blt.n	10008d62 <rpmsg_is_address_set+0x2e>
10008d4e:	687a      	ldr	r2, [r7, #4]
10008d50:	68bb      	ldr	r3, [r7, #8]
10008d52:	429a      	cmp	r2, r3
10008d54:	da05      	bge.n	10008d62 <rpmsg_is_address_set+0x2e>
		return metal_bitmap_is_bit_set(bitmap, addr);
10008d56:	6879      	ldr	r1, [r7, #4]
10008d58:	68f8      	ldr	r0, [r7, #12]
10008d5a:	f7ff ff23 	bl	10008ba4 <metal_bitmap_is_bit_set>
10008d5e:	4603      	mov	r3, r0
10008d60:	e000      	b.n	10008d64 <rpmsg_is_address_set+0x30>
	else
		return RPMSG_ERR_PARAM;
10008d62:	4b02      	ldr	r3, [pc, #8]	@ (10008d6c <rpmsg_is_address_set+0x38>)
}
10008d64:	4618      	mov	r0, r3
10008d66:	3710      	adds	r7, #16
10008d68:	46bd      	mov	sp, r7
10008d6a:	bd80      	pop	{r7, pc}
10008d6c:	fffff82d 	.word	0xfffff82d

10008d70 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
10008d70:	b580      	push	{r7, lr}
10008d72:	b084      	sub	sp, #16
10008d74:	af00      	add	r7, sp, #0
10008d76:	60f8      	str	r0, [r7, #12]
10008d78:	60b9      	str	r1, [r7, #8]
10008d7a:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
10008d7c:	687b      	ldr	r3, [r7, #4]
10008d7e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
10008d82:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size) {
10008d84:	687b      	ldr	r3, [r7, #4]
10008d86:	2b00      	cmp	r3, #0
10008d88:	db09      	blt.n	10008d9e <rpmsg_set_address+0x2e>
10008d8a:	687a      	ldr	r2, [r7, #4]
10008d8c:	68bb      	ldr	r3, [r7, #8]
10008d8e:	429a      	cmp	r2, r3
10008d90:	da05      	bge.n	10008d9e <rpmsg_set_address+0x2e>
		metal_bitmap_set_bit(bitmap, addr);
10008d92:	6879      	ldr	r1, [r7, #4]
10008d94:	68f8      	ldr	r0, [r7, #12]
10008d96:	f7ff fee9 	bl	10008b6c <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
10008d9a:	2300      	movs	r3, #0
10008d9c:	e000      	b.n	10008da0 <rpmsg_set_address+0x30>
	} else {
		return RPMSG_ERR_PARAM;
10008d9e:	4b02      	ldr	r3, [pc, #8]	@ (10008da8 <rpmsg_set_address+0x38>)
	}
}
10008da0:	4618      	mov	r0, r3
10008da2:	3710      	adds	r7, #16
10008da4:	46bd      	mov	sp, r7
10008da6:	bd80      	pop	{r7, pc}
10008da8:	fffff82d 	.word	0xfffff82d

10008dac <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
10008dac:	b590      	push	{r4, r7, lr}
10008dae:	b089      	sub	sp, #36	@ 0x24
10008db0:	af02      	add	r7, sp, #8
10008db2:	60f8      	str	r0, [r7, #12]
10008db4:	60b9      	str	r1, [r7, #8]
10008db6:	607a      	str	r2, [r7, #4]
10008db8:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
10008dba:	68fb      	ldr	r3, [r7, #12]
10008dbc:	2b00      	cmp	r3, #0
10008dbe:	d00a      	beq.n	10008dd6 <rpmsg_send_offchannel_raw+0x2a>
10008dc0:	68fb      	ldr	r3, [r7, #12]
10008dc2:	6a1b      	ldr	r3, [r3, #32]
10008dc4:	2b00      	cmp	r3, #0
10008dc6:	d006      	beq.n	10008dd6 <rpmsg_send_offchannel_raw+0x2a>
10008dc8:	683b      	ldr	r3, [r7, #0]
10008dca:	2b00      	cmp	r3, #0
10008dcc:	d003      	beq.n	10008dd6 <rpmsg_send_offchannel_raw+0x2a>
10008dce:	687b      	ldr	r3, [r7, #4]
10008dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
10008dd4:	d101      	bne.n	10008dda <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
10008dd6:	4b0d      	ldr	r3, [pc, #52]	@ (10008e0c <rpmsg_send_offchannel_raw+0x60>)
10008dd8:	e014      	b.n	10008e04 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
10008dda:	68fb      	ldr	r3, [r7, #12]
10008ddc:	6a1b      	ldr	r3, [r3, #32]
10008dde:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
10008de0:	697b      	ldr	r3, [r7, #20]
10008de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10008de4:	2b00      	cmp	r3, #0
10008de6:	d00c      	beq.n	10008e02 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
10008de8:	697b      	ldr	r3, [r7, #20]
10008dea:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
10008dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008dee:	9301      	str	r3, [sp, #4]
10008df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008df2:	9300      	str	r3, [sp, #0]
10008df4:	683b      	ldr	r3, [r7, #0]
10008df6:	687a      	ldr	r2, [r7, #4]
10008df8:	68b9      	ldr	r1, [r7, #8]
10008dfa:	6978      	ldr	r0, [r7, #20]
10008dfc:	47a0      	blx	r4
10008dfe:	4603      	mov	r3, r0
10008e00:	e000      	b.n	10008e04 <rpmsg_send_offchannel_raw+0x58>
						     len, wait);

	return RPMSG_ERR_PARAM;
10008e02:	4b02      	ldr	r3, [pc, #8]	@ (10008e0c <rpmsg_send_offchannel_raw+0x60>)
}
10008e04:	4618      	mov	r0, r3
10008e06:	371c      	adds	r7, #28
10008e08:	46bd      	mov	sp, r7
10008e0a:	bd90      	pop	{r4, r7, pc}
10008e0c:	fffff82d 	.word	0xfffff82d

10008e10 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
10008e10:	b580      	push	{r7, lr}
10008e12:	b090      	sub	sp, #64	@ 0x40
10008e14:	af02      	add	r7, sp, #8
10008e16:	6078      	str	r0, [r7, #4]
10008e18:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
10008e1a:	683b      	ldr	r3, [r7, #0]
10008e1c:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
10008e1e:	687b      	ldr	r3, [r7, #4]
10008e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10008e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
10008e24:	6879      	ldr	r1, [r7, #4]
10008e26:	f107 030c 	add.w	r3, r7, #12
10008e2a:	2220      	movs	r2, #32
10008e2c:	4618      	mov	r0, r3
10008e2e:	f001 fbdc 	bl	1000a5ea <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
10008e32:	687b      	ldr	r3, [r7, #4]
10008e34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10008e36:	f107 030c 	add.w	r3, r7, #12
10008e3a:	2201      	movs	r2, #1
10008e3c:	9201      	str	r2, [sp, #4]
10008e3e:	2228      	movs	r2, #40	@ 0x28
10008e40:	9200      	str	r2, [sp, #0]
10008e42:	2235      	movs	r2, #53	@ 0x35
10008e44:	6878      	ldr	r0, [r7, #4]
10008e46:	f7ff ffb1 	bl	10008dac <rpmsg_send_offchannel_raw>
10008e4a:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
10008e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008e4e:	2b00      	cmp	r3, #0
10008e50:	da01      	bge.n	10008e56 <rpmsg_send_ns_message+0x46>
		return ret;
10008e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10008e54:	e000      	b.n	10008e58 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
10008e56:	2300      	movs	r3, #0
}
10008e58:	4618      	mov	r0, r3
10008e5a:	3738      	adds	r7, #56	@ 0x38
10008e5c:	46bd      	mov	sp, r7
10008e5e:	bd80      	pop	{r7, pc}

10008e60 <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
10008e60:	b580      	push	{r7, lr}
10008e62:	b088      	sub	sp, #32
10008e64:	af00      	add	r7, sp, #0
10008e66:	60f8      	str	r0, [r7, #12]
10008e68:	60b9      	str	r1, [r7, #8]
10008e6a:	607a      	str	r2, [r7, #4]
10008e6c:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
10008e6e:	68fb      	ldr	r3, [r7, #12]
10008e70:	681b      	ldr	r3, [r3, #0]
10008e72:	61fb      	str	r3, [r7, #28]
10008e74:	e04b      	b.n	10008f0e <rpmsg_get_endpoint+0xae>
		int name_match = 0;
10008e76:	2300      	movs	r3, #0
10008e78:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
10008e7a:	69fb      	ldr	r3, [r7, #28]
10008e7c:	3b34      	subs	r3, #52	@ 0x34
10008e7e:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
10008e80:	687b      	ldr	r3, [r7, #4]
10008e82:	f1b3 3fff 	cmp.w	r3, #4294967295
10008e86:	d006      	beq.n	10008e96 <rpmsg_get_endpoint+0x36>
10008e88:	697b      	ldr	r3, [r7, #20]
10008e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10008e8c:	687a      	ldr	r2, [r7, #4]
10008e8e:	429a      	cmp	r2, r3
10008e90:	d101      	bne.n	10008e96 <rpmsg_get_endpoint+0x36>
			return ept;
10008e92:	697b      	ldr	r3, [r7, #20]
10008e94:	e040      	b.n	10008f18 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
10008e96:	697b      	ldr	r3, [r7, #20]
10008e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10008e9a:	687a      	ldr	r2, [r7, #4]
10008e9c:	429a      	cmp	r2, r3
10008e9e:	d106      	bne.n	10008eae <rpmsg_get_endpoint+0x4e>
10008ea0:	697b      	ldr	r3, [r7, #20]
10008ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008ea4:	683a      	ldr	r2, [r7, #0]
10008ea6:	429a      	cmp	r2, r3
10008ea8:	d101      	bne.n	10008eae <rpmsg_get_endpoint+0x4e>
			return ept;
10008eaa:	697b      	ldr	r3, [r7, #20]
10008eac:	e034      	b.n	10008f18 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
10008eae:	68bb      	ldr	r3, [r7, #8]
10008eb0:	2b00      	cmp	r3, #0
10008eb2:	d00c      	beq.n	10008ece <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
10008eb4:	697b      	ldr	r3, [r7, #20]
10008eb6:	2220      	movs	r2, #32
10008eb8:	68b9      	ldr	r1, [r7, #8]
10008eba:	4618      	mov	r0, r3
10008ebc:	f001 fb83 	bl	1000a5c6 <strncmp>
10008ec0:	4603      	mov	r3, r0
10008ec2:	2b00      	cmp	r3, #0
10008ec4:	bf0c      	ite	eq
10008ec6:	2301      	moveq	r3, #1
10008ec8:	2300      	movne	r3, #0
10008eca:	b2db      	uxtb	r3, r3
10008ecc:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
10008ece:	68bb      	ldr	r3, [r7, #8]
10008ed0:	2b00      	cmp	r3, #0
10008ed2:	d018      	beq.n	10008f06 <rpmsg_get_endpoint+0xa6>
10008ed4:	69bb      	ldr	r3, [r7, #24]
10008ed6:	2b00      	cmp	r3, #0
10008ed8:	d015      	beq.n	10008f06 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
10008eda:	683b      	ldr	r3, [r7, #0]
10008edc:	f1b3 3fff 	cmp.w	r3, #4294967295
10008ee0:	d006      	beq.n	10008ef0 <rpmsg_get_endpoint+0x90>
10008ee2:	697b      	ldr	r3, [r7, #20]
10008ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008ee6:	683a      	ldr	r2, [r7, #0]
10008ee8:	429a      	cmp	r2, r3
10008eea:	d101      	bne.n	10008ef0 <rpmsg_get_endpoint+0x90>
			return ept;
10008eec:	697b      	ldr	r3, [r7, #20]
10008eee:	e013      	b.n	10008f18 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
10008ef0:	687b      	ldr	r3, [r7, #4]
10008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
10008ef6:	d107      	bne.n	10008f08 <rpmsg_get_endpoint+0xa8>
10008ef8:	697b      	ldr	r3, [r7, #20]
10008efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008efc:	f1b3 3fff 	cmp.w	r3, #4294967295
10008f00:	d102      	bne.n	10008f08 <rpmsg_get_endpoint+0xa8>
			return ept;
10008f02:	697b      	ldr	r3, [r7, #20]
10008f04:	e008      	b.n	10008f18 <rpmsg_get_endpoint+0xb8>
			continue;
10008f06:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
10008f08:	69fb      	ldr	r3, [r7, #28]
10008f0a:	681b      	ldr	r3, [r3, #0]
10008f0c:	61fb      	str	r3, [r7, #28]
10008f0e:	68fb      	ldr	r3, [r7, #12]
10008f10:	69fa      	ldr	r2, [r7, #28]
10008f12:	429a      	cmp	r2, r3
10008f14:	d1af      	bne.n	10008e76 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
10008f16:	2300      	movs	r3, #0
}
10008f18:	4618      	mov	r0, r3
10008f1a:	3720      	adds	r7, #32
10008f1c:	46bd      	mov	sp, r7
10008f1e:	bd80      	pop	{r7, pc}

10008f20 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
10008f20:	b580      	push	{r7, lr}
10008f22:	b084      	sub	sp, #16
10008f24:	af00      	add	r7, sp, #0
10008f26:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev = ept->rdev;
10008f28:	687b      	ldr	r3, [r7, #4]
10008f2a:	6a1b      	ldr	r3, [r3, #32]
10008f2c:	60fb      	str	r3, [r7, #12]

	metal_mutex_acquire(&rdev->lock);
10008f2e:	68fb      	ldr	r3, [r7, #12]
10008f30:	3358      	adds	r3, #88	@ 0x58
10008f32:	4618      	mov	r0, r3
10008f34:	f7ff fdc3 	bl	10008abe <metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
10008f38:	687b      	ldr	r3, [r7, #4]
10008f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
10008f40:	d008      	beq.n	10008f54 <rpmsg_unregister_endpoint+0x34>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10008f42:	68fb      	ldr	r3, [r7, #12]
10008f44:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
10008f48:	687b      	ldr	r3, [r7, #4]
10008f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10008f4c:	461a      	mov	r2, r3
10008f4e:	2180      	movs	r1, #128	@ 0x80
10008f50:	f7ff fed7 	bl	10008d02 <rpmsg_release_address>
	metal_list_del(&ept->node);
10008f54:	687b      	ldr	r3, [r7, #4]
10008f56:	3334      	adds	r3, #52	@ 0x34
10008f58:	4618      	mov	r0, r3
10008f5a:	f7ff fded 	bl	10008b38 <metal_list_del>
	ept->rdev = NULL;
10008f5e:	687b      	ldr	r3, [r7, #4]
10008f60:	2200      	movs	r2, #0
10008f62:	621a      	str	r2, [r3, #32]
	metal_mutex_release(&rdev->lock);
10008f64:	68fb      	ldr	r3, [r7, #12]
10008f66:	3358      	adds	r3, #88	@ 0x58
10008f68:	4618      	mov	r0, r3
10008f6a:	f7ff fdb3 	bl	10008ad4 <metal_mutex_release>
}
10008f6e:	bf00      	nop
10008f70:	3710      	adds	r7, #16
10008f72:	46bd      	mov	sp, r7
10008f74:	bd80      	pop	{r7, pc}

10008f76 <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
10008f76:	b580      	push	{r7, lr}
10008f78:	b082      	sub	sp, #8
10008f7a:	af00      	add	r7, sp, #0
10008f7c:	6078      	str	r0, [r7, #4]
10008f7e:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
10008f80:	683b      	ldr	r3, [r7, #0]
10008f82:	687a      	ldr	r2, [r7, #4]
10008f84:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
10008f86:	687a      	ldr	r2, [r7, #4]
10008f88:	683b      	ldr	r3, [r7, #0]
10008f8a:	3334      	adds	r3, #52	@ 0x34
10008f8c:	4619      	mov	r1, r3
10008f8e:	4610      	mov	r0, r2
10008f90:	f7ff fdc5 	bl	10008b1e <metal_list_add_tail>
}
10008f94:	bf00      	nop
10008f96:	3708      	adds	r7, #8
10008f98:	46bd      	mov	sp, r7
10008f9a:	bd80      	pop	{r7, pc}

10008f9c <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
10008f9c:	b580      	push	{r7, lr}
10008f9e:	b088      	sub	sp, #32
10008fa0:	af02      	add	r7, sp, #8
10008fa2:	60f8      	str	r0, [r7, #12]
10008fa4:	60b9      	str	r1, [r7, #8]
10008fa6:	607a      	str	r2, [r7, #4]
10008fa8:	603b      	str	r3, [r7, #0]
	int status = RPMSG_SUCCESS;
10008faa:	2300      	movs	r3, #0
10008fac:	617b      	str	r3, [r7, #20]
	uint32_t addr = src;
10008fae:	683b      	ldr	r3, [r7, #0]
10008fb0:	613b      	str	r3, [r7, #16]

	if (!ept)
10008fb2:	68fb      	ldr	r3, [r7, #12]
10008fb4:	2b00      	cmp	r3, #0
10008fb6:	d101      	bne.n	10008fbc <rpmsg_create_ept+0x20>
		return RPMSG_ERR_PARAM;
10008fb8:	4b37      	ldr	r3, [pc, #220]	@ (10009098 <rpmsg_create_ept+0xfc>)
10008fba:	e068      	b.n	1000908e <rpmsg_create_ept+0xf2>

	metal_mutex_acquire(&rdev->lock);
10008fbc:	68bb      	ldr	r3, [r7, #8]
10008fbe:	3358      	adds	r3, #88	@ 0x58
10008fc0:	4618      	mov	r0, r3
10008fc2:	f7ff fd7c 	bl	10008abe <metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
10008fc6:	683b      	ldr	r3, [r7, #0]
10008fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
10008fcc:	d10d      	bne.n	10008fea <rpmsg_create_ept+0x4e>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
10008fce:	68bb      	ldr	r3, [r7, #8]
10008fd0:	3348      	adds	r3, #72	@ 0x48
10008fd2:	2180      	movs	r1, #128	@ 0x80
10008fd4:	4618      	mov	r0, r3
10008fd6:	f7ff fe73 	bl	10008cc0 <rpmsg_get_address>
10008fda:	6138      	str	r0, [r7, #16]
		if (addr == RPMSG_ADDR_ANY) {
10008fdc:	693b      	ldr	r3, [r7, #16]
10008fde:	f1b3 3fff 	cmp.w	r3, #4294967295
10008fe2:	d11f      	bne.n	10009024 <rpmsg_create_ept+0x88>
			status = RPMSG_ERR_ADDR;
10008fe4:	4b2d      	ldr	r3, [pc, #180]	@ (1000909c <rpmsg_create_ept+0x100>)
10008fe6:	617b      	str	r3, [r7, #20]
			goto ret_status;
10008fe8:	e04b      	b.n	10009082 <rpmsg_create_ept+0xe6>
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
10008fea:	683b      	ldr	r3, [r7, #0]
10008fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
10008ff0:	d318      	bcc.n	10009024 <rpmsg_create_ept+0x88>
		status = rpmsg_is_address_set(rdev->bitmap,
10008ff2:	68bb      	ldr	r3, [r7, #8]
10008ff4:	3348      	adds	r3, #72	@ 0x48
10008ff6:	683a      	ldr	r2, [r7, #0]
10008ff8:	2180      	movs	r1, #128	@ 0x80
10008ffa:	4618      	mov	r0, r3
10008ffc:	f7ff fe9a 	bl	10008d34 <rpmsg_is_address_set>
10009000:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
10009002:	697b      	ldr	r3, [r7, #20]
10009004:	2b00      	cmp	r3, #0
10009006:	d107      	bne.n	10009018 <rpmsg_create_ept+0x7c>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10009008:	68bb      	ldr	r3, [r7, #8]
1000900a:	3348      	adds	r3, #72	@ 0x48
1000900c:	683a      	ldr	r2, [r7, #0]
1000900e:	2180      	movs	r1, #128	@ 0x80
10009010:	4618      	mov	r0, r3
10009012:	f7ff fead 	bl	10008d70 <rpmsg_set_address>
10009016:	e005      	b.n	10009024 <rpmsg_create_ept+0x88>
					  src);
		} else if (status > 0) {
10009018:	697b      	ldr	r3, [r7, #20]
1000901a:	2b00      	cmp	r3, #0
1000901c:	dd30      	ble.n	10009080 <rpmsg_create_ept+0xe4>
			status = RPMSG_ERR_ADDR;
1000901e:	4b1f      	ldr	r3, [pc, #124]	@ (1000909c <rpmsg_create_ept+0x100>)
10009020:	617b      	str	r3, [r7, #20]
			goto ret_status;
10009022:	e02e      	b.n	10009082 <rpmsg_create_ept+0xe6>
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
10009024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009026:	9301      	str	r3, [sp, #4]
10009028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000902a:	9300      	str	r3, [sp, #0]
1000902c:	6a3b      	ldr	r3, [r7, #32]
1000902e:	693a      	ldr	r2, [r7, #16]
10009030:	6879      	ldr	r1, [r7, #4]
10009032:	68f8      	ldr	r0, [r7, #12]
10009034:	f7ff fe20 	bl	10008c78 <rpmsg_initialize_ept>
	rpmsg_register_endpoint(rdev, ept);
10009038:	68f9      	ldr	r1, [r7, #12]
1000903a:	68b8      	ldr	r0, [r7, #8]
1000903c:	f7ff ff9b 	bl	10008f76 <rpmsg_register_endpoint>
	metal_mutex_release(&rdev->lock);
10009040:	68bb      	ldr	r3, [r7, #8]
10009042:	3358      	adds	r3, #88	@ 0x58
10009044:	4618      	mov	r0, r3
10009046:	f7ff fd45 	bl	10008ad4 <metal_mutex_release>

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
1000904a:	68fb      	ldr	r3, [r7, #12]
1000904c:	781b      	ldrb	r3, [r3, #0]
1000904e:	2b00      	cmp	r3, #0
10009050:	d00e      	beq.n	10009070 <rpmsg_create_ept+0xd4>
10009052:	68bb      	ldr	r3, [r7, #8]
10009054:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
10009058:	2b00      	cmp	r3, #0
1000905a:	d009      	beq.n	10009070 <rpmsg_create_ept+0xd4>
	    ept->dest_addr == RPMSG_ADDR_ANY)
1000905c:	68fb      	ldr	r3, [r7, #12]
1000905e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
	if (ept->name[0] && rdev->support_ns &&
10009060:	f1b3 3fff 	cmp.w	r3, #4294967295
10009064:	d104      	bne.n	10009070 <rpmsg_create_ept+0xd4>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
10009066:	2100      	movs	r1, #0
10009068:	68f8      	ldr	r0, [r7, #12]
1000906a:	f7ff fed1 	bl	10008e10 <rpmsg_send_ns_message>
1000906e:	6178      	str	r0, [r7, #20]

	if (status)
10009070:	697b      	ldr	r3, [r7, #20]
10009072:	2b00      	cmp	r3, #0
10009074:	d002      	beq.n	1000907c <rpmsg_create_ept+0xe0>
		rpmsg_unregister_endpoint(ept);
10009076:	68f8      	ldr	r0, [r7, #12]
10009078:	f7ff ff52 	bl	10008f20 <rpmsg_unregister_endpoint>
	return status;
1000907c:	697b      	ldr	r3, [r7, #20]
1000907e:	e006      	b.n	1000908e <rpmsg_create_ept+0xf2>
			goto ret_status;
10009080:	bf00      	nop

ret_status:
	metal_mutex_release(&rdev->lock);
10009082:	68bb      	ldr	r3, [r7, #8]
10009084:	3358      	adds	r3, #88	@ 0x58
10009086:	4618      	mov	r0, r3
10009088:	f7ff fd24 	bl	10008ad4 <metal_mutex_release>
	return status;
1000908c:	697b      	ldr	r3, [r7, #20]
}
1000908e:	4618      	mov	r0, r3
10009090:	3718      	adds	r7, #24
10009092:	46bd      	mov	sp, r7
10009094:	bd80      	pop	{r7, pc}
10009096:	bf00      	nop
10009098:	fffff82d 	.word	0xfffff82d
1000909c:	fffff829 	.word	0xfffff829

100090a0 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
100090a0:	b480      	push	{r7}
100090a2:	b083      	sub	sp, #12
100090a4:	af00      	add	r7, sp, #0
100090a6:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
100090a8:	2300      	movs	r3, #0
}
100090aa:	4618      	mov	r0, r3
100090ac:	370c      	adds	r7, #12
100090ae:	46bd      	mov	sp, r7
100090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
100090b4:	4770      	bx	lr

100090b6 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
100090b6:	b580      	push	{r7, lr}
100090b8:	b082      	sub	sp, #8
100090ba:	af00      	add	r7, sp, #0
100090bc:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
100090be:	6878      	ldr	r0, [r7, #4]
100090c0:	f7ff ffee 	bl	100090a0 <__metal_sleep_usec>
100090c4:	4603      	mov	r3, r0
}
100090c6:	4618      	mov	r0, r3
100090c8:	3708      	adds	r7, #8
100090ca:	46bd      	mov	sp, r7
100090cc:	bd80      	pop	{r7, pc}

100090ce <metal_list_init>:
{
100090ce:	b480      	push	{r7}
100090d0:	b083      	sub	sp, #12
100090d2:	af00      	add	r7, sp, #0
100090d4:	6078      	str	r0, [r7, #4]
	list->prev = list;
100090d6:	687b      	ldr	r3, [r7, #4]
100090d8:	687a      	ldr	r2, [r7, #4]
100090da:	605a      	str	r2, [r3, #4]
	list->next = list;
100090dc:	687b      	ldr	r3, [r7, #4]
100090de:	687a      	ldr	r2, [r7, #4]
100090e0:	601a      	str	r2, [r3, #0]
}
100090e2:	bf00      	nop
100090e4:	370c      	adds	r7, #12
100090e6:	46bd      	mov	sp, r7
100090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100090ec:	4770      	bx	lr

100090ee <metal_io_virt_to_offset>:
{
100090ee:	b480      	push	{r7}
100090f0:	b085      	sub	sp, #20
100090f2:	af00      	add	r7, sp, #0
100090f4:	6078      	str	r0, [r7, #4]
100090f6:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
100090f8:	683b      	ldr	r3, [r7, #0]
100090fa:	687a      	ldr	r2, [r7, #4]
100090fc:	6812      	ldr	r2, [r2, #0]
100090fe:	1a9b      	subs	r3, r3, r2
10009100:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10009102:	687b      	ldr	r3, [r7, #4]
10009104:	689b      	ldr	r3, [r3, #8]
10009106:	68fa      	ldr	r2, [r7, #12]
10009108:	429a      	cmp	r2, r3
1000910a:	d201      	bcs.n	10009110 <metal_io_virt_to_offset+0x22>
1000910c:	68fb      	ldr	r3, [r7, #12]
1000910e:	e001      	b.n	10009114 <metal_io_virt_to_offset+0x26>
10009110:	f04f 33ff 	mov.w	r3, #4294967295
}
10009114:	4618      	mov	r0, r3
10009116:	3714      	adds	r7, #20
10009118:	46bd      	mov	sp, r7
1000911a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000911e:	4770      	bx	lr

10009120 <__metal_mutex_init>:
{
10009120:	b480      	push	{r7}
10009122:	b085      	sub	sp, #20
10009124:	af00      	add	r7, sp, #0
10009126:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10009128:	687b      	ldr	r3, [r7, #4]
1000912a:	60fb      	str	r3, [r7, #12]
1000912c:	2300      	movs	r3, #0
1000912e:	60bb      	str	r3, [r7, #8]
10009130:	68bb      	ldr	r3, [r7, #8]
10009132:	461a      	mov	r2, r3
10009134:	68fb      	ldr	r3, [r7, #12]
10009136:	f3bf 8f5b 	dmb	ish
1000913a:	601a      	str	r2, [r3, #0]
1000913c:	f3bf 8f5b 	dmb	ish
}
10009140:	bf00      	nop
10009142:	3714      	adds	r7, #20
10009144:	46bd      	mov	sp, r7
10009146:	f85d 7b04 	ldr.w	r7, [sp], #4
1000914a:	4770      	bx	lr

1000914c <__metal_mutex_acquire>:
{
1000914c:	b490      	push	{r4, r7}
1000914e:	b086      	sub	sp, #24
10009150:	af00      	add	r7, sp, #0
10009152:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
10009154:	2300      	movs	r3, #0
10009156:	613b      	str	r3, [r7, #16]
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10009158:	bf00      	nop
1000915a:	687b      	ldr	r3, [r7, #4]
1000915c:	617b      	str	r3, [r7, #20]
1000915e:	2301      	movs	r3, #1
10009160:	60fb      	str	r3, [r7, #12]
10009162:	68fb      	ldr	r3, [r7, #12]
10009164:	461c      	mov	r4, r3
10009166:	697a      	ldr	r2, [r7, #20]
10009168:	f107 0310 	add.w	r3, r7, #16
1000916c:	6818      	ldr	r0, [r3, #0]
1000916e:	f3bf 8f5b 	dmb	ish
10009172:	e852 1f00 	ldrex	r1, [r2]
10009176:	4281      	cmp	r1, r0
10009178:	d103      	bne.n	10009182 <__metal_mutex_acquire+0x36>
1000917a:	e842 4c00 	strex	ip, r4, [r2]
1000917e:	f1bc 0f00 	cmp.w	ip, #0
10009182:	f3bf 8f5b 	dmb	ish
10009186:	bf0c      	ite	eq
10009188:	2201      	moveq	r2, #1
1000918a:	2200      	movne	r2, #0
1000918c:	2a00      	cmp	r2, #0
1000918e:	d100      	bne.n	10009192 <__metal_mutex_acquire+0x46>
10009190:	6019      	str	r1, [r3, #0]
10009192:	4613      	mov	r3, r2
10009194:	f083 0301 	eor.w	r3, r3, #1
10009198:	b2db      	uxtb	r3, r3
1000919a:	2b00      	cmp	r3, #0
1000919c:	d1dd      	bne.n	1000915a <__metal_mutex_acquire+0xe>
}
1000919e:	bf00      	nop
100091a0:	bf00      	nop
100091a2:	3718      	adds	r7, #24
100091a4:	46bd      	mov	sp, r7
100091a6:	bc90      	pop	{r4, r7}
100091a8:	4770      	bx	lr

100091aa <__metal_mutex_release>:
{
100091aa:	b480      	push	{r7}
100091ac:	b085      	sub	sp, #20
100091ae:	af00      	add	r7, sp, #0
100091b0:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
100091b2:	687b      	ldr	r3, [r7, #4]
100091b4:	60fb      	str	r3, [r7, #12]
100091b6:	2300      	movs	r3, #0
100091b8:	60bb      	str	r3, [r7, #8]
100091ba:	68bb      	ldr	r3, [r7, #8]
100091bc:	461a      	mov	r2, r3
100091be:	68fb      	ldr	r3, [r7, #12]
100091c0:	f3bf 8f5b 	dmb	ish
100091c4:	601a      	str	r2, [r3, #0]
100091c6:	f3bf 8f5b 	dmb	ish
}
100091ca:	bf00      	nop
100091cc:	3714      	adds	r7, #20
100091ce:	46bd      	mov	sp, r7
100091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
100091d4:	4770      	bx	lr

100091d6 <metal_mutex_init>:
{
100091d6:	b580      	push	{r7, lr}
100091d8:	b082      	sub	sp, #8
100091da:	af00      	add	r7, sp, #0
100091dc:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
100091de:	6878      	ldr	r0, [r7, #4]
100091e0:	f7ff ff9e 	bl	10009120 <__metal_mutex_init>
}
100091e4:	bf00      	nop
100091e6:	3708      	adds	r7, #8
100091e8:	46bd      	mov	sp, r7
100091ea:	bd80      	pop	{r7, pc}

100091ec <metal_mutex_acquire>:
{
100091ec:	b580      	push	{r7, lr}
100091ee:	b082      	sub	sp, #8
100091f0:	af00      	add	r7, sp, #0
100091f2:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
100091f4:	6878      	ldr	r0, [r7, #4]
100091f6:	f7ff ffa9 	bl	1000914c <__metal_mutex_acquire>
}
100091fa:	bf00      	nop
100091fc:	3708      	adds	r7, #8
100091fe:	46bd      	mov	sp, r7
10009200:	bd80      	pop	{r7, pc}

10009202 <metal_mutex_release>:
{
10009202:	b580      	push	{r7, lr}
10009204:	b082      	sub	sp, #8
10009206:	af00      	add	r7, sp, #0
10009208:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
1000920a:	6878      	ldr	r0, [r7, #4]
1000920c:	f7ff ffcd 	bl	100091aa <__metal_mutex_release>
}
10009210:	bf00      	nop
10009212:	3708      	adds	r7, #8
10009214:	46bd      	mov	sp, r7
10009216:	bd80      	pop	{r7, pc}

10009218 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
10009218:	b480      	push	{r7}
1000921a:	b083      	sub	sp, #12
1000921c:	af00      	add	r7, sp, #0
1000921e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
10009220:	687b      	ldr	r3, [r7, #4]
10009222:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10009224:	699b      	ldr	r3, [r3, #24]
}
10009226:	4618      	mov	r0, r3
10009228:	370c      	adds	r7, #12
1000922a:	46bd      	mov	sp, r7
1000922c:	f85d 7b04 	ldr.w	r7, [sp], #4
10009230:	4770      	bx	lr

10009232 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
10009232:	b580      	push	{r7, lr}
10009234:	b082      	sub	sp, #8
10009236:	af00      	add	r7, sp, #0
10009238:	6078      	str	r0, [r7, #4]
1000923a:	460b      	mov	r3, r1
1000923c:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
1000923e:	687b      	ldr	r3, [r7, #4]
10009240:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10009242:	6a1b      	ldr	r3, [r3, #32]
10009244:	685b      	ldr	r3, [r3, #4]
10009246:	687a      	ldr	r2, [r7, #4]
10009248:	6f92      	ldr	r2, [r2, #120]	@ 0x78
1000924a:	78f9      	ldrb	r1, [r7, #3]
1000924c:	4610      	mov	r0, r2
1000924e:	4798      	blx	r3
}
10009250:	bf00      	nop
10009252:	3708      	adds	r7, #8
10009254:	46bd      	mov	sp, r7
10009256:	bd80      	pop	{r7, pc}

10009258 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
10009258:	b580      	push	{r7, lr}
1000925a:	b082      	sub	sp, #8
1000925c:	af00      	add	r7, sp, #0
1000925e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
10009260:	687b      	ldr	r3, [r7, #4]
10009262:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10009264:	6a1b      	ldr	r3, [r3, #32]
10009266:	681b      	ldr	r3, [r3, #0]
10009268:	687a      	ldr	r2, [r7, #4]
1000926a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
1000926c:	4610      	mov	r0, r2
1000926e:	4798      	blx	r3
10009270:	4603      	mov	r3, r0
}
10009272:	4618      	mov	r0, r3
10009274:	3708      	adds	r7, #8
10009276:	46bd      	mov	sp, r7
10009278:	bd80      	pop	{r7, pc}

1000927a <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
1000927a:	b580      	push	{r7, lr}
1000927c:	b082      	sub	sp, #8
1000927e:	af00      	add	r7, sp, #0
10009280:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
10009282:	687b      	ldr	r3, [r7, #4]
10009284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
10009286:	6a1b      	ldr	r3, [r3, #32]
10009288:	689b      	ldr	r3, [r3, #8]
1000928a:	687a      	ldr	r2, [r7, #4]
1000928c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
1000928e:	4610      	mov	r0, r2
10009290:	4798      	blx	r3
10009292:	4603      	mov	r3, r0
}
10009294:	4618      	mov	r0, r3
10009296:	3708      	adds	r7, #8
10009298:	46bd      	mov	sp, r7
1000929a:	bd80      	pop	{r7, pc}

1000929c <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
1000929c:	b580      	push	{r7, lr}
1000929e:	b086      	sub	sp, #24
100092a0:	af02      	add	r7, sp, #8
100092a2:	60f8      	str	r0, [r7, #12]
100092a4:	60b9      	str	r1, [r7, #8]
100092a6:	607a      	str	r2, [r7, #4]
100092a8:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
100092aa:	68fb      	ldr	r3, [r7, #12]
100092ac:	6f98      	ldr	r0, [r3, #120]	@ 0x78
100092ae:	68b9      	ldr	r1, [r7, #8]
100092b0:	69bb      	ldr	r3, [r7, #24]
100092b2:	9300      	str	r3, [sp, #0]
100092b4:	683b      	ldr	r3, [r7, #0]
100092b6:	687a      	ldr	r2, [r7, #4]
100092b8:	f000 fc06 	bl	10009ac8 <virtio_create_virtqueues>
100092bc:	4603      	mov	r3, r0
					callbacks);
}
100092be:	4618      	mov	r0, r3
100092c0:	3710      	adds	r7, #16
100092c2:	46bd      	mov	sp, r7
100092c4:	bd80      	pop	{r7, pc}
	...

100092c8 <rpmsg_initialize_ept>:
{
100092c8:	b580      	push	{r7, lr}
100092ca:	b084      	sub	sp, #16
100092cc:	af00      	add	r7, sp, #0
100092ce:	60f8      	str	r0, [r7, #12]
100092d0:	60b9      	str	r1, [r7, #8]
100092d2:	607a      	str	r2, [r7, #4]
100092d4:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
100092d6:	68f8      	ldr	r0, [r7, #12]
100092d8:	68bb      	ldr	r3, [r7, #8]
100092da:	2b00      	cmp	r3, #0
100092dc:	d001      	beq.n	100092e2 <rpmsg_initialize_ept+0x1a>
100092de:	68bb      	ldr	r3, [r7, #8]
100092e0:	e000      	b.n	100092e4 <rpmsg_initialize_ept+0x1c>
100092e2:	4b0a      	ldr	r3, [pc, #40]	@ (1000930c <rpmsg_initialize_ept+0x44>)
100092e4:	2220      	movs	r2, #32
100092e6:	4619      	mov	r1, r3
100092e8:	f001 f97f 	bl	1000a5ea <strncpy>
	ept->addr = src;
100092ec:	68fb      	ldr	r3, [r7, #12]
100092ee:	687a      	ldr	r2, [r7, #4]
100092f0:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
100092f2:	68fb      	ldr	r3, [r7, #12]
100092f4:	683a      	ldr	r2, [r7, #0]
100092f6:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
100092f8:	68fb      	ldr	r3, [r7, #12]
100092fa:	69ba      	ldr	r2, [r7, #24]
100092fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
100092fe:	68fb      	ldr	r3, [r7, #12]
10009300:	69fa      	ldr	r2, [r7, #28]
10009302:	631a      	str	r2, [r3, #48]	@ 0x30
}
10009304:	bf00      	nop
10009306:	3710      	adds	r7, #16
10009308:	46bd      	mov	sp, r7
1000930a:	bd80      	pop	{r7, pc}
1000930c:	1000b650 	.word	0x1000b650

10009310 <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
10009310:	b580      	push	{r7, lr}
10009312:	b082      	sub	sp, #8
10009314:	af00      	add	r7, sp, #0
10009316:	6078      	str	r0, [r7, #4]
10009318:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
1000931a:	f04f 33ff 	mov.w	r3, #4294967295
1000931e:	683a      	ldr	r2, [r7, #0]
10009320:	2100      	movs	r1, #0
10009322:	6878      	ldr	r0, [r7, #4]
10009324:	f7ff fd9c 	bl	10008e60 <rpmsg_get_endpoint>
10009328:	4603      	mov	r3, r0
}
1000932a:	4618      	mov	r0, r3
1000932c:	3708      	adds	r7, #8
1000932e:	46bd      	mov	sp, r7
10009330:	bd80      	pop	{r7, pc}

10009332 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
10009332:	b480      	push	{r7}
10009334:	b085      	sub	sp, #20
10009336:	af00      	add	r7, sp, #0
10009338:	60f8      	str	r0, [r7, #12]
1000933a:	60b9      	str	r1, [r7, #8]
1000933c:	607a      	str	r2, [r7, #4]
	if (!shpool)
1000933e:	68fb      	ldr	r3, [r7, #12]
10009340:	2b00      	cmp	r3, #0
10009342:	d009      	beq.n	10009358 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
10009344:	68fb      	ldr	r3, [r7, #12]
10009346:	68ba      	ldr	r2, [r7, #8]
10009348:	601a      	str	r2, [r3, #0]
	shpool->size = size;
1000934a:	68fb      	ldr	r3, [r7, #12]
1000934c:	687a      	ldr	r2, [r7, #4]
1000934e:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
10009350:	68fb      	ldr	r3, [r7, #12]
10009352:	687a      	ldr	r2, [r7, #4]
10009354:	605a      	str	r2, [r3, #4]
10009356:	e000      	b.n	1000935a <rpmsg_virtio_init_shm_pool+0x28>
		return;
10009358:	bf00      	nop
}
1000935a:	3714      	adds	r7, #20
1000935c:	46bd      	mov	sp, r7
1000935e:	f85d 7b04 	ldr.w	r7, [sp], #4
10009362:	4770      	bx	lr

10009364 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
10009364:	b580      	push	{r7, lr}
10009366:	b086      	sub	sp, #24
10009368:	af00      	add	r7, sp, #0
1000936a:	60f8      	str	r0, [r7, #12]
1000936c:	60b9      	str	r1, [r7, #8]
1000936e:	607a      	str	r2, [r7, #4]
10009370:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10009372:	68f8      	ldr	r0, [r7, #12]
10009374:	f7ff ff50 	bl	10009218 <rpmsg_virtio_get_role>
10009378:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000937a:	697b      	ldr	r3, [r7, #20]
1000937c:	2b01      	cmp	r3, #1
1000937e:	d106      	bne.n	1000938e <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
10009380:	68fb      	ldr	r3, [r7, #12]
10009382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10009384:	8879      	ldrh	r1, [r7, #2]
10009386:	687a      	ldr	r2, [r7, #4]
10009388:	4618      	mov	r0, r3
1000938a:	f000 fd6f 	bl	10009e6c <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
1000938e:	bf00      	nop
10009390:	3718      	adds	r7, #24
10009392:	46bd      	mov	sp, r7
10009394:	bd80      	pop	{r7, pc}

10009396 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
10009396:	b580      	push	{r7, lr}
10009398:	b086      	sub	sp, #24
1000939a:	af00      	add	r7, sp, #0
1000939c:	60f8      	str	r0, [r7, #12]
1000939e:	60b9      	str	r1, [r7, #8]
100093a0:	607a      	str	r2, [r7, #4]
100093a2:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
100093a4:	68f8      	ldr	r0, [r7, #12]
100093a6:	f7ff ff37 	bl	10009218 <rpmsg_virtio_get_role>
100093aa:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100093ac:	697b      	ldr	r3, [r7, #20]
100093ae:	2b01      	cmp	r3, #1
100093b0:	d109      	bne.n	100093c6 <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
100093b2:	68fb      	ldr	r3, [r7, #12]
100093b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100093b8:	8879      	ldrh	r1, [r7, #2]
100093ba:	687a      	ldr	r2, [r7, #4]
100093bc:	4618      	mov	r0, r3
100093be:	f000 fd55 	bl	10009e6c <virtqueue_add_consumed_buffer>
100093c2:	4603      	mov	r3, r0
100093c4:	e000      	b.n	100093c8 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
100093c6:	2300      	movs	r3, #0
}
100093c8:	4618      	mov	r0, r3
100093ca:	3718      	adds	r7, #24
100093cc:	46bd      	mov	sp, r7
100093ce:	bd80      	pop	{r7, pc}

100093d0 <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
100093d0:	b580      	push	{r7, lr}
100093d2:	b086      	sub	sp, #24
100093d4:	af00      	add	r7, sp, #0
100093d6:	60f8      	str	r0, [r7, #12]
100093d8:	60b9      	str	r1, [r7, #8]
100093da:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
100093dc:	68f8      	ldr	r0, [r7, #12]
100093de:	f7ff ff1b 	bl	10009218 <rpmsg_virtio_get_role>
100093e2:	6138      	str	r0, [r7, #16]
	void *data = NULL;
100093e4:	2300      	movs	r3, #0
100093e6:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100093e8:	693b      	ldr	r3, [r7, #16]
100093ea:	2b01      	cmp	r3, #1
100093ec:	d108      	bne.n	10009400 <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
100093ee:	68fb      	ldr	r3, [r7, #12]
100093f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100093f4:	68ba      	ldr	r2, [r7, #8]
100093f6:	6879      	ldr	r1, [r7, #4]
100093f8:	4618      	mov	r0, r3
100093fa:	f000 fcef 	bl	10009ddc <virtqueue_get_available_buffer>
100093fe:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
10009400:	697b      	ldr	r3, [r7, #20]
}
10009402:	4618      	mov	r0, r3
10009404:	3718      	adds	r7, #24
10009406:	46bd      	mov	sp, r7
10009408:	bd80      	pop	{r7, pc}

1000940a <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000940a:	b580      	push	{r7, lr}
1000940c:	b086      	sub	sp, #24
1000940e:	af00      	add	r7, sp, #0
10009410:	60f8      	str	r0, [r7, #12]
10009412:	60b9      	str	r1, [r7, #8]
10009414:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
10009416:	68f8      	ldr	r0, [r7, #12]
10009418:	f7ff fefe 	bl	10009218 <rpmsg_virtio_get_role>
1000941c:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000941e:	2300      	movs	r3, #0
10009420:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
10009422:	693b      	ldr	r3, [r7, #16]
10009424:	2b01      	cmp	r3, #1
10009426:	d107      	bne.n	10009438 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
10009428:	68fb      	ldr	r3, [r7, #12]
1000942a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1000942c:	68ba      	ldr	r2, [r7, #8]
1000942e:	6879      	ldr	r1, [r7, #4]
10009430:	4618      	mov	r0, r3
10009432:	f000 fcd3 	bl	10009ddc <virtqueue_get_available_buffer>
10009436:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
10009438:	697b      	ldr	r3, [r7, #20]
}
1000943a:	4618      	mov	r0, r3
1000943c:	3718      	adds	r7, #24
1000943e:	46bd      	mov	sp, r7
10009440:	bd80      	pop	{r7, pc}

10009442 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
10009442:	b580      	push	{r7, lr}
10009444:	b084      	sub	sp, #16
10009446:	af00      	add	r7, sp, #0
10009448:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
1000944a:	6878      	ldr	r0, [r7, #4]
1000944c:	f7ff ff04 	bl	10009258 <rpmsg_virtio_get_status>
10009450:	4603      	mov	r3, r0
10009452:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
10009454:	7bfb      	ldrb	r3, [r7, #15]
10009456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
1000945a:	2b00      	cmp	r3, #0
1000945c:	d004      	beq.n	10009468 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
1000945e:	2100      	movs	r1, #0
10009460:	6878      	ldr	r0, [r7, #4]
10009462:	f7ff fee6 	bl	10009232 <rpmsg_virtio_set_status>
10009466:	e7f0      	b.n	1000944a <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
10009468:	7bfb      	ldrb	r3, [r7, #15]
1000946a:	f003 0304 	and.w	r3, r3, #4
1000946e:	2b00      	cmp	r3, #0
10009470:	d0eb      	beq.n	1000944a <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
10009472:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
10009474:	4618      	mov	r0, r3
10009476:	3710      	adds	r7, #16
10009478:	46bd      	mov	sp, r7
1000947a:	bd80      	pop	{r7, pc}

1000947c <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
1000947c:	b480      	push	{r7}
1000947e:	b085      	sub	sp, #20
10009480:	af00      	add	r7, sp, #0
10009482:	6078      	str	r0, [r7, #4]
10009484:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
10009486:	683b      	ldr	r3, [r7, #0]
10009488:	3b10      	subs	r3, #16
1000948a:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
1000948c:	68fb      	ldr	r3, [r7, #12]
1000948e:	689b      	ldr	r3, [r3, #8]
10009490:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
10009494:	68fb      	ldr	r3, [r7, #12]
10009496:	609a      	str	r2, [r3, #8]
}
10009498:	bf00      	nop
1000949a:	3714      	adds	r7, #20
1000949c:	46bd      	mov	sp, r7
1000949e:	f85d 7b04 	ldr.w	r7, [sp], #4
100094a2:	4770      	bx	lr

100094a4 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
100094a4:	b580      	push	{r7, lr}
100094a6:	b086      	sub	sp, #24
100094a8:	af00      	add	r7, sp, #0
100094aa:	6078      	str	r0, [r7, #4]
100094ac:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
100094ae:	687b      	ldr	r3, [r7, #4]
100094b0:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
100094b2:	683b      	ldr	r3, [r7, #0]
100094b4:	3b10      	subs	r3, #16
100094b6:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
100094b8:	693b      	ldr	r3, [r7, #16]
100094ba:	689b      	ldr	r3, [r3, #8]
100094bc:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
100094be:	687b      	ldr	r3, [r7, #4]
100094c0:	3358      	adds	r3, #88	@ 0x58
100094c2:	4618      	mov	r0, r3
100094c4:	f7ff fe92 	bl	100091ec <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
100094c8:	697b      	ldr	r3, [r7, #20]
100094ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
100094cc:	89fa      	ldrh	r2, [r7, #14]
100094ce:	4611      	mov	r1, r2
100094d0:	4618      	mov	r0, r3
100094d2:	f000 fc71 	bl	10009db8 <virtqueue_get_buffer_length>
100094d6:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
100094d8:	89fb      	ldrh	r3, [r7, #14]
100094da:	68ba      	ldr	r2, [r7, #8]
100094dc:	6939      	ldr	r1, [r7, #16]
100094de:	6978      	ldr	r0, [r7, #20]
100094e0:	f7ff ff40 	bl	10009364 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
100094e4:	687b      	ldr	r3, [r7, #4]
100094e6:	3358      	adds	r3, #88	@ 0x58
100094e8:	4618      	mov	r0, r3
100094ea:	f7ff fe8a 	bl	10009202 <metal_mutex_release>
}
100094ee:	bf00      	nop
100094f0:	3718      	adds	r7, #24
100094f2:	46bd      	mov	sp, r7
100094f4:	bd80      	pop	{r7, pc}

100094f6 <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
100094f6:	b580      	push	{r7, lr}
100094f8:	b08a      	sub	sp, #40	@ 0x28
100094fa:	af00      	add	r7, sp, #0
100094fc:	60f8      	str	r0, [r7, #12]
100094fe:	60b9      	str	r1, [r7, #8]
10009500:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10009502:	68fb      	ldr	r3, [r7, #12]
10009504:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
10009506:	6a38      	ldr	r0, [r7, #32]
10009508:	f7ff fea6 	bl	10009258 <rpmsg_virtio_get_status>
1000950c:	4603      	mov	r3, r0
1000950e:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
10009510:	69fb      	ldr	r3, [r7, #28]
10009512:	f003 0304 	and.w	r3, r3, #4
10009516:	2b00      	cmp	r3, #0
10009518:	d101      	bne.n	1000951e <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
1000951a:	2300      	movs	r3, #0
1000951c:	e039      	b.n	10009592 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
1000951e:	687b      	ldr	r3, [r7, #4]
10009520:	2b00      	cmp	r3, #0
10009522:	d003      	beq.n	1000952c <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
10009524:	f643 2398 	movw	r3, #15000	@ 0x3a98
10009528:	627b      	str	r3, [r7, #36]	@ 0x24
1000952a:	e001      	b.n	10009530 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
1000952c:	2300      	movs	r3, #0
1000952e:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
10009530:	68fb      	ldr	r3, [r7, #12]
10009532:	3358      	adds	r3, #88	@ 0x58
10009534:	4618      	mov	r0, r3
10009536:	f7ff fe59 	bl	100091ec <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
1000953a:	f107 0316 	add.w	r3, r7, #22
1000953e:	461a      	mov	r2, r3
10009540:	68b9      	ldr	r1, [r7, #8]
10009542:	6a38      	ldr	r0, [r7, #32]
10009544:	f7ff ff44 	bl	100093d0 <rpmsg_virtio_get_tx_buffer>
10009548:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
1000954a:	68fb      	ldr	r3, [r7, #12]
1000954c:	3358      	adds	r3, #88	@ 0x58
1000954e:	4618      	mov	r0, r3
10009550:	f7ff fe57 	bl	10009202 <metal_mutex_release>
		if (rp_hdr || !tick_count)
10009554:	69bb      	ldr	r3, [r7, #24]
10009556:	2b00      	cmp	r3, #0
10009558:	d10a      	bne.n	10009570 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
1000955a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000955c:	2b00      	cmp	r3, #0
1000955e:	d007      	beq.n	10009570 <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
10009560:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10009564:	f7ff fda7 	bl	100090b6 <metal_sleep_usec>
		tick_count--;
10009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000956a:	3b01      	subs	r3, #1
1000956c:	627b      	str	r3, [r7, #36]	@ 0x24
		metal_mutex_acquire(&rdev->lock);
1000956e:	e7df      	b.n	10009530 <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
10009570:	69bb      	ldr	r3, [r7, #24]
10009572:	2b00      	cmp	r3, #0
10009574:	d101      	bne.n	1000957a <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
10009576:	2300      	movs	r3, #0
10009578:	e00b      	b.n	10009592 <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
1000957a:	8afb      	ldrh	r3, [r7, #22]
1000957c:	461a      	mov	r2, r3
1000957e:	69bb      	ldr	r3, [r7, #24]
10009580:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
10009582:	68bb      	ldr	r3, [r7, #8]
10009584:	681b      	ldr	r3, [r3, #0]
10009586:	f1a3 0210 	sub.w	r2, r3, #16
1000958a:	68bb      	ldr	r3, [r7, #8]
1000958c:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
1000958e:	69bb      	ldr	r3, [r7, #24]
10009590:	3310      	adds	r3, #16
}
10009592:	4618      	mov	r0, r3
10009594:	3728      	adds	r7, #40	@ 0x28
10009596:	46bd      	mov	sp, r7
10009598:	bd80      	pop	{r7, pc}
	...

1000959c <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
1000959c:	b580      	push	{r7, lr}
1000959e:	b08e      	sub	sp, #56	@ 0x38
100095a0:	af00      	add	r7, sp, #0
100095a2:	60f8      	str	r0, [r7, #12]
100095a4:	60b9      	str	r1, [r7, #8]
100095a6:	607a      	str	r2, [r7, #4]
100095a8:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
100095aa:	68fb      	ldr	r3, [r7, #12]
100095ac:	637b      	str	r3, [r7, #52]	@ 0x34

	hdr = RPMSG_LOCATE_HDR(data);
100095ae:	683b      	ldr	r3, [r7, #0]
100095b0:	3b10      	subs	r3, #16
100095b2:	633b      	str	r3, [r7, #48]	@ 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
100095b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100095b6:	689b      	ldr	r3, [r3, #8]
100095b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
100095ba:	687b      	ldr	r3, [r7, #4]
100095bc:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
100095be:	68bb      	ldr	r3, [r7, #8]
100095c0:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
100095c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100095c4:	b29b      	uxth	r3, r3
100095c6:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
100095c8:	2300      	movs	r3, #0
100095ca:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
100095cc:	2300      	movs	r3, #0
100095ce:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
100095d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100095d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100095d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
100095d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
100095da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
100095dc:	f7ff fd87 	bl	100090ee <metal_io_virt_to_offset>
100095e0:	4601      	mov	r1, r0
100095e2:	f107 0210 	add.w	r2, r7, #16
100095e6:	2310      	movs	r3, #16
100095e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
100095ea:	f7fe fe1b 	bl	10008224 <metal_io_block_write>
100095ee:	6278      	str	r0, [r7, #36]	@ 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
100095f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100095f2:	2b10      	cmp	r3, #16
100095f4:	d006      	beq.n	10009604 <rpmsg_virtio_send_offchannel_nocopy+0x68>
100095f6:	4b1b      	ldr	r3, [pc, #108]	@ (10009664 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
100095f8:	4a1b      	ldr	r2, [pc, #108]	@ (10009668 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
100095fa:	f240 117d 	movw	r1, #381	@ 0x17d
100095fe:	481b      	ldr	r0, [pc, #108]	@ (1000966c <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
10009600:	f000 fdd4 	bl	1000a1ac <__assert_func>

	metal_mutex_acquire(&rdev->lock);
10009604:	68fb      	ldr	r3, [r7, #12]
10009606:	3358      	adds	r3, #88	@ 0x58
10009608:	4618      	mov	r0, r3
1000960a:	f7ff fdef 	bl	100091ec <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
1000960e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10009610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10009614:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
10009616:	4611      	mov	r1, r2
10009618:	4618      	mov	r0, r3
1000961a:	f000 fbcd 	bl	10009db8 <virtqueue_get_buffer_length>
1000961e:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
10009620:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
10009622:	6a3a      	ldr	r2, [r7, #32]
10009624:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10009626:	6b78      	ldr	r0, [r7, #52]	@ 0x34
10009628:	f7ff feb5 	bl	10009396 <rpmsg_virtio_enqueue_buffer>
1000962c:	6278      	str	r0, [r7, #36]	@ 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
1000962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009630:	2b00      	cmp	r3, #0
10009632:	d006      	beq.n	10009642 <rpmsg_virtio_send_offchannel_nocopy+0xa6>
10009634:	4b0e      	ldr	r3, [pc, #56]	@ (10009670 <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
10009636:	4a0c      	ldr	r2, [pc, #48]	@ (10009668 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
10009638:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
1000963c:	480b      	ldr	r0, [pc, #44]	@ (1000966c <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000963e:	f000 fdb5 	bl	1000a1ac <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
10009642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10009644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10009648:	4618      	mov	r0, r3
1000964a:	f000 fc89 	bl	10009f60 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
1000964e:	68fb      	ldr	r3, [r7, #12]
10009650:	3358      	adds	r3, #88	@ 0x58
10009652:	4618      	mov	r0, r3
10009654:	f7ff fdd5 	bl	10009202 <metal_mutex_release>

	return len;
10009658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
1000965a:	4618      	mov	r0, r3
1000965c:	3738      	adds	r7, #56	@ 0x38
1000965e:	46bd      	mov	sp, r7
10009660:	bd80      	pop	{r7, pc}
10009662:	bf00      	nop
10009664:	1000b654 	.word	0x1000b654
10009668:	1000d6fc 	.word	0x1000d6fc
1000966c:	1000b670 	.word	0x1000b670
10009670:	1000b6fc 	.word	0x1000b6fc

10009674 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
10009674:	b580      	push	{r7, lr}
10009676:	b08c      	sub	sp, #48	@ 0x30
10009678:	af02      	add	r7, sp, #8
1000967a:	60f8      	str	r0, [r7, #12]
1000967c:	60b9      	str	r1, [r7, #8]
1000967e:	607a      	str	r2, [r7, #4]
10009680:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
10009682:	68fb      	ldr	r3, [r7, #12]
10009684:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
10009686:	f107 0314 	add.w	r3, r7, #20
1000968a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000968c:	4619      	mov	r1, r3
1000968e:	68f8      	ldr	r0, [r7, #12]
10009690:	f7ff ff31 	bl	100094f6 <rpmsg_virtio_get_tx_payload_buffer>
10009694:	6238      	str	r0, [r7, #32]
	if (!buffer)
10009696:	6a3b      	ldr	r3, [r7, #32]
10009698:	2b00      	cmp	r3, #0
1000969a:	d101      	bne.n	100096a0 <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
1000969c:	4b17      	ldr	r3, [pc, #92]	@ (100096fc <rpmsg_virtio_send_offchannel_raw+0x88>)
1000969e:	e029      	b.n	100096f4 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
100096a0:	697b      	ldr	r3, [r7, #20]
100096a2:	461a      	mov	r2, r3
100096a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100096a6:	4293      	cmp	r3, r2
100096a8:	dd01      	ble.n	100096ae <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
100096aa:	697b      	ldr	r3, [r7, #20]
100096ac:	633b      	str	r3, [r7, #48]	@ 0x30
	io = rvdev->shbuf_io;
100096ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100096b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
100096b4:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
100096b6:	6a39      	ldr	r1, [r7, #32]
100096b8:	69f8      	ldr	r0, [r7, #28]
100096ba:	f7ff fd18 	bl	100090ee <metal_io_virt_to_offset>
100096be:	4601      	mov	r1, r0
100096c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100096c2:	683a      	ldr	r2, [r7, #0]
100096c4:	69f8      	ldr	r0, [r7, #28]
100096c6:	f7fe fdad 	bl	10008224 <metal_io_block_write>
100096ca:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
100096cc:	69ba      	ldr	r2, [r7, #24]
100096ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100096d0:	429a      	cmp	r2, r3
100096d2:	d006      	beq.n	100096e2 <rpmsg_virtio_send_offchannel_raw+0x6e>
100096d4:	4b0a      	ldr	r3, [pc, #40]	@ (10009700 <rpmsg_virtio_send_offchannel_raw+0x8c>)
100096d6:	4a0b      	ldr	r2, [pc, #44]	@ (10009704 <rpmsg_virtio_send_offchannel_raw+0x90>)
100096d8:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
100096dc:	480a      	ldr	r0, [pc, #40]	@ (10009708 <rpmsg_virtio_send_offchannel_raw+0x94>)
100096de:	f000 fd65 	bl	1000a1ac <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
100096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100096e4:	9300      	str	r3, [sp, #0]
100096e6:	6a3b      	ldr	r3, [r7, #32]
100096e8:	687a      	ldr	r2, [r7, #4]
100096ea:	68b9      	ldr	r1, [r7, #8]
100096ec:	68f8      	ldr	r0, [r7, #12]
100096ee:	f7ff ff55 	bl	1000959c <rpmsg_virtio_send_offchannel_nocopy>
100096f2:	4603      	mov	r3, r0
}
100096f4:	4618      	mov	r0, r3
100096f6:	3728      	adds	r7, #40	@ 0x28
100096f8:	46bd      	mov	sp, r7
100096fa:	bd80      	pop	{r7, pc}
100096fc:	fffff82e 	.word	0xfffff82e
10009700:	1000b708 	.word	0x1000b708
10009704:	1000d720 	.word	0x1000d720
10009708:	1000b670 	.word	0x1000b670

1000970c <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
1000970c:	b480      	push	{r7}
1000970e:	b083      	sub	sp, #12
10009710:	af00      	add	r7, sp, #0
10009712:	6078      	str	r0, [r7, #4]
	(void)vq;
}
10009714:	bf00      	nop
10009716:	370c      	adds	r7, #12
10009718:	46bd      	mov	sp, r7
1000971a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000971e:	4770      	bx	lr

10009720 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
10009720:	b590      	push	{r4, r7, lr}
10009722:	b08d      	sub	sp, #52	@ 0x34
10009724:	af02      	add	r7, sp, #8
10009726:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
10009728:	687b      	ldr	r3, [r7, #4]
1000972a:	681b      	ldr	r3, [r3, #0]
1000972c:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
1000972e:	6a3b      	ldr	r3, [r7, #32]
10009730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10009732:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
10009734:	69fb      	ldr	r3, [r7, #28]
10009736:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
10009738:	69bb      	ldr	r3, [r7, #24]
1000973a:	3358      	adds	r3, #88	@ 0x58
1000973c:	4618      	mov	r0, r3
1000973e:	f7ff fd55 	bl	100091ec <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
10009742:	f107 020a 	add.w	r2, r7, #10
10009746:	f107 030c 	add.w	r3, r7, #12
1000974a:	4619      	mov	r1, r3
1000974c:	69f8      	ldr	r0, [r7, #28]
1000974e:	f7ff fe5c 	bl	1000940a <rpmsg_virtio_get_rx_buffer>
10009752:	6278      	str	r0, [r7, #36]	@ 0x24

	metal_mutex_release(&rdev->lock);
10009754:	69bb      	ldr	r3, [r7, #24]
10009756:	3358      	adds	r3, #88	@ 0x58
10009758:	4618      	mov	r0, r3
1000975a:	f7ff fd52 	bl	10009202 <metal_mutex_release>

	while (rp_hdr) {
1000975e:	e062      	b.n	10009826 <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
10009760:	897b      	ldrh	r3, [r7, #10]
10009762:	461a      	mov	r2, r3
10009764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009766:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
10009768:	69bb      	ldr	r3, [r7, #24]
1000976a:	3358      	adds	r3, #88	@ 0x58
1000976c:	4618      	mov	r0, r3
1000976e:	f7ff fd3d 	bl	100091ec <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
10009772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009774:	685b      	ldr	r3, [r3, #4]
10009776:	4619      	mov	r1, r3
10009778:	69b8      	ldr	r0, [r7, #24]
1000977a:	f7ff fdc9 	bl	10009310 <rpmsg_get_ept_from_addr>
1000977e:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
10009780:	69bb      	ldr	r3, [r7, #24]
10009782:	3358      	adds	r3, #88	@ 0x58
10009784:	4618      	mov	r0, r3
10009786:	f7ff fd3c 	bl	10009202 <metal_mutex_release>

		if (ept) {
1000978a:	697b      	ldr	r3, [r7, #20]
1000978c:	2b00      	cmp	r3, #0
1000978e:	d025      	beq.n	100097dc <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
10009790:	697b      	ldr	r3, [r7, #20]
10009792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10009794:	f1b3 3fff 	cmp.w	r3, #4294967295
10009798:	d103      	bne.n	100097a2 <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
1000979a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000979c:	681a      	ldr	r2, [r3, #0]
1000979e:	697b      	ldr	r3, [r7, #20]
100097a0:	629a      	str	r2, [r3, #40]	@ 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
100097a2:	697b      	ldr	r3, [r7, #20]
100097a4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
100097a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100097a8:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
100097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100097ae:	899b      	ldrh	r3, [r3, #12]
100097b0:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
100097b2:	4618      	mov	r0, r3
100097b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100097b6:	681a      	ldr	r2, [r3, #0]
100097b8:	697b      	ldr	r3, [r7, #20]
100097ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100097bc:	9300      	str	r3, [sp, #0]
100097be:	4613      	mov	r3, r2
100097c0:	4602      	mov	r2, r0
100097c2:	6978      	ldr	r0, [r7, #20]
100097c4:	47a0      	blx	r4
100097c6:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
100097c8:	693b      	ldr	r3, [r7, #16]
100097ca:	2b00      	cmp	r3, #0
100097cc:	da06      	bge.n	100097dc <rpmsg_virtio_rx_callback+0xbc>
100097ce:	4b1a      	ldr	r3, [pc, #104]	@ (10009838 <rpmsg_virtio_rx_callback+0x118>)
100097d0:	4a1a      	ldr	r2, [pc, #104]	@ (1000983c <rpmsg_virtio_rx_callback+0x11c>)
100097d2:	f44f 71fd 	mov.w	r1, #506	@ 0x1fa
100097d6:	481a      	ldr	r0, [pc, #104]	@ (10009840 <rpmsg_virtio_rx_callback+0x120>)
100097d8:	f000 fce8 	bl	1000a1ac <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
100097dc:	69bb      	ldr	r3, [r7, #24]
100097de:	3358      	adds	r3, #88	@ 0x58
100097e0:	4618      	mov	r0, r3
100097e2:	f7ff fd03 	bl	100091ec <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
100097e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100097e8:	689b      	ldr	r3, [r3, #8]
100097ea:	2b00      	cmp	r3, #0
100097ec:	db05      	blt.n	100097fa <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
100097ee:	68fa      	ldr	r2, [r7, #12]
100097f0:	897b      	ldrh	r3, [r7, #10]
100097f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100097f4:	69f8      	ldr	r0, [r7, #28]
100097f6:	f7ff fdb5 	bl	10009364 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
100097fa:	f107 020a 	add.w	r2, r7, #10
100097fe:	f107 030c 	add.w	r3, r7, #12
10009802:	4619      	mov	r1, r3
10009804:	69f8      	ldr	r0, [r7, #28]
10009806:	f7ff fe00 	bl	1000940a <rpmsg_virtio_get_rx_buffer>
1000980a:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!rp_hdr) {
1000980c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000980e:	2b00      	cmp	r3, #0
10009810:	d104      	bne.n	1000981c <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
10009812:	69fb      	ldr	r3, [r7, #28]
10009814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
10009816:	4618      	mov	r0, r3
10009818:	f000 fba2 	bl	10009f60 <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
1000981c:	69bb      	ldr	r3, [r7, #24]
1000981e:	3358      	adds	r3, #88	@ 0x58
10009820:	4618      	mov	r0, r3
10009822:	f7ff fcee 	bl	10009202 <metal_mutex_release>
	while (rp_hdr) {
10009826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009828:	2b00      	cmp	r3, #0
1000982a:	d199      	bne.n	10009760 <rpmsg_virtio_rx_callback+0x40>
	}
}
1000982c:	bf00      	nop
1000982e:	bf00      	nop
10009830:	372c      	adds	r7, #44	@ 0x2c
10009832:	46bd      	mov	sp, r7
10009834:	bd90      	pop	{r4, r7, pc}
10009836:	bf00      	nop
10009838:	1000b718 	.word	0x1000b718
1000983c:	1000d744 	.word	0x1000d744
10009840:	1000b670 	.word	0x1000b670

10009844 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
10009844:	b580      	push	{r7, lr}
10009846:	b092      	sub	sp, #72	@ 0x48
10009848:	af00      	add	r7, sp, #0
1000984a:	60f8      	str	r0, [r7, #12]
1000984c:	60b9      	str	r1, [r7, #8]
1000984e:	607a      	str	r2, [r7, #4]
10009850:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
10009852:	68fb      	ldr	r3, [r7, #12]
10009854:	6a1b      	ldr	r3, [r3, #32]
10009856:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
10009858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000985a:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
1000985c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000985e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
10009862:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
10009864:	68bb      	ldr	r3, [r7, #8]
10009866:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
10009868:	687b      	ldr	r3, [r7, #4]
1000986a:	2b28      	cmp	r3, #40	@ 0x28
1000986c:	d001      	beq.n	10009872 <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
1000986e:	2300      	movs	r3, #0
10009870:	e057      	b.n	10009922 <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
10009872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
10009874:	4619      	mov	r1, r3
10009876:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
10009878:	f7ff fc39 	bl	100090ee <metal_io_virt_to_offset>
1000987c:	4601      	mov	r1, r0
1000987e:	f107 0210 	add.w	r2, r7, #16
10009882:	2320      	movs	r3, #32
10009884:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
10009886:	f7fe fc58 	bl	1000813a <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
1000988a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1000988c:	6a1b      	ldr	r3, [r3, #32]
1000988e:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
10009890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10009892:	3358      	adds	r3, #88	@ 0x58
10009894:	4618      	mov	r0, r3
10009896:	f7ff fca9 	bl	100091ec <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
1000989a:	f107 0110 	add.w	r1, r7, #16
1000989e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100098a0:	f04f 32ff 	mov.w	r2, #4294967295
100098a4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
100098a6:	f7ff fadb 	bl	10008e60 <rpmsg_get_endpoint>
100098aa:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
100098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100098ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100098b0:	f003 0301 	and.w	r3, r3, #1
100098b4:	2b00      	cmp	r3, #0
100098b6:	d017      	beq.n	100098e8 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
100098b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100098ba:	2b00      	cmp	r3, #0
100098bc:	d003      	beq.n	100098c6 <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
100098be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100098c0:	f04f 32ff 	mov.w	r2, #4294967295
100098c4:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
100098c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100098c8:	3358      	adds	r3, #88	@ 0x58
100098ca:	4618      	mov	r0, r3
100098cc:	f7ff fc99 	bl	10009202 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
100098d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100098d2:	2b00      	cmp	r3, #0
100098d4:	d024      	beq.n	10009920 <rpmsg_virtio_ns_callback+0xdc>
100098d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100098d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100098da:	2b00      	cmp	r3, #0
100098dc:	d020      	beq.n	10009920 <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
100098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100098e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100098e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
100098e4:	4798      	blx	r3
100098e6:	e01b      	b.n	10009920 <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
100098e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100098ea:	2b00      	cmp	r3, #0
100098ec:	d110      	bne.n	10009910 <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
100098ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100098f0:	3358      	adds	r3, #88	@ 0x58
100098f2:	4618      	mov	r0, r3
100098f4:	f7ff fc85 	bl	10009202 <metal_mutex_release>
			if (rdev->ns_bind_cb)
100098f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100098fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
100098fc:	2b00      	cmp	r3, #0
100098fe:	d00f      	beq.n	10009920 <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
10009900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10009902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
10009904:	f107 0110 	add.w	r1, r7, #16
10009908:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000990a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
1000990c:	4798      	blx	r3
1000990e:	e007      	b.n	10009920 <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
10009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10009914:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
10009916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10009918:	3358      	adds	r3, #88	@ 0x58
1000991a:	4618      	mov	r0, r3
1000991c:	f7ff fc71 	bl	10009202 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
10009920:	2300      	movs	r3, #0
}
10009922:	4618      	mov	r0, r3
10009924:	3748      	adds	r7, #72	@ 0x48
10009926:	46bd      	mov	sp, r7
10009928:	bd80      	pop	{r7, pc}
	...

1000992c <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
1000992c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
10009930:	b090      	sub	sp, #64	@ 0x40
10009932:	af02      	add	r7, sp, #8
10009934:	60f8      	str	r0, [r7, #12]
10009936:	60b9      	str	r1, [r7, #8]
10009938:	607a      	str	r2, [r7, #4]
1000993a:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
1000993c:	68fb      	ldr	r3, [r7, #12]
1000993e:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
10009940:	2278      	movs	r2, #120	@ 0x78
10009942:	2100      	movs	r1, #0
10009944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10009946:	f000 fe36 	bl	1000a5b6 <memset>
	metal_mutex_init(&rdev->lock);
1000994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000994c:	3358      	adds	r3, #88	@ 0x58
1000994e:	4618      	mov	r0, r3
10009950:	f7ff fc41 	bl	100091d6 <metal_mutex_init>
	rvdev->vdev = vdev;
10009954:	68fb      	ldr	r3, [r7, #12]
10009956:	68ba      	ldr	r2, [r7, #8]
10009958:	679a      	str	r2, [r3, #120]	@ 0x78
	rdev->ns_bind_cb = ns_bind_cb;
1000995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000995c:	687a      	ldr	r2, [r7, #4]
1000995e:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
10009960:	68bb      	ldr	r3, [r7, #8]
10009962:	68fa      	ldr	r2, [r7, #12]
10009964:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
10009966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009968:	4a4c      	ldr	r2, [pc, #304]	@ (10009a9c <rpmsg_init_vdev+0x170>)
1000996a:	661a      	str	r2, [r3, #96]	@ 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
1000996c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000996e:	4a4c      	ldr	r2, [pc, #304]	@ (10009aa0 <rpmsg_init_vdev+0x174>)
10009970:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
10009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009974:	4a4b      	ldr	r2, [pc, #300]	@ (10009aa4 <rpmsg_init_vdev+0x178>)
10009976:	669a      	str	r2, [r3, #104]	@ 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
10009978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000997a:	4a4b      	ldr	r2, [pc, #300]	@ (10009aa8 <rpmsg_init_vdev+0x17c>)
1000997c:	66da      	str	r2, [r3, #108]	@ 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
1000997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009980:	4a4a      	ldr	r2, [pc, #296]	@ (10009aac <rpmsg_init_vdev+0x180>)
10009982:	671a      	str	r2, [r3, #112]	@ 0x70
	role = rpmsg_virtio_get_role(rvdev);
10009984:	68f8      	ldr	r0, [r7, #12]
10009986:	f7ff fc47 	bl	10009218 <rpmsg_virtio_get_role>
1000998a:	62f8      	str	r0, [r7, #44]	@ 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000998c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000998e:	2b01      	cmp	r3, #1
10009990:	d102      	bne.n	10009998 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
10009992:	68f8      	ldr	r0, [r7, #12]
10009994:	f7ff fd55 	bl	10009442 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
10009998:	68f8      	ldr	r0, [r7, #12]
1000999a:	f7ff fc6e 	bl	1000927a <rpmsg_virtio_get_features>
1000999e:	4603      	mov	r3, r0
100099a0:	2200      	movs	r2, #0
100099a2:	4698      	mov	r8, r3
100099a4:	4691      	mov	r9, r2
100099a6:	68bb      	ldr	r3, [r7, #8]
100099a8:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
100099ac:	68bb      	ldr	r3, [r7, #8]
100099ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
100099b2:	f002 0401 	and.w	r4, r2, #1
100099b6:	2500      	movs	r5, #0
100099b8:	ea54 0305 	orrs.w	r3, r4, r5
100099bc:	bf14      	ite	ne
100099be:	2301      	movne	r3, #1
100099c0:	2300      	moveq	r3, #0
100099c2:	b2da      	uxtb	r2, r3
100099c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100099c6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
100099ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100099cc:	2b01      	cmp	r3, #1
100099ce:	d113      	bne.n	100099f8 <rpmsg_init_vdev+0xcc>
		vq_names[0] = "tx_vq";
100099d0:	4b37      	ldr	r3, [pc, #220]	@ (10009ab0 <rpmsg_init_vdev+0x184>)
100099d2:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
100099d4:	4b37      	ldr	r3, [pc, #220]	@ (10009ab4 <rpmsg_init_vdev+0x188>)
100099d6:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
100099d8:	4b37      	ldr	r3, [pc, #220]	@ (10009ab8 <rpmsg_init_vdev+0x18c>)
100099da:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
100099dc:	4b37      	ldr	r3, [pc, #220]	@ (10009abc <rpmsg_init_vdev+0x190>)
100099de:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
100099e0:	68bb      	ldr	r3, [r7, #8]
100099e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100099e4:	3318      	adds	r3, #24
100099e6:	681a      	ldr	r2, [r3, #0]
100099e8:	68fb      	ldr	r3, [r7, #12]
100099ea:	67da      	str	r2, [r3, #124]	@ 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
100099ec:	68bb      	ldr	r3, [r7, #8]
100099ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100099f0:	681a      	ldr	r2, [r3, #0]
100099f2:	68fb      	ldr	r3, [r7, #12]
100099f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
100099f8:	68fb      	ldr	r3, [r7, #12]
100099fa:	683a      	ldr	r2, [r7, #0]
100099fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
10009a00:	f107 021c 	add.w	r2, r7, #28
10009a04:	f107 0314 	add.w	r3, r7, #20
10009a08:	9300      	str	r3, [sp, #0]
10009a0a:	4613      	mov	r3, r2
10009a0c:	2202      	movs	r2, #2
10009a0e:	2100      	movs	r1, #0
10009a10:	68f8      	ldr	r0, [r7, #12]
10009a12:	f7ff fc43 	bl	1000929c <rpmsg_virtio_create_virtqueues>
10009a16:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
10009a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009a1a:	2b00      	cmp	r3, #0
10009a1c:	d001      	beq.n	10009a22 <rpmsg_init_vdev+0xf6>
		return status;
10009a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009a20:	e037      	b.n	10009a92 <rpmsg_init_vdev+0x166>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
10009a22:	68fb      	ldr	r3, [r7, #12]
10009a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10009a28:	4618      	mov	r0, r3
10009a2a:	f000 fa61 	bl	10009ef0 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10009a2e:	2300      	movs	r3, #0
10009a30:	637b      	str	r3, [r7, #52]	@ 0x34
10009a32:	e00f      	b.n	10009a54 <rpmsg_init_vdev+0x128>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
10009a34:	68bb      	ldr	r3, [r7, #8]
10009a36:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10009a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10009a3a:	4613      	mov	r3, r2
10009a3c:	005b      	lsls	r3, r3, #1
10009a3e:	4413      	add	r3, r2
10009a40:	00db      	lsls	r3, r3, #3
10009a42:	440b      	add	r3, r1
10009a44:	681b      	ldr	r3, [r3, #0]
10009a46:	627b      	str	r3, [r7, #36]	@ 0x24
		vq->shm_io = shm_io;
10009a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009a4a:	683a      	ldr	r2, [r7, #0]
10009a4c:	629a      	str	r2, [r3, #40]	@ 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10009a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10009a50:	3301      	adds	r3, #1
10009a52:	637b      	str	r3, [r7, #52]	@ 0x34
10009a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10009a56:	2b01      	cmp	r3, #1
10009a58:	d9ec      	bls.n	10009a34 <rpmsg_init_vdev+0x108>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
10009a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009a5c:	4618      	mov	r0, r3
10009a5e:	f7ff fb36 	bl	100090ce <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
10009a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009a64:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
10009a68:	2b00      	cmp	r3, #0
10009a6a:	d011      	beq.n	10009a90 <rpmsg_init_vdev+0x164>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
10009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009a6e:	f103 0008 	add.w	r0, r3, #8
10009a72:	2300      	movs	r3, #0
10009a74:	9301      	str	r3, [sp, #4]
10009a76:	4b12      	ldr	r3, [pc, #72]	@ (10009ac0 <rpmsg_init_vdev+0x194>)
10009a78:	9300      	str	r3, [sp, #0]
10009a7a:	2335      	movs	r3, #53	@ 0x35
10009a7c:	2235      	movs	r2, #53	@ 0x35
10009a7e:	4911      	ldr	r1, [pc, #68]	@ (10009ac4 <rpmsg_init_vdev+0x198>)
10009a80:	f7ff fc22 	bl	100092c8 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
10009a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009a86:	3308      	adds	r3, #8
10009a88:	4619      	mov	r1, r3
10009a8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
10009a8c:	f7ff fa73 	bl	10008f76 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
10009a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
10009a92:	4618      	mov	r0, r3
10009a94:	3738      	adds	r7, #56	@ 0x38
10009a96:	46bd      	mov	sp, r7
10009a98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
10009a9c:	10009675 	.word	0x10009675
10009aa0:	1000947d 	.word	0x1000947d
10009aa4:	100094a5 	.word	0x100094a5
10009aa8:	100094f7 	.word	0x100094f7
10009aac:	1000959d 	.word	0x1000959d
10009ab0:	1000b724 	.word	0x1000b724
10009ab4:	1000b72c 	.word	0x1000b72c
10009ab8:	1000970d 	.word	0x1000970d
10009abc:	10009721 	.word	0x10009721
10009ac0:	10009845 	.word	0x10009845
10009ac4:	1000b734 	.word	0x1000b734

10009ac8 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
10009ac8:	b590      	push	{r4, r7, lr}
10009aca:	b08f      	sub	sp, #60	@ 0x3c
10009acc:	af04      	add	r7, sp, #16
10009ace:	60f8      	str	r0, [r7, #12]
10009ad0:	60b9      	str	r1, [r7, #8]
10009ad2:	607a      	str	r2, [r7, #4]
10009ad4:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
10009ad6:	68fb      	ldr	r3, [r7, #12]
10009ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10009ada:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
10009adc:	687a      	ldr	r2, [r7, #4]
10009ade:	6a3b      	ldr	r3, [r7, #32]
10009ae0:	429a      	cmp	r2, r3
10009ae2:	d901      	bls.n	10009ae8 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
10009ae4:	4b1e      	ldr	r3, [pc, #120]	@ (10009b60 <virtio_create_virtqueues+0x98>)
10009ae6:	e036      	b.n	10009b56 <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
10009ae8:	2300      	movs	r3, #0
10009aea:	627b      	str	r3, [r7, #36]	@ 0x24
10009aec:	e02e      	b.n	10009b4c <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
10009aee:	68fb      	ldr	r3, [r7, #12]
10009af0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
10009af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10009af4:	4613      	mov	r3, r2
10009af6:	005b      	lsls	r3, r3, #1
10009af8:	4413      	add	r3, r2
10009afa:	00db      	lsls	r3, r3, #3
10009afc:	440b      	add	r3, r1
10009afe:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
10009b00:	69fb      	ldr	r3, [r7, #28]
10009b02:	3304      	adds	r3, #4
10009b04:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10009b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009b08:	b298      	uxth	r0, r3
10009b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009b0c:	009b      	lsls	r3, r3, #2
10009b0e:	683a      	ldr	r2, [r7, #0]
10009b10:	4413      	add	r3, r2
10009b12:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
10009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009b16:	009b      	lsls	r3, r3, #2
10009b18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
10009b1a:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10009b1c:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
10009b1e:	68fa      	ldr	r2, [r7, #12]
10009b20:	6a12      	ldr	r2, [r2, #32]
10009b22:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10009b24:	69f9      	ldr	r1, [r7, #28]
10009b26:	6809      	ldr	r1, [r1, #0]
10009b28:	9102      	str	r1, [sp, #8]
10009b2a:	9201      	str	r2, [sp, #4]
10009b2c:	9300      	str	r3, [sp, #0]
10009b2e:	69bb      	ldr	r3, [r7, #24]
10009b30:	4622      	mov	r2, r4
10009b32:	4601      	mov	r1, r0
10009b34:	68f8      	ldr	r0, [r7, #12]
10009b36:	f000 f90e 	bl	10009d56 <virtqueue_create>
10009b3a:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
10009b3c:	697b      	ldr	r3, [r7, #20]
10009b3e:	2b00      	cmp	r3, #0
10009b40:	d001      	beq.n	10009b46 <virtio_create_virtqueues+0x7e>
			return ret;
10009b42:	697b      	ldr	r3, [r7, #20]
10009b44:	e007      	b.n	10009b56 <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
10009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009b48:	3301      	adds	r3, #1
10009b4a:	627b      	str	r3, [r7, #36]	@ 0x24
10009b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10009b4e:	687b      	ldr	r3, [r7, #4]
10009b50:	429a      	cmp	r2, r3
10009b52:	d3cc      	bcc.n	10009aee <virtio_create_virtqueues+0x26>
	}
	return 0;
10009b54:	2300      	movs	r3, #0
}
10009b56:	4618      	mov	r0, r3
10009b58:	372c      	adds	r7, #44	@ 0x2c
10009b5a:	46bd      	mov	sp, r7
10009b5c:	bd90      	pop	{r4, r7, pc}
10009b5e:	bf00      	nop
10009b60:	fffff440 	.word	0xfffff440

10009b64 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
10009b64:	b480      	push	{r7}
10009b66:	b085      	sub	sp, #20
10009b68:	af00      	add	r7, sp, #0
10009b6a:	60f8      	str	r0, [r7, #12]
10009b6c:	60b9      	str	r1, [r7, #8]
10009b6e:	607a      	str	r2, [r7, #4]
10009b70:	603b      	str	r3, [r7, #0]
	vr->num = num;
10009b72:	68fb      	ldr	r3, [r7, #12]
10009b74:	68ba      	ldr	r2, [r7, #8]
10009b76:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
10009b78:	68fb      	ldr	r3, [r7, #12]
10009b7a:	687a      	ldr	r2, [r7, #4]
10009b7c:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
10009b7e:	68bb      	ldr	r3, [r7, #8]
10009b80:	011b      	lsls	r3, r3, #4
10009b82:	687a      	ldr	r2, [r7, #4]
10009b84:	441a      	add	r2, r3
10009b86:	68fb      	ldr	r3, [r7, #12]
10009b88:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
10009b8a:	68fb      	ldr	r3, [r7, #12]
10009b8c:	689a      	ldr	r2, [r3, #8]
10009b8e:	68bb      	ldr	r3, [r7, #8]
10009b90:	005b      	lsls	r3, r3, #1
10009b92:	4413      	add	r3, r2
10009b94:	3304      	adds	r3, #4
10009b96:	461a      	mov	r2, r3
10009b98:	683b      	ldr	r3, [r7, #0]
10009b9a:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
10009b9c:	1c5a      	adds	r2, r3, #1
10009b9e:	683b      	ldr	r3, [r7, #0]
10009ba0:	425b      	negs	r3, r3
10009ba2:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
10009ba4:	461a      	mov	r2, r3
10009ba6:	68fb      	ldr	r3, [r7, #12]
10009ba8:	60da      	str	r2, [r3, #12]
}
10009baa:	bf00      	nop
10009bac:	3714      	adds	r7, #20
10009bae:	46bd      	mov	sp, r7
10009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
10009bb4:	4770      	bx	lr

10009bb6 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
10009bb6:	b480      	push	{r7}
10009bb8:	b083      	sub	sp, #12
10009bba:	af00      	add	r7, sp, #0
10009bbc:	4603      	mov	r3, r0
10009bbe:	80fb      	strh	r3, [r7, #6]
10009bc0:	460b      	mov	r3, r1
10009bc2:	80bb      	strh	r3, [r7, #4]
10009bc4:	4613      	mov	r3, r2
10009bc6:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
10009bc8:	88ba      	ldrh	r2, [r7, #4]
10009bca:	88fb      	ldrh	r3, [r7, #6]
10009bcc:	1ad3      	subs	r3, r2, r3
10009bce:	b29b      	uxth	r3, r3
10009bd0:	3b01      	subs	r3, #1
10009bd2:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
10009bd4:	88b9      	ldrh	r1, [r7, #4]
10009bd6:	887b      	ldrh	r3, [r7, #2]
10009bd8:	1acb      	subs	r3, r1, r3
10009bda:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
10009bdc:	429a      	cmp	r2, r3
10009bde:	bf34      	ite	cc
10009be0:	2301      	movcc	r3, #1
10009be2:	2300      	movcs	r3, #0
10009be4:	b2db      	uxtb	r3, r3
}
10009be6:	4618      	mov	r0, r3
10009be8:	370c      	adds	r7, #12
10009bea:	46bd      	mov	sp, r7
10009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
10009bf0:	4770      	bx	lr

10009bf2 <metal_io_virt>:
{
10009bf2:	b480      	push	{r7}
10009bf4:	b083      	sub	sp, #12
10009bf6:	af00      	add	r7, sp, #0
10009bf8:	6078      	str	r0, [r7, #4]
10009bfa:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
10009bfc:	687b      	ldr	r3, [r7, #4]
10009bfe:	681b      	ldr	r3, [r3, #0]
		: NULL);
10009c00:	f1b3 3fff 	cmp.w	r3, #4294967295
10009c04:	d00a      	beq.n	10009c1c <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10009c06:	687b      	ldr	r3, [r7, #4]
10009c08:	689b      	ldr	r3, [r3, #8]
10009c0a:	683a      	ldr	r2, [r7, #0]
10009c0c:	429a      	cmp	r2, r3
10009c0e:	d205      	bcs.n	10009c1c <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
10009c10:	687b      	ldr	r3, [r7, #4]
10009c12:	681b      	ldr	r3, [r3, #0]
10009c14:	461a      	mov	r2, r3
10009c16:	683b      	ldr	r3, [r7, #0]
10009c18:	4413      	add	r3, r2
		: NULL);
10009c1a:	e000      	b.n	10009c1e <metal_io_virt+0x2c>
10009c1c:	2300      	movs	r3, #0
}
10009c1e:	4618      	mov	r0, r3
10009c20:	370c      	adds	r7, #12
10009c22:	46bd      	mov	sp, r7
10009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
10009c28:	4770      	bx	lr

10009c2a <metal_io_phys>:
{
10009c2a:	b580      	push	{r7, lr}
10009c2c:	b084      	sub	sp, #16
10009c2e:	af00      	add	r7, sp, #0
10009c30:	6078      	str	r0, [r7, #4]
10009c32:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
10009c34:	687b      	ldr	r3, [r7, #4]
10009c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10009c38:	2b00      	cmp	r3, #0
10009c3a:	d123      	bne.n	10009c84 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
10009c3c:	687b      	ldr	r3, [r7, #4]
10009c3e:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
10009c40:	2b1f      	cmp	r3, #31
10009c42:	d805      	bhi.n	10009c50 <metal_io_phys+0x26>
10009c44:	687b      	ldr	r3, [r7, #4]
10009c46:	68db      	ldr	r3, [r3, #12]
10009c48:	683a      	ldr	r2, [r7, #0]
10009c4a:	fa22 f303 	lsr.w	r3, r2, r3
10009c4e:	e000      	b.n	10009c52 <metal_io_phys+0x28>
10009c50:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
10009c52:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
10009c54:	687b      	ldr	r3, [r7, #4]
10009c56:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
10009c58:	2b00      	cmp	r3, #0
10009c5a:	d010      	beq.n	10009c7e <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
10009c5c:	687b      	ldr	r3, [r7, #4]
10009c5e:	689b      	ldr	r3, [r3, #8]
10009c60:	683a      	ldr	r2, [r7, #0]
10009c62:	429a      	cmp	r2, r3
10009c64:	d20b      	bcs.n	10009c7e <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
10009c66:	687b      	ldr	r3, [r7, #4]
10009c68:	685a      	ldr	r2, [r3, #4]
10009c6a:	68fb      	ldr	r3, [r7, #12]
10009c6c:	009b      	lsls	r3, r3, #2
10009c6e:	4413      	add	r3, r2
10009c70:	681a      	ldr	r2, [r3, #0]
10009c72:	687b      	ldr	r3, [r7, #4]
10009c74:	6919      	ldr	r1, [r3, #16]
10009c76:	683b      	ldr	r3, [r7, #0]
10009c78:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
10009c7a:	4413      	add	r3, r2
10009c7c:	e008      	b.n	10009c90 <metal_io_phys+0x66>
10009c7e:	f04f 33ff 	mov.w	r3, #4294967295
10009c82:	e005      	b.n	10009c90 <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
10009c84:	687b      	ldr	r3, [r7, #4]
10009c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10009c88:	6839      	ldr	r1, [r7, #0]
10009c8a:	6878      	ldr	r0, [r7, #4]
10009c8c:	4798      	blx	r3
10009c8e:	4603      	mov	r3, r0
}
10009c90:	4618      	mov	r0, r3
10009c92:	3710      	adds	r7, #16
10009c94:	46bd      	mov	sp, r7
10009c96:	bd80      	pop	{r7, pc}

10009c98 <metal_io_phys_to_offset>:
{
10009c98:	b580      	push	{r7, lr}
10009c9a:	b084      	sub	sp, #16
10009c9c:	af00      	add	r7, sp, #0
10009c9e:	6078      	str	r0, [r7, #4]
10009ca0:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
10009ca2:	687b      	ldr	r3, [r7, #4]
10009ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10009ca6:	2b00      	cmp	r3, #0
10009ca8:	d127      	bne.n	10009cfa <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
10009caa:	687b      	ldr	r3, [r7, #4]
10009cac:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
10009cae:	f1b3 3fff 	cmp.w	r3, #4294967295
10009cb2:	d105      	bne.n	10009cc0 <metal_io_phys_to_offset+0x28>
10009cb4:	687b      	ldr	r3, [r7, #4]
10009cb6:	685b      	ldr	r3, [r3, #4]
10009cb8:	681b      	ldr	r3, [r3, #0]
10009cba:	683a      	ldr	r2, [r7, #0]
10009cbc:	1ad3      	subs	r3, r2, r3
10009cbe:	e003      	b.n	10009cc8 <metal_io_phys_to_offset+0x30>
10009cc0:	687b      	ldr	r3, [r7, #4]
10009cc2:	691a      	ldr	r2, [r3, #16]
10009cc4:	683b      	ldr	r3, [r7, #0]
10009cc6:	4013      	ands	r3, r2
		unsigned long offset =
10009cc8:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
10009cca:	68f9      	ldr	r1, [r7, #12]
10009ccc:	6878      	ldr	r0, [r7, #4]
10009cce:	f7ff ffac 	bl	10009c2a <metal_io_phys>
10009cd2:	4602      	mov	r2, r0
10009cd4:	683b      	ldr	r3, [r7, #0]
10009cd6:	4293      	cmp	r3, r2
10009cd8:	d101      	bne.n	10009cde <metal_io_phys_to_offset+0x46>
				return offset;
10009cda:	68fb      	ldr	r3, [r7, #12]
10009cdc:	e013      	b.n	10009d06 <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
10009cde:	687b      	ldr	r3, [r7, #4]
10009ce0:	691a      	ldr	r2, [r3, #16]
10009ce2:	68fb      	ldr	r3, [r7, #12]
10009ce4:	4413      	add	r3, r2
10009ce6:	3301      	adds	r3, #1
10009ce8:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
10009cea:	687b      	ldr	r3, [r7, #4]
10009cec:	689b      	ldr	r3, [r3, #8]
10009cee:	68fa      	ldr	r2, [r7, #12]
10009cf0:	429a      	cmp	r2, r3
10009cf2:	d3ea      	bcc.n	10009cca <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
10009cf4:	f04f 33ff 	mov.w	r3, #4294967295
10009cf8:	e005      	b.n	10009d06 <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
10009cfa:	687b      	ldr	r3, [r7, #4]
10009cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10009cfe:	6839      	ldr	r1, [r7, #0]
10009d00:	6878      	ldr	r0, [r7, #4]
10009d02:	4798      	blx	r3
10009d04:	4603      	mov	r3, r0
}
10009d06:	4618      	mov	r0, r3
10009d08:	3710      	adds	r7, #16
10009d0a:	46bd      	mov	sp, r7
10009d0c:	bd80      	pop	{r7, pc}

10009d0e <metal_io_phys_to_virt>:
{
10009d0e:	b580      	push	{r7, lr}
10009d10:	b082      	sub	sp, #8
10009d12:	af00      	add	r7, sp, #0
10009d14:	6078      	str	r0, [r7, #4]
10009d16:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
10009d18:	6839      	ldr	r1, [r7, #0]
10009d1a:	6878      	ldr	r0, [r7, #4]
10009d1c:	f7ff ffbc 	bl	10009c98 <metal_io_phys_to_offset>
10009d20:	4603      	mov	r3, r0
10009d22:	4619      	mov	r1, r3
10009d24:	6878      	ldr	r0, [r7, #4]
10009d26:	f7ff ff64 	bl	10009bf2 <metal_io_virt>
10009d2a:	4603      	mov	r3, r0
}
10009d2c:	4618      	mov	r0, r3
10009d2e:	3708      	adds	r7, #8
10009d30:	46bd      	mov	sp, r7
10009d32:	bd80      	pop	{r7, pc}

10009d34 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
10009d34:	b580      	push	{r7, lr}
10009d36:	b084      	sub	sp, #16
10009d38:	af00      	add	r7, sp, #0
10009d3a:	6078      	str	r0, [r7, #4]
10009d3c:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
10009d3e:	687b      	ldr	r3, [r7, #4]
10009d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10009d42:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
10009d44:	6839      	ldr	r1, [r7, #0]
10009d46:	68f8      	ldr	r0, [r7, #12]
10009d48:	f7ff ffe1 	bl	10009d0e <metal_io_phys_to_virt>
10009d4c:	4603      	mov	r3, r0
}
10009d4e:	4618      	mov	r0, r3
10009d50:	3710      	adds	r7, #16
10009d52:	46bd      	mov	sp, r7
10009d54:	bd80      	pop	{r7, pc}

10009d56 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
10009d56:	b580      	push	{r7, lr}
10009d58:	b086      	sub	sp, #24
10009d5a:	af00      	add	r7, sp, #0
10009d5c:	60f8      	str	r0, [r7, #12]
10009d5e:	607a      	str	r2, [r7, #4]
10009d60:	603b      	str	r3, [r7, #0]
10009d62:	460b      	mov	r3, r1
10009d64:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
10009d66:	2300      	movs	r3, #0
10009d68:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
10009d6a:	697b      	ldr	r3, [r7, #20]
10009d6c:	2b00      	cmp	r3, #0
10009d6e:	d11e      	bne.n	10009dae <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
10009d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009d72:	68fa      	ldr	r2, [r7, #12]
10009d74:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
10009d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009d78:	687a      	ldr	r2, [r7, #4]
10009d7a:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
10009d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009d7e:	897a      	ldrh	r2, [r7, #10]
10009d80:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
10009d82:	683b      	ldr	r3, [r7, #0]
10009d84:	891a      	ldrh	r2, [r3, #8]
10009d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009d88:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
10009d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009d8c:	895a      	ldrh	r2, [r3, #10]
10009d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009d90:	849a      	strh	r2, [r3, #36]	@ 0x24
		vq->callback = callback;
10009d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009d94:	6a3a      	ldr	r2, [r7, #32]
10009d96:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
10009d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10009d9c:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
10009d9e:	683b      	ldr	r3, [r7, #0]
10009da0:	6819      	ldr	r1, [r3, #0]
10009da2:	683b      	ldr	r3, [r7, #0]
10009da4:	685b      	ldr	r3, [r3, #4]
10009da6:	461a      	mov	r2, r3
10009da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10009daa:	f000 f8ef 	bl	10009f8c <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
10009dae:	697b      	ldr	r3, [r7, #20]
}
10009db0:	4618      	mov	r0, r3
10009db2:	3718      	adds	r7, #24
10009db4:	46bd      	mov	sp, r7
10009db6:	bd80      	pop	{r7, pc}

10009db8 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
10009db8:	b480      	push	{r7}
10009dba:	b083      	sub	sp, #12
10009dbc:	af00      	add	r7, sp, #0
10009dbe:	6078      	str	r0, [r7, #4]
10009dc0:	460b      	mov	r3, r1
10009dc2:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
10009dc4:	687b      	ldr	r3, [r7, #4]
10009dc6:	699a      	ldr	r2, [r3, #24]
10009dc8:	887b      	ldrh	r3, [r7, #2]
10009dca:	011b      	lsls	r3, r3, #4
10009dcc:	4413      	add	r3, r2
10009dce:	689b      	ldr	r3, [r3, #8]
}
10009dd0:	4618      	mov	r0, r3
10009dd2:	370c      	adds	r7, #12
10009dd4:	46bd      	mov	sp, r7
10009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
10009dda:	4770      	bx	lr

10009ddc <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
10009ddc:	b580      	push	{r7, lr}
10009dde:	b086      	sub	sp, #24
10009de0:	af00      	add	r7, sp, #0
10009de2:	60f8      	str	r0, [r7, #12]
10009de4:	60b9      	str	r1, [r7, #8]
10009de6:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
10009de8:	2300      	movs	r3, #0
10009dea:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
10009dec:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
10009df0:	68fb      	ldr	r3, [r7, #12]
10009df2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10009df4:	68fb      	ldr	r3, [r7, #12]
10009df6:	69db      	ldr	r3, [r3, #28]
10009df8:	885b      	ldrh	r3, [r3, #2]
10009dfa:	b29b      	uxth	r3, r3
10009dfc:	429a      	cmp	r2, r3
10009dfe:	d101      	bne.n	10009e04 <virtqueue_get_available_buffer+0x28>
		return NULL;
10009e00:	2300      	movs	r3, #0
10009e02:	e02f      	b.n	10009e64 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
10009e04:	68fb      	ldr	r3, [r7, #12]
10009e06:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
10009e08:	1c5a      	adds	r2, r3, #1
10009e0a:	b291      	uxth	r1, r2
10009e0c:	68fa      	ldr	r2, [r7, #12]
10009e0e:	8611      	strh	r1, [r2, #48]	@ 0x30
10009e10:	b21a      	sxth	r2, r3
10009e12:	68fb      	ldr	r3, [r7, #12]
10009e14:	895b      	ldrh	r3, [r3, #10]
10009e16:	3b01      	subs	r3, #1
10009e18:	b29b      	uxth	r3, r3
10009e1a:	b21b      	sxth	r3, r3
10009e1c:	4013      	ands	r3, r2
10009e1e:	b21b      	sxth	r3, r3
10009e20:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
10009e22:	68fb      	ldr	r3, [r7, #12]
10009e24:	69da      	ldr	r2, [r3, #28]
10009e26:	8afb      	ldrh	r3, [r7, #22]
10009e28:	005b      	lsls	r3, r3, #1
10009e2a:	4413      	add	r3, r2
10009e2c:	889b      	ldrh	r3, [r3, #4]
10009e2e:	b29a      	uxth	r2, r3
10009e30:	68bb      	ldr	r3, [r7, #8]
10009e32:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
10009e34:	68fb      	ldr	r3, [r7, #12]
10009e36:	699a      	ldr	r2, [r3, #24]
10009e38:	68bb      	ldr	r3, [r7, #8]
10009e3a:	881b      	ldrh	r3, [r3, #0]
10009e3c:	011b      	lsls	r3, r3, #4
10009e3e:	18d1      	adds	r1, r2, r3
10009e40:	680a      	ldr	r2, [r1, #0]
10009e42:	684b      	ldr	r3, [r1, #4]
10009e44:	4613      	mov	r3, r2
10009e46:	4619      	mov	r1, r3
10009e48:	68f8      	ldr	r0, [r7, #12]
10009e4a:	f7ff ff73 	bl	10009d34 <virtqueue_phys_to_virt>
10009e4e:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
10009e50:	68fb      	ldr	r3, [r7, #12]
10009e52:	699a      	ldr	r2, [r3, #24]
10009e54:	68bb      	ldr	r3, [r7, #8]
10009e56:	881b      	ldrh	r3, [r3, #0]
10009e58:	011b      	lsls	r3, r3, #4
10009e5a:	4413      	add	r3, r2
10009e5c:	689a      	ldr	r2, [r3, #8]
10009e5e:	687b      	ldr	r3, [r7, #4]
10009e60:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
10009e62:	693b      	ldr	r3, [r7, #16]
}
10009e64:	4618      	mov	r0, r3
10009e66:	3718      	adds	r7, #24
10009e68:	46bd      	mov	sp, r7
10009e6a:	bd80      	pop	{r7, pc}

10009e6c <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
10009e6c:	b480      	push	{r7}
10009e6e:	b087      	sub	sp, #28
10009e70:	af00      	add	r7, sp, #0
10009e72:	60f8      	str	r0, [r7, #12]
10009e74:	460b      	mov	r3, r1
10009e76:	607a      	str	r2, [r7, #4]
10009e78:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
10009e7a:	2300      	movs	r3, #0
10009e7c:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
10009e7e:	68fb      	ldr	r3, [r7, #12]
10009e80:	895b      	ldrh	r3, [r3, #10]
10009e82:	897a      	ldrh	r2, [r7, #10]
10009e84:	429a      	cmp	r2, r3
10009e86:	d901      	bls.n	10009e8c <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
10009e88:	4b18      	ldr	r3, [pc, #96]	@ (10009eec <virtqueue_add_consumed_buffer+0x80>)
10009e8a:	e029      	b.n	10009ee0 <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
10009e8c:	68fb      	ldr	r3, [r7, #12]
10009e8e:	6a1b      	ldr	r3, [r3, #32]
10009e90:	885b      	ldrh	r3, [r3, #2]
10009e92:	b29b      	uxth	r3, r3
10009e94:	b21a      	sxth	r2, r3
10009e96:	68fb      	ldr	r3, [r7, #12]
10009e98:	895b      	ldrh	r3, [r3, #10]
10009e9a:	3b01      	subs	r3, #1
10009e9c:	b29b      	uxth	r3, r3
10009e9e:	b21b      	sxth	r3, r3
10009ea0:	4013      	ands	r3, r2
10009ea2:	b21b      	sxth	r3, r3
10009ea4:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
10009ea6:	68fb      	ldr	r3, [r7, #12]
10009ea8:	6a1a      	ldr	r2, [r3, #32]
10009eaa:	8a7b      	ldrh	r3, [r7, #18]
10009eac:	00db      	lsls	r3, r3, #3
10009eae:	4413      	add	r3, r2
10009eb0:	3304      	adds	r3, #4
10009eb2:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
10009eb4:	897a      	ldrh	r2, [r7, #10]
10009eb6:	697b      	ldr	r3, [r7, #20]
10009eb8:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
10009eba:	697b      	ldr	r3, [r7, #20]
10009ebc:	687a      	ldr	r2, [r7, #4]
10009ebe:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
10009ec0:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
10009ec4:	68fb      	ldr	r3, [r7, #12]
10009ec6:	6a1b      	ldr	r3, [r3, #32]
10009ec8:	885a      	ldrh	r2, [r3, #2]
10009eca:	b292      	uxth	r2, r2
10009ecc:	3201      	adds	r2, #1
10009ece:	b292      	uxth	r2, r2
10009ed0:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
10009ed2:	68fb      	ldr	r3, [r7, #12]
10009ed4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
10009ed6:	3301      	adds	r3, #1
10009ed8:	b29a      	uxth	r2, r3
10009eda:	68fb      	ldr	r3, [r7, #12]
10009edc:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
10009ede:	2300      	movs	r3, #0
}
10009ee0:	4618      	mov	r0, r3
10009ee2:	371c      	adds	r7, #28
10009ee4:	46bd      	mov	sp, r7
10009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
10009eea:	4770      	bx	lr
10009eec:	fffff441 	.word	0xfffff441

10009ef0 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
10009ef0:	b480      	push	{r7}
10009ef2:	b083      	sub	sp, #12
10009ef4:	af00      	add	r7, sp, #0
10009ef6:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10009ef8:	6879      	ldr	r1, [r7, #4]
10009efa:	6809      	ldr	r1, [r1, #0]
10009efc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10009f00:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
10009f04:	2300      	movs	r3, #0
10009f06:	4313      	orrs	r3, r2
10009f08:	d015      	beq.n	10009f36 <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10009f0a:	687b      	ldr	r3, [r7, #4]
10009f0c:	681b      	ldr	r3, [r3, #0]
10009f0e:	699b      	ldr	r3, [r3, #24]
10009f10:	2b01      	cmp	r3, #1
10009f12:	d11f      	bne.n	10009f54 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
10009f14:	687b      	ldr	r3, [r7, #4]
10009f16:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
10009f18:	687b      	ldr	r3, [r7, #4]
10009f1a:	895b      	ldrh	r3, [r3, #10]
10009f1c:	1ad3      	subs	r3, r2, r3
10009f1e:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
10009f20:	687b      	ldr	r3, [r7, #4]
10009f22:	6a1a      	ldr	r2, [r3, #32]
10009f24:	687b      	ldr	r3, [r7, #4]
10009f26:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
10009f28:	3901      	subs	r1, #1
10009f2a:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
10009f2c:	00db      	lsls	r3, r3, #3
10009f2e:	4413      	add	r3, r2
10009f30:	460a      	mov	r2, r1
10009f32:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
10009f34:	e00e      	b.n	10009f54 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10009f36:	687b      	ldr	r3, [r7, #4]
10009f38:	681b      	ldr	r3, [r3, #0]
10009f3a:	699b      	ldr	r3, [r3, #24]
10009f3c:	2b01      	cmp	r3, #1
10009f3e:	d109      	bne.n	10009f54 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
10009f40:	687b      	ldr	r3, [r7, #4]
10009f42:	6a1b      	ldr	r3, [r3, #32]
10009f44:	881b      	ldrh	r3, [r3, #0]
10009f46:	b29a      	uxth	r2, r3
10009f48:	687b      	ldr	r3, [r7, #4]
10009f4a:	6a1b      	ldr	r3, [r3, #32]
10009f4c:	f042 0201 	orr.w	r2, r2, #1
10009f50:	b292      	uxth	r2, r2
10009f52:	801a      	strh	r2, [r3, #0]
}
10009f54:	bf00      	nop
10009f56:	370c      	adds	r7, #12
10009f58:	46bd      	mov	sp, r7
10009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
10009f5e:	4770      	bx	lr

10009f60 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
10009f60:	b580      	push	{r7, lr}
10009f62:	b082      	sub	sp, #8
10009f64:	af00      	add	r7, sp, #0
10009f66:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
10009f68:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
10009f6c:	6878      	ldr	r0, [r7, #4]
10009f6e:	f000 f835 	bl	10009fdc <vq_ring_must_notify>
10009f72:	4603      	mov	r3, r0
10009f74:	2b00      	cmp	r3, #0
10009f76:	d002      	beq.n	10009f7e <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
10009f78:	6878      	ldr	r0, [r7, #4]
10009f7a:	f000 f87d 	bl	1000a078 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
10009f7e:	687b      	ldr	r3, [r7, #4]
10009f80:	2200      	movs	r2, #0
10009f82:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);
}
10009f84:	bf00      	nop
10009f86:	3708      	adds	r7, #8
10009f88:	46bd      	mov	sp, r7
10009f8a:	bd80      	pop	{r7, pc}

10009f8c <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
10009f8c:	b580      	push	{r7, lr}
10009f8e:	b086      	sub	sp, #24
10009f90:	af00      	add	r7, sp, #0
10009f92:	60f8      	str	r0, [r7, #12]
10009f94:	60b9      	str	r1, [r7, #8]
10009f96:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
10009f98:	68fb      	ldr	r3, [r7, #12]
10009f9a:	895b      	ldrh	r3, [r3, #10]
10009f9c:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
10009f9e:	68fb      	ldr	r3, [r7, #12]
10009fa0:	3314      	adds	r3, #20
10009fa2:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
10009fa4:	6979      	ldr	r1, [r7, #20]
10009fa6:	687b      	ldr	r3, [r7, #4]
10009fa8:	68ba      	ldr	r2, [r7, #8]
10009faa:	6938      	ldr	r0, [r7, #16]
10009fac:	f7ff fdda 	bl	10009b64 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
10009fb0:	bf00      	nop
10009fb2:	3718      	adds	r7, #24
10009fb4:	46bd      	mov	sp, r7
10009fb6:	bd80      	pop	{r7, pc}

10009fb8 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
10009fb8:	b580      	push	{r7, lr}
10009fba:	b082      	sub	sp, #8
10009fbc:	af00      	add	r7, sp, #0
10009fbe:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
10009fc0:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
10009fc4:	687b      	ldr	r3, [r7, #4]
10009fc6:	68db      	ldr	r3, [r3, #12]
10009fc8:	2b00      	cmp	r3, #0
10009fca:	d003      	beq.n	10009fd4 <virtqueue_notification+0x1c>
		vq->callback(vq);
10009fcc:	687b      	ldr	r3, [r7, #4]
10009fce:	68db      	ldr	r3, [r3, #12]
10009fd0:	6878      	ldr	r0, [r7, #4]
10009fd2:	4798      	blx	r3
}
10009fd4:	bf00      	nop
10009fd6:	3708      	adds	r7, #8
10009fd8:	46bd      	mov	sp, r7
10009fda:	bd80      	pop	{r7, pc}

10009fdc <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
10009fdc:	b580      	push	{r7, lr}
10009fde:	b084      	sub	sp, #16
10009fe0:	af00      	add	r7, sp, #0
10009fe2:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10009fe4:	6879      	ldr	r1, [r7, #4]
10009fe6:	6809      	ldr	r1, [r1, #0]
10009fe8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
10009fec:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
10009ff0:	2300      	movs	r3, #0
10009ff2:	4313      	orrs	r3, r2
10009ff4:	d02a      	beq.n	1000a04c <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10009ff6:	687b      	ldr	r3, [r7, #4]
10009ff8:	681b      	ldr	r3, [r3, #0]
10009ffa:	699b      	ldr	r3, [r3, #24]
10009ffc:	2b01      	cmp	r3, #1
10009ffe:	d136      	bne.n	1000a06e <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
1000a000:	687b      	ldr	r3, [r7, #4]
1000a002:	6a1b      	ldr	r3, [r3, #32]
1000a004:	789a      	ldrb	r2, [r3, #2]
1000a006:	78db      	ldrb	r3, [r3, #3]
1000a008:	021b      	lsls	r3, r3, #8
1000a00a:	4313      	orrs	r3, r2
1000a00c:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
1000a00e:	687b      	ldr	r3, [r7, #4]
1000a010:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
1000a012:	89fa      	ldrh	r2, [r7, #14]
1000a014:	1ad3      	subs	r3, r2, r3
1000a016:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
1000a018:	687b      	ldr	r3, [r7, #4]
1000a01a:	69da      	ldr	r2, [r3, #28]
1000a01c:	687b      	ldr	r3, [r7, #4]
1000a01e:	6959      	ldr	r1, [r3, #20]
1000a020:	004b      	lsls	r3, r1, #1
1000a022:	4413      	add	r3, r2
1000a024:	7918      	ldrb	r0, [r3, #4]
1000a026:	004b      	lsls	r3, r1, #1
1000a028:	4413      	add	r3, r2
1000a02a:	795b      	ldrb	r3, [r3, #5]
1000a02c:	021b      	lsls	r3, r3, #8
1000a02e:	4303      	orrs	r3, r0
1000a030:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
1000a032:	89ba      	ldrh	r2, [r7, #12]
1000a034:	89f9      	ldrh	r1, [r7, #14]
1000a036:	897b      	ldrh	r3, [r7, #10]
1000a038:	4618      	mov	r0, r3
1000a03a:	f7ff fdbc 	bl	10009bb6 <vring_need_event>
1000a03e:	4603      	mov	r3, r0
						prev_idx) != 0;
1000a040:	2b00      	cmp	r3, #0
1000a042:	bf14      	ite	ne
1000a044:	2301      	movne	r3, #1
1000a046:	2300      	moveq	r3, #0
1000a048:	b2db      	uxtb	r3, r3
1000a04a:	e011      	b.n	1000a070 <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000a04c:	687b      	ldr	r3, [r7, #4]
1000a04e:	681b      	ldr	r3, [r3, #0]
1000a050:	699b      	ldr	r3, [r3, #24]
1000a052:	2b01      	cmp	r3, #1
1000a054:	d10b      	bne.n	1000a06e <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
1000a056:	687b      	ldr	r3, [r7, #4]
1000a058:	69db      	ldr	r3, [r3, #28]
1000a05a:	881b      	ldrh	r3, [r3, #0]
1000a05c:	b29b      	uxth	r3, r3
1000a05e:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
1000a062:	2b00      	cmp	r3, #0
1000a064:	bf0c      	ite	eq
1000a066:	2301      	moveq	r3, #1
1000a068:	2300      	movne	r3, #0
1000a06a:	b2db      	uxtb	r3, r3
1000a06c:	e000      	b.n	1000a070 <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
1000a06e:	2300      	movs	r3, #0
}
1000a070:	4618      	mov	r0, r3
1000a072:	3710      	adds	r7, #16
1000a074:	46bd      	mov	sp, r7
1000a076:	bd80      	pop	{r7, pc}

1000a078 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
1000a078:	b580      	push	{r7, lr}
1000a07a:	b082      	sub	sp, #8
1000a07c:	af00      	add	r7, sp, #0
1000a07e:	6078      	str	r0, [r7, #4]
	if (vq->notify)
1000a080:	687b      	ldr	r3, [r7, #4]
1000a082:	691b      	ldr	r3, [r3, #16]
1000a084:	2b00      	cmp	r3, #0
1000a086:	d003      	beq.n	1000a090 <vq_ring_notify+0x18>
		vq->notify(vq);
1000a088:	687b      	ldr	r3, [r7, #4]
1000a08a:	691b      	ldr	r3, [r3, #16]
1000a08c:	6878      	ldr	r0, [r7, #4]
1000a08e:	4798      	blx	r3
}
1000a090:	bf00      	nop
1000a092:	3708      	adds	r7, #8
1000a094:	46bd      	mov	sp, r7
1000a096:	bd80      	pop	{r7, pc}

1000a098 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
1000a098:	b580      	push	{r7, lr}
1000a09a:	b086      	sub	sp, #24
1000a09c:	af02      	add	r7, sp, #8
1000a09e:	60f8      	str	r0, [r7, #12]
1000a0a0:	60b9      	str	r1, [r7, #8]
1000a0a2:	607a      	str	r2, [r7, #4]
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
1000a0a4:	68fb      	ldr	r3, [r7, #12]
1000a0a6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1000a0a8:	68fb      	ldr	r3, [r7, #12]
1000a0aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1000a0ac:	2301      	movs	r3, #1
1000a0ae:	9301      	str	r3, [sp, #4]
1000a0b0:	687b      	ldr	r3, [r7, #4]
1000a0b2:	9300      	str	r3, [sp, #0]
1000a0b4:	68bb      	ldr	r3, [r7, #8]
1000a0b6:	68f8      	ldr	r0, [r7, #12]
1000a0b8:	f7fe fe78 	bl	10008dac <rpmsg_send_offchannel_raw>
1000a0bc:	4603      	mov	r3, r0
					 len, true);
}
1000a0be:	4618      	mov	r0, r3
1000a0c0:	3710      	adds	r7, #16
1000a0c2:	46bd      	mov	sp, r7
1000a0c4:	bd80      	pop	{r7, pc}

1000a0c6 <VIRT_UART_read_cb>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

static int VIRT_UART_read_cb(struct rpmsg_endpoint *ept, void *data,
			    size_t len, uint32_t src, void *priv)
{
1000a0c6:	b580      	push	{r7, lr}
1000a0c8:	b086      	sub	sp, #24
1000a0ca:	af00      	add	r7, sp, #0
1000a0cc:	60f8      	str	r0, [r7, #12]
1000a0ce:	60b9      	str	r1, [r7, #8]
1000a0d0:	607a      	str	r2, [r7, #4]
1000a0d2:	603b      	str	r3, [r7, #0]
  VIRT_UART_HandleTypeDef *huart = metal_container_of(ept, VIRT_UART_HandleTypeDef, ept);
1000a0d4:	68fb      	ldr	r3, [r7, #12]
1000a0d6:	617b      	str	r3, [r7, #20]
  (void)src;

  huart->pRxBuffPtr = data;
1000a0d8:	697b      	ldr	r3, [r7, #20]
1000a0da:	68ba      	ldr	r2, [r7, #8]
1000a0dc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxXferSize = len;
1000a0de:	687b      	ldr	r3, [r7, #4]
1000a0e0:	b29a      	uxth	r2, r3
1000a0e2:	697b      	ldr	r3, [r7, #20]
1000a0e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  if (huart->RxCpltCallback != NULL) {
1000a0e8:	697b      	ldr	r3, [r7, #20]
1000a0ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1000a0ec:	2b00      	cmp	r3, #0
1000a0ee:	d003      	beq.n	1000a0f8 <VIRT_UART_read_cb+0x32>
    huart->RxCpltCallback(huart);
1000a0f0:	697b      	ldr	r3, [r7, #20]
1000a0f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1000a0f4:	6978      	ldr	r0, [r7, #20]
1000a0f6:	4798      	blx	r3
  }

  return 0;
1000a0f8:	2300      	movs	r3, #0
}
1000a0fa:	4618      	mov	r0, r3
1000a0fc:	3718      	adds	r7, #24
1000a0fe:	46bd      	mov	sp, r7
1000a100:	bd80      	pop	{r7, pc}
	...

1000a104 <VIRT_UART_Init>:

VIRT_UART_StatusTypeDef VIRT_UART_Init(VIRT_UART_HandleTypeDef *huart)
{
1000a104:	b580      	push	{r7, lr}
1000a106:	b086      	sub	sp, #24
1000a108:	af02      	add	r7, sp, #8
1000a10a:	6078      	str	r0, [r7, #4]

  int status;

  /* Create a endpoint for rmpsg communication */

  status = OPENAMP_create_endpoint(&huart->ept, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
1000a10c:	6878      	ldr	r0, [r7, #4]
1000a10e:	2300      	movs	r3, #0
1000a110:	9300      	str	r3, [sp, #0]
1000a112:	4b08      	ldr	r3, [pc, #32]	@ (1000a134 <VIRT_UART_Init+0x30>)
1000a114:	f04f 32ff 	mov.w	r2, #4294967295
1000a118:	4907      	ldr	r1, [pc, #28]	@ (1000a138 <VIRT_UART_Init+0x34>)
1000a11a:	f7f7 f831 	bl	10001180 <OPENAMP_create_endpoint>
1000a11e:	60f8      	str	r0, [r7, #12]
		  	  	  	  	  	  	   VIRT_UART_read_cb, NULL);

  if(status < 0) {
1000a120:	68fb      	ldr	r3, [r7, #12]
1000a122:	2b00      	cmp	r3, #0
1000a124:	da01      	bge.n	1000a12a <VIRT_UART_Init+0x26>
    return VIRT_UART_ERROR;
1000a126:	2301      	movs	r3, #1
1000a128:	e000      	b.n	1000a12c <VIRT_UART_Init+0x28>
  }

  return VIRT_UART_OK;
1000a12a:	2300      	movs	r3, #0
}
1000a12c:	4618      	mov	r0, r3
1000a12e:	3710      	adds	r7, #16
1000a130:	46bd      	mov	sp, r7
1000a132:	bd80      	pop	{r7, pc}
1000a134:	1000a0c7 	.word	0x1000a0c7
1000a138:	1000b738 	.word	0x1000b738

1000a13c <VIRT_UART_RegisterCallback>:
}

VIRT_UART_StatusTypeDef VIRT_UART_RegisterCallback(VIRT_UART_HandleTypeDef *huart,
                                                   VIRT_UART_CallbackIDTypeDef CallbackID,
                                                   void (* pCallback)(VIRT_UART_HandleTypeDef *_huart))
{
1000a13c:	b480      	push	{r7}
1000a13e:	b087      	sub	sp, #28
1000a140:	af00      	add	r7, sp, #0
1000a142:	60f8      	str	r0, [r7, #12]
1000a144:	460b      	mov	r3, r1
1000a146:	607a      	str	r2, [r7, #4]
1000a148:	72fb      	strb	r3, [r7, #11]
  VIRT_UART_StatusTypeDef status = VIRT_UART_OK;
1000a14a:	2300      	movs	r3, #0
1000a14c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
1000a14e:	7afb      	ldrb	r3, [r7, #11]
1000a150:	2b00      	cmp	r3, #0
1000a152:	d103      	bne.n	1000a15c <VIRT_UART_RegisterCallback+0x20>
  {
  case VIRT_UART_RXCPLT_CB_ID :
    huart->RxCpltCallback = pCallback;
1000a154:	68fb      	ldr	r3, [r7, #12]
1000a156:	687a      	ldr	r2, [r7, #4]
1000a158:	64da      	str	r2, [r3, #76]	@ 0x4c
    break;
1000a15a:	e002      	b.n	1000a162 <VIRT_UART_RegisterCallback+0x26>

  default :
   /* Return error status */
    status =  VIRT_UART_ERROR;
1000a15c:	2301      	movs	r3, #1
1000a15e:	75fb      	strb	r3, [r7, #23]
    break;
1000a160:	bf00      	nop
  }
  return status;
1000a162:	7dfb      	ldrb	r3, [r7, #23]
}
1000a164:	4618      	mov	r0, r3
1000a166:	371c      	adds	r7, #28
1000a168:	46bd      	mov	sp, r7
1000a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a16e:	4770      	bx	lr

1000a170 <VIRT_UART_Transmit>:

VIRT_UART_StatusTypeDef VIRT_UART_Transmit(VIRT_UART_HandleTypeDef *huart, const void *pData, uint16_t Size)
{
1000a170:	b580      	push	{r7, lr}
1000a172:	b086      	sub	sp, #24
1000a174:	af00      	add	r7, sp, #0
1000a176:	60f8      	str	r0, [r7, #12]
1000a178:	60b9      	str	r1, [r7, #8]
1000a17a:	4613      	mov	r3, r2
1000a17c:	80fb      	strh	r3, [r7, #6]
	int res;

	if (Size > (RPMSG_BUFFER_SIZE-16))
1000a17e:	88fb      	ldrh	r3, [r7, #6]
1000a180:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
1000a184:	d901      	bls.n	1000a18a <VIRT_UART_Transmit+0x1a>
	  return VIRT_UART_ERROR;
1000a186:	2301      	movs	r3, #1
1000a188:	e00c      	b.n	1000a1a4 <VIRT_UART_Transmit+0x34>

	res = OPENAMP_send(&huart->ept, pData, Size);
1000a18a:	68fb      	ldr	r3, [r7, #12]
1000a18c:	88fa      	ldrh	r2, [r7, #6]
1000a18e:	68b9      	ldr	r1, [r7, #8]
1000a190:	4618      	mov	r0, r3
1000a192:	f7ff ff81 	bl	1000a098 <rpmsg_send>
1000a196:	6178      	str	r0, [r7, #20]
	if (res <0) {
1000a198:	697b      	ldr	r3, [r7, #20]
1000a19a:	2b00      	cmp	r3, #0
1000a19c:	da01      	bge.n	1000a1a2 <VIRT_UART_Transmit+0x32>
		return VIRT_UART_ERROR;
1000a19e:	2301      	movs	r3, #1
1000a1a0:	e000      	b.n	1000a1a4 <VIRT_UART_Transmit+0x34>
	}

	return VIRT_UART_OK;
1000a1a2:	2300      	movs	r3, #0
}
1000a1a4:	4618      	mov	r0, r3
1000a1a6:	3718      	adds	r7, #24
1000a1a8:	46bd      	mov	sp, r7
1000a1aa:	bd80      	pop	{r7, pc}

1000a1ac <__assert_func>:
1000a1ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000a1ae:	4614      	mov	r4, r2
1000a1b0:	461a      	mov	r2, r3
1000a1b2:	4b09      	ldr	r3, [pc, #36]	@ (1000a1d8 <__assert_func+0x2c>)
1000a1b4:	681b      	ldr	r3, [r3, #0]
1000a1b6:	4605      	mov	r5, r0
1000a1b8:	68d8      	ldr	r0, [r3, #12]
1000a1ba:	b14c      	cbz	r4, 1000a1d0 <__assert_func+0x24>
1000a1bc:	4b07      	ldr	r3, [pc, #28]	@ (1000a1dc <__assert_func+0x30>)
1000a1be:	9100      	str	r1, [sp, #0]
1000a1c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
1000a1c4:	4906      	ldr	r1, [pc, #24]	@ (1000a1e0 <__assert_func+0x34>)
1000a1c6:	462b      	mov	r3, r5
1000a1c8:	f000 f970 	bl	1000a4ac <fiprintf>
1000a1cc:	f000 fab1 	bl	1000a732 <abort>
1000a1d0:	4b04      	ldr	r3, [pc, #16]	@ (1000a1e4 <__assert_func+0x38>)
1000a1d2:	461c      	mov	r4, r3
1000a1d4:	e7f3      	b.n	1000a1be <__assert_func+0x12>
1000a1d6:	bf00      	nop
1000a1d8:	100200e0 	.word	0x100200e0
1000a1dc:	1000d75d 	.word	0x1000d75d
1000a1e0:	1000d76a 	.word	0x1000d76a
1000a1e4:	1000d798 	.word	0x1000d798

1000a1e8 <malloc>:
1000a1e8:	4b02      	ldr	r3, [pc, #8]	@ (1000a1f4 <malloc+0xc>)
1000a1ea:	4601      	mov	r1, r0
1000a1ec:	6818      	ldr	r0, [r3, #0]
1000a1ee:	f000 b82d 	b.w	1000a24c <_malloc_r>
1000a1f2:	bf00      	nop
1000a1f4:	100200e0 	.word	0x100200e0

1000a1f8 <free>:
1000a1f8:	4b02      	ldr	r3, [pc, #8]	@ (1000a204 <free+0xc>)
1000a1fa:	4601      	mov	r1, r0
1000a1fc:	6818      	ldr	r0, [r3, #0]
1000a1fe:	f000 ba9f 	b.w	1000a740 <_free_r>
1000a202:	bf00      	nop
1000a204:	100200e0 	.word	0x100200e0

1000a208 <sbrk_aligned>:
1000a208:	b570      	push	{r4, r5, r6, lr}
1000a20a:	4e0f      	ldr	r6, [pc, #60]	@ (1000a248 <sbrk_aligned+0x40>)
1000a20c:	460c      	mov	r4, r1
1000a20e:	6831      	ldr	r1, [r6, #0]
1000a210:	4605      	mov	r5, r0
1000a212:	b911      	cbnz	r1, 1000a21a <sbrk_aligned+0x12>
1000a214:	f000 fa30 	bl	1000a678 <_sbrk_r>
1000a218:	6030      	str	r0, [r6, #0]
1000a21a:	4621      	mov	r1, r4
1000a21c:	4628      	mov	r0, r5
1000a21e:	f000 fa2b 	bl	1000a678 <_sbrk_r>
1000a222:	1c43      	adds	r3, r0, #1
1000a224:	d103      	bne.n	1000a22e <sbrk_aligned+0x26>
1000a226:	f04f 34ff 	mov.w	r4, #4294967295
1000a22a:	4620      	mov	r0, r4
1000a22c:	bd70      	pop	{r4, r5, r6, pc}
1000a22e:	1cc4      	adds	r4, r0, #3
1000a230:	f024 0403 	bic.w	r4, r4, #3
1000a234:	42a0      	cmp	r0, r4
1000a236:	d0f8      	beq.n	1000a22a <sbrk_aligned+0x22>
1000a238:	1a21      	subs	r1, r4, r0
1000a23a:	4628      	mov	r0, r5
1000a23c:	f000 fa1c 	bl	1000a678 <_sbrk_r>
1000a240:	3001      	adds	r0, #1
1000a242:	d1f2      	bne.n	1000a22a <sbrk_aligned+0x22>
1000a244:	e7ef      	b.n	1000a226 <sbrk_aligned+0x1e>
1000a246:	bf00      	nop
1000a248:	10021408 	.word	0x10021408

1000a24c <_malloc_r>:
1000a24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000a250:	1ccd      	adds	r5, r1, #3
1000a252:	f025 0503 	bic.w	r5, r5, #3
1000a256:	3508      	adds	r5, #8
1000a258:	2d0c      	cmp	r5, #12
1000a25a:	bf38      	it	cc
1000a25c:	250c      	movcc	r5, #12
1000a25e:	2d00      	cmp	r5, #0
1000a260:	4606      	mov	r6, r0
1000a262:	db01      	blt.n	1000a268 <_malloc_r+0x1c>
1000a264:	42a9      	cmp	r1, r5
1000a266:	d904      	bls.n	1000a272 <_malloc_r+0x26>
1000a268:	230c      	movs	r3, #12
1000a26a:	6033      	str	r3, [r6, #0]
1000a26c:	2000      	movs	r0, #0
1000a26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000a272:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 1000a348 <_malloc_r+0xfc>
1000a276:	f000 f869 	bl	1000a34c <__malloc_lock>
1000a27a:	f8d8 3000 	ldr.w	r3, [r8]
1000a27e:	461c      	mov	r4, r3
1000a280:	bb44      	cbnz	r4, 1000a2d4 <_malloc_r+0x88>
1000a282:	4629      	mov	r1, r5
1000a284:	4630      	mov	r0, r6
1000a286:	f7ff ffbf 	bl	1000a208 <sbrk_aligned>
1000a28a:	1c43      	adds	r3, r0, #1
1000a28c:	4604      	mov	r4, r0
1000a28e:	d158      	bne.n	1000a342 <_malloc_r+0xf6>
1000a290:	f8d8 4000 	ldr.w	r4, [r8]
1000a294:	4627      	mov	r7, r4
1000a296:	2f00      	cmp	r7, #0
1000a298:	d143      	bne.n	1000a322 <_malloc_r+0xd6>
1000a29a:	2c00      	cmp	r4, #0
1000a29c:	d04b      	beq.n	1000a336 <_malloc_r+0xea>
1000a29e:	6823      	ldr	r3, [r4, #0]
1000a2a0:	4639      	mov	r1, r7
1000a2a2:	4630      	mov	r0, r6
1000a2a4:	eb04 0903 	add.w	r9, r4, r3
1000a2a8:	f000 f9e6 	bl	1000a678 <_sbrk_r>
1000a2ac:	4581      	cmp	r9, r0
1000a2ae:	d142      	bne.n	1000a336 <_malloc_r+0xea>
1000a2b0:	6821      	ldr	r1, [r4, #0]
1000a2b2:	1a6d      	subs	r5, r5, r1
1000a2b4:	4629      	mov	r1, r5
1000a2b6:	4630      	mov	r0, r6
1000a2b8:	f7ff ffa6 	bl	1000a208 <sbrk_aligned>
1000a2bc:	3001      	adds	r0, #1
1000a2be:	d03a      	beq.n	1000a336 <_malloc_r+0xea>
1000a2c0:	6823      	ldr	r3, [r4, #0]
1000a2c2:	442b      	add	r3, r5
1000a2c4:	6023      	str	r3, [r4, #0]
1000a2c6:	f8d8 3000 	ldr.w	r3, [r8]
1000a2ca:	685a      	ldr	r2, [r3, #4]
1000a2cc:	bb62      	cbnz	r2, 1000a328 <_malloc_r+0xdc>
1000a2ce:	f8c8 7000 	str.w	r7, [r8]
1000a2d2:	e00f      	b.n	1000a2f4 <_malloc_r+0xa8>
1000a2d4:	6822      	ldr	r2, [r4, #0]
1000a2d6:	1b52      	subs	r2, r2, r5
1000a2d8:	d420      	bmi.n	1000a31c <_malloc_r+0xd0>
1000a2da:	2a0b      	cmp	r2, #11
1000a2dc:	d917      	bls.n	1000a30e <_malloc_r+0xc2>
1000a2de:	1961      	adds	r1, r4, r5
1000a2e0:	42a3      	cmp	r3, r4
1000a2e2:	6025      	str	r5, [r4, #0]
1000a2e4:	bf18      	it	ne
1000a2e6:	6059      	strne	r1, [r3, #4]
1000a2e8:	6863      	ldr	r3, [r4, #4]
1000a2ea:	bf08      	it	eq
1000a2ec:	f8c8 1000 	streq.w	r1, [r8]
1000a2f0:	5162      	str	r2, [r4, r5]
1000a2f2:	604b      	str	r3, [r1, #4]
1000a2f4:	4630      	mov	r0, r6
1000a2f6:	f000 f82f 	bl	1000a358 <__malloc_unlock>
1000a2fa:	f104 000b 	add.w	r0, r4, #11
1000a2fe:	1d23      	adds	r3, r4, #4
1000a300:	f020 0007 	bic.w	r0, r0, #7
1000a304:	1ac2      	subs	r2, r0, r3
1000a306:	bf1c      	itt	ne
1000a308:	1a1b      	subne	r3, r3, r0
1000a30a:	50a3      	strne	r3, [r4, r2]
1000a30c:	e7af      	b.n	1000a26e <_malloc_r+0x22>
1000a30e:	6862      	ldr	r2, [r4, #4]
1000a310:	42a3      	cmp	r3, r4
1000a312:	bf0c      	ite	eq
1000a314:	f8c8 2000 	streq.w	r2, [r8]
1000a318:	605a      	strne	r2, [r3, #4]
1000a31a:	e7eb      	b.n	1000a2f4 <_malloc_r+0xa8>
1000a31c:	4623      	mov	r3, r4
1000a31e:	6864      	ldr	r4, [r4, #4]
1000a320:	e7ae      	b.n	1000a280 <_malloc_r+0x34>
1000a322:	463c      	mov	r4, r7
1000a324:	687f      	ldr	r7, [r7, #4]
1000a326:	e7b6      	b.n	1000a296 <_malloc_r+0x4a>
1000a328:	461a      	mov	r2, r3
1000a32a:	685b      	ldr	r3, [r3, #4]
1000a32c:	42a3      	cmp	r3, r4
1000a32e:	d1fb      	bne.n	1000a328 <_malloc_r+0xdc>
1000a330:	2300      	movs	r3, #0
1000a332:	6053      	str	r3, [r2, #4]
1000a334:	e7de      	b.n	1000a2f4 <_malloc_r+0xa8>
1000a336:	230c      	movs	r3, #12
1000a338:	6033      	str	r3, [r6, #0]
1000a33a:	4630      	mov	r0, r6
1000a33c:	f000 f80c 	bl	1000a358 <__malloc_unlock>
1000a340:	e794      	b.n	1000a26c <_malloc_r+0x20>
1000a342:	6005      	str	r5, [r0, #0]
1000a344:	e7d6      	b.n	1000a2f4 <_malloc_r+0xa8>
1000a346:	bf00      	nop
1000a348:	1002140c 	.word	0x1002140c

1000a34c <__malloc_lock>:
1000a34c:	4801      	ldr	r0, [pc, #4]	@ (1000a354 <__malloc_lock+0x8>)
1000a34e:	f000 b9e0 	b.w	1000a712 <__retarget_lock_acquire_recursive>
1000a352:	bf00      	nop
1000a354:	10021550 	.word	0x10021550

1000a358 <__malloc_unlock>:
1000a358:	4801      	ldr	r0, [pc, #4]	@ (1000a360 <__malloc_unlock+0x8>)
1000a35a:	f000 b9db 	b.w	1000a714 <__retarget_lock_release_recursive>
1000a35e:	bf00      	nop
1000a360:	10021550 	.word	0x10021550

1000a364 <std>:
1000a364:	2300      	movs	r3, #0
1000a366:	b510      	push	{r4, lr}
1000a368:	4604      	mov	r4, r0
1000a36a:	e9c0 3300 	strd	r3, r3, [r0]
1000a36e:	e9c0 3304 	strd	r3, r3, [r0, #16]
1000a372:	6083      	str	r3, [r0, #8]
1000a374:	8181      	strh	r1, [r0, #12]
1000a376:	6643      	str	r3, [r0, #100]	@ 0x64
1000a378:	81c2      	strh	r2, [r0, #14]
1000a37a:	6183      	str	r3, [r0, #24]
1000a37c:	4619      	mov	r1, r3
1000a37e:	2208      	movs	r2, #8
1000a380:	305c      	adds	r0, #92	@ 0x5c
1000a382:	f000 f918 	bl	1000a5b6 <memset>
1000a386:	4b0d      	ldr	r3, [pc, #52]	@ (1000a3bc <std+0x58>)
1000a388:	6263      	str	r3, [r4, #36]	@ 0x24
1000a38a:	4b0d      	ldr	r3, [pc, #52]	@ (1000a3c0 <std+0x5c>)
1000a38c:	62a3      	str	r3, [r4, #40]	@ 0x28
1000a38e:	4b0d      	ldr	r3, [pc, #52]	@ (1000a3c4 <std+0x60>)
1000a390:	62e3      	str	r3, [r4, #44]	@ 0x2c
1000a392:	4b0d      	ldr	r3, [pc, #52]	@ (1000a3c8 <std+0x64>)
1000a394:	6323      	str	r3, [r4, #48]	@ 0x30
1000a396:	4b0d      	ldr	r3, [pc, #52]	@ (1000a3cc <std+0x68>)
1000a398:	6224      	str	r4, [r4, #32]
1000a39a:	429c      	cmp	r4, r3
1000a39c:	d006      	beq.n	1000a3ac <std+0x48>
1000a39e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
1000a3a2:	4294      	cmp	r4, r2
1000a3a4:	d002      	beq.n	1000a3ac <std+0x48>
1000a3a6:	33d0      	adds	r3, #208	@ 0xd0
1000a3a8:	429c      	cmp	r4, r3
1000a3aa:	d105      	bne.n	1000a3b8 <std+0x54>
1000a3ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
1000a3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000a3b4:	f000 b9ac 	b.w	1000a710 <__retarget_lock_init_recursive>
1000a3b8:	bd10      	pop	{r4, pc}
1000a3ba:	bf00      	nop
1000a3bc:	1000a531 	.word	0x1000a531
1000a3c0:	1000a553 	.word	0x1000a553
1000a3c4:	1000a58b 	.word	0x1000a58b
1000a3c8:	1000a5af 	.word	0x1000a5af
1000a3cc:	10021410 	.word	0x10021410

1000a3d0 <stdio_exit_handler>:
1000a3d0:	4a02      	ldr	r2, [pc, #8]	@ (1000a3dc <stdio_exit_handler+0xc>)
1000a3d2:	4903      	ldr	r1, [pc, #12]	@ (1000a3e0 <stdio_exit_handler+0x10>)
1000a3d4:	4803      	ldr	r0, [pc, #12]	@ (1000a3e4 <stdio_exit_handler+0x14>)
1000a3d6:	f000 b87b 	b.w	1000a4d0 <_fwalk_sglue>
1000a3da:	bf00      	nop
1000a3dc:	100200d4 	.word	0x100200d4
1000a3e0:	1000ae79 	.word	0x1000ae79
1000a3e4:	100200e4 	.word	0x100200e4

1000a3e8 <cleanup_stdio>:
1000a3e8:	6841      	ldr	r1, [r0, #4]
1000a3ea:	4b0c      	ldr	r3, [pc, #48]	@ (1000a41c <cleanup_stdio+0x34>)
1000a3ec:	4299      	cmp	r1, r3
1000a3ee:	b510      	push	{r4, lr}
1000a3f0:	4604      	mov	r4, r0
1000a3f2:	d001      	beq.n	1000a3f8 <cleanup_stdio+0x10>
1000a3f4:	f000 fd40 	bl	1000ae78 <_fflush_r>
1000a3f8:	68a1      	ldr	r1, [r4, #8]
1000a3fa:	4b09      	ldr	r3, [pc, #36]	@ (1000a420 <cleanup_stdio+0x38>)
1000a3fc:	4299      	cmp	r1, r3
1000a3fe:	d002      	beq.n	1000a406 <cleanup_stdio+0x1e>
1000a400:	4620      	mov	r0, r4
1000a402:	f000 fd39 	bl	1000ae78 <_fflush_r>
1000a406:	68e1      	ldr	r1, [r4, #12]
1000a408:	4b06      	ldr	r3, [pc, #24]	@ (1000a424 <cleanup_stdio+0x3c>)
1000a40a:	4299      	cmp	r1, r3
1000a40c:	d004      	beq.n	1000a418 <cleanup_stdio+0x30>
1000a40e:	4620      	mov	r0, r4
1000a410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000a414:	f000 bd30 	b.w	1000ae78 <_fflush_r>
1000a418:	bd10      	pop	{r4, pc}
1000a41a:	bf00      	nop
1000a41c:	10021410 	.word	0x10021410
1000a420:	10021478 	.word	0x10021478
1000a424:	100214e0 	.word	0x100214e0

1000a428 <global_stdio_init.part.0>:
1000a428:	b510      	push	{r4, lr}
1000a42a:	4b0b      	ldr	r3, [pc, #44]	@ (1000a458 <global_stdio_init.part.0+0x30>)
1000a42c:	4c0b      	ldr	r4, [pc, #44]	@ (1000a45c <global_stdio_init.part.0+0x34>)
1000a42e:	4a0c      	ldr	r2, [pc, #48]	@ (1000a460 <global_stdio_init.part.0+0x38>)
1000a430:	601a      	str	r2, [r3, #0]
1000a432:	4620      	mov	r0, r4
1000a434:	2200      	movs	r2, #0
1000a436:	2104      	movs	r1, #4
1000a438:	f7ff ff94 	bl	1000a364 <std>
1000a43c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
1000a440:	2201      	movs	r2, #1
1000a442:	2109      	movs	r1, #9
1000a444:	f7ff ff8e 	bl	1000a364 <std>
1000a448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
1000a44c:	2202      	movs	r2, #2
1000a44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000a452:	2112      	movs	r1, #18
1000a454:	f7ff bf86 	b.w	1000a364 <std>
1000a458:	10021548 	.word	0x10021548
1000a45c:	10021410 	.word	0x10021410
1000a460:	1000a3d1 	.word	0x1000a3d1

1000a464 <__sfp_lock_acquire>:
1000a464:	4801      	ldr	r0, [pc, #4]	@ (1000a46c <__sfp_lock_acquire+0x8>)
1000a466:	f000 b954 	b.w	1000a712 <__retarget_lock_acquire_recursive>
1000a46a:	bf00      	nop
1000a46c:	10021551 	.word	0x10021551

1000a470 <__sfp_lock_release>:
1000a470:	4801      	ldr	r0, [pc, #4]	@ (1000a478 <__sfp_lock_release+0x8>)
1000a472:	f000 b94f 	b.w	1000a714 <__retarget_lock_release_recursive>
1000a476:	bf00      	nop
1000a478:	10021551 	.word	0x10021551

1000a47c <__sinit>:
1000a47c:	b510      	push	{r4, lr}
1000a47e:	4604      	mov	r4, r0
1000a480:	f7ff fff0 	bl	1000a464 <__sfp_lock_acquire>
1000a484:	6a23      	ldr	r3, [r4, #32]
1000a486:	b11b      	cbz	r3, 1000a490 <__sinit+0x14>
1000a488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000a48c:	f7ff bff0 	b.w	1000a470 <__sfp_lock_release>
1000a490:	4b04      	ldr	r3, [pc, #16]	@ (1000a4a4 <__sinit+0x28>)
1000a492:	6223      	str	r3, [r4, #32]
1000a494:	4b04      	ldr	r3, [pc, #16]	@ (1000a4a8 <__sinit+0x2c>)
1000a496:	681b      	ldr	r3, [r3, #0]
1000a498:	2b00      	cmp	r3, #0
1000a49a:	d1f5      	bne.n	1000a488 <__sinit+0xc>
1000a49c:	f7ff ffc4 	bl	1000a428 <global_stdio_init.part.0>
1000a4a0:	e7f2      	b.n	1000a488 <__sinit+0xc>
1000a4a2:	bf00      	nop
1000a4a4:	1000a3e9 	.word	0x1000a3e9
1000a4a8:	10021548 	.word	0x10021548

1000a4ac <fiprintf>:
1000a4ac:	b40e      	push	{r1, r2, r3}
1000a4ae:	b503      	push	{r0, r1, lr}
1000a4b0:	4601      	mov	r1, r0
1000a4b2:	ab03      	add	r3, sp, #12
1000a4b4:	4805      	ldr	r0, [pc, #20]	@ (1000a4cc <fiprintf+0x20>)
1000a4b6:	f853 2b04 	ldr.w	r2, [r3], #4
1000a4ba:	6800      	ldr	r0, [r0, #0]
1000a4bc:	9301      	str	r3, [sp, #4]
1000a4be:	f000 f9b3 	bl	1000a828 <_vfiprintf_r>
1000a4c2:	b002      	add	sp, #8
1000a4c4:	f85d eb04 	ldr.w	lr, [sp], #4
1000a4c8:	b003      	add	sp, #12
1000a4ca:	4770      	bx	lr
1000a4cc:	100200e0 	.word	0x100200e0

1000a4d0 <_fwalk_sglue>:
1000a4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000a4d4:	4607      	mov	r7, r0
1000a4d6:	4688      	mov	r8, r1
1000a4d8:	4614      	mov	r4, r2
1000a4da:	2600      	movs	r6, #0
1000a4dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
1000a4e0:	f1b9 0901 	subs.w	r9, r9, #1
1000a4e4:	d505      	bpl.n	1000a4f2 <_fwalk_sglue+0x22>
1000a4e6:	6824      	ldr	r4, [r4, #0]
1000a4e8:	2c00      	cmp	r4, #0
1000a4ea:	d1f7      	bne.n	1000a4dc <_fwalk_sglue+0xc>
1000a4ec:	4630      	mov	r0, r6
1000a4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000a4f2:	89ab      	ldrh	r3, [r5, #12]
1000a4f4:	2b01      	cmp	r3, #1
1000a4f6:	d907      	bls.n	1000a508 <_fwalk_sglue+0x38>
1000a4f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1000a4fc:	3301      	adds	r3, #1
1000a4fe:	d003      	beq.n	1000a508 <_fwalk_sglue+0x38>
1000a500:	4629      	mov	r1, r5
1000a502:	4638      	mov	r0, r7
1000a504:	47c0      	blx	r8
1000a506:	4306      	orrs	r6, r0
1000a508:	3568      	adds	r5, #104	@ 0x68
1000a50a:	e7e9      	b.n	1000a4e0 <_fwalk_sglue+0x10>

1000a50c <iprintf>:
1000a50c:	b40f      	push	{r0, r1, r2, r3}
1000a50e:	b507      	push	{r0, r1, r2, lr}
1000a510:	4906      	ldr	r1, [pc, #24]	@ (1000a52c <iprintf+0x20>)
1000a512:	ab04      	add	r3, sp, #16
1000a514:	6808      	ldr	r0, [r1, #0]
1000a516:	f853 2b04 	ldr.w	r2, [r3], #4
1000a51a:	6881      	ldr	r1, [r0, #8]
1000a51c:	9301      	str	r3, [sp, #4]
1000a51e:	f000 f983 	bl	1000a828 <_vfiprintf_r>
1000a522:	b003      	add	sp, #12
1000a524:	f85d eb04 	ldr.w	lr, [sp], #4
1000a528:	b004      	add	sp, #16
1000a52a:	4770      	bx	lr
1000a52c:	100200e0 	.word	0x100200e0

1000a530 <__sread>:
1000a530:	b510      	push	{r4, lr}
1000a532:	460c      	mov	r4, r1
1000a534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000a538:	f000 f88c 	bl	1000a654 <_read_r>
1000a53c:	2800      	cmp	r0, #0
1000a53e:	bfab      	itete	ge
1000a540:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
1000a542:	89a3      	ldrhlt	r3, [r4, #12]
1000a544:	181b      	addge	r3, r3, r0
1000a546:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
1000a54a:	bfac      	ite	ge
1000a54c:	6563      	strge	r3, [r4, #84]	@ 0x54
1000a54e:	81a3      	strhlt	r3, [r4, #12]
1000a550:	bd10      	pop	{r4, pc}

1000a552 <__swrite>:
1000a552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000a556:	461f      	mov	r7, r3
1000a558:	898b      	ldrh	r3, [r1, #12]
1000a55a:	05db      	lsls	r3, r3, #23
1000a55c:	4605      	mov	r5, r0
1000a55e:	460c      	mov	r4, r1
1000a560:	4616      	mov	r6, r2
1000a562:	d505      	bpl.n	1000a570 <__swrite+0x1e>
1000a564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000a568:	2302      	movs	r3, #2
1000a56a:	2200      	movs	r2, #0
1000a56c:	f000 f860 	bl	1000a630 <_lseek_r>
1000a570:	89a3      	ldrh	r3, [r4, #12]
1000a572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000a576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
1000a57a:	81a3      	strh	r3, [r4, #12]
1000a57c:	4632      	mov	r2, r6
1000a57e:	463b      	mov	r3, r7
1000a580:	4628      	mov	r0, r5
1000a582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000a586:	f000 b887 	b.w	1000a698 <_write_r>

1000a58a <__sseek>:
1000a58a:	b510      	push	{r4, lr}
1000a58c:	460c      	mov	r4, r1
1000a58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000a592:	f000 f84d 	bl	1000a630 <_lseek_r>
1000a596:	1c43      	adds	r3, r0, #1
1000a598:	89a3      	ldrh	r3, [r4, #12]
1000a59a:	bf15      	itete	ne
1000a59c:	6560      	strne	r0, [r4, #84]	@ 0x54
1000a59e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
1000a5a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
1000a5a6:	81a3      	strheq	r3, [r4, #12]
1000a5a8:	bf18      	it	ne
1000a5aa:	81a3      	strhne	r3, [r4, #12]
1000a5ac:	bd10      	pop	{r4, pc}

1000a5ae <__sclose>:
1000a5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000a5b2:	f000 b82d 	b.w	1000a610 <_close_r>

1000a5b6 <memset>:
1000a5b6:	4402      	add	r2, r0
1000a5b8:	4603      	mov	r3, r0
1000a5ba:	4293      	cmp	r3, r2
1000a5bc:	d100      	bne.n	1000a5c0 <memset+0xa>
1000a5be:	4770      	bx	lr
1000a5c0:	f803 1b01 	strb.w	r1, [r3], #1
1000a5c4:	e7f9      	b.n	1000a5ba <memset+0x4>

1000a5c6 <strncmp>:
1000a5c6:	b510      	push	{r4, lr}
1000a5c8:	b16a      	cbz	r2, 1000a5e6 <strncmp+0x20>
1000a5ca:	3901      	subs	r1, #1
1000a5cc:	1884      	adds	r4, r0, r2
1000a5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
1000a5d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
1000a5d6:	429a      	cmp	r2, r3
1000a5d8:	d103      	bne.n	1000a5e2 <strncmp+0x1c>
1000a5da:	42a0      	cmp	r0, r4
1000a5dc:	d001      	beq.n	1000a5e2 <strncmp+0x1c>
1000a5de:	2a00      	cmp	r2, #0
1000a5e0:	d1f5      	bne.n	1000a5ce <strncmp+0x8>
1000a5e2:	1ad0      	subs	r0, r2, r3
1000a5e4:	bd10      	pop	{r4, pc}
1000a5e6:	4610      	mov	r0, r2
1000a5e8:	e7fc      	b.n	1000a5e4 <strncmp+0x1e>

1000a5ea <strncpy>:
1000a5ea:	b510      	push	{r4, lr}
1000a5ec:	3901      	subs	r1, #1
1000a5ee:	4603      	mov	r3, r0
1000a5f0:	b132      	cbz	r2, 1000a600 <strncpy+0x16>
1000a5f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1000a5f6:	f803 4b01 	strb.w	r4, [r3], #1
1000a5fa:	3a01      	subs	r2, #1
1000a5fc:	2c00      	cmp	r4, #0
1000a5fe:	d1f7      	bne.n	1000a5f0 <strncpy+0x6>
1000a600:	441a      	add	r2, r3
1000a602:	2100      	movs	r1, #0
1000a604:	4293      	cmp	r3, r2
1000a606:	d100      	bne.n	1000a60a <strncpy+0x20>
1000a608:	bd10      	pop	{r4, pc}
1000a60a:	f803 1b01 	strb.w	r1, [r3], #1
1000a60e:	e7f9      	b.n	1000a604 <strncpy+0x1a>

1000a610 <_close_r>:
1000a610:	b538      	push	{r3, r4, r5, lr}
1000a612:	4d06      	ldr	r5, [pc, #24]	@ (1000a62c <_close_r+0x1c>)
1000a614:	2300      	movs	r3, #0
1000a616:	4604      	mov	r4, r0
1000a618:	4608      	mov	r0, r1
1000a61a:	602b      	str	r3, [r5, #0]
1000a61c:	f7f6 ff6a 	bl	100014f4 <_close>
1000a620:	1c43      	adds	r3, r0, #1
1000a622:	d102      	bne.n	1000a62a <_close_r+0x1a>
1000a624:	682b      	ldr	r3, [r5, #0]
1000a626:	b103      	cbz	r3, 1000a62a <_close_r+0x1a>
1000a628:	6023      	str	r3, [r4, #0]
1000a62a:	bd38      	pop	{r3, r4, r5, pc}
1000a62c:	1002154c 	.word	0x1002154c

1000a630 <_lseek_r>:
1000a630:	b538      	push	{r3, r4, r5, lr}
1000a632:	4d07      	ldr	r5, [pc, #28]	@ (1000a650 <_lseek_r+0x20>)
1000a634:	4604      	mov	r4, r0
1000a636:	4608      	mov	r0, r1
1000a638:	4611      	mov	r1, r2
1000a63a:	2200      	movs	r2, #0
1000a63c:	602a      	str	r2, [r5, #0]
1000a63e:	461a      	mov	r2, r3
1000a640:	f7f6 ff7f 	bl	10001542 <_lseek>
1000a644:	1c43      	adds	r3, r0, #1
1000a646:	d102      	bne.n	1000a64e <_lseek_r+0x1e>
1000a648:	682b      	ldr	r3, [r5, #0]
1000a64a:	b103      	cbz	r3, 1000a64e <_lseek_r+0x1e>
1000a64c:	6023      	str	r3, [r4, #0]
1000a64e:	bd38      	pop	{r3, r4, r5, pc}
1000a650:	1002154c 	.word	0x1002154c

1000a654 <_read_r>:
1000a654:	b538      	push	{r3, r4, r5, lr}
1000a656:	4d07      	ldr	r5, [pc, #28]	@ (1000a674 <_read_r+0x20>)
1000a658:	4604      	mov	r4, r0
1000a65a:	4608      	mov	r0, r1
1000a65c:	4611      	mov	r1, r2
1000a65e:	2200      	movs	r2, #0
1000a660:	602a      	str	r2, [r5, #0]
1000a662:	461a      	mov	r2, r3
1000a664:	f7f6 ff0d 	bl	10001482 <_read>
1000a668:	1c43      	adds	r3, r0, #1
1000a66a:	d102      	bne.n	1000a672 <_read_r+0x1e>
1000a66c:	682b      	ldr	r3, [r5, #0]
1000a66e:	b103      	cbz	r3, 1000a672 <_read_r+0x1e>
1000a670:	6023      	str	r3, [r4, #0]
1000a672:	bd38      	pop	{r3, r4, r5, pc}
1000a674:	1002154c 	.word	0x1002154c

1000a678 <_sbrk_r>:
1000a678:	b538      	push	{r3, r4, r5, lr}
1000a67a:	4d06      	ldr	r5, [pc, #24]	@ (1000a694 <_sbrk_r+0x1c>)
1000a67c:	2300      	movs	r3, #0
1000a67e:	4604      	mov	r4, r0
1000a680:	4608      	mov	r0, r1
1000a682:	602b      	str	r3, [r5, #0]
1000a684:	f000 fd7c 	bl	1000b180 <_sbrk>
1000a688:	1c43      	adds	r3, r0, #1
1000a68a:	d102      	bne.n	1000a692 <_sbrk_r+0x1a>
1000a68c:	682b      	ldr	r3, [r5, #0]
1000a68e:	b103      	cbz	r3, 1000a692 <_sbrk_r+0x1a>
1000a690:	6023      	str	r3, [r4, #0]
1000a692:	bd38      	pop	{r3, r4, r5, pc}
1000a694:	1002154c 	.word	0x1002154c

1000a698 <_write_r>:
1000a698:	b538      	push	{r3, r4, r5, lr}
1000a69a:	4d07      	ldr	r5, [pc, #28]	@ (1000a6b8 <_write_r+0x20>)
1000a69c:	4604      	mov	r4, r0
1000a69e:	4608      	mov	r0, r1
1000a6a0:	4611      	mov	r1, r2
1000a6a2:	2200      	movs	r2, #0
1000a6a4:	602a      	str	r2, [r5, #0]
1000a6a6:	461a      	mov	r2, r3
1000a6a8:	f7f6 ff08 	bl	100014bc <_write>
1000a6ac:	1c43      	adds	r3, r0, #1
1000a6ae:	d102      	bne.n	1000a6b6 <_write_r+0x1e>
1000a6b0:	682b      	ldr	r3, [r5, #0]
1000a6b2:	b103      	cbz	r3, 1000a6b6 <_write_r+0x1e>
1000a6b4:	6023      	str	r3, [r4, #0]
1000a6b6:	bd38      	pop	{r3, r4, r5, pc}
1000a6b8:	1002154c 	.word	0x1002154c

1000a6bc <__errno>:
1000a6bc:	4b01      	ldr	r3, [pc, #4]	@ (1000a6c4 <__errno+0x8>)
1000a6be:	6818      	ldr	r0, [r3, #0]
1000a6c0:	4770      	bx	lr
1000a6c2:	bf00      	nop
1000a6c4:	100200e0 	.word	0x100200e0

1000a6c8 <__libc_init_array>:
1000a6c8:	b570      	push	{r4, r5, r6, lr}
1000a6ca:	4d0d      	ldr	r5, [pc, #52]	@ (1000a700 <__libc_init_array+0x38>)
1000a6cc:	4c0d      	ldr	r4, [pc, #52]	@ (1000a704 <__libc_init_array+0x3c>)
1000a6ce:	1b64      	subs	r4, r4, r5
1000a6d0:	10a4      	asrs	r4, r4, #2
1000a6d2:	2600      	movs	r6, #0
1000a6d4:	42a6      	cmp	r6, r4
1000a6d6:	d109      	bne.n	1000a6ec <__libc_init_array+0x24>
1000a6d8:	4d0b      	ldr	r5, [pc, #44]	@ (1000a708 <__libc_init_array+0x40>)
1000a6da:	4c0c      	ldr	r4, [pc, #48]	@ (1000a70c <__libc_init_array+0x44>)
1000a6dc:	f000 fd5e 	bl	1000b19c <_init>
1000a6e0:	1b64      	subs	r4, r4, r5
1000a6e2:	10a4      	asrs	r4, r4, #2
1000a6e4:	2600      	movs	r6, #0
1000a6e6:	42a6      	cmp	r6, r4
1000a6e8:	d105      	bne.n	1000a6f6 <__libc_init_array+0x2e>
1000a6ea:	bd70      	pop	{r4, r5, r6, pc}
1000a6ec:	f855 3b04 	ldr.w	r3, [r5], #4
1000a6f0:	4798      	blx	r3
1000a6f2:	3601      	adds	r6, #1
1000a6f4:	e7ee      	b.n	1000a6d4 <__libc_init_array+0xc>
1000a6f6:	f855 3b04 	ldr.w	r3, [r5], #4
1000a6fa:	4798      	blx	r3
1000a6fc:	3601      	adds	r6, #1
1000a6fe:	e7f2      	b.n	1000a6e6 <__libc_init_array+0x1e>
1000a700:	1000d7d4 	.word	0x1000d7d4
1000a704:	1000d7d4 	.word	0x1000d7d4
1000a708:	1000d7d4 	.word	0x1000d7d4
1000a70c:	1000d7d8 	.word	0x1000d7d8

1000a710 <__retarget_lock_init_recursive>:
1000a710:	4770      	bx	lr

1000a712 <__retarget_lock_acquire_recursive>:
1000a712:	4770      	bx	lr

1000a714 <__retarget_lock_release_recursive>:
1000a714:	4770      	bx	lr

1000a716 <memcpy>:
1000a716:	440a      	add	r2, r1
1000a718:	4291      	cmp	r1, r2
1000a71a:	f100 33ff 	add.w	r3, r0, #4294967295
1000a71e:	d100      	bne.n	1000a722 <memcpy+0xc>
1000a720:	4770      	bx	lr
1000a722:	b510      	push	{r4, lr}
1000a724:	f811 4b01 	ldrb.w	r4, [r1], #1
1000a728:	f803 4f01 	strb.w	r4, [r3, #1]!
1000a72c:	4291      	cmp	r1, r2
1000a72e:	d1f9      	bne.n	1000a724 <memcpy+0xe>
1000a730:	bd10      	pop	{r4, pc}

1000a732 <abort>:
1000a732:	b508      	push	{r3, lr}
1000a734:	2006      	movs	r0, #6
1000a736:	f000 fc83 	bl	1000b040 <raise>
1000a73a:	2001      	movs	r0, #1
1000a73c:	f7f6 fe96 	bl	1000146c <_exit>

1000a740 <_free_r>:
1000a740:	b538      	push	{r3, r4, r5, lr}
1000a742:	4605      	mov	r5, r0
1000a744:	2900      	cmp	r1, #0
1000a746:	d041      	beq.n	1000a7cc <_free_r+0x8c>
1000a748:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000a74c:	1f0c      	subs	r4, r1, #4
1000a74e:	2b00      	cmp	r3, #0
1000a750:	bfb8      	it	lt
1000a752:	18e4      	addlt	r4, r4, r3
1000a754:	f7ff fdfa 	bl	1000a34c <__malloc_lock>
1000a758:	4a1d      	ldr	r2, [pc, #116]	@ (1000a7d0 <_free_r+0x90>)
1000a75a:	6813      	ldr	r3, [r2, #0]
1000a75c:	b933      	cbnz	r3, 1000a76c <_free_r+0x2c>
1000a75e:	6063      	str	r3, [r4, #4]
1000a760:	6014      	str	r4, [r2, #0]
1000a762:	4628      	mov	r0, r5
1000a764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000a768:	f7ff bdf6 	b.w	1000a358 <__malloc_unlock>
1000a76c:	42a3      	cmp	r3, r4
1000a76e:	d908      	bls.n	1000a782 <_free_r+0x42>
1000a770:	6820      	ldr	r0, [r4, #0]
1000a772:	1821      	adds	r1, r4, r0
1000a774:	428b      	cmp	r3, r1
1000a776:	bf01      	itttt	eq
1000a778:	6819      	ldreq	r1, [r3, #0]
1000a77a:	685b      	ldreq	r3, [r3, #4]
1000a77c:	1809      	addeq	r1, r1, r0
1000a77e:	6021      	streq	r1, [r4, #0]
1000a780:	e7ed      	b.n	1000a75e <_free_r+0x1e>
1000a782:	461a      	mov	r2, r3
1000a784:	685b      	ldr	r3, [r3, #4]
1000a786:	b10b      	cbz	r3, 1000a78c <_free_r+0x4c>
1000a788:	42a3      	cmp	r3, r4
1000a78a:	d9fa      	bls.n	1000a782 <_free_r+0x42>
1000a78c:	6811      	ldr	r1, [r2, #0]
1000a78e:	1850      	adds	r0, r2, r1
1000a790:	42a0      	cmp	r0, r4
1000a792:	d10b      	bne.n	1000a7ac <_free_r+0x6c>
1000a794:	6820      	ldr	r0, [r4, #0]
1000a796:	4401      	add	r1, r0
1000a798:	1850      	adds	r0, r2, r1
1000a79a:	4283      	cmp	r3, r0
1000a79c:	6011      	str	r1, [r2, #0]
1000a79e:	d1e0      	bne.n	1000a762 <_free_r+0x22>
1000a7a0:	6818      	ldr	r0, [r3, #0]
1000a7a2:	685b      	ldr	r3, [r3, #4]
1000a7a4:	6053      	str	r3, [r2, #4]
1000a7a6:	4408      	add	r0, r1
1000a7a8:	6010      	str	r0, [r2, #0]
1000a7aa:	e7da      	b.n	1000a762 <_free_r+0x22>
1000a7ac:	d902      	bls.n	1000a7b4 <_free_r+0x74>
1000a7ae:	230c      	movs	r3, #12
1000a7b0:	602b      	str	r3, [r5, #0]
1000a7b2:	e7d6      	b.n	1000a762 <_free_r+0x22>
1000a7b4:	6820      	ldr	r0, [r4, #0]
1000a7b6:	1821      	adds	r1, r4, r0
1000a7b8:	428b      	cmp	r3, r1
1000a7ba:	bf04      	itt	eq
1000a7bc:	6819      	ldreq	r1, [r3, #0]
1000a7be:	685b      	ldreq	r3, [r3, #4]
1000a7c0:	6063      	str	r3, [r4, #4]
1000a7c2:	bf04      	itt	eq
1000a7c4:	1809      	addeq	r1, r1, r0
1000a7c6:	6021      	streq	r1, [r4, #0]
1000a7c8:	6054      	str	r4, [r2, #4]
1000a7ca:	e7ca      	b.n	1000a762 <_free_r+0x22>
1000a7cc:	bd38      	pop	{r3, r4, r5, pc}
1000a7ce:	bf00      	nop
1000a7d0:	1002140c 	.word	0x1002140c

1000a7d4 <__sfputc_r>:
1000a7d4:	6893      	ldr	r3, [r2, #8]
1000a7d6:	3b01      	subs	r3, #1
1000a7d8:	2b00      	cmp	r3, #0
1000a7da:	b410      	push	{r4}
1000a7dc:	6093      	str	r3, [r2, #8]
1000a7de:	da08      	bge.n	1000a7f2 <__sfputc_r+0x1e>
1000a7e0:	6994      	ldr	r4, [r2, #24]
1000a7e2:	42a3      	cmp	r3, r4
1000a7e4:	db01      	blt.n	1000a7ea <__sfputc_r+0x16>
1000a7e6:	290a      	cmp	r1, #10
1000a7e8:	d103      	bne.n	1000a7f2 <__sfputc_r+0x1e>
1000a7ea:	f85d 4b04 	ldr.w	r4, [sp], #4
1000a7ee:	f000 bb6b 	b.w	1000aec8 <__swbuf_r>
1000a7f2:	6813      	ldr	r3, [r2, #0]
1000a7f4:	1c58      	adds	r0, r3, #1
1000a7f6:	6010      	str	r0, [r2, #0]
1000a7f8:	7019      	strb	r1, [r3, #0]
1000a7fa:	4608      	mov	r0, r1
1000a7fc:	f85d 4b04 	ldr.w	r4, [sp], #4
1000a800:	4770      	bx	lr

1000a802 <__sfputs_r>:
1000a802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a804:	4606      	mov	r6, r0
1000a806:	460f      	mov	r7, r1
1000a808:	4614      	mov	r4, r2
1000a80a:	18d5      	adds	r5, r2, r3
1000a80c:	42ac      	cmp	r4, r5
1000a80e:	d101      	bne.n	1000a814 <__sfputs_r+0x12>
1000a810:	2000      	movs	r0, #0
1000a812:	e007      	b.n	1000a824 <__sfputs_r+0x22>
1000a814:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a818:	463a      	mov	r2, r7
1000a81a:	4630      	mov	r0, r6
1000a81c:	f7ff ffda 	bl	1000a7d4 <__sfputc_r>
1000a820:	1c43      	adds	r3, r0, #1
1000a822:	d1f3      	bne.n	1000a80c <__sfputs_r+0xa>
1000a824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1000a828 <_vfiprintf_r>:
1000a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000a82c:	460d      	mov	r5, r1
1000a82e:	b09d      	sub	sp, #116	@ 0x74
1000a830:	4614      	mov	r4, r2
1000a832:	4698      	mov	r8, r3
1000a834:	4606      	mov	r6, r0
1000a836:	b118      	cbz	r0, 1000a840 <_vfiprintf_r+0x18>
1000a838:	6a03      	ldr	r3, [r0, #32]
1000a83a:	b90b      	cbnz	r3, 1000a840 <_vfiprintf_r+0x18>
1000a83c:	f7ff fe1e 	bl	1000a47c <__sinit>
1000a840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000a842:	07d9      	lsls	r1, r3, #31
1000a844:	d405      	bmi.n	1000a852 <_vfiprintf_r+0x2a>
1000a846:	89ab      	ldrh	r3, [r5, #12]
1000a848:	059a      	lsls	r2, r3, #22
1000a84a:	d402      	bmi.n	1000a852 <_vfiprintf_r+0x2a>
1000a84c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000a84e:	f7ff ff60 	bl	1000a712 <__retarget_lock_acquire_recursive>
1000a852:	89ab      	ldrh	r3, [r5, #12]
1000a854:	071b      	lsls	r3, r3, #28
1000a856:	d501      	bpl.n	1000a85c <_vfiprintf_r+0x34>
1000a858:	692b      	ldr	r3, [r5, #16]
1000a85a:	b99b      	cbnz	r3, 1000a884 <_vfiprintf_r+0x5c>
1000a85c:	4629      	mov	r1, r5
1000a85e:	4630      	mov	r0, r6
1000a860:	f000 fb70 	bl	1000af44 <__swsetup_r>
1000a864:	b170      	cbz	r0, 1000a884 <_vfiprintf_r+0x5c>
1000a866:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000a868:	07dc      	lsls	r4, r3, #31
1000a86a:	d504      	bpl.n	1000a876 <_vfiprintf_r+0x4e>
1000a86c:	f04f 30ff 	mov.w	r0, #4294967295
1000a870:	b01d      	add	sp, #116	@ 0x74
1000a872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000a876:	89ab      	ldrh	r3, [r5, #12]
1000a878:	0598      	lsls	r0, r3, #22
1000a87a:	d4f7      	bmi.n	1000a86c <_vfiprintf_r+0x44>
1000a87c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000a87e:	f7ff ff49 	bl	1000a714 <__retarget_lock_release_recursive>
1000a882:	e7f3      	b.n	1000a86c <_vfiprintf_r+0x44>
1000a884:	2300      	movs	r3, #0
1000a886:	9309      	str	r3, [sp, #36]	@ 0x24
1000a888:	2320      	movs	r3, #32
1000a88a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
1000a88e:	f8cd 800c 	str.w	r8, [sp, #12]
1000a892:	2330      	movs	r3, #48	@ 0x30
1000a894:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 1000aa44 <_vfiprintf_r+0x21c>
1000a898:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
1000a89c:	f04f 0901 	mov.w	r9, #1
1000a8a0:	4623      	mov	r3, r4
1000a8a2:	469a      	mov	sl, r3
1000a8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
1000a8a8:	b10a      	cbz	r2, 1000a8ae <_vfiprintf_r+0x86>
1000a8aa:	2a25      	cmp	r2, #37	@ 0x25
1000a8ac:	d1f9      	bne.n	1000a8a2 <_vfiprintf_r+0x7a>
1000a8ae:	ebba 0b04 	subs.w	fp, sl, r4
1000a8b2:	d00b      	beq.n	1000a8cc <_vfiprintf_r+0xa4>
1000a8b4:	465b      	mov	r3, fp
1000a8b6:	4622      	mov	r2, r4
1000a8b8:	4629      	mov	r1, r5
1000a8ba:	4630      	mov	r0, r6
1000a8bc:	f7ff ffa1 	bl	1000a802 <__sfputs_r>
1000a8c0:	3001      	adds	r0, #1
1000a8c2:	f000 80a7 	beq.w	1000aa14 <_vfiprintf_r+0x1ec>
1000a8c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000a8c8:	445a      	add	r2, fp
1000a8ca:	9209      	str	r2, [sp, #36]	@ 0x24
1000a8cc:	f89a 3000 	ldrb.w	r3, [sl]
1000a8d0:	2b00      	cmp	r3, #0
1000a8d2:	f000 809f 	beq.w	1000aa14 <_vfiprintf_r+0x1ec>
1000a8d6:	2300      	movs	r3, #0
1000a8d8:	f04f 32ff 	mov.w	r2, #4294967295
1000a8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000a8e0:	f10a 0a01 	add.w	sl, sl, #1
1000a8e4:	9304      	str	r3, [sp, #16]
1000a8e6:	9307      	str	r3, [sp, #28]
1000a8e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
1000a8ec:	931a      	str	r3, [sp, #104]	@ 0x68
1000a8ee:	4654      	mov	r4, sl
1000a8f0:	2205      	movs	r2, #5
1000a8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a8f6:	4853      	ldr	r0, [pc, #332]	@ (1000aa44 <_vfiprintf_r+0x21c>)
1000a8f8:	f7f5 fbb2 	bl	10000060 <memchr>
1000a8fc:	9a04      	ldr	r2, [sp, #16]
1000a8fe:	b9d8      	cbnz	r0, 1000a938 <_vfiprintf_r+0x110>
1000a900:	06d1      	lsls	r1, r2, #27
1000a902:	bf44      	itt	mi
1000a904:	2320      	movmi	r3, #32
1000a906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000a90a:	0713      	lsls	r3, r2, #28
1000a90c:	bf44      	itt	mi
1000a90e:	232b      	movmi	r3, #43	@ 0x2b
1000a910:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
1000a914:	f89a 3000 	ldrb.w	r3, [sl]
1000a918:	2b2a      	cmp	r3, #42	@ 0x2a
1000a91a:	d015      	beq.n	1000a948 <_vfiprintf_r+0x120>
1000a91c:	9a07      	ldr	r2, [sp, #28]
1000a91e:	4654      	mov	r4, sl
1000a920:	2000      	movs	r0, #0
1000a922:	f04f 0c0a 	mov.w	ip, #10
1000a926:	4621      	mov	r1, r4
1000a928:	f811 3b01 	ldrb.w	r3, [r1], #1
1000a92c:	3b30      	subs	r3, #48	@ 0x30
1000a92e:	2b09      	cmp	r3, #9
1000a930:	d94b      	bls.n	1000a9ca <_vfiprintf_r+0x1a2>
1000a932:	b1b0      	cbz	r0, 1000a962 <_vfiprintf_r+0x13a>
1000a934:	9207      	str	r2, [sp, #28]
1000a936:	e014      	b.n	1000a962 <_vfiprintf_r+0x13a>
1000a938:	eba0 0308 	sub.w	r3, r0, r8
1000a93c:	fa09 f303 	lsl.w	r3, r9, r3
1000a940:	4313      	orrs	r3, r2
1000a942:	9304      	str	r3, [sp, #16]
1000a944:	46a2      	mov	sl, r4
1000a946:	e7d2      	b.n	1000a8ee <_vfiprintf_r+0xc6>
1000a948:	9b03      	ldr	r3, [sp, #12]
1000a94a:	1d19      	adds	r1, r3, #4
1000a94c:	681b      	ldr	r3, [r3, #0]
1000a94e:	9103      	str	r1, [sp, #12]
1000a950:	2b00      	cmp	r3, #0
1000a952:	bfbb      	ittet	lt
1000a954:	425b      	neglt	r3, r3
1000a956:	f042 0202 	orrlt.w	r2, r2, #2
1000a95a:	9307      	strge	r3, [sp, #28]
1000a95c:	9307      	strlt	r3, [sp, #28]
1000a95e:	bfb8      	it	lt
1000a960:	9204      	strlt	r2, [sp, #16]
1000a962:	7823      	ldrb	r3, [r4, #0]
1000a964:	2b2e      	cmp	r3, #46	@ 0x2e
1000a966:	d10a      	bne.n	1000a97e <_vfiprintf_r+0x156>
1000a968:	7863      	ldrb	r3, [r4, #1]
1000a96a:	2b2a      	cmp	r3, #42	@ 0x2a
1000a96c:	d132      	bne.n	1000a9d4 <_vfiprintf_r+0x1ac>
1000a96e:	9b03      	ldr	r3, [sp, #12]
1000a970:	1d1a      	adds	r2, r3, #4
1000a972:	681b      	ldr	r3, [r3, #0]
1000a974:	9203      	str	r2, [sp, #12]
1000a976:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
1000a97a:	3402      	adds	r4, #2
1000a97c:	9305      	str	r3, [sp, #20]
1000a97e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 1000aa54 <_vfiprintf_r+0x22c>
1000a982:	7821      	ldrb	r1, [r4, #0]
1000a984:	2203      	movs	r2, #3
1000a986:	4650      	mov	r0, sl
1000a988:	f7f5 fb6a 	bl	10000060 <memchr>
1000a98c:	b138      	cbz	r0, 1000a99e <_vfiprintf_r+0x176>
1000a98e:	9b04      	ldr	r3, [sp, #16]
1000a990:	eba0 000a 	sub.w	r0, r0, sl
1000a994:	2240      	movs	r2, #64	@ 0x40
1000a996:	4082      	lsls	r2, r0
1000a998:	4313      	orrs	r3, r2
1000a99a:	3401      	adds	r4, #1
1000a99c:	9304      	str	r3, [sp, #16]
1000a99e:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a9a2:	4829      	ldr	r0, [pc, #164]	@ (1000aa48 <_vfiprintf_r+0x220>)
1000a9a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
1000a9a8:	2206      	movs	r2, #6
1000a9aa:	f7f5 fb59 	bl	10000060 <memchr>
1000a9ae:	2800      	cmp	r0, #0
1000a9b0:	d03f      	beq.n	1000aa32 <_vfiprintf_r+0x20a>
1000a9b2:	4b26      	ldr	r3, [pc, #152]	@ (1000aa4c <_vfiprintf_r+0x224>)
1000a9b4:	bb1b      	cbnz	r3, 1000a9fe <_vfiprintf_r+0x1d6>
1000a9b6:	9b03      	ldr	r3, [sp, #12]
1000a9b8:	3307      	adds	r3, #7
1000a9ba:	f023 0307 	bic.w	r3, r3, #7
1000a9be:	3308      	adds	r3, #8
1000a9c0:	9303      	str	r3, [sp, #12]
1000a9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000a9c4:	443b      	add	r3, r7
1000a9c6:	9309      	str	r3, [sp, #36]	@ 0x24
1000a9c8:	e76a      	b.n	1000a8a0 <_vfiprintf_r+0x78>
1000a9ca:	fb0c 3202 	mla	r2, ip, r2, r3
1000a9ce:	460c      	mov	r4, r1
1000a9d0:	2001      	movs	r0, #1
1000a9d2:	e7a8      	b.n	1000a926 <_vfiprintf_r+0xfe>
1000a9d4:	2300      	movs	r3, #0
1000a9d6:	3401      	adds	r4, #1
1000a9d8:	9305      	str	r3, [sp, #20]
1000a9da:	4619      	mov	r1, r3
1000a9dc:	f04f 0c0a 	mov.w	ip, #10
1000a9e0:	4620      	mov	r0, r4
1000a9e2:	f810 2b01 	ldrb.w	r2, [r0], #1
1000a9e6:	3a30      	subs	r2, #48	@ 0x30
1000a9e8:	2a09      	cmp	r2, #9
1000a9ea:	d903      	bls.n	1000a9f4 <_vfiprintf_r+0x1cc>
1000a9ec:	2b00      	cmp	r3, #0
1000a9ee:	d0c6      	beq.n	1000a97e <_vfiprintf_r+0x156>
1000a9f0:	9105      	str	r1, [sp, #20]
1000a9f2:	e7c4      	b.n	1000a97e <_vfiprintf_r+0x156>
1000a9f4:	fb0c 2101 	mla	r1, ip, r1, r2
1000a9f8:	4604      	mov	r4, r0
1000a9fa:	2301      	movs	r3, #1
1000a9fc:	e7f0      	b.n	1000a9e0 <_vfiprintf_r+0x1b8>
1000a9fe:	ab03      	add	r3, sp, #12
1000aa00:	9300      	str	r3, [sp, #0]
1000aa02:	462a      	mov	r2, r5
1000aa04:	4b12      	ldr	r3, [pc, #72]	@ (1000aa50 <_vfiprintf_r+0x228>)
1000aa06:	a904      	add	r1, sp, #16
1000aa08:	4630      	mov	r0, r6
1000aa0a:	f3af 8000 	nop.w
1000aa0e:	4607      	mov	r7, r0
1000aa10:	1c78      	adds	r0, r7, #1
1000aa12:	d1d6      	bne.n	1000a9c2 <_vfiprintf_r+0x19a>
1000aa14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
1000aa16:	07d9      	lsls	r1, r3, #31
1000aa18:	d405      	bmi.n	1000aa26 <_vfiprintf_r+0x1fe>
1000aa1a:	89ab      	ldrh	r3, [r5, #12]
1000aa1c:	059a      	lsls	r2, r3, #22
1000aa1e:	d402      	bmi.n	1000aa26 <_vfiprintf_r+0x1fe>
1000aa20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1000aa22:	f7ff fe77 	bl	1000a714 <__retarget_lock_release_recursive>
1000aa26:	89ab      	ldrh	r3, [r5, #12]
1000aa28:	065b      	lsls	r3, r3, #25
1000aa2a:	f53f af1f 	bmi.w	1000a86c <_vfiprintf_r+0x44>
1000aa2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1000aa30:	e71e      	b.n	1000a870 <_vfiprintf_r+0x48>
1000aa32:	ab03      	add	r3, sp, #12
1000aa34:	9300      	str	r3, [sp, #0]
1000aa36:	462a      	mov	r2, r5
1000aa38:	4b05      	ldr	r3, [pc, #20]	@ (1000aa50 <_vfiprintf_r+0x228>)
1000aa3a:	a904      	add	r1, sp, #16
1000aa3c:	4630      	mov	r0, r6
1000aa3e:	f000 f879 	bl	1000ab34 <_printf_i>
1000aa42:	e7e4      	b.n	1000aa0e <_vfiprintf_r+0x1e6>
1000aa44:	1000d799 	.word	0x1000d799
1000aa48:	1000d7a3 	.word	0x1000d7a3
1000aa4c:	00000000 	.word	0x00000000
1000aa50:	1000a803 	.word	0x1000a803
1000aa54:	1000d79f 	.word	0x1000d79f

1000aa58 <_printf_common>:
1000aa58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000aa5c:	4616      	mov	r6, r2
1000aa5e:	4698      	mov	r8, r3
1000aa60:	688a      	ldr	r2, [r1, #8]
1000aa62:	690b      	ldr	r3, [r1, #16]
1000aa64:	f8dd 9020 	ldr.w	r9, [sp, #32]
1000aa68:	4293      	cmp	r3, r2
1000aa6a:	bfb8      	it	lt
1000aa6c:	4613      	movlt	r3, r2
1000aa6e:	6033      	str	r3, [r6, #0]
1000aa70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
1000aa74:	4607      	mov	r7, r0
1000aa76:	460c      	mov	r4, r1
1000aa78:	b10a      	cbz	r2, 1000aa7e <_printf_common+0x26>
1000aa7a:	3301      	adds	r3, #1
1000aa7c:	6033      	str	r3, [r6, #0]
1000aa7e:	6823      	ldr	r3, [r4, #0]
1000aa80:	0699      	lsls	r1, r3, #26
1000aa82:	bf42      	ittt	mi
1000aa84:	6833      	ldrmi	r3, [r6, #0]
1000aa86:	3302      	addmi	r3, #2
1000aa88:	6033      	strmi	r3, [r6, #0]
1000aa8a:	6825      	ldr	r5, [r4, #0]
1000aa8c:	f015 0506 	ands.w	r5, r5, #6
1000aa90:	d106      	bne.n	1000aaa0 <_printf_common+0x48>
1000aa92:	f104 0a19 	add.w	sl, r4, #25
1000aa96:	68e3      	ldr	r3, [r4, #12]
1000aa98:	6832      	ldr	r2, [r6, #0]
1000aa9a:	1a9b      	subs	r3, r3, r2
1000aa9c:	42ab      	cmp	r3, r5
1000aa9e:	dc26      	bgt.n	1000aaee <_printf_common+0x96>
1000aaa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
1000aaa4:	6822      	ldr	r2, [r4, #0]
1000aaa6:	3b00      	subs	r3, #0
1000aaa8:	bf18      	it	ne
1000aaaa:	2301      	movne	r3, #1
1000aaac:	0692      	lsls	r2, r2, #26
1000aaae:	d42b      	bmi.n	1000ab08 <_printf_common+0xb0>
1000aab0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1000aab4:	4641      	mov	r1, r8
1000aab6:	4638      	mov	r0, r7
1000aab8:	47c8      	blx	r9
1000aaba:	3001      	adds	r0, #1
1000aabc:	d01e      	beq.n	1000aafc <_printf_common+0xa4>
1000aabe:	6823      	ldr	r3, [r4, #0]
1000aac0:	6922      	ldr	r2, [r4, #16]
1000aac2:	f003 0306 	and.w	r3, r3, #6
1000aac6:	2b04      	cmp	r3, #4
1000aac8:	bf02      	ittt	eq
1000aaca:	68e5      	ldreq	r5, [r4, #12]
1000aacc:	6833      	ldreq	r3, [r6, #0]
1000aace:	1aed      	subeq	r5, r5, r3
1000aad0:	68a3      	ldr	r3, [r4, #8]
1000aad2:	bf0c      	ite	eq
1000aad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1000aad8:	2500      	movne	r5, #0
1000aada:	4293      	cmp	r3, r2
1000aadc:	bfc4      	itt	gt
1000aade:	1a9b      	subgt	r3, r3, r2
1000aae0:	18ed      	addgt	r5, r5, r3
1000aae2:	2600      	movs	r6, #0
1000aae4:	341a      	adds	r4, #26
1000aae6:	42b5      	cmp	r5, r6
1000aae8:	d11a      	bne.n	1000ab20 <_printf_common+0xc8>
1000aaea:	2000      	movs	r0, #0
1000aaec:	e008      	b.n	1000ab00 <_printf_common+0xa8>
1000aaee:	2301      	movs	r3, #1
1000aaf0:	4652      	mov	r2, sl
1000aaf2:	4641      	mov	r1, r8
1000aaf4:	4638      	mov	r0, r7
1000aaf6:	47c8      	blx	r9
1000aaf8:	3001      	adds	r0, #1
1000aafa:	d103      	bne.n	1000ab04 <_printf_common+0xac>
1000aafc:	f04f 30ff 	mov.w	r0, #4294967295
1000ab00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000ab04:	3501      	adds	r5, #1
1000ab06:	e7c6      	b.n	1000aa96 <_printf_common+0x3e>
1000ab08:	18e1      	adds	r1, r4, r3
1000ab0a:	1c5a      	adds	r2, r3, #1
1000ab0c:	2030      	movs	r0, #48	@ 0x30
1000ab0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
1000ab12:	4422      	add	r2, r4
1000ab14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
1000ab18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
1000ab1c:	3302      	adds	r3, #2
1000ab1e:	e7c7      	b.n	1000aab0 <_printf_common+0x58>
1000ab20:	2301      	movs	r3, #1
1000ab22:	4622      	mov	r2, r4
1000ab24:	4641      	mov	r1, r8
1000ab26:	4638      	mov	r0, r7
1000ab28:	47c8      	blx	r9
1000ab2a:	3001      	adds	r0, #1
1000ab2c:	d0e6      	beq.n	1000aafc <_printf_common+0xa4>
1000ab2e:	3601      	adds	r6, #1
1000ab30:	e7d9      	b.n	1000aae6 <_printf_common+0x8e>
	...

1000ab34 <_printf_i>:
1000ab34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000ab38:	7e0f      	ldrb	r7, [r1, #24]
1000ab3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1000ab3c:	2f78      	cmp	r7, #120	@ 0x78
1000ab3e:	4691      	mov	r9, r2
1000ab40:	4680      	mov	r8, r0
1000ab42:	460c      	mov	r4, r1
1000ab44:	469a      	mov	sl, r3
1000ab46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
1000ab4a:	d807      	bhi.n	1000ab5c <_printf_i+0x28>
1000ab4c:	2f62      	cmp	r7, #98	@ 0x62
1000ab4e:	d80a      	bhi.n	1000ab66 <_printf_i+0x32>
1000ab50:	2f00      	cmp	r7, #0
1000ab52:	f000 80d1 	beq.w	1000acf8 <_printf_i+0x1c4>
1000ab56:	2f58      	cmp	r7, #88	@ 0x58
1000ab58:	f000 80b8 	beq.w	1000accc <_printf_i+0x198>
1000ab5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000ab60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
1000ab64:	e03a      	b.n	1000abdc <_printf_i+0xa8>
1000ab66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
1000ab6a:	2b15      	cmp	r3, #21
1000ab6c:	d8f6      	bhi.n	1000ab5c <_printf_i+0x28>
1000ab6e:	a101      	add	r1, pc, #4	@ (adr r1, 1000ab74 <_printf_i+0x40>)
1000ab70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000ab74:	1000abcd 	.word	0x1000abcd
1000ab78:	1000abe1 	.word	0x1000abe1
1000ab7c:	1000ab5d 	.word	0x1000ab5d
1000ab80:	1000ab5d 	.word	0x1000ab5d
1000ab84:	1000ab5d 	.word	0x1000ab5d
1000ab88:	1000ab5d 	.word	0x1000ab5d
1000ab8c:	1000abe1 	.word	0x1000abe1
1000ab90:	1000ab5d 	.word	0x1000ab5d
1000ab94:	1000ab5d 	.word	0x1000ab5d
1000ab98:	1000ab5d 	.word	0x1000ab5d
1000ab9c:	1000ab5d 	.word	0x1000ab5d
1000aba0:	1000acdf 	.word	0x1000acdf
1000aba4:	1000ac0b 	.word	0x1000ac0b
1000aba8:	1000ac99 	.word	0x1000ac99
1000abac:	1000ab5d 	.word	0x1000ab5d
1000abb0:	1000ab5d 	.word	0x1000ab5d
1000abb4:	1000ad01 	.word	0x1000ad01
1000abb8:	1000ab5d 	.word	0x1000ab5d
1000abbc:	1000ac0b 	.word	0x1000ac0b
1000abc0:	1000ab5d 	.word	0x1000ab5d
1000abc4:	1000ab5d 	.word	0x1000ab5d
1000abc8:	1000aca1 	.word	0x1000aca1
1000abcc:	6833      	ldr	r3, [r6, #0]
1000abce:	1d1a      	adds	r2, r3, #4
1000abd0:	681b      	ldr	r3, [r3, #0]
1000abd2:	6032      	str	r2, [r6, #0]
1000abd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000abd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
1000abdc:	2301      	movs	r3, #1
1000abde:	e09c      	b.n	1000ad1a <_printf_i+0x1e6>
1000abe0:	6833      	ldr	r3, [r6, #0]
1000abe2:	6820      	ldr	r0, [r4, #0]
1000abe4:	1d19      	adds	r1, r3, #4
1000abe6:	6031      	str	r1, [r6, #0]
1000abe8:	0606      	lsls	r6, r0, #24
1000abea:	d501      	bpl.n	1000abf0 <_printf_i+0xbc>
1000abec:	681d      	ldr	r5, [r3, #0]
1000abee:	e003      	b.n	1000abf8 <_printf_i+0xc4>
1000abf0:	0645      	lsls	r5, r0, #25
1000abf2:	d5fb      	bpl.n	1000abec <_printf_i+0xb8>
1000abf4:	f9b3 5000 	ldrsh.w	r5, [r3]
1000abf8:	2d00      	cmp	r5, #0
1000abfa:	da03      	bge.n	1000ac04 <_printf_i+0xd0>
1000abfc:	232d      	movs	r3, #45	@ 0x2d
1000abfe:	426d      	negs	r5, r5
1000ac00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000ac04:	4858      	ldr	r0, [pc, #352]	@ (1000ad68 <_printf_i+0x234>)
1000ac06:	230a      	movs	r3, #10
1000ac08:	e011      	b.n	1000ac2e <_printf_i+0xfa>
1000ac0a:	6821      	ldr	r1, [r4, #0]
1000ac0c:	6833      	ldr	r3, [r6, #0]
1000ac0e:	0608      	lsls	r0, r1, #24
1000ac10:	f853 5b04 	ldr.w	r5, [r3], #4
1000ac14:	d402      	bmi.n	1000ac1c <_printf_i+0xe8>
1000ac16:	0649      	lsls	r1, r1, #25
1000ac18:	bf48      	it	mi
1000ac1a:	b2ad      	uxthmi	r5, r5
1000ac1c:	2f6f      	cmp	r7, #111	@ 0x6f
1000ac1e:	4852      	ldr	r0, [pc, #328]	@ (1000ad68 <_printf_i+0x234>)
1000ac20:	6033      	str	r3, [r6, #0]
1000ac22:	bf14      	ite	ne
1000ac24:	230a      	movne	r3, #10
1000ac26:	2308      	moveq	r3, #8
1000ac28:	2100      	movs	r1, #0
1000ac2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
1000ac2e:	6866      	ldr	r6, [r4, #4]
1000ac30:	60a6      	str	r6, [r4, #8]
1000ac32:	2e00      	cmp	r6, #0
1000ac34:	db05      	blt.n	1000ac42 <_printf_i+0x10e>
1000ac36:	6821      	ldr	r1, [r4, #0]
1000ac38:	432e      	orrs	r6, r5
1000ac3a:	f021 0104 	bic.w	r1, r1, #4
1000ac3e:	6021      	str	r1, [r4, #0]
1000ac40:	d04b      	beq.n	1000acda <_printf_i+0x1a6>
1000ac42:	4616      	mov	r6, r2
1000ac44:	fbb5 f1f3 	udiv	r1, r5, r3
1000ac48:	fb03 5711 	mls	r7, r3, r1, r5
1000ac4c:	5dc7      	ldrb	r7, [r0, r7]
1000ac4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
1000ac52:	462f      	mov	r7, r5
1000ac54:	42bb      	cmp	r3, r7
1000ac56:	460d      	mov	r5, r1
1000ac58:	d9f4      	bls.n	1000ac44 <_printf_i+0x110>
1000ac5a:	2b08      	cmp	r3, #8
1000ac5c:	d10b      	bne.n	1000ac76 <_printf_i+0x142>
1000ac5e:	6823      	ldr	r3, [r4, #0]
1000ac60:	07df      	lsls	r7, r3, #31
1000ac62:	d508      	bpl.n	1000ac76 <_printf_i+0x142>
1000ac64:	6923      	ldr	r3, [r4, #16]
1000ac66:	6861      	ldr	r1, [r4, #4]
1000ac68:	4299      	cmp	r1, r3
1000ac6a:	bfde      	ittt	le
1000ac6c:	2330      	movle	r3, #48	@ 0x30
1000ac6e:	f806 3c01 	strble.w	r3, [r6, #-1]
1000ac72:	f106 36ff 	addle.w	r6, r6, #4294967295
1000ac76:	1b92      	subs	r2, r2, r6
1000ac78:	6122      	str	r2, [r4, #16]
1000ac7a:	f8cd a000 	str.w	sl, [sp]
1000ac7e:	464b      	mov	r3, r9
1000ac80:	aa03      	add	r2, sp, #12
1000ac82:	4621      	mov	r1, r4
1000ac84:	4640      	mov	r0, r8
1000ac86:	f7ff fee7 	bl	1000aa58 <_printf_common>
1000ac8a:	3001      	adds	r0, #1
1000ac8c:	d14a      	bne.n	1000ad24 <_printf_i+0x1f0>
1000ac8e:	f04f 30ff 	mov.w	r0, #4294967295
1000ac92:	b004      	add	sp, #16
1000ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000ac98:	6823      	ldr	r3, [r4, #0]
1000ac9a:	f043 0320 	orr.w	r3, r3, #32
1000ac9e:	6023      	str	r3, [r4, #0]
1000aca0:	4832      	ldr	r0, [pc, #200]	@ (1000ad6c <_printf_i+0x238>)
1000aca2:	2778      	movs	r7, #120	@ 0x78
1000aca4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
1000aca8:	6823      	ldr	r3, [r4, #0]
1000acaa:	6831      	ldr	r1, [r6, #0]
1000acac:	061f      	lsls	r7, r3, #24
1000acae:	f851 5b04 	ldr.w	r5, [r1], #4
1000acb2:	d402      	bmi.n	1000acba <_printf_i+0x186>
1000acb4:	065f      	lsls	r7, r3, #25
1000acb6:	bf48      	it	mi
1000acb8:	b2ad      	uxthmi	r5, r5
1000acba:	6031      	str	r1, [r6, #0]
1000acbc:	07d9      	lsls	r1, r3, #31
1000acbe:	bf44      	itt	mi
1000acc0:	f043 0320 	orrmi.w	r3, r3, #32
1000acc4:	6023      	strmi	r3, [r4, #0]
1000acc6:	b11d      	cbz	r5, 1000acd0 <_printf_i+0x19c>
1000acc8:	2310      	movs	r3, #16
1000acca:	e7ad      	b.n	1000ac28 <_printf_i+0xf4>
1000accc:	4826      	ldr	r0, [pc, #152]	@ (1000ad68 <_printf_i+0x234>)
1000acce:	e7e9      	b.n	1000aca4 <_printf_i+0x170>
1000acd0:	6823      	ldr	r3, [r4, #0]
1000acd2:	f023 0320 	bic.w	r3, r3, #32
1000acd6:	6023      	str	r3, [r4, #0]
1000acd8:	e7f6      	b.n	1000acc8 <_printf_i+0x194>
1000acda:	4616      	mov	r6, r2
1000acdc:	e7bd      	b.n	1000ac5a <_printf_i+0x126>
1000acde:	6833      	ldr	r3, [r6, #0]
1000ace0:	6825      	ldr	r5, [r4, #0]
1000ace2:	6961      	ldr	r1, [r4, #20]
1000ace4:	1d18      	adds	r0, r3, #4
1000ace6:	6030      	str	r0, [r6, #0]
1000ace8:	062e      	lsls	r6, r5, #24
1000acea:	681b      	ldr	r3, [r3, #0]
1000acec:	d501      	bpl.n	1000acf2 <_printf_i+0x1be>
1000acee:	6019      	str	r1, [r3, #0]
1000acf0:	e002      	b.n	1000acf8 <_printf_i+0x1c4>
1000acf2:	0668      	lsls	r0, r5, #25
1000acf4:	d5fb      	bpl.n	1000acee <_printf_i+0x1ba>
1000acf6:	8019      	strh	r1, [r3, #0]
1000acf8:	2300      	movs	r3, #0
1000acfa:	6123      	str	r3, [r4, #16]
1000acfc:	4616      	mov	r6, r2
1000acfe:	e7bc      	b.n	1000ac7a <_printf_i+0x146>
1000ad00:	6833      	ldr	r3, [r6, #0]
1000ad02:	1d1a      	adds	r2, r3, #4
1000ad04:	6032      	str	r2, [r6, #0]
1000ad06:	681e      	ldr	r6, [r3, #0]
1000ad08:	6862      	ldr	r2, [r4, #4]
1000ad0a:	2100      	movs	r1, #0
1000ad0c:	4630      	mov	r0, r6
1000ad0e:	f7f5 f9a7 	bl	10000060 <memchr>
1000ad12:	b108      	cbz	r0, 1000ad18 <_printf_i+0x1e4>
1000ad14:	1b80      	subs	r0, r0, r6
1000ad16:	6060      	str	r0, [r4, #4]
1000ad18:	6863      	ldr	r3, [r4, #4]
1000ad1a:	6123      	str	r3, [r4, #16]
1000ad1c:	2300      	movs	r3, #0
1000ad1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000ad22:	e7aa      	b.n	1000ac7a <_printf_i+0x146>
1000ad24:	6923      	ldr	r3, [r4, #16]
1000ad26:	4632      	mov	r2, r6
1000ad28:	4649      	mov	r1, r9
1000ad2a:	4640      	mov	r0, r8
1000ad2c:	47d0      	blx	sl
1000ad2e:	3001      	adds	r0, #1
1000ad30:	d0ad      	beq.n	1000ac8e <_printf_i+0x15a>
1000ad32:	6823      	ldr	r3, [r4, #0]
1000ad34:	079b      	lsls	r3, r3, #30
1000ad36:	d413      	bmi.n	1000ad60 <_printf_i+0x22c>
1000ad38:	68e0      	ldr	r0, [r4, #12]
1000ad3a:	9b03      	ldr	r3, [sp, #12]
1000ad3c:	4298      	cmp	r0, r3
1000ad3e:	bfb8      	it	lt
1000ad40:	4618      	movlt	r0, r3
1000ad42:	e7a6      	b.n	1000ac92 <_printf_i+0x15e>
1000ad44:	2301      	movs	r3, #1
1000ad46:	4632      	mov	r2, r6
1000ad48:	4649      	mov	r1, r9
1000ad4a:	4640      	mov	r0, r8
1000ad4c:	47d0      	blx	sl
1000ad4e:	3001      	adds	r0, #1
1000ad50:	d09d      	beq.n	1000ac8e <_printf_i+0x15a>
1000ad52:	3501      	adds	r5, #1
1000ad54:	68e3      	ldr	r3, [r4, #12]
1000ad56:	9903      	ldr	r1, [sp, #12]
1000ad58:	1a5b      	subs	r3, r3, r1
1000ad5a:	42ab      	cmp	r3, r5
1000ad5c:	dcf2      	bgt.n	1000ad44 <_printf_i+0x210>
1000ad5e:	e7eb      	b.n	1000ad38 <_printf_i+0x204>
1000ad60:	2500      	movs	r5, #0
1000ad62:	f104 0619 	add.w	r6, r4, #25
1000ad66:	e7f5      	b.n	1000ad54 <_printf_i+0x220>
1000ad68:	1000d7aa 	.word	0x1000d7aa
1000ad6c:	1000d7bb 	.word	0x1000d7bb

1000ad70 <__sflush_r>:
1000ad70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1000ad74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000ad78:	0716      	lsls	r6, r2, #28
1000ad7a:	4605      	mov	r5, r0
1000ad7c:	460c      	mov	r4, r1
1000ad7e:	d454      	bmi.n	1000ae2a <__sflush_r+0xba>
1000ad80:	684b      	ldr	r3, [r1, #4]
1000ad82:	2b00      	cmp	r3, #0
1000ad84:	dc02      	bgt.n	1000ad8c <__sflush_r+0x1c>
1000ad86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
1000ad88:	2b00      	cmp	r3, #0
1000ad8a:	dd48      	ble.n	1000ae1e <__sflush_r+0xae>
1000ad8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000ad8e:	2e00      	cmp	r6, #0
1000ad90:	d045      	beq.n	1000ae1e <__sflush_r+0xae>
1000ad92:	2300      	movs	r3, #0
1000ad94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
1000ad98:	682f      	ldr	r7, [r5, #0]
1000ad9a:	6a21      	ldr	r1, [r4, #32]
1000ad9c:	602b      	str	r3, [r5, #0]
1000ad9e:	d030      	beq.n	1000ae02 <__sflush_r+0x92>
1000ada0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1000ada2:	89a3      	ldrh	r3, [r4, #12]
1000ada4:	0759      	lsls	r1, r3, #29
1000ada6:	d505      	bpl.n	1000adb4 <__sflush_r+0x44>
1000ada8:	6863      	ldr	r3, [r4, #4]
1000adaa:	1ad2      	subs	r2, r2, r3
1000adac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1000adae:	b10b      	cbz	r3, 1000adb4 <__sflush_r+0x44>
1000adb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1000adb2:	1ad2      	subs	r2, r2, r3
1000adb4:	2300      	movs	r3, #0
1000adb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
1000adb8:	6a21      	ldr	r1, [r4, #32]
1000adba:	4628      	mov	r0, r5
1000adbc:	47b0      	blx	r6
1000adbe:	1c43      	adds	r3, r0, #1
1000adc0:	89a3      	ldrh	r3, [r4, #12]
1000adc2:	d106      	bne.n	1000add2 <__sflush_r+0x62>
1000adc4:	6829      	ldr	r1, [r5, #0]
1000adc6:	291d      	cmp	r1, #29
1000adc8:	d82b      	bhi.n	1000ae22 <__sflush_r+0xb2>
1000adca:	4a2a      	ldr	r2, [pc, #168]	@ (1000ae74 <__sflush_r+0x104>)
1000adcc:	40ca      	lsrs	r2, r1
1000adce:	07d6      	lsls	r6, r2, #31
1000add0:	d527      	bpl.n	1000ae22 <__sflush_r+0xb2>
1000add2:	2200      	movs	r2, #0
1000add4:	6062      	str	r2, [r4, #4]
1000add6:	04d9      	lsls	r1, r3, #19
1000add8:	6922      	ldr	r2, [r4, #16]
1000adda:	6022      	str	r2, [r4, #0]
1000addc:	d504      	bpl.n	1000ade8 <__sflush_r+0x78>
1000adde:	1c42      	adds	r2, r0, #1
1000ade0:	d101      	bne.n	1000ade6 <__sflush_r+0x76>
1000ade2:	682b      	ldr	r3, [r5, #0]
1000ade4:	b903      	cbnz	r3, 1000ade8 <__sflush_r+0x78>
1000ade6:	6560      	str	r0, [r4, #84]	@ 0x54
1000ade8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000adea:	602f      	str	r7, [r5, #0]
1000adec:	b1b9      	cbz	r1, 1000ae1e <__sflush_r+0xae>
1000adee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000adf2:	4299      	cmp	r1, r3
1000adf4:	d002      	beq.n	1000adfc <__sflush_r+0x8c>
1000adf6:	4628      	mov	r0, r5
1000adf8:	f7ff fca2 	bl	1000a740 <_free_r>
1000adfc:	2300      	movs	r3, #0
1000adfe:	6363      	str	r3, [r4, #52]	@ 0x34
1000ae00:	e00d      	b.n	1000ae1e <__sflush_r+0xae>
1000ae02:	2301      	movs	r3, #1
1000ae04:	4628      	mov	r0, r5
1000ae06:	47b0      	blx	r6
1000ae08:	4602      	mov	r2, r0
1000ae0a:	1c50      	adds	r0, r2, #1
1000ae0c:	d1c9      	bne.n	1000ada2 <__sflush_r+0x32>
1000ae0e:	682b      	ldr	r3, [r5, #0]
1000ae10:	2b00      	cmp	r3, #0
1000ae12:	d0c6      	beq.n	1000ada2 <__sflush_r+0x32>
1000ae14:	2b1d      	cmp	r3, #29
1000ae16:	d001      	beq.n	1000ae1c <__sflush_r+0xac>
1000ae18:	2b16      	cmp	r3, #22
1000ae1a:	d11e      	bne.n	1000ae5a <__sflush_r+0xea>
1000ae1c:	602f      	str	r7, [r5, #0]
1000ae1e:	2000      	movs	r0, #0
1000ae20:	e022      	b.n	1000ae68 <__sflush_r+0xf8>
1000ae22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000ae26:	b21b      	sxth	r3, r3
1000ae28:	e01b      	b.n	1000ae62 <__sflush_r+0xf2>
1000ae2a:	690f      	ldr	r7, [r1, #16]
1000ae2c:	2f00      	cmp	r7, #0
1000ae2e:	d0f6      	beq.n	1000ae1e <__sflush_r+0xae>
1000ae30:	0793      	lsls	r3, r2, #30
1000ae32:	680e      	ldr	r6, [r1, #0]
1000ae34:	bf08      	it	eq
1000ae36:	694b      	ldreq	r3, [r1, #20]
1000ae38:	600f      	str	r7, [r1, #0]
1000ae3a:	bf18      	it	ne
1000ae3c:	2300      	movne	r3, #0
1000ae3e:	eba6 0807 	sub.w	r8, r6, r7
1000ae42:	608b      	str	r3, [r1, #8]
1000ae44:	f1b8 0f00 	cmp.w	r8, #0
1000ae48:	dde9      	ble.n	1000ae1e <__sflush_r+0xae>
1000ae4a:	6a21      	ldr	r1, [r4, #32]
1000ae4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
1000ae4e:	4643      	mov	r3, r8
1000ae50:	463a      	mov	r2, r7
1000ae52:	4628      	mov	r0, r5
1000ae54:	47b0      	blx	r6
1000ae56:	2800      	cmp	r0, #0
1000ae58:	dc08      	bgt.n	1000ae6c <__sflush_r+0xfc>
1000ae5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000ae5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000ae62:	81a3      	strh	r3, [r4, #12]
1000ae64:	f04f 30ff 	mov.w	r0, #4294967295
1000ae68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000ae6c:	4407      	add	r7, r0
1000ae6e:	eba8 0800 	sub.w	r8, r8, r0
1000ae72:	e7e7      	b.n	1000ae44 <__sflush_r+0xd4>
1000ae74:	20400001 	.word	0x20400001

1000ae78 <_fflush_r>:
1000ae78:	b538      	push	{r3, r4, r5, lr}
1000ae7a:	690b      	ldr	r3, [r1, #16]
1000ae7c:	4605      	mov	r5, r0
1000ae7e:	460c      	mov	r4, r1
1000ae80:	b913      	cbnz	r3, 1000ae88 <_fflush_r+0x10>
1000ae82:	2500      	movs	r5, #0
1000ae84:	4628      	mov	r0, r5
1000ae86:	bd38      	pop	{r3, r4, r5, pc}
1000ae88:	b118      	cbz	r0, 1000ae92 <_fflush_r+0x1a>
1000ae8a:	6a03      	ldr	r3, [r0, #32]
1000ae8c:	b90b      	cbnz	r3, 1000ae92 <_fflush_r+0x1a>
1000ae8e:	f7ff faf5 	bl	1000a47c <__sinit>
1000ae92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000ae96:	2b00      	cmp	r3, #0
1000ae98:	d0f3      	beq.n	1000ae82 <_fflush_r+0xa>
1000ae9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
1000ae9c:	07d0      	lsls	r0, r2, #31
1000ae9e:	d404      	bmi.n	1000aeaa <_fflush_r+0x32>
1000aea0:	0599      	lsls	r1, r3, #22
1000aea2:	d402      	bmi.n	1000aeaa <_fflush_r+0x32>
1000aea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000aea6:	f7ff fc34 	bl	1000a712 <__retarget_lock_acquire_recursive>
1000aeaa:	4628      	mov	r0, r5
1000aeac:	4621      	mov	r1, r4
1000aeae:	f7ff ff5f 	bl	1000ad70 <__sflush_r>
1000aeb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1000aeb4:	07da      	lsls	r2, r3, #31
1000aeb6:	4605      	mov	r5, r0
1000aeb8:	d4e4      	bmi.n	1000ae84 <_fflush_r+0xc>
1000aeba:	89a3      	ldrh	r3, [r4, #12]
1000aebc:	059b      	lsls	r3, r3, #22
1000aebe:	d4e1      	bmi.n	1000ae84 <_fflush_r+0xc>
1000aec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1000aec2:	f7ff fc27 	bl	1000a714 <__retarget_lock_release_recursive>
1000aec6:	e7dd      	b.n	1000ae84 <_fflush_r+0xc>

1000aec8 <__swbuf_r>:
1000aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aeca:	460e      	mov	r6, r1
1000aecc:	4614      	mov	r4, r2
1000aece:	4605      	mov	r5, r0
1000aed0:	b118      	cbz	r0, 1000aeda <__swbuf_r+0x12>
1000aed2:	6a03      	ldr	r3, [r0, #32]
1000aed4:	b90b      	cbnz	r3, 1000aeda <__swbuf_r+0x12>
1000aed6:	f7ff fad1 	bl	1000a47c <__sinit>
1000aeda:	69a3      	ldr	r3, [r4, #24]
1000aedc:	60a3      	str	r3, [r4, #8]
1000aede:	89a3      	ldrh	r3, [r4, #12]
1000aee0:	071a      	lsls	r2, r3, #28
1000aee2:	d501      	bpl.n	1000aee8 <__swbuf_r+0x20>
1000aee4:	6923      	ldr	r3, [r4, #16]
1000aee6:	b943      	cbnz	r3, 1000aefa <__swbuf_r+0x32>
1000aee8:	4621      	mov	r1, r4
1000aeea:	4628      	mov	r0, r5
1000aeec:	f000 f82a 	bl	1000af44 <__swsetup_r>
1000aef0:	b118      	cbz	r0, 1000aefa <__swbuf_r+0x32>
1000aef2:	f04f 37ff 	mov.w	r7, #4294967295
1000aef6:	4638      	mov	r0, r7
1000aef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000aefa:	6823      	ldr	r3, [r4, #0]
1000aefc:	6922      	ldr	r2, [r4, #16]
1000aefe:	1a98      	subs	r0, r3, r2
1000af00:	6963      	ldr	r3, [r4, #20]
1000af02:	b2f6      	uxtb	r6, r6
1000af04:	4283      	cmp	r3, r0
1000af06:	4637      	mov	r7, r6
1000af08:	dc05      	bgt.n	1000af16 <__swbuf_r+0x4e>
1000af0a:	4621      	mov	r1, r4
1000af0c:	4628      	mov	r0, r5
1000af0e:	f7ff ffb3 	bl	1000ae78 <_fflush_r>
1000af12:	2800      	cmp	r0, #0
1000af14:	d1ed      	bne.n	1000aef2 <__swbuf_r+0x2a>
1000af16:	68a3      	ldr	r3, [r4, #8]
1000af18:	3b01      	subs	r3, #1
1000af1a:	60a3      	str	r3, [r4, #8]
1000af1c:	6823      	ldr	r3, [r4, #0]
1000af1e:	1c5a      	adds	r2, r3, #1
1000af20:	6022      	str	r2, [r4, #0]
1000af22:	701e      	strb	r6, [r3, #0]
1000af24:	6962      	ldr	r2, [r4, #20]
1000af26:	1c43      	adds	r3, r0, #1
1000af28:	429a      	cmp	r2, r3
1000af2a:	d004      	beq.n	1000af36 <__swbuf_r+0x6e>
1000af2c:	89a3      	ldrh	r3, [r4, #12]
1000af2e:	07db      	lsls	r3, r3, #31
1000af30:	d5e1      	bpl.n	1000aef6 <__swbuf_r+0x2e>
1000af32:	2e0a      	cmp	r6, #10
1000af34:	d1df      	bne.n	1000aef6 <__swbuf_r+0x2e>
1000af36:	4621      	mov	r1, r4
1000af38:	4628      	mov	r0, r5
1000af3a:	f7ff ff9d 	bl	1000ae78 <_fflush_r>
1000af3e:	2800      	cmp	r0, #0
1000af40:	d0d9      	beq.n	1000aef6 <__swbuf_r+0x2e>
1000af42:	e7d6      	b.n	1000aef2 <__swbuf_r+0x2a>

1000af44 <__swsetup_r>:
1000af44:	b538      	push	{r3, r4, r5, lr}
1000af46:	4b29      	ldr	r3, [pc, #164]	@ (1000afec <__swsetup_r+0xa8>)
1000af48:	4605      	mov	r5, r0
1000af4a:	6818      	ldr	r0, [r3, #0]
1000af4c:	460c      	mov	r4, r1
1000af4e:	b118      	cbz	r0, 1000af58 <__swsetup_r+0x14>
1000af50:	6a03      	ldr	r3, [r0, #32]
1000af52:	b90b      	cbnz	r3, 1000af58 <__swsetup_r+0x14>
1000af54:	f7ff fa92 	bl	1000a47c <__sinit>
1000af58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000af5c:	0719      	lsls	r1, r3, #28
1000af5e:	d422      	bmi.n	1000afa6 <__swsetup_r+0x62>
1000af60:	06da      	lsls	r2, r3, #27
1000af62:	d407      	bmi.n	1000af74 <__swsetup_r+0x30>
1000af64:	2209      	movs	r2, #9
1000af66:	602a      	str	r2, [r5, #0]
1000af68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000af6c:	81a3      	strh	r3, [r4, #12]
1000af6e:	f04f 30ff 	mov.w	r0, #4294967295
1000af72:	e033      	b.n	1000afdc <__swsetup_r+0x98>
1000af74:	0758      	lsls	r0, r3, #29
1000af76:	d512      	bpl.n	1000af9e <__swsetup_r+0x5a>
1000af78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1000af7a:	b141      	cbz	r1, 1000af8e <__swsetup_r+0x4a>
1000af7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1000af80:	4299      	cmp	r1, r3
1000af82:	d002      	beq.n	1000af8a <__swsetup_r+0x46>
1000af84:	4628      	mov	r0, r5
1000af86:	f7ff fbdb 	bl	1000a740 <_free_r>
1000af8a:	2300      	movs	r3, #0
1000af8c:	6363      	str	r3, [r4, #52]	@ 0x34
1000af8e:	89a3      	ldrh	r3, [r4, #12]
1000af90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
1000af94:	81a3      	strh	r3, [r4, #12]
1000af96:	2300      	movs	r3, #0
1000af98:	6063      	str	r3, [r4, #4]
1000af9a:	6923      	ldr	r3, [r4, #16]
1000af9c:	6023      	str	r3, [r4, #0]
1000af9e:	89a3      	ldrh	r3, [r4, #12]
1000afa0:	f043 0308 	orr.w	r3, r3, #8
1000afa4:	81a3      	strh	r3, [r4, #12]
1000afa6:	6923      	ldr	r3, [r4, #16]
1000afa8:	b94b      	cbnz	r3, 1000afbe <__swsetup_r+0x7a>
1000afaa:	89a3      	ldrh	r3, [r4, #12]
1000afac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
1000afb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
1000afb4:	d003      	beq.n	1000afbe <__swsetup_r+0x7a>
1000afb6:	4621      	mov	r1, r4
1000afb8:	4628      	mov	r0, r5
1000afba:	f000 f883 	bl	1000b0c4 <__smakebuf_r>
1000afbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000afc2:	f013 0201 	ands.w	r2, r3, #1
1000afc6:	d00a      	beq.n	1000afde <__swsetup_r+0x9a>
1000afc8:	2200      	movs	r2, #0
1000afca:	60a2      	str	r2, [r4, #8]
1000afcc:	6962      	ldr	r2, [r4, #20]
1000afce:	4252      	negs	r2, r2
1000afd0:	61a2      	str	r2, [r4, #24]
1000afd2:	6922      	ldr	r2, [r4, #16]
1000afd4:	b942      	cbnz	r2, 1000afe8 <__swsetup_r+0xa4>
1000afd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
1000afda:	d1c5      	bne.n	1000af68 <__swsetup_r+0x24>
1000afdc:	bd38      	pop	{r3, r4, r5, pc}
1000afde:	0799      	lsls	r1, r3, #30
1000afe0:	bf58      	it	pl
1000afe2:	6962      	ldrpl	r2, [r4, #20]
1000afe4:	60a2      	str	r2, [r4, #8]
1000afe6:	e7f4      	b.n	1000afd2 <__swsetup_r+0x8e>
1000afe8:	2000      	movs	r0, #0
1000afea:	e7f7      	b.n	1000afdc <__swsetup_r+0x98>
1000afec:	100200e0 	.word	0x100200e0

1000aff0 <_raise_r>:
1000aff0:	291f      	cmp	r1, #31
1000aff2:	b538      	push	{r3, r4, r5, lr}
1000aff4:	4605      	mov	r5, r0
1000aff6:	460c      	mov	r4, r1
1000aff8:	d904      	bls.n	1000b004 <_raise_r+0x14>
1000affa:	2316      	movs	r3, #22
1000affc:	6003      	str	r3, [r0, #0]
1000affe:	f04f 30ff 	mov.w	r0, #4294967295
1000b002:	bd38      	pop	{r3, r4, r5, pc}
1000b004:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
1000b006:	b112      	cbz	r2, 1000b00e <_raise_r+0x1e>
1000b008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000b00c:	b94b      	cbnz	r3, 1000b022 <_raise_r+0x32>
1000b00e:	4628      	mov	r0, r5
1000b010:	f000 f830 	bl	1000b074 <_getpid_r>
1000b014:	4622      	mov	r2, r4
1000b016:	4601      	mov	r1, r0
1000b018:	4628      	mov	r0, r5
1000b01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000b01e:	f000 b817 	b.w	1000b050 <_kill_r>
1000b022:	2b01      	cmp	r3, #1
1000b024:	d00a      	beq.n	1000b03c <_raise_r+0x4c>
1000b026:	1c59      	adds	r1, r3, #1
1000b028:	d103      	bne.n	1000b032 <_raise_r+0x42>
1000b02a:	2316      	movs	r3, #22
1000b02c:	6003      	str	r3, [r0, #0]
1000b02e:	2001      	movs	r0, #1
1000b030:	e7e7      	b.n	1000b002 <_raise_r+0x12>
1000b032:	2100      	movs	r1, #0
1000b034:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
1000b038:	4620      	mov	r0, r4
1000b03a:	4798      	blx	r3
1000b03c:	2000      	movs	r0, #0
1000b03e:	e7e0      	b.n	1000b002 <_raise_r+0x12>

1000b040 <raise>:
1000b040:	4b02      	ldr	r3, [pc, #8]	@ (1000b04c <raise+0xc>)
1000b042:	4601      	mov	r1, r0
1000b044:	6818      	ldr	r0, [r3, #0]
1000b046:	f7ff bfd3 	b.w	1000aff0 <_raise_r>
1000b04a:	bf00      	nop
1000b04c:	100200e0 	.word	0x100200e0

1000b050 <_kill_r>:
1000b050:	b538      	push	{r3, r4, r5, lr}
1000b052:	4d07      	ldr	r5, [pc, #28]	@ (1000b070 <_kill_r+0x20>)
1000b054:	2300      	movs	r3, #0
1000b056:	4604      	mov	r4, r0
1000b058:	4608      	mov	r0, r1
1000b05a:	4611      	mov	r1, r2
1000b05c:	602b      	str	r3, [r5, #0]
1000b05e:	f7f6 f9f5 	bl	1000144c <_kill>
1000b062:	1c43      	adds	r3, r0, #1
1000b064:	d102      	bne.n	1000b06c <_kill_r+0x1c>
1000b066:	682b      	ldr	r3, [r5, #0]
1000b068:	b103      	cbz	r3, 1000b06c <_kill_r+0x1c>
1000b06a:	6023      	str	r3, [r4, #0]
1000b06c:	bd38      	pop	{r3, r4, r5, pc}
1000b06e:	bf00      	nop
1000b070:	1002154c 	.word	0x1002154c

1000b074 <_getpid_r>:
1000b074:	f7f6 b9e2 	b.w	1000143c <_getpid>

1000b078 <__swhatbuf_r>:
1000b078:	b570      	push	{r4, r5, r6, lr}
1000b07a:	460c      	mov	r4, r1
1000b07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000b080:	2900      	cmp	r1, #0
1000b082:	b096      	sub	sp, #88	@ 0x58
1000b084:	4615      	mov	r5, r2
1000b086:	461e      	mov	r6, r3
1000b088:	da0d      	bge.n	1000b0a6 <__swhatbuf_r+0x2e>
1000b08a:	89a3      	ldrh	r3, [r4, #12]
1000b08c:	f013 0f80 	tst.w	r3, #128	@ 0x80
1000b090:	f04f 0100 	mov.w	r1, #0
1000b094:	bf14      	ite	ne
1000b096:	2340      	movne	r3, #64	@ 0x40
1000b098:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
1000b09c:	2000      	movs	r0, #0
1000b09e:	6031      	str	r1, [r6, #0]
1000b0a0:	602b      	str	r3, [r5, #0]
1000b0a2:	b016      	add	sp, #88	@ 0x58
1000b0a4:	bd70      	pop	{r4, r5, r6, pc}
1000b0a6:	466a      	mov	r2, sp
1000b0a8:	f000 f848 	bl	1000b13c <_fstat_r>
1000b0ac:	2800      	cmp	r0, #0
1000b0ae:	dbec      	blt.n	1000b08a <__swhatbuf_r+0x12>
1000b0b0:	9901      	ldr	r1, [sp, #4]
1000b0b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
1000b0b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
1000b0ba:	4259      	negs	r1, r3
1000b0bc:	4159      	adcs	r1, r3
1000b0be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
1000b0c2:	e7eb      	b.n	1000b09c <__swhatbuf_r+0x24>

1000b0c4 <__smakebuf_r>:
1000b0c4:	898b      	ldrh	r3, [r1, #12]
1000b0c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000b0c8:	079d      	lsls	r5, r3, #30
1000b0ca:	4606      	mov	r6, r0
1000b0cc:	460c      	mov	r4, r1
1000b0ce:	d507      	bpl.n	1000b0e0 <__smakebuf_r+0x1c>
1000b0d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
1000b0d4:	6023      	str	r3, [r4, #0]
1000b0d6:	6123      	str	r3, [r4, #16]
1000b0d8:	2301      	movs	r3, #1
1000b0da:	6163      	str	r3, [r4, #20]
1000b0dc:	b003      	add	sp, #12
1000b0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b0e0:	ab01      	add	r3, sp, #4
1000b0e2:	466a      	mov	r2, sp
1000b0e4:	f7ff ffc8 	bl	1000b078 <__swhatbuf_r>
1000b0e8:	9f00      	ldr	r7, [sp, #0]
1000b0ea:	4605      	mov	r5, r0
1000b0ec:	4639      	mov	r1, r7
1000b0ee:	4630      	mov	r0, r6
1000b0f0:	f7ff f8ac 	bl	1000a24c <_malloc_r>
1000b0f4:	b948      	cbnz	r0, 1000b10a <__smakebuf_r+0x46>
1000b0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000b0fa:	059a      	lsls	r2, r3, #22
1000b0fc:	d4ee      	bmi.n	1000b0dc <__smakebuf_r+0x18>
1000b0fe:	f023 0303 	bic.w	r3, r3, #3
1000b102:	f043 0302 	orr.w	r3, r3, #2
1000b106:	81a3      	strh	r3, [r4, #12]
1000b108:	e7e2      	b.n	1000b0d0 <__smakebuf_r+0xc>
1000b10a:	89a3      	ldrh	r3, [r4, #12]
1000b10c:	6020      	str	r0, [r4, #0]
1000b10e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1000b112:	81a3      	strh	r3, [r4, #12]
1000b114:	9b01      	ldr	r3, [sp, #4]
1000b116:	e9c4 0704 	strd	r0, r7, [r4, #16]
1000b11a:	b15b      	cbz	r3, 1000b134 <__smakebuf_r+0x70>
1000b11c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000b120:	4630      	mov	r0, r6
1000b122:	f000 f81d 	bl	1000b160 <_isatty_r>
1000b126:	b128      	cbz	r0, 1000b134 <__smakebuf_r+0x70>
1000b128:	89a3      	ldrh	r3, [r4, #12]
1000b12a:	f023 0303 	bic.w	r3, r3, #3
1000b12e:	f043 0301 	orr.w	r3, r3, #1
1000b132:	81a3      	strh	r3, [r4, #12]
1000b134:	89a3      	ldrh	r3, [r4, #12]
1000b136:	431d      	orrs	r5, r3
1000b138:	81a5      	strh	r5, [r4, #12]
1000b13a:	e7cf      	b.n	1000b0dc <__smakebuf_r+0x18>

1000b13c <_fstat_r>:
1000b13c:	b538      	push	{r3, r4, r5, lr}
1000b13e:	4d07      	ldr	r5, [pc, #28]	@ (1000b15c <_fstat_r+0x20>)
1000b140:	2300      	movs	r3, #0
1000b142:	4604      	mov	r4, r0
1000b144:	4608      	mov	r0, r1
1000b146:	4611      	mov	r1, r2
1000b148:	602b      	str	r3, [r5, #0]
1000b14a:	f7f6 f9df 	bl	1000150c <_fstat>
1000b14e:	1c43      	adds	r3, r0, #1
1000b150:	d102      	bne.n	1000b158 <_fstat_r+0x1c>
1000b152:	682b      	ldr	r3, [r5, #0]
1000b154:	b103      	cbz	r3, 1000b158 <_fstat_r+0x1c>
1000b156:	6023      	str	r3, [r4, #0]
1000b158:	bd38      	pop	{r3, r4, r5, pc}
1000b15a:	bf00      	nop
1000b15c:	1002154c 	.word	0x1002154c

1000b160 <_isatty_r>:
1000b160:	b538      	push	{r3, r4, r5, lr}
1000b162:	4d06      	ldr	r5, [pc, #24]	@ (1000b17c <_isatty_r+0x1c>)
1000b164:	2300      	movs	r3, #0
1000b166:	4604      	mov	r4, r0
1000b168:	4608      	mov	r0, r1
1000b16a:	602b      	str	r3, [r5, #0]
1000b16c:	f7f6 f9de 	bl	1000152c <_isatty>
1000b170:	1c43      	adds	r3, r0, #1
1000b172:	d102      	bne.n	1000b17a <_isatty_r+0x1a>
1000b174:	682b      	ldr	r3, [r5, #0]
1000b176:	b103      	cbz	r3, 1000b17a <_isatty_r+0x1a>
1000b178:	6023      	str	r3, [r4, #0]
1000b17a:	bd38      	pop	{r3, r4, r5, pc}
1000b17c:	1002154c 	.word	0x1002154c

1000b180 <_sbrk>:
1000b180:	4a04      	ldr	r2, [pc, #16]	@ (1000b194 <_sbrk+0x14>)
1000b182:	6811      	ldr	r1, [r2, #0]
1000b184:	4603      	mov	r3, r0
1000b186:	b909      	cbnz	r1, 1000b18c <_sbrk+0xc>
1000b188:	4903      	ldr	r1, [pc, #12]	@ (1000b198 <_sbrk+0x18>)
1000b18a:	6011      	str	r1, [r2, #0]
1000b18c:	6810      	ldr	r0, [r2, #0]
1000b18e:	4403      	add	r3, r0
1000b190:	6013      	str	r3, [r2, #0]
1000b192:	4770      	bx	lr
1000b194:	10021554 	.word	0x10021554
1000b198:	10021558 	.word	0x10021558

1000b19c <_init>:
1000b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b19e:	bf00      	nop
1000b1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000b1a2:	bc08      	pop	{r3}
1000b1a4:	469e      	mov	lr, r3
1000b1a6:	4770      	bx	lr

1000b1a8 <_fini>:
1000b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b1aa:	bf00      	nop
1000b1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000b1ae:	bc08      	pop	{r3}
1000b1b0:	469e      	mov	lr, r3
1000b1b2:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

1000b1b4 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
1000b1b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 1000b1ec <LoopForever+0x2>
  movs  r1, #0
1000b1b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000b1ba:	e003      	b.n	1000b1c4 <LoopCopyDataInit>

1000b1bc <CopyDataInit>:
  ldr  r3, =_sidata
1000b1bc:	4b0c      	ldr	r3, [pc, #48]	@ (1000b1f0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000b1be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000b1c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000b1c2:	3104      	adds	r1, #4

1000b1c4 <LoopCopyDataInit>:
  ldr  r0, =_sdata
1000b1c4:	480b      	ldr	r0, [pc, #44]	@ (1000b1f4 <LoopForever+0xa>)
  ldr  r3, =_edata
1000b1c6:	4b0c      	ldr	r3, [pc, #48]	@ (1000b1f8 <LoopForever+0xe>)
  adds  r2, r0, r1
1000b1c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000b1ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000b1cc:	d3f6      	bcc.n	1000b1bc <CopyDataInit>
  ldr  r2, =_sbss
1000b1ce:	4a0b      	ldr	r2, [pc, #44]	@ (1000b1fc <LoopForever+0x12>)
  b  LoopFillZerobss
1000b1d0:	e002      	b.n	1000b1d8 <LoopFillZerobss>

1000b1d2 <FillZerobss>:
  movs  r3, #0
1000b1d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
1000b1d4:	f842 3b04 	str.w	r3, [r2], #4

1000b1d8 <LoopFillZerobss>:
  ldr  r3, = _ebss
1000b1d8:	4b09      	ldr	r3, [pc, #36]	@ (1000b200 <LoopForever+0x16>)
  cmp  r2, r3
1000b1da:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000b1dc:	d3f9      	bcc.n	1000b1d2 <FillZerobss>
  bl  SystemInit
1000b1de:	f7f6 fa6f 	bl	100016c0 <SystemInit>
 bl __libc_init_array
1000b1e2:	f7ff fa71 	bl	1000a6c8 <__libc_init_array>
  bl main
1000b1e6:	f7f5 f88f 	bl	10000308 <main>

1000b1ea <LoopForever>:
    b LoopForever
1000b1ea:	e7fe      	b.n	1000b1ea <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000b1ec:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1000b1f0:	1000d7dc 	.word	0x1000d7dc
  ldr  r0, =_sdata
1000b1f4:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000b1f8:	10020130 	.word	0x10020130
  ldr  r2, =_sbss
1000b1fc:	100201bc 	.word	0x100201bc
  ldr  r3, = _ebss
1000b200:	10021558 	.word	0x10021558
