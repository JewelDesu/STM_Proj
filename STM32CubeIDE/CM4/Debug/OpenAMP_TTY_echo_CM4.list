
OpenAMP_TTY_echo_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113b0  10000000  10000000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  100113b0  100113b0  000133b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001244  10011400  10011400  00013400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  10012644  10012644  00015328  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  10012644  10012644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  1001264c  1001264c  00015328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1001264c  1001264c  0001464c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  10012650  10012650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000029c  10020000  10012654  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  1002029c  100128f0  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          000014e0  10020328  10020328  00015328  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10021808  10021808  00015328  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00015328  2**0
                  CONTENTS, READONLY
 14 .debug_line   000234db  00000000  00000000  00015358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000161  00000000  00000000  00038833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00024963  00000000  00000000  00038994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000543e  00000000  00000000  0005d2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000016b8  00000000  00000000  00062738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001cf456  00000000  00000000  00063df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000010ec  00000000  00000000  00233246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0004bc82  00000000  00000000  00234332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0027ffb4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00007064  00000000  00000000  0027fff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	@ (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	@ (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	@ (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	10020328 	.word	0x10020328
1000001c:	00000000 	.word	0x00000000
10000020:	10011398 	.word	0x10011398

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	@ (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	@ (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	@ (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	1002032c 	.word	0x1002032c
1000003c:	10011398 	.word	0x10011398

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr
	...

10000060 <memchr>:
10000060:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
10000064:	2a10      	cmp	r2, #16
10000066:	db2b      	blt.n	100000c0 <memchr+0x60>
10000068:	f010 0f07 	tst.w	r0, #7
1000006c:	d008      	beq.n	10000080 <memchr+0x20>
1000006e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000072:	3a01      	subs	r2, #1
10000074:	428b      	cmp	r3, r1
10000076:	d02d      	beq.n	100000d4 <memchr+0x74>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	b342      	cbz	r2, 100000d0 <memchr+0x70>
1000007e:	d1f6      	bne.n	1000006e <memchr+0xe>
10000080:	b4f0      	push	{r4, r5, r6, r7}
10000082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000008a:	f022 0407 	bic.w	r4, r2, #7
1000008e:	f07f 0700 	mvns.w	r7, #0
10000092:	2300      	movs	r3, #0
10000094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000098:	3c08      	subs	r4, #8
1000009a:	ea85 0501 	eor.w	r5, r5, r1
1000009e:	ea86 0601 	eor.w	r6, r6, r1
100000a2:	fa85 f547 	uadd8	r5, r5, r7
100000a6:	faa3 f587 	sel	r5, r3, r7
100000aa:	fa86 f647 	uadd8	r6, r6, r7
100000ae:	faa5 f687 	sel	r6, r5, r7
100000b2:	b98e      	cbnz	r6, 100000d8 <memchr+0x78>
100000b4:	d1ee      	bne.n	10000094 <memchr+0x34>
100000b6:	bcf0      	pop	{r4, r5, r6, r7}
100000b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
100000bc:	f002 0207 	and.w	r2, r2, #7
100000c0:	b132      	cbz	r2, 100000d0 <memchr+0x70>
100000c2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000c6:	3a01      	subs	r2, #1
100000c8:	ea83 0301 	eor.w	r3, r3, r1
100000cc:	b113      	cbz	r3, 100000d4 <memchr+0x74>
100000ce:	d1f8      	bne.n	100000c2 <memchr+0x62>
100000d0:	2000      	movs	r0, #0
100000d2:	4770      	bx	lr
100000d4:	3801      	subs	r0, #1
100000d6:	4770      	bx	lr
100000d8:	2d00      	cmp	r5, #0
100000da:	bf06      	itte	eq
100000dc:	4635      	moveq	r5, r6
100000de:	3803      	subeq	r0, #3
100000e0:	3807      	subne	r0, #7
100000e2:	f015 0f01 	tst.w	r5, #1
100000e6:	d107      	bne.n	100000f8 <memchr+0x98>
100000e8:	3001      	adds	r0, #1
100000ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
100000ee:	bf02      	ittt	eq
100000f0:	3001      	addeq	r0, #1
100000f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
100000f6:	3001      	addeq	r0, #1
100000f8:	bcf0      	pop	{r4, r5, r6, r7}
100000fa:	3801      	subs	r0, #1
100000fc:	4770      	bx	lr
100000fe:	bf00      	nop

10000100 <strlen>:
10000100:	4603      	mov	r3, r0
10000102:	f813 2b01 	ldrb.w	r2, [r3], #1
10000106:	2a00      	cmp	r2, #0
10000108:	d1fb      	bne.n	10000102 <strlen+0x2>
1000010a:	1a18      	subs	r0, r3, r0
1000010c:	3801      	subs	r0, #1
1000010e:	4770      	bx	lr

10000110 <__aeabi_drsub>:
10000110:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
10000114:	e002      	b.n	1000011c <__adddf3>
10000116:	bf00      	nop

10000118 <__aeabi_dsub>:
10000118:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

1000011c <__adddf3>:
1000011c:	b530      	push	{r4, r5, lr}
1000011e:	ea4f 0441 	mov.w	r4, r1, lsl #1
10000122:	ea4f 0543 	mov.w	r5, r3, lsl #1
10000126:	ea94 0f05 	teq	r4, r5
1000012a:	bf08      	it	eq
1000012c:	ea90 0f02 	teqeq	r0, r2
10000130:	bf1f      	itttt	ne
10000132:	ea54 0c00 	orrsne.w	ip, r4, r0
10000136:	ea55 0c02 	orrsne.w	ip, r5, r2
1000013a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1000013e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000142:	f000 80e2 	beq.w	1000030a <__adddf3+0x1ee>
10000146:	ea4f 5454 	mov.w	r4, r4, lsr #21
1000014a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1000014e:	bfb8      	it	lt
10000150:	426d      	neglt	r5, r5
10000152:	dd0c      	ble.n	1000016e <__adddf3+0x52>
10000154:	442c      	add	r4, r5
10000156:	ea80 0202 	eor.w	r2, r0, r2
1000015a:	ea81 0303 	eor.w	r3, r1, r3
1000015e:	ea82 0000 	eor.w	r0, r2, r0
10000162:	ea83 0101 	eor.w	r1, r3, r1
10000166:	ea80 0202 	eor.w	r2, r0, r2
1000016a:	ea81 0303 	eor.w	r3, r1, r3
1000016e:	2d36      	cmp	r5, #54	@ 0x36
10000170:	bf88      	it	hi
10000172:	bd30      	pophi	{r4, r5, pc}
10000174:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
10000178:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000017c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
10000180:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
10000184:	d002      	beq.n	1000018c <__adddf3+0x70>
10000186:	4240      	negs	r0, r0
10000188:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1000018c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
10000190:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000194:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
10000198:	d002      	beq.n	100001a0 <__adddf3+0x84>
1000019a:	4252      	negs	r2, r2
1000019c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
100001a0:	ea94 0f05 	teq	r4, r5
100001a4:	f000 80a7 	beq.w	100002f6 <__adddf3+0x1da>
100001a8:	f1a4 0401 	sub.w	r4, r4, #1
100001ac:	f1d5 0e20 	rsbs	lr, r5, #32
100001b0:	db0d      	blt.n	100001ce <__adddf3+0xb2>
100001b2:	fa02 fc0e 	lsl.w	ip, r2, lr
100001b6:	fa22 f205 	lsr.w	r2, r2, r5
100001ba:	1880      	adds	r0, r0, r2
100001bc:	f141 0100 	adc.w	r1, r1, #0
100001c0:	fa03 f20e 	lsl.w	r2, r3, lr
100001c4:	1880      	adds	r0, r0, r2
100001c6:	fa43 f305 	asr.w	r3, r3, r5
100001ca:	4159      	adcs	r1, r3
100001cc:	e00e      	b.n	100001ec <__adddf3+0xd0>
100001ce:	f1a5 0520 	sub.w	r5, r5, #32
100001d2:	f10e 0e20 	add.w	lr, lr, #32
100001d6:	2a01      	cmp	r2, #1
100001d8:	fa03 fc0e 	lsl.w	ip, r3, lr
100001dc:	bf28      	it	cs
100001de:	f04c 0c02 	orrcs.w	ip, ip, #2
100001e2:	fa43 f305 	asr.w	r3, r3, r5
100001e6:	18c0      	adds	r0, r0, r3
100001e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
100001ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
100001f0:	d507      	bpl.n	10000202 <__adddf3+0xe6>
100001f2:	f04f 0e00 	mov.w	lr, #0
100001f6:	f1dc 0c00 	rsbs	ip, ip, #0
100001fa:	eb7e 0000 	sbcs.w	r0, lr, r0
100001fe:	eb6e 0101 	sbc.w	r1, lr, r1
10000202:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
10000206:	d31b      	bcc.n	10000240 <__adddf3+0x124>
10000208:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
1000020c:	d30c      	bcc.n	10000228 <__adddf3+0x10c>
1000020e:	0849      	lsrs	r1, r1, #1
10000210:	ea5f 0030 	movs.w	r0, r0, rrx
10000214:	ea4f 0c3c 	mov.w	ip, ip, rrx
10000218:	f104 0401 	add.w	r4, r4, #1
1000021c:	ea4f 5244 	mov.w	r2, r4, lsl #21
10000220:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
10000224:	f080 809a 	bcs.w	1000035c <__adddf3+0x240>
10000228:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
1000022c:	bf08      	it	eq
1000022e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000232:	f150 0000 	adcs.w	r0, r0, #0
10000236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000023a:	ea41 0105 	orr.w	r1, r1, r5
1000023e:	bd30      	pop	{r4, r5, pc}
10000240:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
10000244:	4140      	adcs	r0, r0
10000246:	eb41 0101 	adc.w	r1, r1, r1
1000024a:	3c01      	subs	r4, #1
1000024c:	bf28      	it	cs
1000024e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
10000252:	d2e9      	bcs.n	10000228 <__adddf3+0x10c>
10000254:	f091 0f00 	teq	r1, #0
10000258:	bf04      	itt	eq
1000025a:	4601      	moveq	r1, r0
1000025c:	2000      	moveq	r0, #0
1000025e:	fab1 f381 	clz	r3, r1
10000262:	bf08      	it	eq
10000264:	3320      	addeq	r3, #32
10000266:	f1a3 030b 	sub.w	r3, r3, #11
1000026a:	f1b3 0220 	subs.w	r2, r3, #32
1000026e:	da0c      	bge.n	1000028a <__adddf3+0x16e>
10000270:	320c      	adds	r2, #12
10000272:	dd08      	ble.n	10000286 <__adddf3+0x16a>
10000274:	f102 0c14 	add.w	ip, r2, #20
10000278:	f1c2 020c 	rsb	r2, r2, #12
1000027c:	fa01 f00c 	lsl.w	r0, r1, ip
10000280:	fa21 f102 	lsr.w	r1, r1, r2
10000284:	e00c      	b.n	100002a0 <__adddf3+0x184>
10000286:	f102 0214 	add.w	r2, r2, #20
1000028a:	bfd8      	it	le
1000028c:	f1c2 0c20 	rsble	ip, r2, #32
10000290:	fa01 f102 	lsl.w	r1, r1, r2
10000294:	fa20 fc0c 	lsr.w	ip, r0, ip
10000298:	bfdc      	itt	le
1000029a:	ea41 010c 	orrle.w	r1, r1, ip
1000029e:	4090      	lslle	r0, r2
100002a0:	1ae4      	subs	r4, r4, r3
100002a2:	bfa2      	ittt	ge
100002a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
100002a8:	4329      	orrge	r1, r5
100002aa:	bd30      	popge	{r4, r5, pc}
100002ac:	ea6f 0404 	mvn.w	r4, r4
100002b0:	3c1f      	subs	r4, #31
100002b2:	da1c      	bge.n	100002ee <__adddf3+0x1d2>
100002b4:	340c      	adds	r4, #12
100002b6:	dc0e      	bgt.n	100002d6 <__adddf3+0x1ba>
100002b8:	f104 0414 	add.w	r4, r4, #20
100002bc:	f1c4 0220 	rsb	r2, r4, #32
100002c0:	fa20 f004 	lsr.w	r0, r0, r4
100002c4:	fa01 f302 	lsl.w	r3, r1, r2
100002c8:	ea40 0003 	orr.w	r0, r0, r3
100002cc:	fa21 f304 	lsr.w	r3, r1, r4
100002d0:	ea45 0103 	orr.w	r1, r5, r3
100002d4:	bd30      	pop	{r4, r5, pc}
100002d6:	f1c4 040c 	rsb	r4, r4, #12
100002da:	f1c4 0220 	rsb	r2, r4, #32
100002de:	fa20 f002 	lsr.w	r0, r0, r2
100002e2:	fa01 f304 	lsl.w	r3, r1, r4
100002e6:	ea40 0003 	orr.w	r0, r0, r3
100002ea:	4629      	mov	r1, r5
100002ec:	bd30      	pop	{r4, r5, pc}
100002ee:	fa21 f004 	lsr.w	r0, r1, r4
100002f2:	4629      	mov	r1, r5
100002f4:	bd30      	pop	{r4, r5, pc}
100002f6:	f094 0f00 	teq	r4, #0
100002fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
100002fe:	bf06      	itte	eq
10000300:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
10000304:	3401      	addeq	r4, #1
10000306:	3d01      	subne	r5, #1
10000308:	e74e      	b.n	100001a8 <__adddf3+0x8c>
1000030a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000030e:	bf18      	it	ne
10000310:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000314:	d029      	beq.n	1000036a <__adddf3+0x24e>
10000316:	ea94 0f05 	teq	r4, r5
1000031a:	bf08      	it	eq
1000031c:	ea90 0f02 	teqeq	r0, r2
10000320:	d005      	beq.n	1000032e <__adddf3+0x212>
10000322:	ea54 0c00 	orrs.w	ip, r4, r0
10000326:	bf04      	itt	eq
10000328:	4619      	moveq	r1, r3
1000032a:	4610      	moveq	r0, r2
1000032c:	bd30      	pop	{r4, r5, pc}
1000032e:	ea91 0f03 	teq	r1, r3
10000332:	bf1e      	ittt	ne
10000334:	2100      	movne	r1, #0
10000336:	2000      	movne	r0, #0
10000338:	bd30      	popne	{r4, r5, pc}
1000033a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1000033e:	d105      	bne.n	1000034c <__adddf3+0x230>
10000340:	0040      	lsls	r0, r0, #1
10000342:	4149      	adcs	r1, r1
10000344:	bf28      	it	cs
10000346:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
1000034a:	bd30      	pop	{r4, r5, pc}
1000034c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
10000350:	bf3c      	itt	cc
10000352:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
10000356:	bd30      	popcc	{r4, r5, pc}
10000358:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
1000035c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
10000360:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
10000364:	f04f 0000 	mov.w	r0, #0
10000368:	bd30      	pop	{r4, r5, pc}
1000036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000036e:	bf1a      	itte	ne
10000370:	4619      	movne	r1, r3
10000372:	4610      	movne	r0, r2
10000374:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
10000378:	bf1c      	itt	ne
1000037a:	460b      	movne	r3, r1
1000037c:	4602      	movne	r2, r0
1000037e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000382:	bf06      	itte	eq
10000384:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
10000388:	ea91 0f03 	teqeq	r1, r3
1000038c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
10000390:	bd30      	pop	{r4, r5, pc}
10000392:	bf00      	nop

10000394 <__aeabi_ui2d>:
10000394:	f090 0f00 	teq	r0, #0
10000398:	bf04      	itt	eq
1000039a:	2100      	moveq	r1, #0
1000039c:	4770      	bxeq	lr
1000039e:	b530      	push	{r4, r5, lr}
100003a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
100003a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
100003a8:	f04f 0500 	mov.w	r5, #0
100003ac:	f04f 0100 	mov.w	r1, #0
100003b0:	e750      	b.n	10000254 <__adddf3+0x138>
100003b2:	bf00      	nop

100003b4 <__aeabi_i2d>:
100003b4:	f090 0f00 	teq	r0, #0
100003b8:	bf04      	itt	eq
100003ba:	2100      	moveq	r1, #0
100003bc:	4770      	bxeq	lr
100003be:	b530      	push	{r4, r5, lr}
100003c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
100003c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
100003c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
100003cc:	bf48      	it	mi
100003ce:	4240      	negmi	r0, r0
100003d0:	f04f 0100 	mov.w	r1, #0
100003d4:	e73e      	b.n	10000254 <__adddf3+0x138>
100003d6:	bf00      	nop

100003d8 <__aeabi_f2d>:
100003d8:	0042      	lsls	r2, r0, #1
100003da:	ea4f 01e2 	mov.w	r1, r2, asr #3
100003de:	ea4f 0131 	mov.w	r1, r1, rrx
100003e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
100003e6:	bf1f      	itttt	ne
100003e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
100003ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
100003f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
100003f4:	4770      	bxne	lr
100003f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
100003fa:	bf08      	it	eq
100003fc:	4770      	bxeq	lr
100003fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
10000402:	bf04      	itt	eq
10000404:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
10000408:	4770      	bxeq	lr
1000040a:	b530      	push	{r4, r5, lr}
1000040c:	f44f 7460 	mov.w	r4, #896	@ 0x380
10000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
10000414:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
10000418:	e71c      	b.n	10000254 <__adddf3+0x138>
1000041a:	bf00      	nop

1000041c <__aeabi_ul2d>:
1000041c:	ea50 0201 	orrs.w	r2, r0, r1
10000420:	bf08      	it	eq
10000422:	4770      	bxeq	lr
10000424:	b530      	push	{r4, r5, lr}
10000426:	f04f 0500 	mov.w	r5, #0
1000042a:	e00a      	b.n	10000442 <__aeabi_l2d+0x16>

1000042c <__aeabi_l2d>:
1000042c:	ea50 0201 	orrs.w	r2, r0, r1
10000430:	bf08      	it	eq
10000432:	4770      	bxeq	lr
10000434:	b530      	push	{r4, r5, lr}
10000436:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
1000043a:	d502      	bpl.n	10000442 <__aeabi_l2d+0x16>
1000043c:	4240      	negs	r0, r0
1000043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000442:	f44f 6480 	mov.w	r4, #1024	@ 0x400
10000446:	f104 0432 	add.w	r4, r4, #50	@ 0x32
1000044a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1000044e:	f43f aed8 	beq.w	10000202 <__adddf3+0xe6>
10000452:	f04f 0203 	mov.w	r2, #3
10000456:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1000045a:	bf18      	it	ne
1000045c:	3203      	addne	r2, #3
1000045e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
10000462:	bf18      	it	ne
10000464:	3203      	addne	r2, #3
10000466:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1000046a:	f1c2 0320 	rsb	r3, r2, #32
1000046e:	fa00 fc03 	lsl.w	ip, r0, r3
10000472:	fa20 f002 	lsr.w	r0, r0, r2
10000476:	fa01 fe03 	lsl.w	lr, r1, r3
1000047a:	ea40 000e 	orr.w	r0, r0, lr
1000047e:	fa21 f102 	lsr.w	r1, r1, r2
10000482:	4414      	add	r4, r2
10000484:	e6bd      	b.n	10000202 <__adddf3+0xe6>
10000486:	bf00      	nop

10000488 <__aeabi_dmul>:
10000488:	b570      	push	{r4, r5, r6, lr}
1000048a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
1000048e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
10000492:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
10000496:	bf1d      	ittte	ne
10000498:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1000049c:	ea94 0f0c 	teqne	r4, ip
100004a0:	ea95 0f0c 	teqne	r5, ip
100004a4:	f000 f8de 	bleq	10000664 <__aeabi_dmul+0x1dc>
100004a8:	442c      	add	r4, r5
100004aa:	ea81 0603 	eor.w	r6, r1, r3
100004ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
100004b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
100004b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
100004ba:	bf18      	it	ne
100004bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
100004c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
100004c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
100004c8:	d038      	beq.n	1000053c <__aeabi_dmul+0xb4>
100004ca:	fba0 ce02 	umull	ip, lr, r0, r2
100004ce:	f04f 0500 	mov.w	r5, #0
100004d2:	fbe1 e502 	umlal	lr, r5, r1, r2
100004d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
100004da:	fbe0 e503 	umlal	lr, r5, r0, r3
100004de:	f04f 0600 	mov.w	r6, #0
100004e2:	fbe1 5603 	umlal	r5, r6, r1, r3
100004e6:	f09c 0f00 	teq	ip, #0
100004ea:	bf18      	it	ne
100004ec:	f04e 0e01 	orrne.w	lr, lr, #1
100004f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
100004f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
100004f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
100004fc:	d204      	bcs.n	10000508 <__aeabi_dmul+0x80>
100004fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
10000502:	416d      	adcs	r5, r5
10000504:	eb46 0606 	adc.w	r6, r6, r6
10000508:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1000050c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
10000510:	ea4f 20c5 	mov.w	r0, r5, lsl #11
10000514:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
10000518:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1000051c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
10000520:	bf88      	it	hi
10000522:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
10000526:	d81e      	bhi.n	10000566 <__aeabi_dmul+0xde>
10000528:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
1000052c:	bf08      	it	eq
1000052e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
10000532:	f150 0000 	adcs.w	r0, r0, #0
10000536:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000053a:	bd70      	pop	{r4, r5, r6, pc}
1000053c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
10000540:	ea46 0101 	orr.w	r1, r6, r1
10000544:	ea40 0002 	orr.w	r0, r0, r2
10000548:	ea81 0103 	eor.w	r1, r1, r3
1000054c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
10000550:	bfc2      	ittt	gt
10000552:	ebd4 050c 	rsbsgt	r5, r4, ip
10000556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1000055a:	bd70      	popgt	{r4, r5, r6, pc}
1000055c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
10000560:	f04f 0e00 	mov.w	lr, #0
10000564:	3c01      	subs	r4, #1
10000566:	f300 80ab 	bgt.w	100006c0 <__aeabi_dmul+0x238>
1000056a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
1000056e:	bfde      	ittt	le
10000570:	2000      	movle	r0, #0
10000572:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
10000576:	bd70      	pople	{r4, r5, r6, pc}
10000578:	f1c4 0400 	rsb	r4, r4, #0
1000057c:	3c20      	subs	r4, #32
1000057e:	da35      	bge.n	100005ec <__aeabi_dmul+0x164>
10000580:	340c      	adds	r4, #12
10000582:	dc1b      	bgt.n	100005bc <__aeabi_dmul+0x134>
10000584:	f104 0414 	add.w	r4, r4, #20
10000588:	f1c4 0520 	rsb	r5, r4, #32
1000058c:	fa00 f305 	lsl.w	r3, r0, r5
10000590:	fa20 f004 	lsr.w	r0, r0, r4
10000594:	fa01 f205 	lsl.w	r2, r1, r5
10000598:	ea40 0002 	orr.w	r0, r0, r2
1000059c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
100005a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
100005a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005a8:	fa21 f604 	lsr.w	r6, r1, r4
100005ac:	eb42 0106 	adc.w	r1, r2, r6
100005b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005b4:	bf08      	it	eq
100005b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ba:	bd70      	pop	{r4, r5, r6, pc}
100005bc:	f1c4 040c 	rsb	r4, r4, #12
100005c0:	f1c4 0520 	rsb	r5, r4, #32
100005c4:	fa00 f304 	lsl.w	r3, r0, r4
100005c8:	fa20 f005 	lsr.w	r0, r0, r5
100005cc:	fa01 f204 	lsl.w	r2, r1, r4
100005d0:	ea40 0002 	orr.w	r0, r0, r2
100005d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
100005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005dc:	f141 0100 	adc.w	r1, r1, #0
100005e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005e4:	bf08      	it	eq
100005e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ea:	bd70      	pop	{r4, r5, r6, pc}
100005ec:	f1c4 0520 	rsb	r5, r4, #32
100005f0:	fa00 f205 	lsl.w	r2, r0, r5
100005f4:	ea4e 0e02 	orr.w	lr, lr, r2
100005f8:	fa20 f304 	lsr.w	r3, r0, r4
100005fc:	fa01 f205 	lsl.w	r2, r1, r5
10000600:	ea43 0302 	orr.w	r3, r3, r2
10000604:	fa21 f004 	lsr.w	r0, r1, r4
10000608:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
1000060c:	fa21 f204 	lsr.w	r2, r1, r4
10000610:	ea20 0002 	bic.w	r0, r0, r2
10000614:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
10000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1000061c:	bf08      	it	eq
1000061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
10000622:	bd70      	pop	{r4, r5, r6, pc}
10000624:	f094 0f00 	teq	r4, #0
10000628:	d10f      	bne.n	1000064a <__aeabi_dmul+0x1c2>
1000062a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
1000062e:	0040      	lsls	r0, r0, #1
10000630:	eb41 0101 	adc.w	r1, r1, r1
10000634:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
10000638:	bf08      	it	eq
1000063a:	3c01      	subeq	r4, #1
1000063c:	d0f7      	beq.n	1000062e <__aeabi_dmul+0x1a6>
1000063e:	ea41 0106 	orr.w	r1, r1, r6
10000642:	f095 0f00 	teq	r5, #0
10000646:	bf18      	it	ne
10000648:	4770      	bxne	lr
1000064a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
1000064e:	0052      	lsls	r2, r2, #1
10000650:	eb43 0303 	adc.w	r3, r3, r3
10000654:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
10000658:	bf08      	it	eq
1000065a:	3d01      	subeq	r5, #1
1000065c:	d0f7      	beq.n	1000064e <__aeabi_dmul+0x1c6>
1000065e:	ea43 0306 	orr.w	r3, r3, r6
10000662:	4770      	bx	lr
10000664:	ea94 0f0c 	teq	r4, ip
10000668:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000066c:	bf18      	it	ne
1000066e:	ea95 0f0c 	teqne	r5, ip
10000672:	d00c      	beq.n	1000068e <__aeabi_dmul+0x206>
10000674:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000678:	bf18      	it	ne
1000067a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000067e:	d1d1      	bne.n	10000624 <__aeabi_dmul+0x19c>
10000680:	ea81 0103 	eor.w	r1, r1, r3
10000684:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
10000688:	f04f 0000 	mov.w	r0, #0
1000068c:	bd70      	pop	{r4, r5, r6, pc}
1000068e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000692:	bf06      	itte	eq
10000694:	4610      	moveq	r0, r2
10000696:	4619      	moveq	r1, r3
10000698:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000069c:	d019      	beq.n	100006d2 <__aeabi_dmul+0x24a>
1000069e:	ea94 0f0c 	teq	r4, ip
100006a2:	d102      	bne.n	100006aa <__aeabi_dmul+0x222>
100006a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
100006a8:	d113      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006aa:	ea95 0f0c 	teq	r5, ip
100006ae:	d105      	bne.n	100006bc <__aeabi_dmul+0x234>
100006b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
100006b4:	bf1c      	itt	ne
100006b6:	4610      	movne	r0, r2
100006b8:	4619      	movne	r1, r3
100006ba:	d10a      	bne.n	100006d2 <__aeabi_dmul+0x24a>
100006bc:	ea81 0103 	eor.w	r1, r1, r3
100006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
100006c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
100006c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
100006cc:	f04f 0000 	mov.w	r0, #0
100006d0:	bd70      	pop	{r4, r5, r6, pc}
100006d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
100006d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
100006da:	bd70      	pop	{r4, r5, r6, pc}

100006dc <__aeabi_ddiv>:
100006dc:	b570      	push	{r4, r5, r6, lr}
100006de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
100006e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
100006e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
100006ea:	bf1d      	ittte	ne
100006ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
100006f0:	ea94 0f0c 	teqne	r4, ip
100006f4:	ea95 0f0c 	teqne	r5, ip
100006f8:	f000 f8a7 	bleq	1000084a <__aeabi_ddiv+0x16e>
100006fc:	eba4 0405 	sub.w	r4, r4, r5
10000700:	ea81 0e03 	eor.w	lr, r1, r3
10000704:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000708:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000070c:	f000 8088 	beq.w	10000820 <__aeabi_ddiv+0x144>
10000710:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000714:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
10000718:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1000071c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
10000720:	ea4f 2202 	mov.w	r2, r2, lsl #8
10000724:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
10000728:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1000072c:	ea4f 2600 	mov.w	r6, r0, lsl #8
10000730:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
10000734:	429d      	cmp	r5, r3
10000736:	bf08      	it	eq
10000738:	4296      	cmpeq	r6, r2
1000073a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
1000073e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
10000742:	d202      	bcs.n	1000074a <__aeabi_ddiv+0x6e>
10000744:	085b      	lsrs	r3, r3, #1
10000746:	ea4f 0232 	mov.w	r2, r2, rrx
1000074a:	1ab6      	subs	r6, r6, r2
1000074c:	eb65 0503 	sbc.w	r5, r5, r3
10000750:	085b      	lsrs	r3, r3, #1
10000752:	ea4f 0232 	mov.w	r2, r2, rrx
10000756:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
1000075a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
1000075e:	ebb6 0e02 	subs.w	lr, r6, r2
10000762:	eb75 0e03 	sbcs.w	lr, r5, r3
10000766:	bf22      	ittt	cs
10000768:	1ab6      	subcs	r6, r6, r2
1000076a:	4675      	movcs	r5, lr
1000076c:	ea40 000c 	orrcs.w	r0, r0, ip
10000770:	085b      	lsrs	r3, r3, #1
10000772:	ea4f 0232 	mov.w	r2, r2, rrx
10000776:	ebb6 0e02 	subs.w	lr, r6, r2
1000077a:	eb75 0e03 	sbcs.w	lr, r5, r3
1000077e:	bf22      	ittt	cs
10000780:	1ab6      	subcs	r6, r6, r2
10000782:	4675      	movcs	r5, lr
10000784:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
10000788:	085b      	lsrs	r3, r3, #1
1000078a:	ea4f 0232 	mov.w	r2, r2, rrx
1000078e:	ebb6 0e02 	subs.w	lr, r6, r2
10000792:	eb75 0e03 	sbcs.w	lr, r5, r3
10000796:	bf22      	ittt	cs
10000798:	1ab6      	subcs	r6, r6, r2
1000079a:	4675      	movcs	r5, lr
1000079c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
100007a0:	085b      	lsrs	r3, r3, #1
100007a2:	ea4f 0232 	mov.w	r2, r2, rrx
100007a6:	ebb6 0e02 	subs.w	lr, r6, r2
100007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
100007ae:	bf22      	ittt	cs
100007b0:	1ab6      	subcs	r6, r6, r2
100007b2:	4675      	movcs	r5, lr
100007b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
100007b8:	ea55 0e06 	orrs.w	lr, r5, r6
100007bc:	d018      	beq.n	100007f0 <__aeabi_ddiv+0x114>
100007be:	ea4f 1505 	mov.w	r5, r5, lsl #4
100007c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
100007c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
100007ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
100007ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
100007d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
100007d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
100007da:	d1c0      	bne.n	1000075e <__aeabi_ddiv+0x82>
100007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
100007e0:	d10b      	bne.n	100007fa <__aeabi_ddiv+0x11e>
100007e2:	ea41 0100 	orr.w	r1, r1, r0
100007e6:	f04f 0000 	mov.w	r0, #0
100007ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
100007ee:	e7b6      	b.n	1000075e <__aeabi_ddiv+0x82>
100007f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
100007f4:	bf04      	itt	eq
100007f6:	4301      	orreq	r1, r0
100007f8:	2000      	moveq	r0, #0
100007fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
100007fe:	bf88      	it	hi
10000800:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
10000804:	f63f aeaf 	bhi.w	10000566 <__aeabi_dmul+0xde>
10000808:	ebb5 0c03 	subs.w	ip, r5, r3
1000080c:	bf04      	itt	eq
1000080e:	ebb6 0c02 	subseq.w	ip, r6, r2
10000812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000816:	f150 0000 	adcs.w	r0, r0, #0
1000081a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000081e:	bd70      	pop	{r4, r5, r6, pc}
10000820:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
10000824:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
10000828:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1000082c:	bfc2      	ittt	gt
1000082e:	ebd4 050c 	rsbsgt	r5, r4, ip
10000832:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
10000836:	bd70      	popgt	{r4, r5, r6, pc}
10000838:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
1000083c:	f04f 0e00 	mov.w	lr, #0
10000840:	3c01      	subs	r4, #1
10000842:	e690      	b.n	10000566 <__aeabi_dmul+0xde>
10000844:	ea45 0e06 	orr.w	lr, r5, r6
10000848:	e68d      	b.n	10000566 <__aeabi_dmul+0xde>
1000084a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000084e:	ea94 0f0c 	teq	r4, ip
10000852:	bf08      	it	eq
10000854:	ea95 0f0c 	teqeq	r5, ip
10000858:	f43f af3b 	beq.w	100006d2 <__aeabi_dmul+0x24a>
1000085c:	ea94 0f0c 	teq	r4, ip
10000860:	d10a      	bne.n	10000878 <__aeabi_ddiv+0x19c>
10000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000866:	f47f af34 	bne.w	100006d2 <__aeabi_dmul+0x24a>
1000086a:	ea95 0f0c 	teq	r5, ip
1000086e:	f47f af25 	bne.w	100006bc <__aeabi_dmul+0x234>
10000872:	4610      	mov	r0, r2
10000874:	4619      	mov	r1, r3
10000876:	e72c      	b.n	100006d2 <__aeabi_dmul+0x24a>
10000878:	ea95 0f0c 	teq	r5, ip
1000087c:	d106      	bne.n	1000088c <__aeabi_ddiv+0x1b0>
1000087e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000882:	f43f aefd 	beq.w	10000680 <__aeabi_dmul+0x1f8>
10000886:	4610      	mov	r0, r2
10000888:	4619      	mov	r1, r3
1000088a:	e722      	b.n	100006d2 <__aeabi_dmul+0x24a>
1000088c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000890:	bf18      	it	ne
10000892:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10000896:	f47f aec5 	bne.w	10000624 <__aeabi_dmul+0x19c>
1000089a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1000089e:	f47f af0d 	bne.w	100006bc <__aeabi_dmul+0x234>
100008a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
100008a6:	f47f aeeb 	bne.w	10000680 <__aeabi_dmul+0x1f8>
100008aa:	e712      	b.n	100006d2 <__aeabi_dmul+0x24a>

100008ac <__gedf2>:
100008ac:	f04f 3cff 	mov.w	ip, #4294967295
100008b0:	e006      	b.n	100008c0 <__cmpdf2+0x4>
100008b2:	bf00      	nop

100008b4 <__ledf2>:
100008b4:	f04f 0c01 	mov.w	ip, #1
100008b8:	e002      	b.n	100008c0 <__cmpdf2+0x4>
100008ba:	bf00      	nop

100008bc <__cmpdf2>:
100008bc:	f04f 0c01 	mov.w	ip, #1
100008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
100008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100008d0:	bf18      	it	ne
100008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
100008d6:	d01b      	beq.n	10000910 <__cmpdf2+0x54>
100008d8:	b001      	add	sp, #4
100008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
100008de:	bf0c      	ite	eq
100008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
100008e4:	ea91 0f03 	teqne	r1, r3
100008e8:	bf02      	ittt	eq
100008ea:	ea90 0f02 	teqeq	r0, r2
100008ee:	2000      	moveq	r0, #0
100008f0:	4770      	bxeq	lr
100008f2:	f110 0f00 	cmn.w	r0, #0
100008f6:	ea91 0f03 	teq	r1, r3
100008fa:	bf58      	it	pl
100008fc:	4299      	cmppl	r1, r3
100008fe:	bf08      	it	eq
10000900:	4290      	cmpeq	r0, r2
10000902:	bf2c      	ite	cs
10000904:	17d8      	asrcs	r0, r3, #31
10000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1000090a:	f040 0001 	orr.w	r0, r0, #1
1000090e:	4770      	bx	lr
10000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
10000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000918:	d102      	bne.n	10000920 <__cmpdf2+0x64>
1000091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1000091e:	d107      	bne.n	10000930 <__cmpdf2+0x74>
10000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000928:	d1d6      	bne.n	100008d8 <__cmpdf2+0x1c>
1000092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1000092e:	d0d3      	beq.n	100008d8 <__cmpdf2+0x1c>
10000930:	f85d 0b04 	ldr.w	r0, [sp], #4
10000934:	4770      	bx	lr
10000936:	bf00      	nop

10000938 <__aeabi_cdrcmple>:
10000938:	4684      	mov	ip, r0
1000093a:	4610      	mov	r0, r2
1000093c:	4662      	mov	r2, ip
1000093e:	468c      	mov	ip, r1
10000940:	4619      	mov	r1, r3
10000942:	4663      	mov	r3, ip
10000944:	e000      	b.n	10000948 <__aeabi_cdcmpeq>
10000946:	bf00      	nop

10000948 <__aeabi_cdcmpeq>:
10000948:	b501      	push	{r0, lr}
1000094a:	f7ff ffb7 	bl	100008bc <__cmpdf2>
1000094e:	2800      	cmp	r0, #0
10000950:	bf48      	it	mi
10000952:	f110 0f00 	cmnmi.w	r0, #0
10000956:	bd01      	pop	{r0, pc}

10000958 <__aeabi_dcmpeq>:
10000958:	f84d ed08 	str.w	lr, [sp, #-8]!
1000095c:	f7ff fff4 	bl	10000948 <__aeabi_cdcmpeq>
10000960:	bf0c      	ite	eq
10000962:	2001      	moveq	r0, #1
10000964:	2000      	movne	r0, #0
10000966:	f85d fb08 	ldr.w	pc, [sp], #8
1000096a:	bf00      	nop

1000096c <__aeabi_dcmplt>:
1000096c:	f84d ed08 	str.w	lr, [sp, #-8]!
10000970:	f7ff ffea 	bl	10000948 <__aeabi_cdcmpeq>
10000974:	bf34      	ite	cc
10000976:	2001      	movcc	r0, #1
10000978:	2000      	movcs	r0, #0
1000097a:	f85d fb08 	ldr.w	pc, [sp], #8
1000097e:	bf00      	nop

10000980 <__aeabi_dcmple>:
10000980:	f84d ed08 	str.w	lr, [sp, #-8]!
10000984:	f7ff ffe0 	bl	10000948 <__aeabi_cdcmpeq>
10000988:	bf94      	ite	ls
1000098a:	2001      	movls	r0, #1
1000098c:	2000      	movhi	r0, #0
1000098e:	f85d fb08 	ldr.w	pc, [sp], #8
10000992:	bf00      	nop

10000994 <__aeabi_dcmpge>:
10000994:	f84d ed08 	str.w	lr, [sp, #-8]!
10000998:	f7ff ffce 	bl	10000938 <__aeabi_cdrcmple>
1000099c:	bf94      	ite	ls
1000099e:	2001      	movls	r0, #1
100009a0:	2000      	movhi	r0, #0
100009a2:	f85d fb08 	ldr.w	pc, [sp], #8
100009a6:	bf00      	nop

100009a8 <__aeabi_dcmpgt>:
100009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
100009ac:	f7ff ffc4 	bl	10000938 <__aeabi_cdrcmple>
100009b0:	bf34      	ite	cc
100009b2:	2001      	movcc	r0, #1
100009b4:	2000      	movcs	r0, #0
100009b6:	f85d fb08 	ldr.w	pc, [sp], #8
100009ba:	bf00      	nop

100009bc <__aeabi_dcmpun>:
100009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009c4:	d102      	bne.n	100009cc <__aeabi_dcmpun+0x10>
100009c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
100009ca:	d10a      	bne.n	100009e2 <__aeabi_dcmpun+0x26>
100009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009d4:	d102      	bne.n	100009dc <__aeabi_dcmpun+0x20>
100009d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
100009da:	d102      	bne.n	100009e2 <__aeabi_dcmpun+0x26>
100009dc:	f04f 0000 	mov.w	r0, #0
100009e0:	4770      	bx	lr
100009e2:	f04f 0001 	mov.w	r0, #1
100009e6:	4770      	bx	lr

100009e8 <__aeabi_d2iz>:
100009e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
100009ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
100009f0:	d215      	bcs.n	10000a1e <__aeabi_d2iz+0x36>
100009f2:	d511      	bpl.n	10000a18 <__aeabi_d2iz+0x30>
100009f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
100009f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
100009fc:	d912      	bls.n	10000a24 <__aeabi_d2iz+0x3c>
100009fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000a02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10000a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10000a0a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
10000a0e:	fa23 f002 	lsr.w	r0, r3, r2
10000a12:	bf18      	it	ne
10000a14:	4240      	negne	r0, r0
10000a16:	4770      	bx	lr
10000a18:	f04f 0000 	mov.w	r0, #0
10000a1c:	4770      	bx	lr
10000a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
10000a22:	d105      	bne.n	10000a30 <__aeabi_d2iz+0x48>
10000a24:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
10000a28:	bf08      	it	eq
10000a2a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
10000a2e:	4770      	bx	lr
10000a30:	f04f 0000 	mov.w	r0, #0
10000a34:	4770      	bx	lr
10000a36:	bf00      	nop

10000a38 <__aeabi_d2uiz>:
10000a38:	004a      	lsls	r2, r1, #1
10000a3a:	d211      	bcs.n	10000a60 <__aeabi_d2uiz+0x28>
10000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
10000a40:	d211      	bcs.n	10000a66 <__aeabi_d2uiz+0x2e>
10000a42:	d50d      	bpl.n	10000a60 <__aeabi_d2uiz+0x28>
10000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
10000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
10000a4c:	d40e      	bmi.n	10000a6c <__aeabi_d2uiz+0x34>
10000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10000a5a:	fa23 f002 	lsr.w	r0, r3, r2
10000a5e:	4770      	bx	lr
10000a60:	f04f 0000 	mov.w	r0, #0
10000a64:	4770      	bx	lr
10000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
10000a6a:	d102      	bne.n	10000a72 <__aeabi_d2uiz+0x3a>
10000a6c:	f04f 30ff 	mov.w	r0, #4294967295
10000a70:	4770      	bx	lr
10000a72:	f04f 0000 	mov.w	r0, #0
10000a76:	4770      	bx	lr

10000a78 <__aeabi_d2f>:
10000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
10000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
10000a80:	bf24      	itt	cs
10000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
10000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
10000a8a:	d90d      	bls.n	10000aa8 <__aeabi_d2f+0x30>
10000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
10000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
10000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
10000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
10000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
10000aa0:	bf08      	it	eq
10000aa2:	f020 0001 	biceq.w	r0, r0, #1
10000aa6:	4770      	bx	lr
10000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
10000aac:	d121      	bne.n	10000af2 <__aeabi_d2f+0x7a>
10000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
10000ab2:	bfbc      	itt	lt
10000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
10000ab8:	4770      	bxlt	lr
10000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
10000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
10000ac2:	f1c2 0218 	rsb	r2, r2, #24
10000ac6:	f1c2 0c20 	rsb	ip, r2, #32
10000aca:	fa10 f30c 	lsls.w	r3, r0, ip
10000ace:	fa20 f002 	lsr.w	r0, r0, r2
10000ad2:	bf18      	it	ne
10000ad4:	f040 0001 	orrne.w	r0, r0, #1
10000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
10000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
10000ae4:	ea40 000c 	orr.w	r0, r0, ip
10000ae8:	fa23 f302 	lsr.w	r3, r3, r2
10000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
10000af0:	e7cc      	b.n	10000a8c <__aeabi_d2f+0x14>
10000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
10000af6:	d107      	bne.n	10000b08 <__aeabi_d2f+0x90>
10000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
10000afc:	bf1e      	ittt	ne
10000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
10000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
10000b06:	4770      	bxne	lr
10000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
10000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
10000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
10000b14:	4770      	bx	lr
10000b16:	bf00      	nop

10000b18 <__aeabi_ldivmod>:
10000b18:	b97b      	cbnz	r3, 10000b3a <__aeabi_ldivmod+0x22>
10000b1a:	b972      	cbnz	r2, 10000b3a <__aeabi_ldivmod+0x22>
10000b1c:	2900      	cmp	r1, #0
10000b1e:	bfbe      	ittt	lt
10000b20:	2000      	movlt	r0, #0
10000b22:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
10000b26:	e006      	blt.n	10000b36 <__aeabi_ldivmod+0x1e>
10000b28:	bf08      	it	eq
10000b2a:	2800      	cmpeq	r0, #0
10000b2c:	bf1c      	itt	ne
10000b2e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
10000b32:	f04f 30ff 	movne.w	r0, #4294967295
10000b36:	f000 b9f1 	b.w	10000f1c <__aeabi_idiv0>
10000b3a:	f1ad 0c08 	sub.w	ip, sp, #8
10000b3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
10000b42:	2900      	cmp	r1, #0
10000b44:	db09      	blt.n	10000b5a <__aeabi_ldivmod+0x42>
10000b46:	2b00      	cmp	r3, #0
10000b48:	db1a      	blt.n	10000b80 <__aeabi_ldivmod+0x68>
10000b4a:	f000 f86b 	bl	10000c24 <__udivmoddi4>
10000b4e:	f8dd e004 	ldr.w	lr, [sp, #4]
10000b52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10000b56:	b004      	add	sp, #16
10000b58:	4770      	bx	lr
10000b5a:	4240      	negs	r0, r0
10000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000b60:	2b00      	cmp	r3, #0
10000b62:	db1b      	blt.n	10000b9c <__aeabi_ldivmod+0x84>
10000b64:	f000 f85e 	bl	10000c24 <__udivmoddi4>
10000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
10000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10000b70:	b004      	add	sp, #16
10000b72:	4240      	negs	r0, r0
10000b74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000b78:	4252      	negs	r2, r2
10000b7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10000b7e:	4770      	bx	lr
10000b80:	4252      	negs	r2, r2
10000b82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10000b86:	f000 f84d 	bl	10000c24 <__udivmoddi4>
10000b8a:	f8dd e004 	ldr.w	lr, [sp, #4]
10000b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10000b92:	b004      	add	sp, #16
10000b94:	4240      	negs	r0, r0
10000b96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000b9a:	4770      	bx	lr
10000b9c:	4252      	negs	r2, r2
10000b9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10000ba2:	f000 f83f 	bl	10000c24 <__udivmoddi4>
10000ba6:	f8dd e004 	ldr.w	lr, [sp, #4]
10000baa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10000bae:	b004      	add	sp, #16
10000bb0:	4252      	negs	r2, r2
10000bb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10000bb6:	4770      	bx	lr

10000bb8 <__aeabi_d2lz>:
10000bb8:	b538      	push	{r3, r4, r5, lr}
10000bba:	2200      	movs	r2, #0
10000bbc:	2300      	movs	r3, #0
10000bbe:	4604      	mov	r4, r0
10000bc0:	460d      	mov	r5, r1
10000bc2:	f7ff fed3 	bl	1000096c <__aeabi_dcmplt>
10000bc6:	b928      	cbnz	r0, 10000bd4 <__aeabi_d2lz+0x1c>
10000bc8:	4620      	mov	r0, r4
10000bca:	4629      	mov	r1, r5
10000bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10000bd0:	f000 b80a 	b.w	10000be8 <__aeabi_d2ulz>
10000bd4:	4620      	mov	r0, r4
10000bd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
10000bda:	f000 f805 	bl	10000be8 <__aeabi_d2ulz>
10000bde:	4240      	negs	r0, r0
10000be0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000be4:	bd38      	pop	{r3, r4, r5, pc}
10000be6:	bf00      	nop

10000be8 <__aeabi_d2ulz>:
10000be8:	b5d0      	push	{r4, r6, r7, lr}
10000bea:	4b0c      	ldr	r3, [pc, #48]	@ (10000c1c <__aeabi_d2ulz+0x34>)
10000bec:	2200      	movs	r2, #0
10000bee:	4606      	mov	r6, r0
10000bf0:	460f      	mov	r7, r1
10000bf2:	f7ff fc49 	bl	10000488 <__aeabi_dmul>
10000bf6:	f7ff ff1f 	bl	10000a38 <__aeabi_d2uiz>
10000bfa:	4604      	mov	r4, r0
10000bfc:	f7ff fbca 	bl	10000394 <__aeabi_ui2d>
10000c00:	4b07      	ldr	r3, [pc, #28]	@ (10000c20 <__aeabi_d2ulz+0x38>)
10000c02:	2200      	movs	r2, #0
10000c04:	f7ff fc40 	bl	10000488 <__aeabi_dmul>
10000c08:	4602      	mov	r2, r0
10000c0a:	460b      	mov	r3, r1
10000c0c:	4630      	mov	r0, r6
10000c0e:	4639      	mov	r1, r7
10000c10:	f7ff fa82 	bl	10000118 <__aeabi_dsub>
10000c14:	f7ff ff10 	bl	10000a38 <__aeabi_d2uiz>
10000c18:	4621      	mov	r1, r4
10000c1a:	bdd0      	pop	{r4, r6, r7, pc}
10000c1c:	3df00000 	.word	0x3df00000
10000c20:	41f00000 	.word	0x41f00000

10000c24 <__udivmoddi4>:
10000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10000c28:	9d08      	ldr	r5, [sp, #32]
10000c2a:	468e      	mov	lr, r1
10000c2c:	4604      	mov	r4, r0
10000c2e:	4688      	mov	r8, r1
10000c30:	2b00      	cmp	r3, #0
10000c32:	d14a      	bne.n	10000cca <__udivmoddi4+0xa6>
10000c34:	428a      	cmp	r2, r1
10000c36:	4617      	mov	r7, r2
10000c38:	d962      	bls.n	10000d00 <__udivmoddi4+0xdc>
10000c3a:	fab2 f682 	clz	r6, r2
10000c3e:	b14e      	cbz	r6, 10000c54 <__udivmoddi4+0x30>
10000c40:	f1c6 0320 	rsb	r3, r6, #32
10000c44:	fa01 f806 	lsl.w	r8, r1, r6
10000c48:	fa20 f303 	lsr.w	r3, r0, r3
10000c4c:	40b7      	lsls	r7, r6
10000c4e:	ea43 0808 	orr.w	r8, r3, r8
10000c52:	40b4      	lsls	r4, r6
10000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
10000c58:	fa1f fc87 	uxth.w	ip, r7
10000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
10000c60:	0c23      	lsrs	r3, r4, #16
10000c62:	fb0e 8811 	mls	r8, lr, r1, r8
10000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
10000c6a:	fb01 f20c 	mul.w	r2, r1, ip
10000c6e:	429a      	cmp	r2, r3
10000c70:	d909      	bls.n	10000c86 <__udivmoddi4+0x62>
10000c72:	18fb      	adds	r3, r7, r3
10000c74:	f101 30ff 	add.w	r0, r1, #4294967295
10000c78:	f080 80ea 	bcs.w	10000e50 <__udivmoddi4+0x22c>
10000c7c:	429a      	cmp	r2, r3
10000c7e:	f240 80e7 	bls.w	10000e50 <__udivmoddi4+0x22c>
10000c82:	3902      	subs	r1, #2
10000c84:	443b      	add	r3, r7
10000c86:	1a9a      	subs	r2, r3, r2
10000c88:	b2a3      	uxth	r3, r4
10000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
10000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
10000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
10000c96:	fb00 fc0c 	mul.w	ip, r0, ip
10000c9a:	459c      	cmp	ip, r3
10000c9c:	d909      	bls.n	10000cb2 <__udivmoddi4+0x8e>
10000c9e:	18fb      	adds	r3, r7, r3
10000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
10000ca4:	f080 80d6 	bcs.w	10000e54 <__udivmoddi4+0x230>
10000ca8:	459c      	cmp	ip, r3
10000caa:	f240 80d3 	bls.w	10000e54 <__udivmoddi4+0x230>
10000cae:	443b      	add	r3, r7
10000cb0:	3802      	subs	r0, #2
10000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
10000cb6:	eba3 030c 	sub.w	r3, r3, ip
10000cba:	2100      	movs	r1, #0
10000cbc:	b11d      	cbz	r5, 10000cc6 <__udivmoddi4+0xa2>
10000cbe:	40f3      	lsrs	r3, r6
10000cc0:	2200      	movs	r2, #0
10000cc2:	e9c5 3200 	strd	r3, r2, [r5]
10000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10000cca:	428b      	cmp	r3, r1
10000ccc:	d905      	bls.n	10000cda <__udivmoddi4+0xb6>
10000cce:	b10d      	cbz	r5, 10000cd4 <__udivmoddi4+0xb0>
10000cd0:	e9c5 0100 	strd	r0, r1, [r5]
10000cd4:	2100      	movs	r1, #0
10000cd6:	4608      	mov	r0, r1
10000cd8:	e7f5      	b.n	10000cc6 <__udivmoddi4+0xa2>
10000cda:	fab3 f183 	clz	r1, r3
10000cde:	2900      	cmp	r1, #0
10000ce0:	d146      	bne.n	10000d70 <__udivmoddi4+0x14c>
10000ce2:	4573      	cmp	r3, lr
10000ce4:	d302      	bcc.n	10000cec <__udivmoddi4+0xc8>
10000ce6:	4282      	cmp	r2, r0
10000ce8:	f200 8105 	bhi.w	10000ef6 <__udivmoddi4+0x2d2>
10000cec:	1a84      	subs	r4, r0, r2
10000cee:	eb6e 0203 	sbc.w	r2, lr, r3
10000cf2:	2001      	movs	r0, #1
10000cf4:	4690      	mov	r8, r2
10000cf6:	2d00      	cmp	r5, #0
10000cf8:	d0e5      	beq.n	10000cc6 <__udivmoddi4+0xa2>
10000cfa:	e9c5 4800 	strd	r4, r8, [r5]
10000cfe:	e7e2      	b.n	10000cc6 <__udivmoddi4+0xa2>
10000d00:	2a00      	cmp	r2, #0
10000d02:	f000 8090 	beq.w	10000e26 <__udivmoddi4+0x202>
10000d06:	fab2 f682 	clz	r6, r2
10000d0a:	2e00      	cmp	r6, #0
10000d0c:	f040 80a4 	bne.w	10000e58 <__udivmoddi4+0x234>
10000d10:	1a8a      	subs	r2, r1, r2
10000d12:	0c03      	lsrs	r3, r0, #16
10000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
10000d18:	b280      	uxth	r0, r0
10000d1a:	b2bc      	uxth	r4, r7
10000d1c:	2101      	movs	r1, #1
10000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
10000d22:	fb0e 221c 	mls	r2, lr, ip, r2
10000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
10000d2a:	fb04 f20c 	mul.w	r2, r4, ip
10000d2e:	429a      	cmp	r2, r3
10000d30:	d907      	bls.n	10000d42 <__udivmoddi4+0x11e>
10000d32:	18fb      	adds	r3, r7, r3
10000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
10000d38:	d202      	bcs.n	10000d40 <__udivmoddi4+0x11c>
10000d3a:	429a      	cmp	r2, r3
10000d3c:	f200 80e0 	bhi.w	10000f00 <__udivmoddi4+0x2dc>
10000d40:	46c4      	mov	ip, r8
10000d42:	1a9b      	subs	r3, r3, r2
10000d44:	fbb3 f2fe 	udiv	r2, r3, lr
10000d48:	fb0e 3312 	mls	r3, lr, r2, r3
10000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
10000d50:	fb02 f404 	mul.w	r4, r2, r4
10000d54:	429c      	cmp	r4, r3
10000d56:	d907      	bls.n	10000d68 <__udivmoddi4+0x144>
10000d58:	18fb      	adds	r3, r7, r3
10000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
10000d5e:	d202      	bcs.n	10000d66 <__udivmoddi4+0x142>
10000d60:	429c      	cmp	r4, r3
10000d62:	f200 80ca 	bhi.w	10000efa <__udivmoddi4+0x2d6>
10000d66:	4602      	mov	r2, r0
10000d68:	1b1b      	subs	r3, r3, r4
10000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
10000d6e:	e7a5      	b.n	10000cbc <__udivmoddi4+0x98>
10000d70:	f1c1 0620 	rsb	r6, r1, #32
10000d74:	408b      	lsls	r3, r1
10000d76:	fa22 f706 	lsr.w	r7, r2, r6
10000d7a:	431f      	orrs	r7, r3
10000d7c:	fa0e f401 	lsl.w	r4, lr, r1
10000d80:	fa20 f306 	lsr.w	r3, r0, r6
10000d84:	fa2e fe06 	lsr.w	lr, lr, r6
10000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
10000d8c:	4323      	orrs	r3, r4
10000d8e:	fa00 f801 	lsl.w	r8, r0, r1
10000d92:	fa1f fc87 	uxth.w	ip, r7
10000d96:	fbbe f0f9 	udiv	r0, lr, r9
10000d9a:	0c1c      	lsrs	r4, r3, #16
10000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
10000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
10000da4:	fb00 fe0c 	mul.w	lr, r0, ip
10000da8:	45a6      	cmp	lr, r4
10000daa:	fa02 f201 	lsl.w	r2, r2, r1
10000dae:	d909      	bls.n	10000dc4 <__udivmoddi4+0x1a0>
10000db0:	193c      	adds	r4, r7, r4
10000db2:	f100 3aff 	add.w	sl, r0, #4294967295
10000db6:	f080 809c 	bcs.w	10000ef2 <__udivmoddi4+0x2ce>
10000dba:	45a6      	cmp	lr, r4
10000dbc:	f240 8099 	bls.w	10000ef2 <__udivmoddi4+0x2ce>
10000dc0:	3802      	subs	r0, #2
10000dc2:	443c      	add	r4, r7
10000dc4:	eba4 040e 	sub.w	r4, r4, lr
10000dc8:	fa1f fe83 	uxth.w	lr, r3
10000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
10000dd0:	fb09 4413 	mls	r4, r9, r3, r4
10000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
10000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
10000ddc:	45a4      	cmp	ip, r4
10000dde:	d908      	bls.n	10000df2 <__udivmoddi4+0x1ce>
10000de0:	193c      	adds	r4, r7, r4
10000de2:	f103 3eff 	add.w	lr, r3, #4294967295
10000de6:	f080 8082 	bcs.w	10000eee <__udivmoddi4+0x2ca>
10000dea:	45a4      	cmp	ip, r4
10000dec:	d97f      	bls.n	10000eee <__udivmoddi4+0x2ca>
10000dee:	3b02      	subs	r3, #2
10000df0:	443c      	add	r4, r7
10000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
10000df6:	eba4 040c 	sub.w	r4, r4, ip
10000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
10000dfe:	4564      	cmp	r4, ip
10000e00:	4673      	mov	r3, lr
10000e02:	46e1      	mov	r9, ip
10000e04:	d362      	bcc.n	10000ecc <__udivmoddi4+0x2a8>
10000e06:	d05f      	beq.n	10000ec8 <__udivmoddi4+0x2a4>
10000e08:	b15d      	cbz	r5, 10000e22 <__udivmoddi4+0x1fe>
10000e0a:	ebb8 0203 	subs.w	r2, r8, r3
10000e0e:	eb64 0409 	sbc.w	r4, r4, r9
10000e12:	fa04 f606 	lsl.w	r6, r4, r6
10000e16:	fa22 f301 	lsr.w	r3, r2, r1
10000e1a:	431e      	orrs	r6, r3
10000e1c:	40cc      	lsrs	r4, r1
10000e1e:	e9c5 6400 	strd	r6, r4, [r5]
10000e22:	2100      	movs	r1, #0
10000e24:	e74f      	b.n	10000cc6 <__udivmoddi4+0xa2>
10000e26:	fbb1 fcf2 	udiv	ip, r1, r2
10000e2a:	0c01      	lsrs	r1, r0, #16
10000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
10000e30:	b280      	uxth	r0, r0
10000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
10000e36:	463b      	mov	r3, r7
10000e38:	4638      	mov	r0, r7
10000e3a:	463c      	mov	r4, r7
10000e3c:	46b8      	mov	r8, r7
10000e3e:	46be      	mov	lr, r7
10000e40:	2620      	movs	r6, #32
10000e42:	fbb1 f1f7 	udiv	r1, r1, r7
10000e46:	eba2 0208 	sub.w	r2, r2, r8
10000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
10000e4e:	e766      	b.n	10000d1e <__udivmoddi4+0xfa>
10000e50:	4601      	mov	r1, r0
10000e52:	e718      	b.n	10000c86 <__udivmoddi4+0x62>
10000e54:	4610      	mov	r0, r2
10000e56:	e72c      	b.n	10000cb2 <__udivmoddi4+0x8e>
10000e58:	f1c6 0220 	rsb	r2, r6, #32
10000e5c:	fa2e f302 	lsr.w	r3, lr, r2
10000e60:	40b7      	lsls	r7, r6
10000e62:	40b1      	lsls	r1, r6
10000e64:	fa20 f202 	lsr.w	r2, r0, r2
10000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
10000e6c:	430a      	orrs	r2, r1
10000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
10000e72:	b2bc      	uxth	r4, r7
10000e74:	fb0e 3318 	mls	r3, lr, r8, r3
10000e78:	0c11      	lsrs	r1, r2, #16
10000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
10000e7e:	fb08 f904 	mul.w	r9, r8, r4
10000e82:	40b0      	lsls	r0, r6
10000e84:	4589      	cmp	r9, r1
10000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
10000e8a:	b280      	uxth	r0, r0
10000e8c:	d93e      	bls.n	10000f0c <__udivmoddi4+0x2e8>
10000e8e:	1879      	adds	r1, r7, r1
10000e90:	f108 3cff 	add.w	ip, r8, #4294967295
10000e94:	d201      	bcs.n	10000e9a <__udivmoddi4+0x276>
10000e96:	4589      	cmp	r9, r1
10000e98:	d81f      	bhi.n	10000eda <__udivmoddi4+0x2b6>
10000e9a:	eba1 0109 	sub.w	r1, r1, r9
10000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
10000ea2:	fb09 f804 	mul.w	r8, r9, r4
10000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
10000eaa:	b292      	uxth	r2, r2
10000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
10000eb0:	4542      	cmp	r2, r8
10000eb2:	d229      	bcs.n	10000f08 <__udivmoddi4+0x2e4>
10000eb4:	18ba      	adds	r2, r7, r2
10000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
10000eba:	d2c4      	bcs.n	10000e46 <__udivmoddi4+0x222>
10000ebc:	4542      	cmp	r2, r8
10000ebe:	d2c2      	bcs.n	10000e46 <__udivmoddi4+0x222>
10000ec0:	f1a9 0102 	sub.w	r1, r9, #2
10000ec4:	443a      	add	r2, r7
10000ec6:	e7be      	b.n	10000e46 <__udivmoddi4+0x222>
10000ec8:	45f0      	cmp	r8, lr
10000eca:	d29d      	bcs.n	10000e08 <__udivmoddi4+0x1e4>
10000ecc:	ebbe 0302 	subs.w	r3, lr, r2
10000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
10000ed4:	3801      	subs	r0, #1
10000ed6:	46e1      	mov	r9, ip
10000ed8:	e796      	b.n	10000e08 <__udivmoddi4+0x1e4>
10000eda:	eba7 0909 	sub.w	r9, r7, r9
10000ede:	4449      	add	r1, r9
10000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
10000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
10000ee8:	fb09 f804 	mul.w	r8, r9, r4
10000eec:	e7db      	b.n	10000ea6 <__udivmoddi4+0x282>
10000eee:	4673      	mov	r3, lr
10000ef0:	e77f      	b.n	10000df2 <__udivmoddi4+0x1ce>
10000ef2:	4650      	mov	r0, sl
10000ef4:	e766      	b.n	10000dc4 <__udivmoddi4+0x1a0>
10000ef6:	4608      	mov	r0, r1
10000ef8:	e6fd      	b.n	10000cf6 <__udivmoddi4+0xd2>
10000efa:	443b      	add	r3, r7
10000efc:	3a02      	subs	r2, #2
10000efe:	e733      	b.n	10000d68 <__udivmoddi4+0x144>
10000f00:	f1ac 0c02 	sub.w	ip, ip, #2
10000f04:	443b      	add	r3, r7
10000f06:	e71c      	b.n	10000d42 <__udivmoddi4+0x11e>
10000f08:	4649      	mov	r1, r9
10000f0a:	e79c      	b.n	10000e46 <__udivmoddi4+0x222>
10000f0c:	eba1 0109 	sub.w	r1, r1, r9
10000f10:	46c4      	mov	ip, r8
10000f12:	fbb1 f9fe 	udiv	r9, r1, lr
10000f16:	fb09 f804 	mul.w	r8, r9, r4
10000f1a:	e7c4      	b.n	10000ea6 <__udivmoddi4+0x282>

10000f1c <__aeabi_idiv0>:
10000f1c:	4770      	bx	lr
10000f1e:	bf00      	nop

10000f20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000f20:	e7fe      	b.n	10000f20 <ADC1_IRQHandler>
	...

10000f24 <Periph_Lock>:
  *                     Semaphore id deduced from this peripheral.
  *         Timeout: timeout value in msecs
  * @retval Return Status
  */
LockResource_Status_t Periph_Lock(void* Peripheral, uint32_t Timeout)
{
10000f24:	b580      	push	{r7, lr}
10000f26:	b084      	sub	sp, #16
10000f28:	af00      	add	r7, sp, #0
10000f2a:	6078      	str	r0, [r7, #4]
10000f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
10000f2e:	2300      	movs	r3, #0
10000f30:	60bb      	str	r3, [r7, #8]
  LockResource_Status_t ret = LOCK_RESOURCE_STATUS_OK;
10000f32:	2300      	movs	r3, #0
10000f34:	73fb      	strb	r3, [r7, #15]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
10000f36:	f003 fa43 	bl	100043c0 <HAL_GetTick>
10000f3a:	60b8      	str	r0, [r7, #8]

  /* Try to Take HSEM  assigned to the Peripheral */
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
10000f3c:	e00e      	b.n	10000f5c <Periph_Lock+0x38>
  {

    if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
10000f3e:	683b      	ldr	r3, [r7, #0]
10000f40:	2b00      	cmp	r3, #0
10000f42:	d007      	beq.n	10000f54 <Periph_Lock+0x30>
10000f44:	f003 fa3c 	bl	100043c0 <HAL_GetTick>
10000f48:	4602      	mov	r2, r0
10000f4a:	68bb      	ldr	r3, [r7, #8]
10000f4c:	1ad3      	subs	r3, r2, r3
10000f4e:	683a      	ldr	r2, [r7, #0]
10000f50:	429a      	cmp	r2, r3
10000f52:	d203      	bcs.n	10000f5c <Periph_Lock+0x38>
    {
       ret = LOCK_RESOURCE_STATUS_TIMEOUT;
10000f54:	2302      	movs	r3, #2
10000f56:	73fb      	strb	r3, [r7, #15]
       Error_Handler();
10000f58:	f000 ff51 	bl	10001dfe <Error_Handler>
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
10000f5c:	687b      	ldr	r3, [r7, #4]
10000f5e:	4a2c      	ldr	r2, [pc, #176]	@ (10001010 <Periph_Lock+0xec>)
10000f60:	4293      	cmp	r3, r2
10000f62:	d049      	beq.n	10000ff8 <Periph_Lock+0xd4>
10000f64:	687b      	ldr	r3, [r7, #4]
10000f66:	4a2b      	ldr	r2, [pc, #172]	@ (10001014 <Periph_Lock+0xf0>)
10000f68:	4293      	cmp	r3, r2
10000f6a:	d043      	beq.n	10000ff4 <Periph_Lock+0xd0>
10000f6c:	687b      	ldr	r3, [r7, #4]
10000f6e:	4a2a      	ldr	r2, [pc, #168]	@ (10001018 <Periph_Lock+0xf4>)
10000f70:	4293      	cmp	r3, r2
10000f72:	d03d      	beq.n	10000ff0 <Periph_Lock+0xcc>
10000f74:	687b      	ldr	r3, [r7, #4]
10000f76:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
10000f7a:	d037      	beq.n	10000fec <Periph_Lock+0xc8>
10000f7c:	687b      	ldr	r3, [r7, #4]
10000f7e:	4a27      	ldr	r2, [pc, #156]	@ (1000101c <Periph_Lock+0xf8>)
10000f80:	4293      	cmp	r3, r2
10000f82:	d031      	beq.n	10000fe8 <Periph_Lock+0xc4>
10000f84:	687b      	ldr	r3, [r7, #4]
10000f86:	4a26      	ldr	r2, [pc, #152]	@ (10001020 <Periph_Lock+0xfc>)
10000f88:	4293      	cmp	r3, r2
10000f8a:	d02b      	beq.n	10000fe4 <Periph_Lock+0xc0>
10000f8c:	687b      	ldr	r3, [r7, #4]
10000f8e:	4a25      	ldr	r2, [pc, #148]	@ (10001024 <Periph_Lock+0x100>)
10000f90:	4293      	cmp	r3, r2
10000f92:	d025      	beq.n	10000fe0 <Periph_Lock+0xbc>
10000f94:	687b      	ldr	r3, [r7, #4]
10000f96:	4a24      	ldr	r2, [pc, #144]	@ (10001028 <Periph_Lock+0x104>)
10000f98:	4293      	cmp	r3, r2
10000f9a:	d01f      	beq.n	10000fdc <Periph_Lock+0xb8>
10000f9c:	687b      	ldr	r3, [r7, #4]
10000f9e:	4a23      	ldr	r2, [pc, #140]	@ (1000102c <Periph_Lock+0x108>)
10000fa0:	4293      	cmp	r3, r2
10000fa2:	d019      	beq.n	10000fd8 <Periph_Lock+0xb4>
10000fa4:	687b      	ldr	r3, [r7, #4]
10000fa6:	4a22      	ldr	r2, [pc, #136]	@ (10001030 <Periph_Lock+0x10c>)
10000fa8:	4293      	cmp	r3, r2
10000faa:	d013      	beq.n	10000fd4 <Periph_Lock+0xb0>
10000fac:	687b      	ldr	r3, [r7, #4]
10000fae:	4a21      	ldr	r2, [pc, #132]	@ (10001034 <Periph_Lock+0x110>)
10000fb0:	4293      	cmp	r3, r2
10000fb2:	d00d      	beq.n	10000fd0 <Periph_Lock+0xac>
10000fb4:	687b      	ldr	r3, [r7, #4]
10000fb6:	4a20      	ldr	r2, [pc, #128]	@ (10001038 <Periph_Lock+0x114>)
10000fb8:	4293      	cmp	r3, r2
10000fba:	d007      	beq.n	10000fcc <Periph_Lock+0xa8>
10000fbc:	687b      	ldr	r3, [r7, #4]
10000fbe:	4a1f      	ldr	r2, [pc, #124]	@ (1000103c <Periph_Lock+0x118>)
10000fc0:	4293      	cmp	r3, r2
10000fc2:	d101      	bne.n	10000fc8 <Periph_Lock+0xa4>
10000fc4:	2301      	movs	r3, #1
10000fc6:	e018      	b.n	10000ffa <Periph_Lock+0xd6>
10000fc8:	2320      	movs	r3, #32
10000fca:	e016      	b.n	10000ffa <Periph_Lock+0xd6>
10000fcc:	2300      	movs	r3, #0
10000fce:	e014      	b.n	10000ffa <Periph_Lock+0xd6>
10000fd0:	2300      	movs	r3, #0
10000fd2:	e012      	b.n	10000ffa <Periph_Lock+0xd6>
10000fd4:	2300      	movs	r3, #0
10000fd6:	e010      	b.n	10000ffa <Periph_Lock+0xd6>
10000fd8:	2300      	movs	r3, #0
10000fda:	e00e      	b.n	10000ffa <Periph_Lock+0xd6>
10000fdc:	2300      	movs	r3, #0
10000fde:	e00c      	b.n	10000ffa <Periph_Lock+0xd6>
10000fe0:	2300      	movs	r3, #0
10000fe2:	e00a      	b.n	10000ffa <Periph_Lock+0xd6>
10000fe4:	2300      	movs	r3, #0
10000fe6:	e008      	b.n	10000ffa <Periph_Lock+0xd6>
10000fe8:	2300      	movs	r3, #0
10000fea:	e006      	b.n	10000ffa <Periph_Lock+0xd6>
10000fec:	2300      	movs	r3, #0
10000fee:	e004      	b.n	10000ffa <Periph_Lock+0xd6>
10000ff0:	2300      	movs	r3, #0
10000ff2:	e002      	b.n	10000ffa <Periph_Lock+0xd6>
10000ff4:	2300      	movs	r3, #0
10000ff6:	e000      	b.n	10000ffa <Periph_Lock+0xd6>
10000ff8:	2300      	movs	r3, #0
10000ffa:	4618      	mov	r0, r3
10000ffc:	f003 feb6 	bl	10004d6c <HAL_HSEM_FastTake>
10001000:	4603      	mov	r3, r0
10001002:	2b00      	cmp	r3, #0
10001004:	d19b      	bne.n	10000f3e <Periph_Lock+0x1a>
    }
  }

  return ret;
10001006:	7bfb      	ldrb	r3, [r7, #15]
}
10001008:	4618      	mov	r0, r3
1000100a:	3710      	adds	r7, #16
1000100c:	46bd      	mov	sp, r7
1000100e:	bd80      	pop	{r7, pc}
10001010:	50002000 	.word	0x50002000
10001014:	50003000 	.word	0x50003000
10001018:	50004000 	.word	0x50004000
1000101c:	50006000 	.word	0x50006000
10001020:	50007000 	.word	0x50007000
10001024:	50008000 	.word	0x50008000
10001028:	50009000 	.word	0x50009000
1000102c:	5000a000 	.word	0x5000a000
10001030:	5000b000 	.word	0x5000b000
10001034:	5000c000 	.word	0x5000c000
10001038:	54004000 	.word	0x54004000
1000103c:	5000d000 	.word	0x5000d000

10001040 <Periph_Unlock>:
  * @brief  The Periph_Unlock released a previously-acquired semaphore which we want to unlock
  * @param  Peripheral: used to identify which peripheral and the related semaphore
  * @retval None
  */
void Periph_Unlock(void* Peripheral)
{
10001040:	b580      	push	{r7, lr}
10001042:	b082      	sub	sp, #8
10001044:	af00      	add	r7, sp, #0
10001046:	6078      	str	r0, [r7, #4]
  /* Release HSEM  */
  HAL_HSEM_Release(GET_HSEM_SEM_INDEX(Peripheral), 0);
10001048:	687b      	ldr	r3, [r7, #4]
1000104a:	4a2b      	ldr	r2, [pc, #172]	@ (100010f8 <Periph_Unlock+0xb8>)
1000104c:	4293      	cmp	r3, r2
1000104e:	d049      	beq.n	100010e4 <Periph_Unlock+0xa4>
10001050:	687b      	ldr	r3, [r7, #4]
10001052:	4a2a      	ldr	r2, [pc, #168]	@ (100010fc <Periph_Unlock+0xbc>)
10001054:	4293      	cmp	r3, r2
10001056:	d043      	beq.n	100010e0 <Periph_Unlock+0xa0>
10001058:	687b      	ldr	r3, [r7, #4]
1000105a:	4a29      	ldr	r2, [pc, #164]	@ (10001100 <Periph_Unlock+0xc0>)
1000105c:	4293      	cmp	r3, r2
1000105e:	d03d      	beq.n	100010dc <Periph_Unlock+0x9c>
10001060:	687b      	ldr	r3, [r7, #4]
10001062:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
10001066:	d037      	beq.n	100010d8 <Periph_Unlock+0x98>
10001068:	687b      	ldr	r3, [r7, #4]
1000106a:	4a26      	ldr	r2, [pc, #152]	@ (10001104 <Periph_Unlock+0xc4>)
1000106c:	4293      	cmp	r3, r2
1000106e:	d031      	beq.n	100010d4 <Periph_Unlock+0x94>
10001070:	687b      	ldr	r3, [r7, #4]
10001072:	4a25      	ldr	r2, [pc, #148]	@ (10001108 <Periph_Unlock+0xc8>)
10001074:	4293      	cmp	r3, r2
10001076:	d02b      	beq.n	100010d0 <Periph_Unlock+0x90>
10001078:	687b      	ldr	r3, [r7, #4]
1000107a:	4a24      	ldr	r2, [pc, #144]	@ (1000110c <Periph_Unlock+0xcc>)
1000107c:	4293      	cmp	r3, r2
1000107e:	d025      	beq.n	100010cc <Periph_Unlock+0x8c>
10001080:	687b      	ldr	r3, [r7, #4]
10001082:	4a23      	ldr	r2, [pc, #140]	@ (10001110 <Periph_Unlock+0xd0>)
10001084:	4293      	cmp	r3, r2
10001086:	d01f      	beq.n	100010c8 <Periph_Unlock+0x88>
10001088:	687b      	ldr	r3, [r7, #4]
1000108a:	4a22      	ldr	r2, [pc, #136]	@ (10001114 <Periph_Unlock+0xd4>)
1000108c:	4293      	cmp	r3, r2
1000108e:	d019      	beq.n	100010c4 <Periph_Unlock+0x84>
10001090:	687b      	ldr	r3, [r7, #4]
10001092:	4a21      	ldr	r2, [pc, #132]	@ (10001118 <Periph_Unlock+0xd8>)
10001094:	4293      	cmp	r3, r2
10001096:	d013      	beq.n	100010c0 <Periph_Unlock+0x80>
10001098:	687b      	ldr	r3, [r7, #4]
1000109a:	4a20      	ldr	r2, [pc, #128]	@ (1000111c <Periph_Unlock+0xdc>)
1000109c:	4293      	cmp	r3, r2
1000109e:	d00d      	beq.n	100010bc <Periph_Unlock+0x7c>
100010a0:	687b      	ldr	r3, [r7, #4]
100010a2:	4a1f      	ldr	r2, [pc, #124]	@ (10001120 <Periph_Unlock+0xe0>)
100010a4:	4293      	cmp	r3, r2
100010a6:	d007      	beq.n	100010b8 <Periph_Unlock+0x78>
100010a8:	687b      	ldr	r3, [r7, #4]
100010aa:	4a1e      	ldr	r2, [pc, #120]	@ (10001124 <Periph_Unlock+0xe4>)
100010ac:	4293      	cmp	r3, r2
100010ae:	d101      	bne.n	100010b4 <Periph_Unlock+0x74>
100010b0:	2301      	movs	r3, #1
100010b2:	e018      	b.n	100010e6 <Periph_Unlock+0xa6>
100010b4:	2320      	movs	r3, #32
100010b6:	e016      	b.n	100010e6 <Periph_Unlock+0xa6>
100010b8:	2300      	movs	r3, #0
100010ba:	e014      	b.n	100010e6 <Periph_Unlock+0xa6>
100010bc:	2300      	movs	r3, #0
100010be:	e012      	b.n	100010e6 <Periph_Unlock+0xa6>
100010c0:	2300      	movs	r3, #0
100010c2:	e010      	b.n	100010e6 <Periph_Unlock+0xa6>
100010c4:	2300      	movs	r3, #0
100010c6:	e00e      	b.n	100010e6 <Periph_Unlock+0xa6>
100010c8:	2300      	movs	r3, #0
100010ca:	e00c      	b.n	100010e6 <Periph_Unlock+0xa6>
100010cc:	2300      	movs	r3, #0
100010ce:	e00a      	b.n	100010e6 <Periph_Unlock+0xa6>
100010d0:	2300      	movs	r3, #0
100010d2:	e008      	b.n	100010e6 <Periph_Unlock+0xa6>
100010d4:	2300      	movs	r3, #0
100010d6:	e006      	b.n	100010e6 <Periph_Unlock+0xa6>
100010d8:	2300      	movs	r3, #0
100010da:	e004      	b.n	100010e6 <Periph_Unlock+0xa6>
100010dc:	2300      	movs	r3, #0
100010de:	e002      	b.n	100010e6 <Periph_Unlock+0xa6>
100010e0:	2300      	movs	r3, #0
100010e2:	e000      	b.n	100010e6 <Periph_Unlock+0xa6>
100010e4:	2300      	movs	r3, #0
100010e6:	2100      	movs	r1, #0
100010e8:	4618      	mov	r0, r3
100010ea:	f003 fe57 	bl	10004d9c <HAL_HSEM_Release>

}
100010ee:	bf00      	nop
100010f0:	3708      	adds	r7, #8
100010f2:	46bd      	mov	sp, r7
100010f4:	bd80      	pop	{r7, pc}
100010f6:	bf00      	nop
100010f8:	50002000 	.word	0x50002000
100010fc:	50003000 	.word	0x50003000
10001100:	50004000 	.word	0x50004000
10001104:	50006000 	.word	0x50006000
10001108:	50007000 	.word	0x50007000
1000110c:	50008000 	.word	0x50008000
10001110:	50009000 	.word	0x50009000
10001114:	5000a000 	.word	0x5000a000
10001118:	5000b000 	.word	0x5000b000
1000111c:	5000c000 	.word	0x5000c000
10001120:	54004000 	.word	0x54004000
10001124:	5000d000 	.word	0x5000d000

10001128 <user_i2c_read>:
char hum_string[50];
char temp_string[50];
char press_string[50];

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
10001128:	b580      	push	{r7, lr}
1000112a:	b086      	sub	sp, #24
1000112c:	af04      	add	r7, sp, #16
1000112e:	603a      	str	r2, [r7, #0]
10001130:	461a      	mov	r2, r3
10001132:	4603      	mov	r3, r0
10001134:	71fb      	strb	r3, [r7, #7]
10001136:	460b      	mov	r3, r1
10001138:	71bb      	strb	r3, [r7, #6]
1000113a:	4613      	mov	r3, r2
1000113c:	80bb      	strh	r3, [r7, #4]
    if(HAL_I2C_Mem_Read(&hi2c5, id << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
1000113e:	79fb      	ldrb	r3, [r7, #7]
10001140:	b29b      	uxth	r3, r3
10001142:	005b      	lsls	r3, r3, #1
10001144:	b299      	uxth	r1, r3
10001146:	79bb      	ldrb	r3, [r7, #6]
10001148:	b29a      	uxth	r2, r3
1000114a:	2364      	movs	r3, #100	@ 0x64
1000114c:	9302      	str	r3, [sp, #8]
1000114e:	88bb      	ldrh	r3, [r7, #4]
10001150:	9301      	str	r3, [sp, #4]
10001152:	683b      	ldr	r3, [r7, #0]
10001154:	9300      	str	r3, [sp, #0]
10001156:	2301      	movs	r3, #1
10001158:	4806      	ldr	r0, [pc, #24]	@ (10001174 <user_i2c_read+0x4c>)
1000115a:	f003 ffd5 	bl	10005108 <HAL_I2C_Mem_Read>
1000115e:	4603      	mov	r3, r0
10001160:	2b00      	cmp	r3, #0
10001162:	d101      	bne.n	10001168 <user_i2c_read+0x40>
        return 0;
10001164:	2300      	movs	r3, #0
10001166:	e001      	b.n	1000116c <user_i2c_read+0x44>
    return -1;
10001168:	f04f 33ff 	mov.w	r3, #4294967295
}
1000116c:	4618      	mov	r0, r3
1000116e:	3708      	adds	r7, #8
10001170:	46bd      	mov	sp, r7
10001172:	bd80      	pop	{r7, pc}
10001174:	10020344 	.word	0x10020344

10001178 <user_delay_ms>:


void user_delay_ms(uint32_t period)
{
10001178:	b580      	push	{r7, lr}
1000117a:	b082      	sub	sp, #8
1000117c:	af00      	add	r7, sp, #0
1000117e:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
10001180:	6878      	ldr	r0, [r7, #4]
10001182:	f003 f929 	bl	100043d8 <HAL_Delay>
}
10001186:	bf00      	nop
10001188:	3708      	adds	r7, #8
1000118a:	46bd      	mov	sp, r7
1000118c:	bd80      	pop	{r7, pc}
	...

10001190 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
10001190:	b580      	push	{r7, lr}
10001192:	b086      	sub	sp, #24
10001194:	af04      	add	r7, sp, #16
10001196:	603a      	str	r2, [r7, #0]
10001198:	461a      	mov	r2, r3
1000119a:	4603      	mov	r3, r0
1000119c:	71fb      	strb	r3, [r7, #7]
1000119e:	460b      	mov	r3, r1
100011a0:	71bb      	strb	r3, [r7, #6]
100011a2:	4613      	mov	r3, r2
100011a4:	80bb      	strh	r3, [r7, #4]
    if(HAL_I2C_Mem_Write(&hi2c5, id << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
100011a6:	79fb      	ldrb	r3, [r7, #7]
100011a8:	b29b      	uxth	r3, r3
100011aa:	005b      	lsls	r3, r3, #1
100011ac:	b299      	uxth	r1, r3
100011ae:	79bb      	ldrb	r3, [r7, #6]
100011b0:	b29a      	uxth	r2, r3
100011b2:	2364      	movs	r3, #100	@ 0x64
100011b4:	9302      	str	r3, [sp, #8]
100011b6:	88bb      	ldrh	r3, [r7, #4]
100011b8:	9301      	str	r3, [sp, #4]
100011ba:	683b      	ldr	r3, [r7, #0]
100011bc:	9300      	str	r3, [sp, #0]
100011be:	2301      	movs	r3, #1
100011c0:	4806      	ldr	r0, [pc, #24]	@ (100011dc <user_i2c_write+0x4c>)
100011c2:	f003 fe8d 	bl	10004ee0 <HAL_I2C_Mem_Write>
100011c6:	4603      	mov	r3, r0
100011c8:	2b00      	cmp	r3, #0
100011ca:	d101      	bne.n	100011d0 <user_i2c_write+0x40>
        return 0;
100011cc:	2300      	movs	r3, #0
100011ce:	e001      	b.n	100011d4 <user_i2c_write+0x44>
    return -1;
100011d0:	f04f 33ff 	mov.w	r3, #4294967295
}
100011d4:	4618      	mov	r0, r3
100011d6:	3708      	adds	r7, #8
100011d8:	46bd      	mov	sp, r7
100011da:	bd80      	pop	{r7, pc}
100011dc:	10020344 	.word	0x10020344

100011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
100011e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100011e4:	b09c      	sub	sp, #112	@ 0x70
100011e6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  unsigned int counter = 0;
100011e8:	2300      	movs	r3, #0
100011ea:	667b      	str	r3, [r7, #100]	@ 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initialize the Systick. */
  HAL_Init();
100011ec:	f003 f884 	bl	100042f8 <HAL_Init>

  /* USER CODE BEGIN Init */
    if(IS_ENGINEERING_BOOT_MODE())
100011f0:	4bcc      	ldr	r3, [pc, #816]	@ (10001524 <main+0x344>)
100011f2:	681b      	ldr	r3, [r3, #0]
100011f4:	f003 0307 	and.w	r3, r3, #7
100011f8:	2b04      	cmp	r3, #4
100011fa:	d103      	bne.n	10001204 <main+0x24>
  {
    /* Configure the system clock */
    HAL_RCC_DeInit();
100011fc:	f005 fb4a 	bl	10006894 <HAL_RCC_DeInit>
    SystemClock_Config();
10001200:	f000 fa96 	bl	10001730 <SystemClock_Config>
  }

  log_info("Cortex-M4 boot successful with STM32Cube FW version: v%ld.%ld.%ld \r\n",
10001204:	f003 f8dc 	bl	100043c0 <HAL_GetTick>
10001208:	4603      	mov	r3, r0
1000120a:	4ac7      	ldr	r2, [pc, #796]	@ (10001528 <main+0x348>)
1000120c:	fba2 2303 	umull	r2, r3, r2, r3
10001210:	099b      	lsrs	r3, r3, #6
10001212:	461e      	mov	r6, r3
10001214:	f003 f8d4 	bl	100043c0 <HAL_GetTick>
10001218:	4602      	mov	r2, r0
1000121a:	4bc3      	ldr	r3, [pc, #780]	@ (10001528 <main+0x348>)
1000121c:	fba3 1302 	umull	r1, r3, r3, r2
10001220:	099b      	lsrs	r3, r3, #6
10001222:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10001226:	fb01 f303 	mul.w	r3, r1, r3
1000122a:	1ad3      	subs	r3, r2, r3
1000122c:	4698      	mov	r8, r3
1000122e:	f003 f8f7 	bl	10004420 <HAL_GetHalVersion>
10001232:	4603      	mov	r3, r0
10001234:	0e1b      	lsrs	r3, r3, #24
10001236:	b2dd      	uxtb	r5, r3
10001238:	f003 f8f2 	bl	10004420 <HAL_GetHalVersion>
1000123c:	4603      	mov	r3, r0
1000123e:	0c1b      	lsrs	r3, r3, #16
10001240:	b2dc      	uxtb	r4, r3
10001242:	f003 f8ed 	bl	10004420 <HAL_GetHalVersion>
10001246:	4603      	mov	r3, r0
10001248:	0a1b      	lsrs	r3, r3, #8
1000124a:	b2db      	uxtb	r3, r3
1000124c:	9301      	str	r3, [sp, #4]
1000124e:	9400      	str	r4, [sp, #0]
10001250:	462b      	mov	r3, r5
10001252:	4642      	mov	r2, r8
10001254:	4631      	mov	r1, r6
10001256:	48b5      	ldr	r0, [pc, #724]	@ (1000152c <main+0x34c>)
10001258:	f00c fcda 	bl	1000dc10 <iprintf>
                                            (long)((HAL_GetHalVersion() >> 24) & 0x000000FF),
                                            (long)((HAL_GetHalVersion() >> 16) & 0x000000FF),
                                            (long)((HAL_GetHalVersion() >> 8) & 0x000000FF));
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
1000125c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001260:	f44f 6200 	mov.w	r2, #2048	@ 0x800
10001264:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0

  BSP_LED_Init(LED7);
10001268:	2002      	movs	r0, #2
1000126a:	f002 fd27 	bl	10003cbc <BSP_LED_Init>
  //BSP_LED_On(LED7);
  /* USER CODE END Init */

  /* IPCC initialisation */
   MX_IPCC_Init();
1000126e:	f000 fc51 	bl	10001b14 <MX_IPCC_Init>
  /* OpenAmp initialisation ---------------------------------*/
  MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
10001272:	2100      	movs	r1, #0
10001274:	2001      	movs	r0, #1
10001276:	f000 ff9b 	bl	100021b0 <MX_OPENAMP_Init>


  MX_GPIO_Init();
1000127a:	f000 fd7b 	bl	10001d74 <MX_GPIO_Init>
  MX_I2C5_Init();
1000127e:	f000 fd37 	bl	10001cf0 <MX_I2C5_Init>

  if (ssd1306_Init () != 0){
10001282:	f002 fe2d 	bl	10003ee0 <ssd1306_Init>
10001286:	4603      	mov	r3, r0
10001288:	2b00      	cmp	r3, #0
1000128a:	d001      	beq.n	10001290 <main+0xb0>
	  Error_Handler();
1000128c:	f000 fdb7 	bl	10001dfe <Error_Handler>
  }


  dev.dev_id = BME280_I2C_ADDR_PRIM;
10001290:	4ba7      	ldr	r3, [pc, #668]	@ (10001530 <main+0x350>)
10001292:	2276      	movs	r2, #118	@ 0x76
10001294:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
10001296:	4ba6      	ldr	r3, [pc, #664]	@ (10001530 <main+0x350>)
10001298:	2201      	movs	r2, #1
1000129a:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
1000129c:	4ba4      	ldr	r3, [pc, #656]	@ (10001530 <main+0x350>)
1000129e:	4aa5      	ldr	r2, [pc, #660]	@ (10001534 <main+0x354>)
100012a0:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
100012a2:	4ba3      	ldr	r3, [pc, #652]	@ (10001530 <main+0x350>)
100012a4:	4aa4      	ldr	r2, [pc, #656]	@ (10001538 <main+0x358>)
100012a6:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
100012a8:	4ba1      	ldr	r3, [pc, #644]	@ (10001530 <main+0x350>)
100012aa:	4aa4      	ldr	r2, [pc, #656]	@ (1000153c <main+0x35c>)
100012ac:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
100012ae:	48a0      	ldr	r0, [pc, #640]	@ (10001530 <main+0x350>)
100012b0:	f001 fa00 	bl	100026b4 <bme280_init>
100012b4:	4603      	mov	r3, r0
100012b6:	461a      	mov	r2, r3
100012b8:	4ba1      	ldr	r3, [pc, #644]	@ (10001540 <main+0x360>)
100012ba:	701a      	strb	r2, [r3, #0]

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
100012bc:	4b9c      	ldr	r3, [pc, #624]	@ (10001530 <main+0x350>)
100012be:	2201      	movs	r2, #1
100012c0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
100012c4:	4b9a      	ldr	r3, [pc, #616]	@ (10001530 <main+0x350>)
100012c6:	2205      	movs	r2, #5
100012c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
100012cc:	4b98      	ldr	r3, [pc, #608]	@ (10001530 <main+0x350>)
100012ce:	2202      	movs	r2, #2
100012d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
100012d4:	4b96      	ldr	r3, [pc, #600]	@ (10001530 <main+0x350>)
100012d6:	2204      	movs	r2, #4
100012d8:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
100012dc:	4994      	ldr	r1, [pc, #592]	@ (10001530 <main+0x350>)
100012de:	200f      	movs	r0, #15
100012e0:	f001 fadc 	bl	1000289c <bme280_set_sensor_settings>
100012e4:	4603      	mov	r3, r0
100012e6:	461a      	mov	r2, r3
100012e8:	4b95      	ldr	r3, [pc, #596]	@ (10001540 <main+0x360>)
100012ea:	701a      	strb	r2, [r3, #0]
 // ssd1306_WriteString("CACAAAAA \n", Font_7x10, White);
  //ssd1306_TestAll();
  //ssd1306_UpdateScreen();
  /* USER CODE BEGIN 2 */
  /* Configure LED7 */
  BSP_LED_Init(LED7);
100012ec:	2002      	movs	r0, #2
100012ee:	f002 fce5 	bl	10003cbc <BSP_LED_Init>
  BSP_LED_Toggle(LED7);
100012f2:	2002      	movs	r0, #2
100012f4:	f002 fd76 	bl	10003de4 <BSP_LED_Toggle>




  EXTI14_IRQHandler_Config();
100012f8:	f000 fcae 	bl	10001c58 <EXTI14_IRQHandler_Config>
  /* USER CODE BEGIN 2 */
  /*
   * Create Virtual UART device
   * defined by a rpmsg channel attached to the remote device
   */
  log_info("Virtual UART0 OpenAMP-rpmsg channel creation\r\n");
100012fc:	f003 f860 	bl	100043c0 <HAL_GetTick>
10001300:	4603      	mov	r3, r0
10001302:	4a89      	ldr	r2, [pc, #548]	@ (10001528 <main+0x348>)
10001304:	fba2 2303 	umull	r2, r3, r2, r3
10001308:	099b      	lsrs	r3, r3, #6
1000130a:	461c      	mov	r4, r3
1000130c:	f003 f858 	bl	100043c0 <HAL_GetTick>
10001310:	4602      	mov	r2, r0
10001312:	4b85      	ldr	r3, [pc, #532]	@ (10001528 <main+0x348>)
10001314:	fba3 1302 	umull	r1, r3, r3, r2
10001318:	099b      	lsrs	r3, r3, #6
1000131a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
1000131e:	fb01 f303 	mul.w	r3, r1, r3
10001322:	1ad3      	subs	r3, r2, r3
10001324:	461a      	mov	r2, r3
10001326:	4621      	mov	r1, r4
10001328:	4886      	ldr	r0, [pc, #536]	@ (10001544 <main+0x364>)
1000132a:	f00c fc71 	bl	1000dc10 <iprintf>
  if (VIRT_UART_Init(&huart0) != VIRT_UART_OK) {
1000132e:	4886      	ldr	r0, [pc, #536]	@ (10001548 <main+0x368>)
10001330:	f00b fc06 	bl	1000cb40 <VIRT_UART_Init>
10001334:	4603      	mov	r3, r0
10001336:	2b00      	cmp	r3, #0
10001338:	d01a      	beq.n	10001370 <main+0x190>
    log_err("VIRT_UART_Init UART0 failed.\r\n");
1000133a:	f003 f841 	bl	100043c0 <HAL_GetTick>
1000133e:	4603      	mov	r3, r0
10001340:	4a79      	ldr	r2, [pc, #484]	@ (10001528 <main+0x348>)
10001342:	fba2 2303 	umull	r2, r3, r2, r3
10001346:	099b      	lsrs	r3, r3, #6
10001348:	461c      	mov	r4, r3
1000134a:	f003 f839 	bl	100043c0 <HAL_GetTick>
1000134e:	4602      	mov	r2, r0
10001350:	4b75      	ldr	r3, [pc, #468]	@ (10001528 <main+0x348>)
10001352:	fba3 1302 	umull	r1, r3, r3, r2
10001356:	099b      	lsrs	r3, r3, #6
10001358:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
1000135c:	fb01 f303 	mul.w	r3, r1, r3
10001360:	1ad3      	subs	r3, r2, r3
10001362:	461a      	mov	r2, r3
10001364:	4621      	mov	r1, r4
10001366:	4879      	ldr	r0, [pc, #484]	@ (1000154c <main+0x36c>)
10001368:	f00c fc52 	bl	1000dc10 <iprintf>
    Error_Handler();
1000136c:	f000 fd47 	bl	10001dfe <Error_Handler>
  }

  log_info("Virtual UART1 OpenAMP-rpmsg channel creation\r\n");
10001370:	f003 f826 	bl	100043c0 <HAL_GetTick>
10001374:	4603      	mov	r3, r0
10001376:	4a6c      	ldr	r2, [pc, #432]	@ (10001528 <main+0x348>)
10001378:	fba2 2303 	umull	r2, r3, r2, r3
1000137c:	099b      	lsrs	r3, r3, #6
1000137e:	461c      	mov	r4, r3
10001380:	f003 f81e 	bl	100043c0 <HAL_GetTick>
10001384:	4602      	mov	r2, r0
10001386:	4b68      	ldr	r3, [pc, #416]	@ (10001528 <main+0x348>)
10001388:	fba3 1302 	umull	r1, r3, r3, r2
1000138c:	099b      	lsrs	r3, r3, #6
1000138e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10001392:	fb01 f303 	mul.w	r3, r1, r3
10001396:	1ad3      	subs	r3, r2, r3
10001398:	461a      	mov	r2, r3
1000139a:	4621      	mov	r1, r4
1000139c:	486c      	ldr	r0, [pc, #432]	@ (10001550 <main+0x370>)
1000139e:	f00c fc37 	bl	1000dc10 <iprintf>
  if (VIRT_UART_Init(&huart1) != VIRT_UART_OK) {
100013a2:	486c      	ldr	r0, [pc, #432]	@ (10001554 <main+0x374>)
100013a4:	f00b fbcc 	bl	1000cb40 <VIRT_UART_Init>
100013a8:	4603      	mov	r3, r0
100013aa:	2b00      	cmp	r3, #0
100013ac:	d01a      	beq.n	100013e4 <main+0x204>
    log_err("VIRT_UART_Init UART1 failed.\r\n");
100013ae:	f003 f807 	bl	100043c0 <HAL_GetTick>
100013b2:	4603      	mov	r3, r0
100013b4:	4a5c      	ldr	r2, [pc, #368]	@ (10001528 <main+0x348>)
100013b6:	fba2 2303 	umull	r2, r3, r2, r3
100013ba:	099b      	lsrs	r3, r3, #6
100013bc:	461c      	mov	r4, r3
100013be:	f002 ffff 	bl	100043c0 <HAL_GetTick>
100013c2:	4602      	mov	r2, r0
100013c4:	4b58      	ldr	r3, [pc, #352]	@ (10001528 <main+0x348>)
100013c6:	fba3 1302 	umull	r1, r3, r3, r2
100013ca:	099b      	lsrs	r3, r3, #6
100013cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
100013d0:	fb01 f303 	mul.w	r3, r1, r3
100013d4:	1ad3      	subs	r3, r2, r3
100013d6:	461a      	mov	r2, r3
100013d8:	4621      	mov	r1, r4
100013da:	485f      	ldr	r0, [pc, #380]	@ (10001558 <main+0x378>)
100013dc:	f00c fc18 	bl	1000dc10 <iprintf>
    Error_Handler();
100013e0:	f000 fd0d 	bl	10001dfe <Error_Handler>
  }

  log_info("Virtual UART1 OpenAMP-rpmsg channel creation\r\n");
100013e4:	f002 ffec 	bl	100043c0 <HAL_GetTick>
100013e8:	4603      	mov	r3, r0
100013ea:	4a4f      	ldr	r2, [pc, #316]	@ (10001528 <main+0x348>)
100013ec:	fba2 2303 	umull	r2, r3, r2, r3
100013f0:	099b      	lsrs	r3, r3, #6
100013f2:	461c      	mov	r4, r3
100013f4:	f002 ffe4 	bl	100043c0 <HAL_GetTick>
100013f8:	4602      	mov	r2, r0
100013fa:	4b4b      	ldr	r3, [pc, #300]	@ (10001528 <main+0x348>)
100013fc:	fba3 1302 	umull	r1, r3, r3, r2
10001400:	099b      	lsrs	r3, r3, #6
10001402:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10001406:	fb01 f303 	mul.w	r3, r1, r3
1000140a:	1ad3      	subs	r3, r2, r3
1000140c:	461a      	mov	r2, r3
1000140e:	4621      	mov	r1, r4
10001410:	484f      	ldr	r0, [pc, #316]	@ (10001550 <main+0x370>)
10001412:	f00c fbfd 	bl	1000dc10 <iprintf>
  if (VIRT_UART_Init(&huart2) != VIRT_UART_OK) {
10001416:	4851      	ldr	r0, [pc, #324]	@ (1000155c <main+0x37c>)
10001418:	f00b fb92 	bl	1000cb40 <VIRT_UART_Init>
1000141c:	4603      	mov	r3, r0
1000141e:	2b00      	cmp	r3, #0
10001420:	d01a      	beq.n	10001458 <main+0x278>
    log_err("VIRT_UART_Init UART1 failed.\r\n");
10001422:	f002 ffcd 	bl	100043c0 <HAL_GetTick>
10001426:	4603      	mov	r3, r0
10001428:	4a3f      	ldr	r2, [pc, #252]	@ (10001528 <main+0x348>)
1000142a:	fba2 2303 	umull	r2, r3, r2, r3
1000142e:	099b      	lsrs	r3, r3, #6
10001430:	461c      	mov	r4, r3
10001432:	f002 ffc5 	bl	100043c0 <HAL_GetTick>
10001436:	4602      	mov	r2, r0
10001438:	4b3b      	ldr	r3, [pc, #236]	@ (10001528 <main+0x348>)
1000143a:	fba3 1302 	umull	r1, r3, r3, r2
1000143e:	099b      	lsrs	r3, r3, #6
10001440:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10001444:	fb01 f303 	mul.w	r3, r1, r3
10001448:	1ad3      	subs	r3, r2, r3
1000144a:	461a      	mov	r2, r3
1000144c:	4621      	mov	r1, r4
1000144e:	4842      	ldr	r0, [pc, #264]	@ (10001558 <main+0x378>)
10001450:	f00c fbde 	bl	1000dc10 <iprintf>
    Error_Handler();
10001454:	f000 fcd3 	bl	10001dfe <Error_Handler>
  }

  /*Need to register callback for message reception by channels*/
  if(VIRT_UART_RegisterCallback(&huart0, VIRT_UART_RXCPLT_CB_ID, VIRT_UART0_RxCpltCallback) != VIRT_UART_OK)
10001458:	4a41      	ldr	r2, [pc, #260]	@ (10001560 <main+0x380>)
1000145a:	2100      	movs	r1, #0
1000145c:	483a      	ldr	r0, [pc, #232]	@ (10001548 <main+0x368>)
1000145e:	f00b fb8b 	bl	1000cb78 <VIRT_UART_RegisterCallback>
10001462:	4603      	mov	r3, r0
10001464:	2b00      	cmp	r3, #0
10001466:	d001      	beq.n	1000146c <main+0x28c>
  {
   Error_Handler();
10001468:	f000 fcc9 	bl	10001dfe <Error_Handler>
  }
  if(VIRT_UART_RegisterCallback(&huart1, VIRT_UART_RXCPLT_CB_ID, VIRT_UART1_RxCpltCallback) != VIRT_UART_OK)
1000146c:	4a3d      	ldr	r2, [pc, #244]	@ (10001564 <main+0x384>)
1000146e:	2100      	movs	r1, #0
10001470:	4838      	ldr	r0, [pc, #224]	@ (10001554 <main+0x374>)
10001472:	f00b fb81 	bl	1000cb78 <VIRT_UART_RegisterCallback>
10001476:	4603      	mov	r3, r0
10001478:	2b00      	cmp	r3, #0
1000147a:	d001      	beq.n	10001480 <main+0x2a0>
  {
    Error_Handler();
1000147c:	f000 fcbf 	bl	10001dfe <Error_Handler>
  }
  if(VIRT_UART_RegisterCallback(&huart2, VIRT_UART_RXCPLT_CB_ID, VIRT_UART1_RxCpltCallback) != VIRT_UART_OK)
10001480:	4a38      	ldr	r2, [pc, #224]	@ (10001564 <main+0x384>)
10001482:	2100      	movs	r1, #0
10001484:	4835      	ldr	r0, [pc, #212]	@ (1000155c <main+0x37c>)
10001486:	f00b fb77 	bl	1000cb78 <VIRT_UART_RegisterCallback>
1000148a:	4603      	mov	r3, r0
1000148c:	2b00      	cmp	r3, #0
1000148e:	d001      	beq.n	10001494 <main+0x2b4>
  {
    Error_Handler();
10001490:	f000 fcb5 	bl	10001dfe <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    /* Forced mode setting, switched to SLEEP mode after measurement */
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
10001494:	4926      	ldr	r1, [pc, #152]	@ (10001530 <main+0x350>)
10001496:	2001      	movs	r0, #1
10001498:	f001 fa55 	bl	10002946 <bme280_set_sensor_mode>
1000149c:	4603      	mov	r3, r0
1000149e:	461a      	mov	r2, r3
100014a0:	4b27      	ldr	r3, [pc, #156]	@ (10001540 <main+0x360>)
100014a2:	701a      	strb	r2, [r3, #0]
	  dev.delay_ms(40);
100014a4:	4b22      	ldr	r3, [pc, #136]	@ (10001530 <main+0x350>)
100014a6:	68db      	ldr	r3, [r3, #12]
100014a8:	2028      	movs	r0, #40	@ 0x28
100014aa:	4798      	blx	r3

	  /*Get Data */
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
100014ac:	4a20      	ldr	r2, [pc, #128]	@ (10001530 <main+0x350>)
100014ae:	492e      	ldr	r1, [pc, #184]	@ (10001568 <main+0x388>)
100014b0:	2007      	movs	r0, #7
100014b2:	f001 fac4 	bl	10002a3e <bme280_get_sensor_data>
100014b6:	4603      	mov	r3, r0
100014b8:	461a      	mov	r2, r3
100014ba:	4b21      	ldr	r3, [pc, #132]	@ (10001540 <main+0x360>)
100014bc:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK)
100014be:	4b20      	ldr	r3, [pc, #128]	@ (10001540 <main+0x360>)
100014c0:	f993 3000 	ldrsb.w	r3, [r3]
100014c4:	2b00      	cmp	r3, #0
100014c6:	f040 810b 	bne.w	100016e0 <main+0x500>
	  {
		  temperature = comp_data.temperature / 100.0;
100014ca:	4b27      	ldr	r3, [pc, #156]	@ (10001568 <main+0x388>)
100014cc:	685b      	ldr	r3, [r3, #4]
100014ce:	4618      	mov	r0, r3
100014d0:	f7fe ff70 	bl	100003b4 <__aeabi_i2d>
100014d4:	f04f 0200 	mov.w	r2, #0
100014d8:	4b24      	ldr	r3, [pc, #144]	@ (1000156c <main+0x38c>)
100014da:	f7ff f8ff 	bl	100006dc <__aeabi_ddiv>
100014de:	4602      	mov	r2, r0
100014e0:	460b      	mov	r3, r1
100014e2:	4610      	mov	r0, r2
100014e4:	4619      	mov	r1, r3
100014e6:	f7ff fac7 	bl	10000a78 <__aeabi_d2f>
100014ea:	4603      	mov	r3, r0
100014ec:	4a20      	ldr	r2, [pc, #128]	@ (10001570 <main+0x390>)
100014ee:	6013      	str	r3, [r2, #0]
	  	  humidity = comp_data.humidity / 1024.0;
100014f0:	4b1d      	ldr	r3, [pc, #116]	@ (10001568 <main+0x388>)
100014f2:	689b      	ldr	r3, [r3, #8]
100014f4:	4618      	mov	r0, r3
100014f6:	f7fe ff4d 	bl	10000394 <__aeabi_ui2d>
100014fa:	f04f 0200 	mov.w	r2, #0
100014fe:	4b1d      	ldr	r3, [pc, #116]	@ (10001574 <main+0x394>)
10001500:	f7ff f8ec 	bl	100006dc <__aeabi_ddiv>
10001504:	4602      	mov	r2, r0
10001506:	460b      	mov	r3, r1
10001508:	4610      	mov	r0, r2
1000150a:	4619      	mov	r1, r3
1000150c:	f7ff fab4 	bl	10000a78 <__aeabi_d2f>
10001510:	4603      	mov	r3, r0
10001512:	4a19      	ldr	r2, [pc, #100]	@ (10001578 <main+0x398>)
10001514:	6013      	str	r3, [r2, #0]
	  	  pressure = comp_data.pressure / 10000.0;
10001516:	4b14      	ldr	r3, [pc, #80]	@ (10001568 <main+0x388>)
10001518:	681b      	ldr	r3, [r3, #0]
1000151a:	4618      	mov	r0, r3
1000151c:	f7fe ff3a 	bl	10000394 <__aeabi_ui2d>
10001520:	e02c      	b.n	1000157c <main+0x39c>
10001522:	bf00      	nop
10001524:	50020000 	.word	0x50020000
10001528:	10624dd3 	.word	0x10624dd3
1000152c:	10011400 	.word	0x10011400
10001530:	100208ec 	.word	0x100208ec
10001534:	10001129 	.word	0x10001129
10001538:	10001191 	.word	0x10001191
1000153c:	10001179 	.word	0x10001179
10001540:	10020938 	.word	0x10020938
10001544:	1001145c 	.word	0x1001145c
10001548:	100203e4 	.word	0x100203e4
1000154c:	100114a0 	.word	0x100114a0
10001550:	100114d4 	.word	0x100114d4
10001554:	10020434 	.word	0x10020434
10001558:	10011518 	.word	0x10011518
1000155c:	10020484 	.word	0x10020484
10001560:	10001b3d 	.word	0x10001b3d
10001564:	10001bc5 	.word	0x10001bc5
10001568:	1002092c 	.word	0x1002092c
1000156c:	40590000 	.word	0x40590000
10001570:	100208e0 	.word	0x100208e0
10001574:	40900000 	.word	0x40900000
10001578:	100208e4 	.word	0x100208e4
1000157c:	a36a      	add	r3, pc, #424	@ (adr r3, 10001728 <main+0x548>)
1000157e:	e9d3 2300 	ldrd	r2, r3, [r3]
10001582:	f7ff f8ab 	bl	100006dc <__aeabi_ddiv>
10001586:	4602      	mov	r2, r0
10001588:	460b      	mov	r3, r1
1000158a:	4610      	mov	r0, r2
1000158c:	4619      	mov	r1, r3
1000158e:	f7ff fa73 	bl	10000a78 <__aeabi_d2f>
10001592:	4603      	mov	r3, r0
10001594:	4a56      	ldr	r2, [pc, #344]	@ (100016f0 <main+0x510>)
10001596:	6013      	str	r3, [r2, #0]
	  	  char press[32];


	  	  /*Display Data */

	  	  memset(hum_string, 0, sizeof(hum_string));
10001598:	2232      	movs	r2, #50	@ 0x32
1000159a:	2100      	movs	r1, #0
1000159c:	4855      	ldr	r0, [pc, #340]	@ (100016f4 <main+0x514>)
1000159e:	f00c fbfe 	bl	1000dd9e <memset>
	  	  memset(temp_string, 0, sizeof(temp_string));
100015a2:	2232      	movs	r2, #50	@ 0x32
100015a4:	2100      	movs	r1, #0
100015a6:	4854      	ldr	r0, [pc, #336]	@ (100016f8 <main+0x518>)
100015a8:	f00c fbf9 	bl	1000dd9e <memset>
	  	  memset(press_string, 0, sizeof(press_string));
100015ac:	2232      	movs	r2, #50	@ 0x32
100015ae:	2100      	movs	r1, #0
100015b0:	4852      	ldr	r0, [pc, #328]	@ (100016fc <main+0x51c>)
100015b2:	f00c fbf4 	bl	1000dd9e <memset>

	  	  sprintf(hum_string, "Humidity %03.1f %% ", humidity);
100015b6:	4b52      	ldr	r3, [pc, #328]	@ (10001700 <main+0x520>)
100015b8:	681b      	ldr	r3, [r3, #0]
100015ba:	4618      	mov	r0, r3
100015bc:	f7fe ff0c 	bl	100003d8 <__aeabi_f2d>
100015c0:	4602      	mov	r2, r0
100015c2:	460b      	mov	r3, r1
100015c4:	494f      	ldr	r1, [pc, #316]	@ (10001704 <main+0x524>)
100015c6:	484b      	ldr	r0, [pc, #300]	@ (100016f4 <main+0x514>)
100015c8:	f00c fb6a 	bl	1000dca0 <siprintf>
	  	  sprintf(temp_string, "Temperature %03.1f C ", temperature);
100015cc:	4b4e      	ldr	r3, [pc, #312]	@ (10001708 <main+0x528>)
100015ce:	681b      	ldr	r3, [r3, #0]
100015d0:	4618      	mov	r0, r3
100015d2:	f7fe ff01 	bl	100003d8 <__aeabi_f2d>
100015d6:	4602      	mov	r2, r0
100015d8:	460b      	mov	r3, r1
100015da:	494c      	ldr	r1, [pc, #304]	@ (1000170c <main+0x52c>)
100015dc:	4846      	ldr	r0, [pc, #280]	@ (100016f8 <main+0x518>)
100015de:	f00c fb5f 	bl	1000dca0 <siprintf>
	  	  sprintf(press_string, "Pressure %03.1f hPa ", pressure);
100015e2:	4b43      	ldr	r3, [pc, #268]	@ (100016f0 <main+0x510>)
100015e4:	681b      	ldr	r3, [r3, #0]
100015e6:	4618      	mov	r0, r3
100015e8:	f7fe fef6 	bl	100003d8 <__aeabi_f2d>
100015ec:	4602      	mov	r2, r0
100015ee:	460b      	mov	r3, r1
100015f0:	4947      	ldr	r1, [pc, #284]	@ (10001710 <main+0x530>)
100015f2:	4842      	ldr	r0, [pc, #264]	@ (100016fc <main+0x51c>)
100015f4:	f00c fb54 	bl	1000dca0 <siprintf>

	  	  snprintf(temp, sizeof(temp), "%.2f\n", temperature);
100015f8:	4b43      	ldr	r3, [pc, #268]	@ (10001708 <main+0x528>)
100015fa:	681b      	ldr	r3, [r3, #0]
100015fc:	4618      	mov	r0, r3
100015fe:	f7fe feeb 	bl	100003d8 <__aeabi_f2d>
10001602:	4602      	mov	r2, r0
10001604:	460b      	mov	r3, r1
10001606:	1d38      	adds	r0, r7, #4
10001608:	e9cd 2300 	strd	r2, r3, [sp]
1000160c:	4a41      	ldr	r2, [pc, #260]	@ (10001714 <main+0x534>)
1000160e:	2120      	movs	r1, #32
10001610:	f00c fb10 	bl	1000dc34 <sniprintf>
	  	  snprintf(hum, sizeof(hum), "%.2f\n", humidity);
10001614:	4b3a      	ldr	r3, [pc, #232]	@ (10001700 <main+0x520>)
10001616:	681b      	ldr	r3, [r3, #0]
10001618:	4618      	mov	r0, r3
1000161a:	f7fe fedd 	bl	100003d8 <__aeabi_f2d>
1000161e:	4602      	mov	r2, r0
10001620:	460b      	mov	r3, r1
10001622:	f107 0024 	add.w	r0, r7, #36	@ 0x24
10001626:	e9cd 2300 	strd	r2, r3, [sp]
1000162a:	4a3a      	ldr	r2, [pc, #232]	@ (10001714 <main+0x534>)
1000162c:	2120      	movs	r1, #32
1000162e:	f00c fb01 	bl	1000dc34 <sniprintf>
	  	  snprintf(press, sizeof(press), "%.2f\n", pressure);
10001632:	4b2f      	ldr	r3, [pc, #188]	@ (100016f0 <main+0x510>)
10001634:	681b      	ldr	r3, [r3, #0]
10001636:	4618      	mov	r0, r3
10001638:	f7fe fece 	bl	100003d8 <__aeabi_f2d>
1000163c:	4602      	mov	r2, r0
1000163e:	460b      	mov	r3, r1
10001640:	f107 0044 	add.w	r0, r7, #68	@ 0x44
10001644:	e9cd 2300 	strd	r2, r3, [sp]
10001648:	4a32      	ldr	r2, [pc, #200]	@ (10001714 <main+0x534>)
1000164a:	2120      	movs	r1, #32
1000164c:	f00c faf2 	bl	1000dc34 <sniprintf>

	  	  ssd1306_SetCursor (0, 0);
10001650:	2100      	movs	r1, #0
10001652:	2000      	movs	r0, #0
10001654:	f002 fe06 	bl	10004264 <ssd1306_SetCursor>
	  	  ssd1306_WriteString (hum_string, Font_7x10, White);
10001658:	4b2f      	ldr	r3, [pc, #188]	@ (10001718 <main+0x538>)
1000165a:	2201      	movs	r2, #1
1000165c:	9200      	str	r2, [sp, #0]
1000165e:	cb0e      	ldmia	r3, {r1, r2, r3}
10001660:	4824      	ldr	r0, [pc, #144]	@ (100016f4 <main+0x514>)
10001662:	f002 fdd9 	bl	10004218 <ssd1306_WriteString>
	  	  ssd1306_SetCursor (0, 20);
10001666:	2114      	movs	r1, #20
10001668:	2000      	movs	r0, #0
1000166a:	f002 fdfb 	bl	10004264 <ssd1306_SetCursor>
	  	  ssd1306_WriteString (temp_string, Font_7x10, White);
1000166e:	4b2a      	ldr	r3, [pc, #168]	@ (10001718 <main+0x538>)
10001670:	2201      	movs	r2, #1
10001672:	9200      	str	r2, [sp, #0]
10001674:	cb0e      	ldmia	r3, {r1, r2, r3}
10001676:	4820      	ldr	r0, [pc, #128]	@ (100016f8 <main+0x518>)
10001678:	f002 fdce 	bl	10004218 <ssd1306_WriteString>
	  	  ssd1306_SetCursor (0, 40);
1000167c:	2128      	movs	r1, #40	@ 0x28
1000167e:	2000      	movs	r0, #0
10001680:	f002 fdf0 	bl	10004264 <ssd1306_SetCursor>
	  	  ssd1306_WriteString (press_string, Font_7x10, White);
10001684:	4b24      	ldr	r3, [pc, #144]	@ (10001718 <main+0x538>)
10001686:	2201      	movs	r2, #1
10001688:	9200      	str	r2, [sp, #0]
1000168a:	cb0e      	ldmia	r3, {r1, r2, r3}
1000168c:	481b      	ldr	r0, [pc, #108]	@ (100016fc <main+0x51c>)
1000168e:	f002 fdc3 	bl	10004218 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
10001692:	f002 fcb3 	bl	10003ffc <ssd1306_UpdateScreen>


	  	VIRT_UART_Transmit(&huart0, (uint8_t *)temp, strlen(temp));
10001696:	1d3b      	adds	r3, r7, #4
10001698:	4618      	mov	r0, r3
1000169a:	f7fe fd31 	bl	10000100 <strlen>
1000169e:	4603      	mov	r3, r0
100016a0:	b29a      	uxth	r2, r3
100016a2:	1d3b      	adds	r3, r7, #4
100016a4:	4619      	mov	r1, r3
100016a6:	481d      	ldr	r0, [pc, #116]	@ (1000171c <main+0x53c>)
100016a8:	f00b fa80 	bl	1000cbac <VIRT_UART_Transmit>
	  	VIRT_UART_Transmit(&huart1, (uint8_t *)hum, strlen(hum));
100016ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
100016b0:	4618      	mov	r0, r3
100016b2:	f7fe fd25 	bl	10000100 <strlen>
100016b6:	4603      	mov	r3, r0
100016b8:	b29a      	uxth	r2, r3
100016ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
100016be:	4619      	mov	r1, r3
100016c0:	4817      	ldr	r0, [pc, #92]	@ (10001720 <main+0x540>)
100016c2:	f00b fa73 	bl	1000cbac <VIRT_UART_Transmit>
	  	VIRT_UART_Transmit(&huart2, (uint8_t *)press, strlen(press));
100016c6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
100016ca:	4618      	mov	r0, r3
100016cc:	f7fe fd18 	bl	10000100 <strlen>
100016d0:	4603      	mov	r3, r0
100016d2:	b29a      	uxth	r2, r3
100016d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
100016d8:	4619      	mov	r1, r3
100016da:	4812      	ldr	r0, [pc, #72]	@ (10001724 <main+0x544>)
100016dc:	f00b fa66 	bl	1000cbac <VIRT_UART_Transmit>
	  }

	  HAL_Delay(1000);
100016e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
100016e4:	f002 fe78 	bl	100043d8 <HAL_Delay>

	  OPENAMP_check_for_message();
100016e8:	f000 fe14 	bl	10002314 <OPENAMP_check_for_message>
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
100016ec:	e6d2      	b.n	10001494 <main+0x2b4>
100016ee:	bf00      	nop
100016f0:	100208e8 	.word	0x100208e8
100016f4:	1002093c 	.word	0x1002093c
100016f8:	10020970 	.word	0x10020970
100016fc:	100209a4 	.word	0x100209a4
10001700:	100208e4 	.word	0x100208e4
10001704:	1001154c 	.word	0x1001154c
10001708:	100208e0 	.word	0x100208e0
1000170c:	10011560 	.word	0x10011560
10001710:	10011578 	.word	0x10011578
10001714:	10011590 	.word	0x10011590
10001718:	10012158 	.word	0x10012158
1000171c:	100203e4 	.word	0x100203e4
10001720:	10020434 	.word	0x10020434
10001724:	10020484 	.word	0x10020484
10001728:	00000000 	.word	0x00000000
1000172c:	40c38800 	.word	0x40c38800

10001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10001730:	b580      	push	{r7, lr}
10001732:	b0d2      	sub	sp, #328	@ 0x148
10001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10001736:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000173a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000173e:	4618      	mov	r0, r3
10001740:	f44f 738a 	mov.w	r3, #276	@ 0x114
10001744:	461a      	mov	r2, r3
10001746:	2100      	movs	r1, #0
10001748:	f00c fb29 	bl	1000dd9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
1000174c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001750:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001754:	4618      	mov	r0, r3
10001756:	2330      	movs	r3, #48	@ 0x30
10001758:	461a      	mov	r2, r3
1000175a:	2100      	movs	r1, #0
1000175c:	f00c fb1f 	bl	1000dd9e <memset>

  /**Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
10001760:	f005 f888 	bl	10006874 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
10001764:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001768:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000176c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
10001770:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001774:	f043 0320 	orr.w	r3, r3, #32
10001778:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
1000177c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001780:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001784:	2207      	movs	r2, #7
10001786:	601a      	str	r2, [r3, #0]
                |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10001788:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000178c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001790:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
10001794:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10001796:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000179a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000179e:	2201      	movs	r2, #1
100017a0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
100017a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100017a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100017aa:	2201      	movs	r2, #1
100017ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
100017ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100017b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100017b6:	2210      	movs	r2, #16
100017b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
100017ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100017be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100017c2:	2200      	movs	r2, #0
100017c4:	615a      	str	r2, [r3, #20]

  /**PLL1 Config
  */
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
100017c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100017ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100017ce:	2202      	movs	r2, #2
100017d0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL12SOURCE_HSE;
100017d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100017d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100017da:	2201      	movs	r2, #1
100017dc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 3;
100017de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100017e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100017e6:	2203      	movs	r2, #3
100017e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 81;
100017ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100017ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100017f2:	2251      	movs	r2, #81	@ 0x51
100017f4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = 1;
100017f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100017fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100017fe:	2201      	movs	r2, #1
10001800:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 1;
10001802:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001806:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000180a:	2201      	movs	r2, #1
1000180c:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 1;
1000180e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001812:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001816:	2201      	movs	r2, #1
10001818:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLFRACV = 0x800;
1000181a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000181e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001822:	f44f 6200 	mov.w	r2, #2048	@ 0x800
10001826:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMODE = RCC_PLL_FRACTIONAL;
10001828:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000182c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001830:	2201      	movs	r2, #1
10001832:	649a      	str	r2, [r3, #72]	@ 0x48
  RCC_OscInitStruct.PLL.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
10001834:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001838:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000183c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
10001840:	651a      	str	r2, [r3, #80]	@ 0x50
  RCC_OscInitStruct.PLL.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
10001842:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001846:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000184a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
1000184e:	655a      	str	r2, [r3, #84]	@ 0x54

    /**PLL2 Config
    */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10001850:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001854:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001858:	2202      	movs	r2, #2
1000185a:	661a      	str	r2, [r3, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
1000185c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001860:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001864:	2201      	movs	r2, #1
10001866:	665a      	str	r2, [r3, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10001868:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000186c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001870:	2203      	movs	r2, #3
10001872:	669a      	str	r2, [r3, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10001874:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001878:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000187c:	2242      	movs	r2, #66	@ 0x42
1000187e:	66da      	str	r2, [r3, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
10001880:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001884:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001888:	2202      	movs	r2, #2
1000188a:	671a      	str	r2, [r3, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
1000188c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001890:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001894:	2201      	movs	r2, #1
10001896:	675a      	str	r2, [r3, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10001898:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000189c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100018a0:	2201      	movs	r2, #1
100018a2:	679a      	str	r2, [r3, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
100018a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100018a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100018ac:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
100018b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
100018b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100018b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100018bc:	2201      	movs	r2, #1
100018be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
100018c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100018c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100018ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
100018ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  RCC_OscInitStruct.PLL2.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
100018d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100018d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100018da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
100018de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /**PLL3 Config
    */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
100018e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100018e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100018ea:	2202      	movs	r2, #2
100018ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
100018f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100018f4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100018f8:	2201      	movs	r2, #1
100018fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
100018fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001902:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001906:	2202      	movs	r2, #2
10001908:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
1000190c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001910:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001914:	2222      	movs	r2, #34	@ 0x22
10001916:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
1000191a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000191e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001922:	2202      	movs	r2, #2
10001924:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
10001928:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000192c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001930:	2211      	movs	r2, #17
10001932:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
10001936:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
1000193a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000193e:	2225      	movs	r2, #37	@ 0x25
10001940:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10001944:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001948:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000194c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
10001950:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 0x1A04;
10001954:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001958:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000195c:	f641 2204 	movw	r2, #6660	@ 0x1a04
10001960:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10001964:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001968:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000196c:	2201      	movs	r2, #1
1000196e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  RCC_OscInitStruct.PLL3.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
10001972:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001976:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000197a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
1000197e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  RCC_OscInitStruct.PLL3.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
10001982:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001986:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000198a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
1000198e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

    /**PLL4 Config
    */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
10001992:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001996:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
1000199a:	2202      	movs	r2, #2
1000199c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
100019a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100019a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100019a8:	2201      	movs	r2, #1
100019aa:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  RCC_OscInitStruct.PLL4.PLLM = 4;
100019ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100019b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100019b6:	2204      	movs	r2, #4
100019b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC_OscInitStruct.PLL4.PLLN = 99;
100019bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100019c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100019c4:	2263      	movs	r2, #99	@ 0x63
100019c6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  RCC_OscInitStruct.PLL4.PLLP = 6;
100019ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100019ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100019d2:	2206      	movs	r2, #6
100019d4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  RCC_OscInitStruct.PLL4.PLLQ = 8;
100019d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100019dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100019e0:	2208      	movs	r2, #8
100019e2:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  RCC_OscInitStruct.PLL4.PLLR = 8;
100019e6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100019ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100019ee:	2208      	movs	r2, #8
100019f0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
100019f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
100019f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
100019fc:	2200      	movs	r2, #0
100019fe:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
10001a02:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001a06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001a0a:	2200      	movs	r2, #0
10001a0c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
10001a10:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001a14:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001a18:	2200      	movs	r2, #0
10001a1a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  RCC_OscInitStruct.PLL4.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
10001a1e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001a22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001a26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
10001a2a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  RCC_OscInitStruct.PLL4.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
10001a2e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001a32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
10001a36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
10001a3a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10001a3e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
10001a42:	4618      	mov	r0, r3
10001a44:	f005 f96a 	bl	10006d1c <HAL_RCC_OscConfig>
10001a48:	4603      	mov	r3, r0
10001a4a:	2b00      	cmp	r3, #0
10001a4c:	d001      	beq.n	10001a52 <SystemClock_Config+0x322>
  {
  Error_Handler();
10001a4e:	f000 f9d6 	bl	10001dfe <Error_Handler>
  }
  /**RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10001a52:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001a56:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001a5a:	22ff      	movs	r2, #255	@ 0xff
10001a5c:	601a      	str	r2, [r3, #0]
                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                |RCC_CLOCKTYPE_PCLK5|RCC_CLOCKTYPE_MPU;
  RCC_ClkInitStruct.MPUInit.MPU_Clock = RCC_MPUSOURCE_PLL1;
10001a5e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001a62:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001a66:	2202      	movs	r2, #2
10001a68:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.MPUInit.MPU_Div = RCC_MPU_DIV2;
10001a6a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001a6e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001a72:	2201      	movs	r2, #1
10001a74:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
10001a76:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001a7a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001a7e:	2202      	movs	r2, #2
10001a80:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10001a82:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001a86:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001a8a:	2200      	movs	r2, #0
10001a8c:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10001a8e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001a92:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001a96:	2203      	movs	r2, #3
10001a98:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10001a9a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001a9e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001aa2:	2200      	movs	r2, #0
10001aa4:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10001aa6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001aaa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001aae:	2201      	movs	r2, #1
10001ab0:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
10001ab2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001ab6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001aba:	2202      	movs	r2, #2
10001abc:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10001abe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001ac2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001ac6:	2201      	movs	r2, #1
10001ac8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10001aca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001ace:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001ad2:	2201      	movs	r2, #1
10001ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10001ad6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
10001ada:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
10001ade:	2201      	movs	r2, #1
10001ae0:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10001ae2:	1d3b      	adds	r3, r7, #4
10001ae4:	4618      	mov	r0, r3
10001ae6:	f005 feb7 	bl	10007858 <HAL_RCC_ClockConfig>
10001aea:	4603      	mov	r3, r0
10001aec:	2b00      	cmp	r3, #0
10001aee:	d001      	beq.n	10001af4 <SystemClock_Config+0x3c4>
  {
  Error_Handler();
10001af0:	f000 f985 	bl	10001dfe <Error_Handler>
  }

  /**Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
10001af4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10001afa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
10001afe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10001b02:	f043 0317 	orr.w	r3, r3, #23
10001b06:	6453      	str	r3, [r2, #68]	@ 0x44
}
10001b08:	bf00      	nop
10001b0a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
10001b0e:	46bd      	mov	sp, r7
10001b10:	bd80      	pop	{r7, pc}
	...

10001b14 <MX_IPCC_Init>:
  * @brief IPPC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
10001b14:	b580      	push	{r7, lr}
10001b16:	af00      	add	r7, sp, #0

  hipcc.Instance = IPCC;
10001b18:	4b06      	ldr	r3, [pc, #24]	@ (10001b34 <MX_IPCC_Init+0x20>)
10001b1a:	4a07      	ldr	r2, [pc, #28]	@ (10001b38 <MX_IPCC_Init+0x24>)
10001b1c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
10001b1e:	4805      	ldr	r0, [pc, #20]	@ (10001b34 <MX_IPCC_Init+0x20>)
10001b20:	f004 fce0 	bl	100064e4 <HAL_IPCC_Init>
10001b24:	4603      	mov	r3, r0
10001b26:	2b00      	cmp	r3, #0
10001b28:	d001      	beq.n	10001b2e <MX_IPCC_Init+0x1a>
  {
     Error_Handler();
10001b2a:	f000 f968 	bl	10001dfe <Error_Handler>
  }
}
10001b2e:	bf00      	nop
10001b30:	bd80      	pop	{r7, pc}
10001b32:	bf00      	nop
10001b34:	10020398 	.word	0x10020398
10001b38:	4c001000 	.word	0x4c001000

10001b3c <VIRT_UART0_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void VIRT_UART0_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
10001b3c:	b590      	push	{r4, r7, lr}
10001b3e:	b083      	sub	sp, #12
10001b40:	af00      	add	r7, sp, #0
10001b42:	6078      	str	r0, [r7, #4]
//	}

	//commandInit = 1;


    log_info("Msg received on VIRTUAL UART0 channel:  %s \n\r", (char *) huart->pRxBuffPtr);
10001b44:	f002 fc3c 	bl	100043c0 <HAL_GetTick>
10001b48:	4603      	mov	r3, r0
10001b4a:	4a19      	ldr	r2, [pc, #100]	@ (10001bb0 <VIRT_UART0_RxCpltCallback+0x74>)
10001b4c:	fba2 2303 	umull	r2, r3, r2, r3
10001b50:	099b      	lsrs	r3, r3, #6
10001b52:	461c      	mov	r4, r3
10001b54:	f002 fc34 	bl	100043c0 <HAL_GetTick>
10001b58:	4602      	mov	r2, r0
10001b5a:	4b15      	ldr	r3, [pc, #84]	@ (10001bb0 <VIRT_UART0_RxCpltCallback+0x74>)
10001b5c:	fba3 1302 	umull	r1, r3, r3, r2
10001b60:	099b      	lsrs	r3, r3, #6
10001b62:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10001b66:	fb01 f303 	mul.w	r3, r1, r3
10001b6a:	1ad3      	subs	r3, r2, r3
10001b6c:	461a      	mov	r2, r3
10001b6e:	687b      	ldr	r3, [r7, #4]
10001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10001b72:	4621      	mov	r1, r4
10001b74:	480f      	ldr	r0, [pc, #60]	@ (10001bb4 <VIRT_UART0_RxCpltCallback+0x78>)
10001b76:	f00c f84b 	bl	1000dc10 <iprintf>

    /* copy received msg in a variable to sent it back to master processor in main infinite loop*/
    VirtUart0ChannelRxSize = huart->RxXferSize < MAX_BUFFER_SIZE? huart->RxXferSize : MAX_BUFFER_SIZE-1;
10001b7a:	687b      	ldr	r3, [r7, #4]
10001b7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
10001b80:	f240 12ff 	movw	r2, #511	@ 0x1ff
10001b84:	4293      	cmp	r3, r2
10001b86:	bf28      	it	cs
10001b88:	4613      	movcs	r3, r2
10001b8a:	b29a      	uxth	r2, r3
10001b8c:	4b0a      	ldr	r3, [pc, #40]	@ (10001bb8 <VIRT_UART0_RxCpltCallback+0x7c>)
10001b8e:	801a      	strh	r2, [r3, #0]
    memcpy(VirtUart0ChannelBuffRx, huart->pRxBuffPtr, VirtUart0ChannelRxSize);
10001b90:	687b      	ldr	r3, [r7, #4]
10001b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10001b94:	4a08      	ldr	r2, [pc, #32]	@ (10001bb8 <VIRT_UART0_RxCpltCallback+0x7c>)
10001b96:	8812      	ldrh	r2, [r2, #0]
10001b98:	4619      	mov	r1, r3
10001b9a:	4808      	ldr	r0, [pc, #32]	@ (10001bbc <VIRT_UART0_RxCpltCallback+0x80>)
10001b9c:	f00c f9b3 	bl	1000df06 <memcpy>
    VirtUart0RxMsg = SET;
10001ba0:	4b07      	ldr	r3, [pc, #28]	@ (10001bc0 <VIRT_UART0_RxCpltCallback+0x84>)
10001ba2:	2201      	movs	r2, #1
10001ba4:	701a      	strb	r2, [r3, #0]
}
10001ba6:	bf00      	nop
10001ba8:	370c      	adds	r7, #12
10001baa:	46bd      	mov	sp, r7
10001bac:	bd90      	pop	{r4, r7, pc}
10001bae:	bf00      	nop
10001bb0:	10624dd3 	.word	0x10624dd3
10001bb4:	10011598 	.word	0x10011598
10001bb8:	100206d8 	.word	0x100206d8
10001bbc:	100204d8 	.word	0x100204d8
10001bc0:	100204d4 	.word	0x100204d4

10001bc4 <VIRT_UART1_RxCpltCallback>:

void VIRT_UART1_RxCpltCallback(VIRT_UART_HandleTypeDef *huart)
{
10001bc4:	b590      	push	{r4, r7, lr}
10001bc6:	b083      	sub	sp, #12
10001bc8:	af00      	add	r7, sp, #0
10001bca:	6078      	str	r0, [r7, #4]
	ssd1306_Clear();
10001bcc:	f002 fa0c 	bl	10003fe8 <ssd1306_Clear>
	HAL_Delay(1000);
10001bd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10001bd4:	f002 fc00 	bl	100043d8 <HAL_Delay>
    log_info("Msg received on VIRTUAL UART1 channel:  %s \n\r", (char *) huart->pRxBuffPtr);
10001bd8:	f002 fbf2 	bl	100043c0 <HAL_GetTick>
10001bdc:	4603      	mov	r3, r0
10001bde:	4a19      	ldr	r2, [pc, #100]	@ (10001c44 <VIRT_UART1_RxCpltCallback+0x80>)
10001be0:	fba2 2303 	umull	r2, r3, r2, r3
10001be4:	099b      	lsrs	r3, r3, #6
10001be6:	461c      	mov	r4, r3
10001be8:	f002 fbea 	bl	100043c0 <HAL_GetTick>
10001bec:	4602      	mov	r2, r0
10001bee:	4b15      	ldr	r3, [pc, #84]	@ (10001c44 <VIRT_UART1_RxCpltCallback+0x80>)
10001bf0:	fba3 1302 	umull	r1, r3, r3, r2
10001bf4:	099b      	lsrs	r3, r3, #6
10001bf6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10001bfa:	fb01 f303 	mul.w	r3, r1, r3
10001bfe:	1ad3      	subs	r3, r2, r3
10001c00:	461a      	mov	r2, r3
10001c02:	687b      	ldr	r3, [r7, #4]
10001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10001c06:	4621      	mov	r1, r4
10001c08:	480f      	ldr	r0, [pc, #60]	@ (10001c48 <VIRT_UART1_RxCpltCallback+0x84>)
10001c0a:	f00c f801 	bl	1000dc10 <iprintf>

    /* copy received msg in a variable to sent it back to master processor in main infinite loop*/
    VirtUart1ChannelRxSize = huart->RxXferSize < MAX_BUFFER_SIZE? huart->RxXferSize : MAX_BUFFER_SIZE-1;
10001c0e:	687b      	ldr	r3, [r7, #4]
10001c10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
10001c14:	f240 12ff 	movw	r2, #511	@ 0x1ff
10001c18:	4293      	cmp	r3, r2
10001c1a:	bf28      	it	cs
10001c1c:	4613      	movcs	r3, r2
10001c1e:	b29a      	uxth	r2, r3
10001c20:	4b0a      	ldr	r3, [pc, #40]	@ (10001c4c <VIRT_UART1_RxCpltCallback+0x88>)
10001c22:	801a      	strh	r2, [r3, #0]
    memcpy(VirtUart1ChannelBuffRx, huart->pRxBuffPtr, VirtUart1ChannelRxSize);
10001c24:	687b      	ldr	r3, [r7, #4]
10001c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10001c28:	4a08      	ldr	r2, [pc, #32]	@ (10001c4c <VIRT_UART1_RxCpltCallback+0x88>)
10001c2a:	8812      	ldrh	r2, [r2, #0]
10001c2c:	4619      	mov	r1, r3
10001c2e:	4808      	ldr	r0, [pc, #32]	@ (10001c50 <VIRT_UART1_RxCpltCallback+0x8c>)
10001c30:	f00c f969 	bl	1000df06 <memcpy>
    VirtUart1RxMsg = SET;
10001c34:	4b07      	ldr	r3, [pc, #28]	@ (10001c54 <VIRT_UART1_RxCpltCallback+0x90>)
10001c36:	2201      	movs	r2, #1
10001c38:	701a      	strb	r2, [r3, #0]
}
10001c3a:	bf00      	nop
10001c3c:	370c      	adds	r7, #12
10001c3e:	46bd      	mov	sp, r7
10001c40:	bd90      	pop	{r4, r7, pc}
10001c42:	bf00      	nop
10001c44:	10624dd3 	.word	0x10624dd3
10001c48:	100115dc 	.word	0x100115dc
10001c4c:	100208dc 	.word	0x100208dc
10001c50:	100206dc 	.word	0x100206dc
10001c54:	100206da 	.word	0x100206da

10001c58 <EXTI14_IRQHandler_Config>:
    memcpy(VirtUart2ChannelBuffRx, huart->pRxBuffPtr, VirtUart2ChannelRxSize);
    VirtUart2RxMsg = SET;
}

static void EXTI14_IRQHandler_Config(void)
{
10001c58:	b580      	push	{r7, lr}
10001c5a:	b08a      	sub	sp, #40	@ 0x28
10001c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStruct;
  EXTI_ConfigTypeDef EXTI_ConfigStructure;


  /* Enable GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
10001c5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001c62:	2201      	movs	r2, #1
10001c64:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8

  /* Configure PA.14 pin as input floating */
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10001c68:	2300      	movs	r3, #0
10001c6a:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Pull = GPIO_NOPULL;
10001c6c:	2300      	movs	r3, #0
10001c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = USER_BUTTON_PIN;
10001c70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
10001c74:	617b      	str	r3, [r7, #20]
  PERIPH_LOCK(GPIOA);
10001c76:	2164      	movs	r1, #100	@ 0x64
10001c78:	4818      	ldr	r0, [pc, #96]	@ (10001cdc <EXTI14_IRQHandler_Config+0x84>)
10001c7a:	f7ff f953 	bl	10000f24 <Periph_Lock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10001c7e:	f107 0314 	add.w	r3, r7, #20
10001c82:	4619      	mov	r1, r3
10001c84:	4815      	ldr	r0, [pc, #84]	@ (10001cdc <EXTI14_IRQHandler_Config+0x84>)
10001c86:	f002 fe95 	bl	100049b4 <HAL_GPIO_Init>
  PERIPH_UNLOCK(GPIOA);
10001c8a:	4814      	ldr	r0, [pc, #80]	@ (10001cdc <EXTI14_IRQHandler_Config+0x84>)
10001c8c:	f7ff f9d8 	bl	10001040 <Periph_Unlock>

  /* Set configuration except Interrupt and Event mask of Exti line 14*/
  EXTI_ConfigStructure.Line = EXTI_LINE_14;
10001c90:	4b13      	ldr	r3, [pc, #76]	@ (10001ce0 <EXTI14_IRQHandler_Config+0x88>)
10001c92:	607b      	str	r3, [r7, #4]
  EXTI_ConfigStructure.Trigger = EXTI_TRIGGER_FALLING;
10001c94:	2302      	movs	r3, #2
10001c96:	60fb      	str	r3, [r7, #12]
  EXTI_ConfigStructure.GPIOSel = EXTI_GPIOA;
10001c98:	2300      	movs	r3, #0
10001c9a:	613b      	str	r3, [r7, #16]
  EXTI_ConfigStructure.Mode = EXTI_MODE_C2_INTERRUPT;
10001c9c:	2321      	movs	r3, #33	@ 0x21
10001c9e:	60bb      	str	r3, [r7, #8]
  PERIPH_LOCK(EXTI);
10001ca0:	2164      	movs	r1, #100	@ 0x64
10001ca2:	4810      	ldr	r0, [pc, #64]	@ (10001ce4 <EXTI14_IRQHandler_Config+0x8c>)
10001ca4:	f7ff f93e 	bl	10000f24 <Periph_Lock>
  HAL_EXTI_SetConfigLine(&hexti, &EXTI_ConfigStructure);
10001ca8:	1d3b      	adds	r3, r7, #4
10001caa:	4619      	mov	r1, r3
10001cac:	480e      	ldr	r0, [pc, #56]	@ (10001ce8 <EXTI14_IRQHandler_Config+0x90>)
10001cae:	f002 fd15 	bl	100046dc <HAL_EXTI_SetConfigLine>
  PERIPH_UNLOCK(EXTI);
10001cb2:	480c      	ldr	r0, [pc, #48]	@ (10001ce4 <EXTI14_IRQHandler_Config+0x8c>)
10001cb4:	f7ff f9c4 	bl	10001040 <Periph_Unlock>

  /* Register callback to treat Exti interrupts in user Exti14FallingCb function */
  HAL_EXTI_RegisterCallback(&hexti, HAL_EXTI_FALLING_CB_ID, Exti14FallingCb);
10001cb8:	4a0c      	ldr	r2, [pc, #48]	@ (10001cec <EXTI14_IRQHandler_Config+0x94>)
10001cba:	2102      	movs	r1, #2
10001cbc:	480a      	ldr	r0, [pc, #40]	@ (10001ce8 <EXTI14_IRQHandler_Config+0x90>)
10001cbe:	f002 fe05 	bl	100048cc <HAL_EXTI_RegisterCallback>

  /* Enable and set line 14 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI14_IRQn, (DEFAULT_IRQ_PRIO + 2U), 0);
10001cc2:	2200      	movs	r2, #0
10001cc4:	2103      	movs	r1, #3
10001cc6:	2079      	movs	r0, #121	@ 0x79
10001cc8:	f002 fc8f 	bl	100045ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
10001ccc:	2079      	movs	r0, #121	@ 0x79
10001cce:	f002 fca8 	bl	10004622 <HAL_NVIC_EnableIRQ>
}
10001cd2:	bf00      	nop
10001cd4:	3728      	adds	r7, #40	@ 0x28
10001cd6:	46bd      	mov	sp, r7
10001cd8:	bd80      	pop	{r7, pc}
10001cda:	bf00      	nop
10001cdc:	50002000 	.word	0x50002000
10001ce0:	1600000e 	.word	0x1600000e
10001ce4:	5000d000 	.word	0x5000d000
10001ce8:	100203d4 	.word	0x100203d4
10001cec:	10001e15 	.word	0x10001e15

10001cf0 <MX_I2C5_Init>:
  * @param None:
  * @retval None
  */

static void MX_I2C5_Init(void)
{
10001cf0:	b580      	push	{r7, lr}
10001cf2:	af00      	add	r7, sp, #0

  hi2c5.Instance = I2C5;
10001cf4:	4b1c      	ldr	r3, [pc, #112]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001cf6:	4a1d      	ldr	r2, [pc, #116]	@ (10001d6c <MX_I2C5_Init+0x7c>)
10001cf8:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00701837;
10001cfa:	4b1b      	ldr	r3, [pc, #108]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001cfc:	4a1c      	ldr	r2, [pc, #112]	@ (10001d70 <MX_I2C5_Init+0x80>)
10001cfe:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
10001d00:	4b19      	ldr	r3, [pc, #100]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001d02:	2200      	movs	r2, #0
10001d04:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
10001d06:	4b18      	ldr	r3, [pc, #96]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001d08:	2201      	movs	r2, #1
10001d0a:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
10001d0c:	4b16      	ldr	r3, [pc, #88]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001d0e:	2200      	movs	r2, #0
10001d10:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
10001d12:	4b15      	ldr	r3, [pc, #84]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001d14:	2200      	movs	r2, #0
10001d16:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
10001d18:	4b13      	ldr	r3, [pc, #76]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001d1a:	2200      	movs	r2, #0
10001d1c:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
10001d1e:	4b12      	ldr	r3, [pc, #72]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001d20:	2200      	movs	r2, #0
10001d22:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
10001d24:	4b10      	ldr	r3, [pc, #64]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001d26:	2200      	movs	r2, #0
10001d28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
10001d2a:	480f      	ldr	r0, [pc, #60]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001d2c:	f003 f849 	bl	10004dc2 <HAL_I2C_Init>
10001d30:	4603      	mov	r3, r0
10001d32:	2b00      	cmp	r3, #0
10001d34:	d001      	beq.n	10001d3a <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
10001d36:	f000 f862 	bl	10001dfe <Error_Handler>
  }

    /**Configure Analogue filter
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
10001d3a:	2100      	movs	r1, #0
10001d3c:	480a      	ldr	r0, [pc, #40]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001d3e:	f004 fb21 	bl	10006384 <HAL_I2CEx_ConfigAnalogFilter>
10001d42:	4603      	mov	r3, r0
10001d44:	2b00      	cmp	r3, #0
10001d46:	d001      	beq.n	10001d4c <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
10001d48:	f000 f859 	bl	10001dfe <Error_Handler>
  }

    /**Configure Digital filter
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
10001d4c:	2100      	movs	r1, #0
10001d4e:	4806      	ldr	r0, [pc, #24]	@ (10001d68 <MX_I2C5_Init+0x78>)
10001d50:	f004 fb63 	bl	1000641a <HAL_I2CEx_ConfigDigitalFilter>
10001d54:	4603      	mov	r3, r0
10001d56:	2b00      	cmp	r3, #0
10001d58:	d001      	beq.n	10001d5e <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
10001d5a:	f000 f850 	bl	10001dfe <Error_Handler>
  }

  /**I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
10001d5e:	2010      	movs	r0, #16
10001d60:	f004 fba8 	bl	100064b4 <HAL_I2CEx_EnableFastModePlus>
}
10001d64:	bf00      	nop
10001d66:	bd80      	pop	{r7, pc}
10001d68:	10020344 	.word	0x10020344
10001d6c:	40015000 	.word	0x40015000
10001d70:	00701837 	.word	0x00701837

10001d74 <MX_GPIO_Init>:
        * EXTI
     USB_DM1   ------> USBH_HS1_DM
     USB_DP1   ------> USBH_HS1_DP
*/
static void MX_GPIO_Init(void)
{
10001d74:	b480      	push	{r7}
10001d76:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
10001d78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d7c:	2280      	movs	r2, #128	@ 0x80
10001d7e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOD_CLK_ENABLE();
10001d82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d86:	2208      	movs	r2, #8
10001d88:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOG_CLK_ENABLE();
10001d8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d90:	2240      	movs	r2, #64	@ 0x40
10001d92:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
10001d96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001d9a:	2202      	movs	r2, #2
10001d9c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
10001da0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001da4:	2220      	movs	r2, #32
10001da6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOC_CLK_ENABLE();
10001daa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dae:	2204      	movs	r2, #4
10001db0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOE_CLK_ENABLE();
10001db4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001db8:	2210      	movs	r2, #16
10001dba:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
10001dbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dc2:	2201      	movs	r2, #1
10001dc4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  __HAL_RCC_GPIOI_CLK_ENABLE();
10001dc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10001dcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
10001dd0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
}
10001dd4:	bf00      	nop
10001dd6:	46bd      	mov	sp, r7
10001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ddc:	4770      	bx	lr

10001dde <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
10001dde:	b580      	push	{r7, lr}
10001de0:	b082      	sub	sp, #8
10001de2:	af00      	add	r7, sp, #0
10001de4:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
10001de6:	6878      	ldr	r0, [r7, #4]
10001de8:	f003 fb59 	bl	1000549e <HAL_I2C_GetError>
10001dec:	4603      	mov	r3, r0
10001dee:	2b04      	cmp	r3, #4
10001df0:	d001      	beq.n	10001df6 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
10001df2:	f000 f804 	bl	10001dfe <Error_Handler>
  }
}
10001df6:	bf00      	nop
10001df8:	3708      	adds	r7, #8
10001dfa:	46bd      	mov	sp, r7
10001dfc:	bd80      	pop	{r7, pc}

10001dfe <Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void Error_Handler(void)
{
10001dfe:	b580      	push	{r7, lr}
10001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* Error if LED7 is slowly blinking (1 sec. period) */
  while(1)
  {
    BSP_LED_Toggle(LED7);
10001e02:	2002      	movs	r0, #2
10001e04:	f001 ffee 	bl	10003de4 <BSP_LED_Toggle>
    HAL_Delay(1000);
10001e08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10001e0c:	f002 fae4 	bl	100043d8 <HAL_Delay>
    BSP_LED_Toggle(LED7);
10001e10:	bf00      	nop
10001e12:	e7f6      	b.n	10001e02 <Error_Handler+0x4>

10001e14 <Exti14FallingCb>:
  /* USER CODE END Error_Handler_Debug */
}


static void Exti14FallingCb(void)
{
10001e14:	b580      	push	{r7, lr}
10001e16:	af00      	add	r7, sp, #0
    BSP_LED_Toggle(LED7);
10001e18:	2002      	movs	r0, #2
10001e1a:	f001 ffe3 	bl	10003de4 <BSP_LED_Toggle>
    //ssd1306_Clear();
    buttonPressed = 1;   // just set the flag
10001e1e:	4b02      	ldr	r3, [pc, #8]	@ (10001e28 <Exti14FallingCb+0x14>)
10001e20:	2201      	movs	r2, #1
10001e22:	601a      	str	r2, [r3, #0]
}
10001e24:	bf00      	nop
10001e26:	bd80      	pop	{r7, pc}
10001e28:	100203e0 	.word	0x100203e0

10001e2c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
10001e2c:	b598      	push	{r3, r4, r7, lr}
10001e2e:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN PRE_MAILBOX_INIT */

   /* USER CODE END  PRE_MAILBOX_INIT */

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
10001e30:	4b27      	ldr	r3, [pc, #156]	@ (10001ed0 <MAILBOX_Init+0xa4>)
10001e32:	2201      	movs	r2, #1
10001e34:	2100      	movs	r1, #0
10001e36:	4827      	ldr	r0, [pc, #156]	@ (10001ed4 <MAILBOX_Init+0xa8>)
10001e38:	f004 fb86 	bl	10006548 <HAL_IPCC_ActivateNotification>
10001e3c:	4603      	mov	r3, r0
10001e3e:	2b00      	cmp	r3, #0
10001e40:	d01c      	beq.n	10001e7c <MAILBOX_Init+0x50>
          IPCC_channel1_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
10001e42:	f002 fabd 	bl	100043c0 <HAL_GetTick>
10001e46:	4603      	mov	r3, r0
10001e48:	4a23      	ldr	r2, [pc, #140]	@ (10001ed8 <MAILBOX_Init+0xac>)
10001e4a:	fba2 2303 	umull	r2, r3, r2, r3
10001e4e:	099b      	lsrs	r3, r3, #6
10001e50:	461c      	mov	r4, r3
10001e52:	f002 fab5 	bl	100043c0 <HAL_GetTick>
10001e56:	4602      	mov	r2, r0
10001e58:	4b1f      	ldr	r3, [pc, #124]	@ (10001ed8 <MAILBOX_Init+0xac>)
10001e5a:	fba3 1302 	umull	r1, r3, r3, r2
10001e5e:	099b      	lsrs	r3, r3, #6
10001e60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10001e64:	fb01 f303 	mul.w	r3, r1, r3
10001e68:	1ad3      	subs	r3, r2, r3
10001e6a:	461a      	mov	r2, r3
10001e6c:	4b1b      	ldr	r3, [pc, #108]	@ (10001edc <MAILBOX_Init+0xb0>)
10001e6e:	4621      	mov	r1, r4
10001e70:	481b      	ldr	r0, [pc, #108]	@ (10001ee0 <MAILBOX_Init+0xb4>)
10001e72:	f00b fecd 	bl	1000dc10 <iprintf>
    return -1;
10001e76:	f04f 33ff 	mov.w	r3, #4294967295
10001e7a:	e026      	b.n	10001eca <MAILBOX_Init+0x9e>
  }

  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
10001e7c:	4b19      	ldr	r3, [pc, #100]	@ (10001ee4 <MAILBOX_Init+0xb8>)
10001e7e:	2201      	movs	r2, #1
10001e80:	2101      	movs	r1, #1
10001e82:	4814      	ldr	r0, [pc, #80]	@ (10001ed4 <MAILBOX_Init+0xa8>)
10001e84:	f004 fb60 	bl	10006548 <HAL_IPCC_ActivateNotification>
10001e88:	4603      	mov	r3, r0
10001e8a:	2b00      	cmp	r3, #0
10001e8c:	d01c      	beq.n	10001ec8 <MAILBOX_Init+0x9c>
          IPCC_channel2_callback) != HAL_OK) {
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
10001e8e:	f002 fa97 	bl	100043c0 <HAL_GetTick>
10001e92:	4603      	mov	r3, r0
10001e94:	4a10      	ldr	r2, [pc, #64]	@ (10001ed8 <MAILBOX_Init+0xac>)
10001e96:	fba2 2303 	umull	r2, r3, r2, r3
10001e9a:	099b      	lsrs	r3, r3, #6
10001e9c:	461c      	mov	r4, r3
10001e9e:	f002 fa8f 	bl	100043c0 <HAL_GetTick>
10001ea2:	4602      	mov	r2, r0
10001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (10001ed8 <MAILBOX_Init+0xac>)
10001ea6:	fba3 1302 	umull	r1, r3, r3, r2
10001eaa:	099b      	lsrs	r3, r3, #6
10001eac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10001eb0:	fb01 f303 	mul.w	r3, r1, r3
10001eb4:	1ad3      	subs	r3, r2, r3
10001eb6:	461a      	mov	r2, r3
10001eb8:	4b08      	ldr	r3, [pc, #32]	@ (10001edc <MAILBOX_Init+0xb0>)
10001eba:	4621      	mov	r1, r4
10001ebc:	480a      	ldr	r0, [pc, #40]	@ (10001ee8 <MAILBOX_Init+0xbc>)
10001ebe:	f00b fea7 	bl	1000dc10 <iprintf>
    return -1;
10001ec2:	f04f 33ff 	mov.w	r3, #4294967295
10001ec6:	e000      	b.n	10001eca <MAILBOX_Init+0x9e>


  /* USER CODE BEGIN POST_MAILBOX_INIT */

  /* USER CODE END  POST_MAILBOX_INIT */
  return 0;
10001ec8:	2300      	movs	r3, #0
}
10001eca:	4618      	mov	r0, r3
10001ecc:	bd98      	pop	{r3, r4, r7, pc}
10001ece:	bf00      	nop
10001ed0:	10001fe1 	.word	0x10001fe1
10001ed4:	10020398 	.word	0x10020398
10001ed8:	10624dd3 	.word	0x10624dd3
10001edc:	100119cc 	.word	0x100119cc
10001ee0:	10011664 	.word	0x10011664
10001ee4:	1000200d 	.word	0x1000200d
10001ee8:	1001168c 	.word	0x1001168c

10001eec <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
10001eec:	b580      	push	{r7, lr}
10001eee:	b084      	sub	sp, #16
10001ef0:	af00      	add	r7, sp, #0
10001ef2:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */
  int ret = -1;
10001ef4:	f04f 33ff 	mov.w	r3, #4294967295
10001ef8:	60fb      	str	r3, [r7, #12]

   /* USER CODE BEGIN PRE_MAILBOX_POLL */

   /* USER CODE END  PRE_MAILBOX_POLL */

   if (msg_received_ch1 == MBOX_BUF_FREE) {
10001efa:	4b0f      	ldr	r3, [pc, #60]	@ (10001f38 <MAILBOX_Poll+0x4c>)
10001efc:	681b      	ldr	r3, [r3, #0]
10001efe:	2b02      	cmp	r3, #2
10001f00:	d108      	bne.n	10001f14 <MAILBOX_Poll+0x28>
   /* USER CODE BEGIN MSG_CHANNEL1 */

   /* USER CODE END  MSG_CHANNEL1 */

    OPENAMP_log_dbg("Running virt0 (ch_1 buf free)\r\n");
    rproc_virtio_notified(vdev, VRING0_ID);
10001f02:	2100      	movs	r1, #0
10001f04:	6878      	ldr	r0, [r7, #4]
10001f06:	f009 fa5e 	bl	1000b3c6 <rproc_virtio_notified>
    ret = 0;
10001f0a:	2300      	movs	r3, #0
10001f0c:	60fb      	str	r3, [r7, #12]
    msg_received_ch1 = MBOX_NO_MSG;
10001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (10001f38 <MAILBOX_Poll+0x4c>)
10001f10:	2200      	movs	r2, #0
10001f12:	601a      	str	r2, [r3, #0]
  }

  if (msg_received_ch2 == MBOX_NEW_MSG) {
10001f14:	4b09      	ldr	r3, [pc, #36]	@ (10001f3c <MAILBOX_Poll+0x50>)
10001f16:	681b      	ldr	r3, [r3, #0]
10001f18:	2b01      	cmp	r3, #1
10001f1a:	d108      	bne.n	10001f2e <MAILBOX_Poll+0x42>
   /* USER CODE BEGIN MSG_CHANNEL2 */

   /* USER CODE END  MSG_CHANNEL2 */

    OPENAMP_log_dbg("Running virt1 (ch_2 new msg)\r\n");
    rproc_virtio_notified(vdev, VRING1_ID);
10001f1c:	2101      	movs	r1, #1
10001f1e:	6878      	ldr	r0, [r7, #4]
10001f20:	f009 fa51 	bl	1000b3c6 <rproc_virtio_notified>
    msg_received_ch2 = MBOX_NO_MSG;
10001f24:	4b05      	ldr	r3, [pc, #20]	@ (10001f3c <MAILBOX_Poll+0x50>)
10001f26:	2200      	movs	r2, #0
10001f28:	601a      	str	r2, [r3, #0]

    ret = 0;
10001f2a:	2300      	movs	r3, #0
10001f2c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_MAILBOX_POLL */

  /* USER CODE END  POST_MAILBOX_POLL */

  return ret;
10001f2e:	68fb      	ldr	r3, [r7, #12]
}
10001f30:	4618      	mov	r0, r3
10001f32:	3710      	adds	r7, #16
10001f34:	46bd      	mov	sp, r7
10001f36:	bd80      	pop	{r7, pc}
10001f38:	100209d8 	.word	0x100209d8
10001f3c:	100209dc 	.word	0x100209dc

10001f40 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
10001f40:	b590      	push	{r4, r7, lr}
10001f42:	b085      	sub	sp, #20
10001f44:	af00      	add	r7, sp, #0
10001f46:	6078      	str	r0, [r7, #4]
10001f48:	6039      	str	r1, [r7, #0]
   /* USER CODE BEGIN PRE_MAILBOX_NOTIFY */

   /* USER CODE END  PRE_MAILBOX_NOTIFY */

  /* Called after virtqueue processing: time to inform the remote */
  if (id == VRING0_ID) {
10001f4a:	683b      	ldr	r3, [r7, #0]
10001f4c:	2b00      	cmp	r3, #0
10001f4e:	d102      	bne.n	10001f56 <MAILBOX_Notify+0x16>
    channel = IPCC_CHANNEL_1;
10001f50:	2300      	movs	r3, #0
10001f52:	60fb      	str	r3, [r7, #12]
10001f54:	e022      	b.n	10001f9c <MAILBOX_Notify+0x5c>
    OPENAMP_log_dbg("Send msg on ch_1\r\n");
  }
  else if (id == VRING1_ID) {
10001f56:	683b      	ldr	r3, [r7, #0]
10001f58:	2b01      	cmp	r3, #1
10001f5a:	d102      	bne.n	10001f62 <MAILBOX_Notify+0x22>
    /* Note: the OpenAMP framework never notifies this */
    channel = IPCC_CHANNEL_2;
10001f5c:	2301      	movs	r3, #1
10001f5e:	60fb      	str	r3, [r7, #12]
10001f60:	e01c      	b.n	10001f9c <MAILBOX_Notify+0x5c>
    OPENAMP_log_dbg("Send 'buff free' on ch_2\r\n");
  }
  else {
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
10001f62:	f002 fa2d 	bl	100043c0 <HAL_GetTick>
10001f66:	4603      	mov	r3, r0
10001f68:	4a1a      	ldr	r2, [pc, #104]	@ (10001fd4 <MAILBOX_Notify+0x94>)
10001f6a:	fba2 2303 	umull	r2, r3, r2, r3
10001f6e:	099b      	lsrs	r3, r3, #6
10001f70:	461c      	mov	r4, r3
10001f72:	f002 fa25 	bl	100043c0 <HAL_GetTick>
10001f76:	4602      	mov	r2, r0
10001f78:	4b16      	ldr	r3, [pc, #88]	@ (10001fd4 <MAILBOX_Notify+0x94>)
10001f7a:	fba3 1302 	umull	r1, r3, r3, r2
10001f7e:	099b      	lsrs	r3, r3, #6
10001f80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
10001f84:	fb01 f303 	mul.w	r3, r1, r3
10001f88:	1ad3      	subs	r3, r2, r3
10001f8a:	461a      	mov	r2, r3
10001f8c:	683b      	ldr	r3, [r7, #0]
10001f8e:	4621      	mov	r1, r4
10001f90:	4811      	ldr	r0, [pc, #68]	@ (10001fd8 <MAILBOX_Notify+0x98>)
10001f92:	f00b fe3d 	bl	1000dc10 <iprintf>
    return -1;
10001f96:	f04f 33ff 	mov.w	r3, #4294967295
10001f9a:	e016      	b.n	10001fca <MAILBOX_Notify+0x8a>
  }

  /* Check that the channel is free (otherwise wait until it is) */
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
10001f9c:	2200      	movs	r2, #0
10001f9e:	68f9      	ldr	r1, [r7, #12]
10001fa0:	480e      	ldr	r0, [pc, #56]	@ (10001fdc <MAILBOX_Notify+0x9c>)
10001fa2:	f004 fb1f 	bl	100065e4 <HAL_IPCC_GetChannelStatus>
10001fa6:	4603      	mov	r3, r0
10001fa8:	2b01      	cmp	r3, #1
10001faa:	d108      	bne.n	10001fbe <MAILBOX_Notify+0x7e>
    OPENAMP_log_dbg("Waiting for channel to be freed\r\n");
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
10001fac:	bf00      	nop
10001fae:	2200      	movs	r2, #0
10001fb0:	68f9      	ldr	r1, [r7, #12]
10001fb2:	480a      	ldr	r0, [pc, #40]	@ (10001fdc <MAILBOX_Notify+0x9c>)
10001fb4:	f004 fb16 	bl	100065e4 <HAL_IPCC_GetChannelStatus>
10001fb8:	4603      	mov	r3, r0
10001fba:	2b01      	cmp	r3, #1
10001fbc:	d0f7      	beq.n	10001fae <MAILBOX_Notify+0x6e>
      ;
  }

  /* Inform A7 (either new message, or buf free) */
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
10001fbe:	2200      	movs	r2, #0
10001fc0:	68f9      	ldr	r1, [r7, #12]
10001fc2:	4806      	ldr	r0, [pc, #24]	@ (10001fdc <MAILBOX_Notify+0x9c>)
10001fc4:	f004 fb42 	bl	1000664c <HAL_IPCC_NotifyCPU>

 /* USER CODE BEGIN POST_MAILBOX_NOTIFY */

 /* USER CODE END  POST_MAILBOX_NOTIFY */

  return 0;
10001fc8:	2300      	movs	r3, #0
}
10001fca:	4618      	mov	r0, r3
10001fcc:	3714      	adds	r7, #20
10001fce:	46bd      	mov	sp, r7
10001fd0:	bd90      	pop	{r4, r7, pc}
10001fd2:	bf00      	nop
10001fd4:	10624dd3 	.word	0x10624dd3
10001fd8:	100116b4 	.word	0x100116b4
10001fdc:	10020398 	.word	0x10020398

10001fe0 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10001fe0:	b580      	push	{r7, lr}
10001fe2:	b084      	sub	sp, #16
10001fe4:	af00      	add	r7, sp, #0
10001fe6:	60f8      	str	r0, [r7, #12]
10001fe8:	60b9      	str	r1, [r7, #8]
10001fea:	4613      	mov	r3, r2
10001fec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
10001fee:	4b06      	ldr	r3, [pc, #24]	@ (10002008 <IPCC_channel1_callback+0x28>)
10001ff0:	2202      	movs	r2, #2
10001ff2:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10001ff4:	2201      	movs	r2, #1
10001ff6:	68b9      	ldr	r1, [r7, #8]
10001ff8:	68f8      	ldr	r0, [r7, #12]
10001ffa:	f004 fb27 	bl	1000664c <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
10001ffe:	bf00      	nop
10002000:	3710      	adds	r7, #16
10002002:	46bd      	mov	sp, r7
10002004:	bd80      	pop	{r7, pc}
10002006:	bf00      	nop
10002008:	100209d8 	.word	0x100209d8

1000200c <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000200c:	b580      	push	{r7, lr}
1000200e:	b084      	sub	sp, #16
10002010:	af00      	add	r7, sp, #0
10002012:	60f8      	str	r0, [r7, #12]
10002014:	60b9      	str	r1, [r7, #8]
10002016:	4613      	mov	r3, r2
10002018:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
1000201a:	4b06      	ldr	r3, [pc, #24]	@ (10002034 <IPCC_channel2_callback+0x28>)
1000201c:	2201      	movs	r2, #1
1000201e:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10002020:	2201      	movs	r2, #1
10002022:	68b9      	ldr	r1, [r7, #8]
10002024:	68f8      	ldr	r0, [r7, #12]
10002026:	f004 fb11 	bl	1000664c <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
1000202a:	bf00      	nop
1000202c:	3710      	adds	r7, #16
1000202e:	46bd      	mov	sp, r7
10002030:	bd80      	pop	{r7, pc}
10002032:	bf00      	nop
10002034:	100209dc 	.word	0x100209dc

10002038 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
10002038:	b480      	push	{r7}
1000203a:	b083      	sub	sp, #12
1000203c:	af00      	add	r7, sp, #0
1000203e:	6078      	str	r0, [r7, #4]
10002040:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
10002042:	687b      	ldr	r3, [r7, #4]
10002044:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
10002046:	683a      	ldr	r2, [r7, #0]
10002048:	429a      	cmp	r2, r3
1000204a:	d209      	bcs.n	10002060 <metal_device_io_region+0x28>
1000204c:	683a      	ldr	r2, [r7, #0]
1000204e:	4613      	mov	r3, r2
10002050:	00db      	lsls	r3, r3, #3
10002052:	1a9b      	subs	r3, r3, r2
10002054:	00db      	lsls	r3, r3, #3
10002056:	3308      	adds	r3, #8
10002058:	687a      	ldr	r2, [r7, #4]
1000205a:	4413      	add	r3, r2
1000205c:	3304      	adds	r3, #4
1000205e:	e000      	b.n	10002062 <metal_device_io_region+0x2a>
10002060:	2300      	movs	r3, #0
}
10002062:	4618      	mov	r0, r3
10002064:	370c      	adds	r7, #12
10002066:	46bd      	mov	sp, r7
10002068:	f85d 7b04 	ldr.w	r7, [sp], #4
1000206c:	4770      	bx	lr
	...

10002070 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
10002070:	b590      	push	{r4, r7, lr}
10002072:	b08d      	sub	sp, #52	@ 0x34
10002074:	af04      	add	r7, sp, #16
10002076:	6078      	str	r0, [r7, #4]
  int status = 0;
10002078:	2300      	movs	r3, #0
1000207a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
1000207c:	2300      	movs	r3, #0
1000207e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
10002080:	4a41      	ldr	r2, [pc, #260]	@ (10002188 <OPENAMP_shmem_init+0x118>)
10002082:	f107 0310 	add.w	r3, r7, #16
10002086:	e892 0003 	ldmia.w	r2, {r0, r1}
1000208a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
1000208e:	2300      	movs	r3, #0
10002090:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
10002092:	2300      	movs	r3, #0
10002094:	60bb      	str	r3, [r7, #8]


  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
10002096:	f107 0310 	add.w	r3, r7, #16
1000209a:	4618      	mov	r0, r3
1000209c:	f008 fcd0 	bl	1000aa40 <metal_init>

  status = metal_register_generic_device(&shm_device);
100020a0:	483a      	ldr	r0, [pc, #232]	@ (1000218c <OPENAMP_shmem_init+0x11c>)
100020a2:	f008 fbeb 	bl	1000a87c <metal_register_generic_device>
100020a6:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
100020a8:	69fb      	ldr	r3, [r7, #28]
100020aa:	2b00      	cmp	r3, #0
100020ac:	d001      	beq.n	100020b2 <OPENAMP_shmem_init+0x42>
    return status;
100020ae:	69fb      	ldr	r3, [r7, #28]
100020b0:	e066      	b.n	10002180 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
100020b2:	f107 0318 	add.w	r3, r7, #24
100020b6:	461a      	mov	r2, r3
100020b8:	4935      	ldr	r1, [pc, #212]	@ (10002190 <OPENAMP_shmem_init+0x120>)
100020ba:	4836      	ldr	r0, [pc, #216]	@ (10002194 <OPENAMP_shmem_init+0x124>)
100020bc:	f008 fba0 	bl	1000a800 <metal_device_open>
100020c0:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
100020c2:	69fb      	ldr	r3, [r7, #28]
100020c4:	2b00      	cmp	r3, #0
100020c6:	d001      	beq.n	100020cc <OPENAMP_shmem_init+0x5c>
    return status;
100020c8:	69fb      	ldr	r3, [r7, #28]
100020ca:	e059      	b.n	10002180 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
100020cc:	4a32      	ldr	r2, [pc, #200]	@ (10002198 <OPENAMP_shmem_init+0x128>)
100020ce:	4b33      	ldr	r3, [pc, #204]	@ (1000219c <OPENAMP_shmem_init+0x12c>)
100020d0:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
100020d2:	69bb      	ldr	r3, [r7, #24]
100020d4:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, (unsigned int)-1, 0, NULL);
100020d8:	4a31      	ldr	r2, [pc, #196]	@ (100021a0 <OPENAMP_shmem_init+0x130>)
100020da:	4b2f      	ldr	r3, [pc, #188]	@ (10002198 <OPENAMP_shmem_init+0x128>)
100020dc:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
100020de:	461a      	mov	r2, r3
100020e0:	2300      	movs	r3, #0
100020e2:	9302      	str	r3, [sp, #8]
100020e4:	2300      	movs	r3, #0
100020e6:	9301      	str	r3, [sp, #4]
100020e8:	f04f 33ff 	mov.w	r3, #4294967295
100020ec:	9300      	str	r3, [sp, #0]
100020ee:	4613      	mov	r3, r2
100020f0:	4a2a      	ldr	r2, [pc, #168]	@ (1000219c <OPENAMP_shmem_init+0x12c>)
100020f2:	4929      	ldr	r1, [pc, #164]	@ (10002198 <OPENAMP_shmem_init+0x128>)
100020f4:	f008 fcf2 	bl	1000aadc <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
100020f8:	69bb      	ldr	r3, [r7, #24]
100020fa:	2100      	movs	r1, #0
100020fc:	4618      	mov	r0, r3
100020fe:	f7ff ff9b 	bl	10002038 <metal_device_io_region>
10002102:	4603      	mov	r3, r0
10002104:	4a27      	ldr	r2, [pc, #156]	@ (100021a4 <OPENAMP_shmem_init+0x134>)
10002106:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
10002108:	4b26      	ldr	r3, [pc, #152]	@ (100021a4 <OPENAMP_shmem_init+0x134>)
1000210a:	681b      	ldr	r3, [r3, #0]
1000210c:	2b00      	cmp	r3, #0
1000210e:	d102      	bne.n	10002116 <OPENAMP_shmem_init+0xa6>
    return -1;
10002110:	f04f 33ff 	mov.w	r3, #4294967295
10002114:	e034      	b.n	10002180 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
10002116:	f107 0208 	add.w	r2, r7, #8
1000211a:	f107 030c 	add.w	r3, r7, #12
1000211e:	4619      	mov	r1, r3
10002120:	6878      	ldr	r0, [r7, #4]
10002122:	f000 f935 	bl	10002390 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
10002126:	68fb      	ldr	r3, [r7, #12]
10002128:	4a1f      	ldr	r2, [pc, #124]	@ (100021a8 <OPENAMP_shmem_init+0x138>)
1000212a:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
1000212c:	4b1e      	ldr	r3, [pc, #120]	@ (100021a8 <OPENAMP_shmem_init+0x138>)
1000212e:	681b      	ldr	r3, [r3, #0]
10002130:	2b00      	cmp	r3, #0
10002132:	d102      	bne.n	1000213a <OPENAMP_shmem_init+0xca>
  {
    return -1;
10002134:	f04f 33ff 	mov.w	r3, #4294967295
10002138:	e022      	b.n	10002180 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
1000213a:	69bb      	ldr	r3, [r7, #24]
1000213c:	f103 0044 	add.w	r0, r3, #68	@ 0x44
10002140:	4b19      	ldr	r3, [pc, #100]	@ (100021a8 <OPENAMP_shmem_init+0x138>)
10002142:	6819      	ldr	r1, [r3, #0]
10002144:	4b18      	ldr	r3, [pc, #96]	@ (100021a8 <OPENAMP_shmem_init+0x138>)
10002146:	681a      	ldr	r2, [r3, #0]
10002148:	68bb      	ldr	r3, [r7, #8]
1000214a:	461c      	mov	r4, r3
1000214c:	2300      	movs	r3, #0
1000214e:	9302      	str	r3, [sp, #8]
10002150:	2300      	movs	r3, #0
10002152:	9301      	str	r3, [sp, #4]
10002154:	f04f 33ff 	mov.w	r3, #4294967295
10002158:	9300      	str	r3, [sp, #0]
1000215a:	4623      	mov	r3, r4
1000215c:	f008 fcbe 	bl	1000aadc <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
10002160:	69bb      	ldr	r3, [r7, #24]
10002162:	2101      	movs	r1, #1
10002164:	4618      	mov	r0, r3
10002166:	f7ff ff67 	bl	10002038 <metal_device_io_region>
1000216a:	4603      	mov	r3, r0
1000216c:	4a0f      	ldr	r2, [pc, #60]	@ (100021ac <OPENAMP_shmem_init+0x13c>)
1000216e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
10002170:	4b0e      	ldr	r3, [pc, #56]	@ (100021ac <OPENAMP_shmem_init+0x13c>)
10002172:	681b      	ldr	r3, [r3, #0]
10002174:	2b00      	cmp	r3, #0
10002176:	d102      	bne.n	1000217e <OPENAMP_shmem_init+0x10e>
    return -1;
10002178:	f04f 33ff 	mov.w	r3, #4294967295
1000217c:	e000      	b.n	10002180 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
1000217e:	2300      	movs	r3, #0
}
10002180:	4618      	mov	r0, r3
10002182:	3724      	adds	r7, #36	@ 0x24
10002184:	46bd      	mov	sp, r7
10002186:	bd90      	pop	{r4, r7, pc}
10002188:	100116f4 	.word	0x100116f4
1000218c:	10020000 	.word	0x10020000
10002190:	100116e0 	.word	0x100116e0
10002194:	100116ec 	.word	0x100116ec
10002198:	10040000 	.word	0x10040000
1000219c:	10020a84 	.word	0x10020a84
100021a0:	10048000 	.word	0x10048000
100021a4:	100209e0 	.word	0x100209e0
100021a8:	100209e8 	.word	0x100209e8
100021ac:	100209e4 	.word	0x100209e4

100021b0 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
100021b0:	b590      	push	{r4, r7, lr}
100021b2:	b08b      	sub	sp, #44	@ 0x2c
100021b4:	af04      	add	r7, sp, #16
100021b6:	6078      	str	r0, [r7, #4]
100021b8:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
100021ba:	2300      	movs	r3, #0
100021bc:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
100021be:	2300      	movs	r3, #0
100021c0:	613b      	str	r3, [r7, #16]
  int status = 0;
100021c2:	2300      	movs	r3, #0
100021c4:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
100021c6:	f7ff fe31 	bl	10001e2c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
100021ca:	6878      	ldr	r0, [r7, #4]
100021cc:	f7ff ff50 	bl	10002070 <OPENAMP_shmem_init>
100021d0:	60f8      	str	r0, [r7, #12]
  if(status)
100021d2:	68fb      	ldr	r3, [r7, #12]
100021d4:	2b00      	cmp	r3, #0
100021d6:	d001      	beq.n	100021dc <MX_OPENAMP_Init+0x2c>
  {
    return status;
100021d8:	68fb      	ldr	r3, [r7, #12]
100021da:	e068      	b.n	100022ae <MX_OPENAMP_Init+0xfe>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
100021dc:	6878      	ldr	r0, [r7, #4]
100021de:	4b36      	ldr	r3, [pc, #216]	@ (100022b8 <MX_OPENAMP_Init+0x108>)
100021e0:	681b      	ldr	r3, [r3, #0]
100021e2:	f103 0218 	add.w	r2, r3, #24
100021e6:	4b35      	ldr	r3, [pc, #212]	@ (100022bc <MX_OPENAMP_Init+0x10c>)
100021e8:	681b      	ldr	r3, [r3, #0]
100021ea:	2100      	movs	r1, #0
100021ec:	9102      	str	r1, [sp, #8]
100021ee:	4934      	ldr	r1, [pc, #208]	@ (100022c0 <MX_OPENAMP_Init+0x110>)
100021f0:	9101      	str	r1, [sp, #4]
100021f2:	2100      	movs	r1, #0
100021f4:	9100      	str	r1, [sp, #0]
100021f6:	21ff      	movs	r1, #255	@ 0xff
100021f8:	f009 f806 	bl	1000b208 <rproc_virtio_create_vdev>
100021fc:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
100021fe:	693b      	ldr	r3, [r7, #16]
10002200:	2b00      	cmp	r3, #0
10002202:	d102      	bne.n	1000220a <MX_OPENAMP_Init+0x5a>
  {
    return -1;
10002204:	f04f 33ff 	mov.w	r3, #4294967295
10002208:	e051      	b.n	100022ae <MX_OPENAMP_Init+0xfe>
  }


  rproc_virtio_wait_remote_ready(vdev);
1000220a:	6938      	ldr	r0, [r7, #16]
1000220c:	f009 f917 	bl	1000b43e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
10002210:	4b29      	ldr	r3, [pc, #164]	@ (100022b8 <MX_OPENAMP_Init+0x108>)
10002212:	681b      	ldr	r3, [r3, #0]
10002214:	3334      	adds	r3, #52	@ 0x34
10002216:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10002218:	697b      	ldr	r3, [r7, #20]
1000221a:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
1000221c:	697b      	ldr	r3, [r7, #20]
1000221e:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
10002220:	461c      	mov	r4, r3
10002222:	4b28      	ldr	r3, [pc, #160]	@ (100022c4 <MX_OPENAMP_Init+0x114>)
10002224:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10002226:	697a      	ldr	r2, [r7, #20]
10002228:	6892      	ldr	r2, [r2, #8]
1000222a:	6979      	ldr	r1, [r7, #20]
1000222c:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
1000222e:	9102      	str	r1, [sp, #8]
10002230:	9201      	str	r2, [sp, #4]
10002232:	9300      	str	r3, [sp, #0]
10002234:	4623      	mov	r3, r4
10002236:	4602      	mov	r2, r0
10002238:	2100      	movs	r1, #0
1000223a:	6938      	ldr	r0, [r7, #16]
1000223c:	f009 f892 	bl	1000b364 <rproc_virtio_init_vring>
10002240:	60f8      	str	r0, [r7, #12]
  if (status != 0)
10002242:	68fb      	ldr	r3, [r7, #12]
10002244:	2b00      	cmp	r3, #0
10002246:	d001      	beq.n	1000224c <MX_OPENAMP_Init+0x9c>
  {
    return status;
10002248:	68fb      	ldr	r3, [r7, #12]
1000224a:	e030      	b.n	100022ae <MX_OPENAMP_Init+0xfe>


  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
1000224c:	4b1a      	ldr	r3, [pc, #104]	@ (100022b8 <MX_OPENAMP_Init+0x108>)
1000224e:	681b      	ldr	r3, [r3, #0]
10002250:	3348      	adds	r3, #72	@ 0x48
10002252:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10002254:	697b      	ldr	r3, [r7, #20]
10002256:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
10002258:	697b      	ldr	r3, [r7, #20]
1000225a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000225c:	461c      	mov	r4, r3
1000225e:	4b19      	ldr	r3, [pc, #100]	@ (100022c4 <MX_OPENAMP_Init+0x114>)
10002260:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
10002262:	697a      	ldr	r2, [r7, #20]
10002264:	6892      	ldr	r2, [r2, #8]
10002266:	6979      	ldr	r1, [r7, #20]
10002268:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
1000226a:	9102      	str	r1, [sp, #8]
1000226c:	9201      	str	r2, [sp, #4]
1000226e:	9300      	str	r3, [sp, #0]
10002270:	4623      	mov	r3, r4
10002272:	4602      	mov	r2, r0
10002274:	2101      	movs	r1, #1
10002276:	6938      	ldr	r0, [r7, #16]
10002278:	f009 f874 	bl	1000b364 <rproc_virtio_init_vring>
1000227c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
1000227e:	68fb      	ldr	r3, [r7, #12]
10002280:	2b00      	cmp	r3, #0
10002282:	d001      	beq.n	10002288 <MX_OPENAMP_Init+0xd8>
  {
    return status;
10002284:	68fb      	ldr	r3, [r7, #12]
10002286:	e012      	b.n	100022ae <MX_OPENAMP_Init+0xfe>
  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
                             (size_t)SHM_SIZE);
10002288:	4a0f      	ldr	r2, [pc, #60]	@ (100022c8 <MX_OPENAMP_Init+0x118>)
1000228a:	4b10      	ldr	r3, [pc, #64]	@ (100022cc <MX_OPENAMP_Init+0x11c>)
1000228c:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
1000228e:	461a      	mov	r2, r3
10002290:	f04f 31ff 	mov.w	r1, #4294967295
10002294:	480e      	ldr	r0, [pc, #56]	@ (100022d0 <MX_OPENAMP_Init+0x120>)
10002296:	f009 fd6a 	bl	1000bd6e <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
1000229a:	4b0a      	ldr	r3, [pc, #40]	@ (100022c4 <MX_OPENAMP_Init+0x114>)
1000229c:	681b      	ldr	r3, [r3, #0]
1000229e:	4a0c      	ldr	r2, [pc, #48]	@ (100022d0 <MX_OPENAMP_Init+0x120>)
100022a0:	9200      	str	r2, [sp, #0]
100022a2:	683a      	ldr	r2, [r7, #0]
100022a4:	6939      	ldr	r1, [r7, #16]
100022a6:	480b      	ldr	r0, [pc, #44]	@ (100022d4 <MX_OPENAMP_Init+0x124>)
100022a8:	f00a f85e 	bl	1000c368 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
100022ac:	2300      	movs	r3, #0
}
100022ae:	4618      	mov	r0, r3
100022b0:	371c      	adds	r7, #28
100022b2:	46bd      	mov	sp, r7
100022b4:	bd90      	pop	{r4, r7, pc}
100022b6:	bf00      	nop
100022b8:	100209e8 	.word	0x100209e8
100022bc:	100209e4 	.word	0x100209e4
100022c0:	10001f41 	.word	0x10001f41
100022c4:	100209e0 	.word	0x100209e0
100022c8:	10048000 	.word	0x10048000
100022cc:	10040000 	.word	0x10040000
100022d0:	100209ec 	.word	0x100209ec
100022d4:	100209f8 	.word	0x100209f8

100022d8 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
100022d8:	b580      	push	{r7, lr}
100022da:	b08a      	sub	sp, #40	@ 0x28
100022dc:	af04      	add	r7, sp, #16
100022de:	60f8      	str	r0, [r7, #12]
100022e0:	60b9      	str	r1, [r7, #8]
100022e2:	607a      	str	r2, [r7, #4]
100022e4:	603b      	str	r3, [r7, #0]
  int ret = 0;
100022e6:	2300      	movs	r3, #0
100022e8:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
100022ea:	6a3b      	ldr	r3, [r7, #32]
100022ec:	9302      	str	r3, [sp, #8]
100022ee:	683b      	ldr	r3, [r7, #0]
100022f0:	9301      	str	r3, [sp, #4]
100022f2:	687b      	ldr	r3, [r7, #4]
100022f4:	9300      	str	r3, [sp, #0]
100022f6:	f04f 33ff 	mov.w	r3, #4294967295
100022fa:	68ba      	ldr	r2, [r7, #8]
100022fc:	4904      	ldr	r1, [pc, #16]	@ (10002310 <OPENAMP_create_endpoint+0x38>)
100022fe:	68f8      	ldr	r0, [r7, #12]
10002300:	f009 fb6a 	bl	1000b9d8 <rpmsg_create_ept>
10002304:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
10002306:	697b      	ldr	r3, [r7, #20]
}
10002308:	4618      	mov	r0, r3
1000230a:	3718      	adds	r7, #24
1000230c:	46bd      	mov	sp, r7
1000230e:	bd80      	pop	{r7, pc}
10002310:	100209f8 	.word	0x100209f8

10002314 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
10002314:	b580      	push	{r7, lr}
10002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
10002318:	4b03      	ldr	r3, [pc, #12]	@ (10002328 <OPENAMP_check_for_message+0x14>)
1000231a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1000231c:	4618      	mov	r0, r3
1000231e:	f7ff fde5 	bl	10001eec <MAILBOX_Poll>
}
10002322:	bf00      	nop
10002324:	bd80      	pop	{r7, pc}
10002326:	bf00      	nop
10002328:	100209f8 	.word	0x100209f8

1000232c <log_buff>:

#if defined (__LOG_TRACE_IO_)
char system_log_buf[SYSTEM_TRACE_BUF_SZ];

__weak void log_buff(int ch)
{
1000232c:	b480      	push	{r7}
1000232e:	b083      	sub	sp, #12
10002330:	af00      	add	r7, sp, #0
10002332:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
 static int offset = 0;

	if (offset + 1 >= SYSTEM_TRACE_BUF_SZ)
10002334:	4b0e      	ldr	r3, [pc, #56]	@ (10002370 <log_buff+0x44>)
10002336:	681b      	ldr	r3, [r3, #0]
10002338:	f240 72fe 	movw	r2, #2046	@ 0x7fe
1000233c:	4293      	cmp	r3, r2
1000233e:	dd02      	ble.n	10002346 <log_buff+0x1a>
		offset = 0;
10002340:	4b0b      	ldr	r3, [pc, #44]	@ (10002370 <log_buff+0x44>)
10002342:	2200      	movs	r2, #0
10002344:	601a      	str	r2, [r3, #0]

	system_log_buf[offset] = ch;
10002346:	4b0a      	ldr	r3, [pc, #40]	@ (10002370 <log_buff+0x44>)
10002348:	681b      	ldr	r3, [r3, #0]
1000234a:	687a      	ldr	r2, [r7, #4]
1000234c:	b2d1      	uxtb	r1, r2
1000234e:	4a09      	ldr	r2, [pc, #36]	@ (10002374 <log_buff+0x48>)
10002350:	54d1      	strb	r1, [r2, r3]
	system_log_buf[offset++ + 1] = '\0';
10002352:	4b07      	ldr	r3, [pc, #28]	@ (10002370 <log_buff+0x44>)
10002354:	681b      	ldr	r3, [r3, #0]
10002356:	1c5a      	adds	r2, r3, #1
10002358:	4905      	ldr	r1, [pc, #20]	@ (10002370 <log_buff+0x44>)
1000235a:	600a      	str	r2, [r1, #0]
1000235c:	3301      	adds	r3, #1
1000235e:	4a05      	ldr	r2, [pc, #20]	@ (10002374 <log_buff+0x48>)
10002360:	2100      	movs	r1, #0
10002362:	54d1      	strb	r1, [r2, r3]
}
10002364:	bf00      	nop
10002366:	370c      	adds	r7, #12
10002368:	46bd      	mov	sp, r7
1000236a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000236e:	4770      	bx	lr
10002370:	10021288 	.word	0x10021288
10002374:	10020a88 	.word	0x10020a88

10002378 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __attribute__(( weak )) fputc(int ch, FILE *f)
#endif /* __GNUC__ */

#if defined (__LOG_UART_IO_) || defined (__LOG_TRACE_IO_)
PUTCHAR_PROTOTYPE
{
10002378:	b580      	push	{r7, lr}
1000237a:	b082      	sub	sp, #8
1000237c:	af00      	add	r7, sp, #0
1000237e:	6078      	str	r0, [r7, #4]
#if defined (__LOG_UART_IO_)
extern UART_HandleTypeDef huart;
  HAL_UART_Transmit(&huart, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
#endif
#if defined (__LOG_TRACE_IO_)
	log_buff(ch);
10002380:	6878      	ldr	r0, [r7, #4]
10002382:	f7ff ffd3 	bl	1000232c <log_buff>
#endif
	return ch;
10002386:	687b      	ldr	r3, [r7, #4]
}
10002388:	4618      	mov	r0, r3
1000238a:	3708      	adds	r7, #8
1000238c:	46bd      	mov	sp, r7
1000238e:	bd80      	pop	{r7, pc}

10002390 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
10002390:	b480      	push	{r7}
10002392:	b085      	sub	sp, #20
10002394:	af00      	add	r7, sp, #0
10002396:	60f8      	str	r0, [r7, #12]
10002398:	60b9      	str	r1, [r7, #8]
1000239a:	607a      	str	r2, [r7, #4]
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
1000239c:	687b      	ldr	r3, [r7, #4]
1000239e:	228c      	movs	r2, #140	@ 0x8c
100023a0:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
100023a2:	68bb      	ldr	r3, [r7, #8]
100023a4:	4a03      	ldr	r2, [pc, #12]	@ (100023b4 <resource_table_init+0x24>)
100023a6:	601a      	str	r2, [r3, #0]
}
100023a8:	bf00      	nop
100023aa:	3714      	adds	r7, #20
100023ac:	46bd      	mov	sp, r7
100023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
100023b2:	4770      	bx	lr
100023b4:	1002029c 	.word	0x1002029c

100023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100023b8:	b480      	push	{r7}
100023ba:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
100023bc:	bf00      	nop
100023be:	46bd      	mov	sp, r7
100023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100023c4:	4770      	bx	lr
	...

100023c8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
100023c8:	b580      	push	{r7, lr}
100023ca:	b082      	sub	sp, #8
100023cc:	af00      	add	r7, sp, #0
100023ce:	6078      	str	r0, [r7, #4]

  if(hipcc->Instance==IPCC)
100023d0:	687b      	ldr	r3, [r7, #4]
100023d2:	681b      	ldr	r3, [r3, #0]
100023d4:	4a0a      	ldr	r2, [pc, #40]	@ (10002400 <HAL_IPCC_MspInit+0x38>)
100023d6:	4293      	cmp	r3, r2
100023d8:	d10d      	bne.n	100023f6 <HAL_IPCC_MspInit+0x2e>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
100023da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100023de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
100023e2:	f8c3 2aa0 	str.w	r2, [r3, #2720]	@ 0xaa0
  /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, DEFAULT_IRQ_PRIO, 0);
100023e6:	2200      	movs	r2, #0
100023e8:	2101      	movs	r1, #1
100023ea:	2067      	movs	r0, #103	@ 0x67
100023ec:	f002 f8fd 	bl	100045ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
100023f0:	2067      	movs	r0, #103	@ 0x67
100023f2:	f002 f916 	bl	10004622 <HAL_NVIC_EnableIRQ>
  /* USER CODE END IPCC_MspInit 1 */
}



}
100023f6:	bf00      	nop
100023f8:	3708      	adds	r7, #8
100023fa:	46bd      	mov	sp, r7
100023fc:	bd80      	pop	{r7, pc}
100023fe:	bf00      	nop
10002400:	4c001000 	.word	0x4c001000

10002404 <HAL_I2C_MspInit>:

}

/* USER CODE BEGIN 1 */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
10002404:	b580      	push	{r7, lr}
10002406:	b0de      	sub	sp, #376	@ 0x178
10002408:	af00      	add	r7, sp, #0
1000240a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
1000240e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
10002412:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C5)
10002414:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10002418:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
1000241c:	681b      	ldr	r3, [r3, #0]
1000241e:	681b      	ldr	r3, [r3, #0]
10002420:	4a2b      	ldr	r2, [pc, #172]	@ (100024d0 <HAL_I2C_MspInit+0xcc>)
10002422:	4293      	cmp	r3, r2
10002424:	d14e      	bne.n	100024c4 <HAL_I2C_MspInit+0xc0>
  {
  /* USER CODE BEGIN I2C5_MspInit 0 */
    if(IS_ENGINEERING_BOOT_MODE())
10002426:	4b2b      	ldr	r3, [pc, #172]	@ (100024d4 <HAL_I2C_MspInit+0xd0>)
10002428:	681b      	ldr	r3, [r3, #0]
1000242a:	f003 0307 	and.w	r3, r3, #7
1000242e:	2b04      	cmp	r3, #4
10002430:	d115      	bne.n	1000245e <HAL_I2C_MspInit+0x5a>
    {
      RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

      /*##-1- Configure the I2C clock source #*/
      RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C35;
10002432:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
10002436:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
1000243a:	f04f 0220 	mov.w	r2, #32
1000243e:	f04f 0300 	mov.w	r3, #0
10002442:	e9c1 2300 	strd	r2, r3, [r1]
      RCC_PeriphCLKInitStruct.I2c35ClockSelection = RCC_I2C35CLKSOURCE_HSI;
10002446:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
1000244a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
1000244e:	2202      	movs	r2, #2
10002450:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
      HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
10002454:	f107 0308 	add.w	r3, r7, #8
10002458:	4618      	mov	r0, r3
1000245a:	f006 fa5f 	bl	1000891c <HAL_RCCEx_PeriphCLKConfig>

    /**I2C5 GPIO Configuration
    PA11     ------> I2C5_SCL
    PA12     ------> I2C5_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
1000245e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
10002462:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10002466:	2312      	movs	r3, #18
10002468:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1000246c:	2300      	movs	r3, #0
1000246e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10002472:	2300      	movs	r3, #0
10002474:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
10002478:	2304      	movs	r3, #4
1000247a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    PERIPH_LOCK(GPIOA);
1000247e:	2164      	movs	r1, #100	@ 0x64
10002480:	4815      	ldr	r0, [pc, #84]	@ (100024d8 <HAL_I2C_MspInit+0xd4>)
10002482:	f7fe fd4f 	bl	10000f24 <Periph_Lock>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10002486:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
1000248a:	4619      	mov	r1, r3
1000248c:	4812      	ldr	r0, [pc, #72]	@ (100024d8 <HAL_I2C_MspInit+0xd4>)
1000248e:	f002 fa91 	bl	100049b4 <HAL_GPIO_Init>
    PERIPH_UNLOCK(GPIOA);
10002492:	4811      	ldr	r0, [pc, #68]	@ (100024d8 <HAL_I2C_MspInit+0xd4>)
10002494:	f7fe fdd4 	bl	10001040 <Periph_Unlock>
    /* Peripheral clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
10002498:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000249c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
100024a0:	f8c3 2a80 	str.w	r2, [r3, #2688]	@ 0xa80
    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, DEFAULT_IRQ_PRIO, 0);
100024a4:	2200      	movs	r2, #0
100024a6:	2101      	movs	r1, #1
100024a8:	206b      	movs	r0, #107	@ 0x6b
100024aa:	f002 f89e 	bl	100045ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
100024ae:	206b      	movs	r0, #107	@ 0x6b
100024b0:	f002 f8b7 	bl	10004622 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C5_ER_IRQn, DEFAULT_IRQ_PRIO, 0);
100024b4:	2200      	movs	r2, #0
100024b6:	2101      	movs	r1, #1
100024b8:	206c      	movs	r0, #108	@ 0x6c
100024ba:	f002 f896 	bl	100045ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_ER_IRQn);
100024be:	206c      	movs	r0, #108	@ 0x6c
100024c0:	f002 f8af 	bl	10004622 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
100024c4:	bf00      	nop
100024c6:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
100024ca:	46bd      	mov	sp, r7
100024cc:	bd80      	pop	{r7, pc}
100024ce:	bf00      	nop
100024d0:	40015000 	.word	0x40015000
100024d4:	50020000 	.word	0x50020000
100024d8:	50002000 	.word	0x50002000

100024dc <NMI_Handler>:
/******************************************************************************/
/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
100024dc:	b480      	push	{r7}
100024de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
100024e0:	bf00      	nop
100024e2:	46bd      	mov	sp, r7
100024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
100024e8:	4770      	bx	lr

100024ea <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
100024ea:	b480      	push	{r7}
100024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100024ee:	bf00      	nop
100024f0:	e7fd      	b.n	100024ee <HardFault_Handler+0x4>

100024f2 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
100024f2:	b480      	push	{r7}
100024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100024f6:	bf00      	nop
100024f8:	e7fd      	b.n	100024f6 <MemManage_Handler+0x4>

100024fa <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
100024fa:	b480      	push	{r7}
100024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
100024fe:	bf00      	nop
10002500:	e7fd      	b.n	100024fe <BusFault_Handler+0x4>

10002502 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
10002502:	b480      	push	{r7}
10002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10002506:	bf00      	nop
10002508:	e7fd      	b.n	10002506 <UsageFault_Handler+0x4>

1000250a <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
1000250a:	b480      	push	{r7}
1000250c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1000250e:	bf00      	nop
10002510:	46bd      	mov	sp, r7
10002512:	f85d 7b04 	ldr.w	r7, [sp], #4
10002516:	4770      	bx	lr

10002518 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
10002518:	b480      	push	{r7}
1000251a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
1000251c:	bf00      	nop
1000251e:	46bd      	mov	sp, r7
10002520:	f85d 7b04 	ldr.w	r7, [sp], #4
10002524:	4770      	bx	lr

10002526 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
10002526:	b480      	push	{r7}
10002528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
1000252a:	bf00      	nop
1000252c:	46bd      	mov	sp, r7
1000252e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002532:	4770      	bx	lr

10002534 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
10002534:	b580      	push	{r7, lr}
10002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10002538:	f001 ff2e 	bl	10004398 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
1000253c:	f002 f88b 	bl	10004656 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10002540:	bf00      	nop
10002542:	bd80      	pop	{r7, pc}

10002544 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
10002544:	b580      	push	{r7, lr}
10002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */
  log_dbg("%s: IT RX1\r\n", __func__);
  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
10002548:	4802      	ldr	r0, [pc, #8]	@ (10002554 <IPCC_RX1_IRQHandler+0x10>)
1000254a:	f004 f8c5 	bl	100066d8 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */

  /* USER CODE END IPCC_RX1_IRQn 1 */
}
1000254e:	bf00      	nop
10002550:	bd80      	pop	{r7, pc}
10002552:	bf00      	nop
10002554:	10020398 	.word	0x10020398

10002558 <EXTI14_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI14_IRQHandler(void)
{
10002558:	b580      	push	{r7, lr}
1000255a:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&hexti);
1000255c:	4802      	ldr	r0, [pc, #8]	@ (10002568 <EXTI14_IRQHandler+0x10>)
1000255e:	f002 f9e1 	bl	10004924 <HAL_EXTI_IRQHandler>
}
10002562:	bf00      	nop
10002564:	bd80      	pop	{r7, pc}
10002566:	bf00      	nop
10002568:	100203d4 	.word	0x100203d4

1000256c <I2C5_EV_IRQHandler>:
/* USER CODE END 1 */
void I2C5_EV_IRQHandler(void)
{
1000256c:	b580      	push	{r7, lr}
1000256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
10002570:	4802      	ldr	r0, [pc, #8]	@ (1000257c <I2C5_EV_IRQHandler+0x10>)
10002572:	f002 fee3 	bl	1000533c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
10002576:	bf00      	nop
10002578:	bd80      	pop	{r7, pc}
1000257a:	bf00      	nop
1000257c:	10020344 	.word	0x10020344

10002580 <I2C5_ER_IRQHandler>:

void I2C5_ER_IRQHandler(void)
{
10002580:	b580      	push	{r7, lr}
10002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_ER_IRQn 0 */

  /* USER CODE END I2C5_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c5);
10002584:	4802      	ldr	r0, [pc, #8]	@ (10002590 <I2C5_ER_IRQHandler+0x10>)
10002586:	f002 fef3 	bl	10005370 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C5_ER_IRQn 1 */

  /* USER CODE END I2C5_ER_IRQn 1 */
}
1000258a:	bf00      	nop
1000258c:	bd80      	pop	{r7, pc}
1000258e:	bf00      	nop
10002590:	10020344 	.word	0x10020344

10002594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
10002594:	b480      	push	{r7}
10002596:	af00      	add	r7, sp, #0
	return 1;
10002598:	2301      	movs	r3, #1
}
1000259a:	4618      	mov	r0, r3
1000259c:	46bd      	mov	sp, r7
1000259e:	f85d 7b04 	ldr.w	r7, [sp], #4
100025a2:	4770      	bx	lr

100025a4 <_kill>:

int _kill(int pid, int sig)
{
100025a4:	b580      	push	{r7, lr}
100025a6:	b082      	sub	sp, #8
100025a8:	af00      	add	r7, sp, #0
100025aa:	6078      	str	r0, [r7, #4]
100025ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
100025ae:	f00b fc7d 	bl	1000deac <__errno>
100025b2:	4603      	mov	r3, r0
100025b4:	2216      	movs	r2, #22
100025b6:	601a      	str	r2, [r3, #0]
	return -1;
100025b8:	f04f 33ff 	mov.w	r3, #4294967295
}
100025bc:	4618      	mov	r0, r3
100025be:	3708      	adds	r7, #8
100025c0:	46bd      	mov	sp, r7
100025c2:	bd80      	pop	{r7, pc}

100025c4 <_exit>:

void _exit (int status)
{
100025c4:	b580      	push	{r7, lr}
100025c6:	b082      	sub	sp, #8
100025c8:	af00      	add	r7, sp, #0
100025ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
100025cc:	f04f 31ff 	mov.w	r1, #4294967295
100025d0:	6878      	ldr	r0, [r7, #4]
100025d2:	f7ff ffe7 	bl	100025a4 <_kill>
	while (1) {}		/* Make sure we hang here */
100025d6:	bf00      	nop
100025d8:	e7fd      	b.n	100025d6 <_exit+0x12>

100025da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100025da:	b580      	push	{r7, lr}
100025dc:	b086      	sub	sp, #24
100025de:	af00      	add	r7, sp, #0
100025e0:	60f8      	str	r0, [r7, #12]
100025e2:	60b9      	str	r1, [r7, #8]
100025e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
100025e6:	2300      	movs	r3, #0
100025e8:	617b      	str	r3, [r7, #20]
100025ea:	e00a      	b.n	10002602 <_read+0x28>
	{
		*ptr++ = __io_getchar();
100025ec:	f3af 8000 	nop.w
100025f0:	4601      	mov	r1, r0
100025f2:	68bb      	ldr	r3, [r7, #8]
100025f4:	1c5a      	adds	r2, r3, #1
100025f6:	60ba      	str	r2, [r7, #8]
100025f8:	b2ca      	uxtb	r2, r1
100025fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
100025fc:	697b      	ldr	r3, [r7, #20]
100025fe:	3301      	adds	r3, #1
10002600:	617b      	str	r3, [r7, #20]
10002602:	697a      	ldr	r2, [r7, #20]
10002604:	687b      	ldr	r3, [r7, #4]
10002606:	429a      	cmp	r2, r3
10002608:	dbf0      	blt.n	100025ec <_read+0x12>
	}

return len;
1000260a:	687b      	ldr	r3, [r7, #4]
}
1000260c:	4618      	mov	r0, r3
1000260e:	3718      	adds	r7, #24
10002610:	46bd      	mov	sp, r7
10002612:	bd80      	pop	{r7, pc}

10002614 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10002614:	b580      	push	{r7, lr}
10002616:	b086      	sub	sp, #24
10002618:	af00      	add	r7, sp, #0
1000261a:	60f8      	str	r0, [r7, #12]
1000261c:	60b9      	str	r1, [r7, #8]
1000261e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
10002620:	2300      	movs	r3, #0
10002622:	617b      	str	r3, [r7, #20]
10002624:	e009      	b.n	1000263a <_write+0x26>
	{
		__io_putchar(*ptr++);
10002626:	68bb      	ldr	r3, [r7, #8]
10002628:	1c5a      	adds	r2, r3, #1
1000262a:	60ba      	str	r2, [r7, #8]
1000262c:	781b      	ldrb	r3, [r3, #0]
1000262e:	4618      	mov	r0, r3
10002630:	f7ff fea2 	bl	10002378 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
10002634:	697b      	ldr	r3, [r7, #20]
10002636:	3301      	adds	r3, #1
10002638:	617b      	str	r3, [r7, #20]
1000263a:	697a      	ldr	r2, [r7, #20]
1000263c:	687b      	ldr	r3, [r7, #4]
1000263e:	429a      	cmp	r2, r3
10002640:	dbf1      	blt.n	10002626 <_write+0x12>
	}
	return len;
10002642:	687b      	ldr	r3, [r7, #4]
}
10002644:	4618      	mov	r0, r3
10002646:	3718      	adds	r7, #24
10002648:	46bd      	mov	sp, r7
1000264a:	bd80      	pop	{r7, pc}

1000264c <_close>:

int _close(int file)
{
1000264c:	b480      	push	{r7}
1000264e:	b083      	sub	sp, #12
10002650:	af00      	add	r7, sp, #0
10002652:	6078      	str	r0, [r7, #4]
	return -1;
10002654:	f04f 33ff 	mov.w	r3, #4294967295
}
10002658:	4618      	mov	r0, r3
1000265a:	370c      	adds	r7, #12
1000265c:	46bd      	mov	sp, r7
1000265e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002662:	4770      	bx	lr

10002664 <_fstat>:


int _fstat(int file, struct stat *st)
{
10002664:	b480      	push	{r7}
10002666:	b083      	sub	sp, #12
10002668:	af00      	add	r7, sp, #0
1000266a:	6078      	str	r0, [r7, #4]
1000266c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
1000266e:	683b      	ldr	r3, [r7, #0]
10002670:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
10002674:	605a      	str	r2, [r3, #4]
	return 0;
10002676:	2300      	movs	r3, #0
}
10002678:	4618      	mov	r0, r3
1000267a:	370c      	adds	r7, #12
1000267c:	46bd      	mov	sp, r7
1000267e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002682:	4770      	bx	lr

10002684 <_isatty>:

int _isatty(int file)
{
10002684:	b480      	push	{r7}
10002686:	b083      	sub	sp, #12
10002688:	af00      	add	r7, sp, #0
1000268a:	6078      	str	r0, [r7, #4]
	return 1;
1000268c:	2301      	movs	r3, #1
}
1000268e:	4618      	mov	r0, r3
10002690:	370c      	adds	r7, #12
10002692:	46bd      	mov	sp, r7
10002694:	f85d 7b04 	ldr.w	r7, [sp], #4
10002698:	4770      	bx	lr

1000269a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
1000269a:	b480      	push	{r7}
1000269c:	b085      	sub	sp, #20
1000269e:	af00      	add	r7, sp, #0
100026a0:	60f8      	str	r0, [r7, #12]
100026a2:	60b9      	str	r1, [r7, #8]
100026a4:	607a      	str	r2, [r7, #4]
	return 0;
100026a6:	2300      	movs	r3, #0
}
100026a8:	4618      	mov	r0, r3
100026aa:	3714      	adds	r7, #20
100026ac:	46bd      	mov	sp, r7
100026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
100026b2:	4770      	bx	lr

100026b4 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
100026b4:	b580      	push	{r7, lr}
100026b6:	b084      	sub	sp, #16
100026b8:	af00      	add	r7, sp, #0
100026ba:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
100026bc:	2305      	movs	r3, #5
100026be:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
100026c0:	2300      	movs	r3, #0
100026c2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
100026c4:	6878      	ldr	r0, [r7, #4]
100026c6:	f001 fad9 	bl	10003c7c <null_ptr_check>
100026ca:	4603      	mov	r3, r0
100026cc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
100026ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
100026d2:	2b00      	cmp	r3, #0
100026d4:	d133      	bne.n	1000273e <bme280_init+0x8a>
		while (try_count) {
100026d6:	e028      	b.n	1000272a <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
100026d8:	f107 010d 	add.w	r1, r7, #13
100026dc:	687b      	ldr	r3, [r7, #4]
100026de:	2201      	movs	r2, #1
100026e0:	20d0      	movs	r0, #208	@ 0xd0
100026e2:	f000 f832 	bl	1000274a <bme280_get_regs>
100026e6:	4603      	mov	r3, r0
100026e8:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
100026ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
100026ee:	2b00      	cmp	r3, #0
100026f0:	d114      	bne.n	1000271c <bme280_init+0x68>
100026f2:	7b7b      	ldrb	r3, [r7, #13]
100026f4:	2b60      	cmp	r3, #96	@ 0x60
100026f6:	d111      	bne.n	1000271c <bme280_init+0x68>
				dev->chip_id = chip_id;
100026f8:	7b7a      	ldrb	r2, [r7, #13]
100026fa:	687b      	ldr	r3, [r7, #4]
100026fc:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
100026fe:	6878      	ldr	r0, [r7, #4]
10002700:	f000 f978 	bl	100029f4 <bme280_soft_reset>
10002704:	4603      	mov	r3, r0
10002706:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
10002708:	f997 300f 	ldrsb.w	r3, [r7, #15]
1000270c:	2b00      	cmp	r3, #0
1000270e:	d110      	bne.n	10002732 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
10002710:	6878      	ldr	r0, [r7, #4]
10002712:	f001 f91b 	bl	1000394c <get_calib_data>
10002716:	4603      	mov	r3, r0
10002718:	73fb      	strb	r3, [r7, #15]
				}
				break;
1000271a:	e00a      	b.n	10002732 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
1000271c:	687b      	ldr	r3, [r7, #4]
1000271e:	68db      	ldr	r3, [r3, #12]
10002720:	2001      	movs	r0, #1
10002722:	4798      	blx	r3
			--try_count;
10002724:	7bbb      	ldrb	r3, [r7, #14]
10002726:	3b01      	subs	r3, #1
10002728:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
1000272a:	7bbb      	ldrb	r3, [r7, #14]
1000272c:	2b00      	cmp	r3, #0
1000272e:	d1d3      	bne.n	100026d8 <bme280_init+0x24>
10002730:	e000      	b.n	10002734 <bme280_init+0x80>
				break;
10002732:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
10002734:	7bbb      	ldrb	r3, [r7, #14]
10002736:	2b00      	cmp	r3, #0
10002738:	d101      	bne.n	1000273e <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
1000273a:	23fe      	movs	r3, #254	@ 0xfe
1000273c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
1000273e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
10002742:	4618      	mov	r0, r3
10002744:	3710      	adds	r7, #16
10002746:	46bd      	mov	sp, r7
10002748:	bd80      	pop	{r7, pc}

1000274a <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
1000274a:	b590      	push	{r4, r7, lr}
1000274c:	b087      	sub	sp, #28
1000274e:	af00      	add	r7, sp, #0
10002750:	60b9      	str	r1, [r7, #8]
10002752:	607b      	str	r3, [r7, #4]
10002754:	4603      	mov	r3, r0
10002756:	73fb      	strb	r3, [r7, #15]
10002758:	4613      	mov	r3, r2
1000275a:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
1000275c:	6878      	ldr	r0, [r7, #4]
1000275e:	f001 fa8d 	bl	10003c7c <null_ptr_check>
10002762:	4603      	mov	r3, r0
10002764:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
10002766:	f997 3017 	ldrsb.w	r3, [r7, #23]
1000276a:	2b00      	cmp	r3, #0
1000276c:	d117      	bne.n	1000279e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
1000276e:	687b      	ldr	r3, [r7, #4]
10002770:	789b      	ldrb	r3, [r3, #2]
10002772:	2b01      	cmp	r3, #1
10002774:	d003      	beq.n	1000277e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
10002776:	7bfb      	ldrb	r3, [r7, #15]
10002778:	f063 037f 	orn	r3, r3, #127	@ 0x7f
1000277c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
1000277e:	687b      	ldr	r3, [r7, #4]
10002780:	685c      	ldr	r4, [r3, #4]
10002782:	687b      	ldr	r3, [r7, #4]
10002784:	7858      	ldrb	r0, [r3, #1]
10002786:	89bb      	ldrh	r3, [r7, #12]
10002788:	7bf9      	ldrb	r1, [r7, #15]
1000278a:	68ba      	ldr	r2, [r7, #8]
1000278c:	47a0      	blx	r4
1000278e:	4603      	mov	r3, r0
10002790:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
10002792:	f997 3017 	ldrsb.w	r3, [r7, #23]
10002796:	2b00      	cmp	r3, #0
10002798:	d001      	beq.n	1000279e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
1000279a:	23fc      	movs	r3, #252	@ 0xfc
1000279c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
1000279e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
100027a2:	4618      	mov	r0, r3
100027a4:	371c      	adds	r7, #28
100027a6:	46bd      	mov	sp, r7
100027a8:	bd90      	pop	{r4, r7, pc}

100027aa <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
100027aa:	b590      	push	{r4, r7, lr}
100027ac:	b08d      	sub	sp, #52	@ 0x34
100027ae:	af00      	add	r7, sp, #0
100027b0:	60f8      	str	r0, [r7, #12]
100027b2:	60b9      	str	r1, [r7, #8]
100027b4:	603b      	str	r3, [r7, #0]
100027b6:	4613      	mov	r3, r2
100027b8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
100027ba:	79fb      	ldrb	r3, [r7, #7]
100027bc:	2b0a      	cmp	r3, #10
100027be:	d901      	bls.n	100027c4 <bme280_set_regs+0x1a>
		len = 10;
100027c0:	230a      	movs	r3, #10
100027c2:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
100027c4:	6838      	ldr	r0, [r7, #0]
100027c6:	f001 fa59 	bl	10003c7c <null_ptr_check>
100027ca:	4603      	mov	r3, r0
100027cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
100027d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
100027d4:	2b00      	cmp	r3, #0
100027d6:	d156      	bne.n	10002886 <bme280_set_regs+0xdc>
100027d8:	68fb      	ldr	r3, [r7, #12]
100027da:	2b00      	cmp	r3, #0
100027dc:	d053      	beq.n	10002886 <bme280_set_regs+0xdc>
100027de:	68bb      	ldr	r3, [r7, #8]
100027e0:	2b00      	cmp	r3, #0
100027e2:	d050      	beq.n	10002886 <bme280_set_regs+0xdc>
		if (len != 0) {
100027e4:	79fb      	ldrb	r3, [r7, #7]
100027e6:	2b00      	cmp	r3, #0
100027e8:	d049      	beq.n	1000287e <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
100027ea:	68bb      	ldr	r3, [r7, #8]
100027ec:	781b      	ldrb	r3, [r3, #0]
100027ee:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
100027f0:	683b      	ldr	r3, [r7, #0]
100027f2:	789b      	ldrb	r3, [r3, #2]
100027f4:	2b01      	cmp	r3, #1
100027f6:	d01a      	beq.n	1000282e <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
100027f8:	2300      	movs	r3, #0
100027fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
100027fe:	e011      	b.n	10002824 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
10002800:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
10002804:	68fa      	ldr	r2, [r7, #12]
10002806:	4413      	add	r3, r2
10002808:	781a      	ldrb	r2, [r3, #0]
1000280a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
1000280e:	68f9      	ldr	r1, [r7, #12]
10002810:	440b      	add	r3, r1
10002812:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
10002816:	b2d2      	uxtb	r2, r2
10002818:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
1000281a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
1000281e:	3301      	adds	r3, #1
10002820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
10002824:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
10002828:	79fb      	ldrb	r3, [r7, #7]
1000282a:	429a      	cmp	r2, r3
1000282c:	d3e8      	bcc.n	10002800 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
1000282e:	79fb      	ldrb	r3, [r7, #7]
10002830:	2b01      	cmp	r3, #1
10002832:	d90d      	bls.n	10002850 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
10002834:	79fb      	ldrb	r3, [r7, #7]
10002836:	f107 0114 	add.w	r1, r7, #20
1000283a:	68ba      	ldr	r2, [r7, #8]
1000283c:	68f8      	ldr	r0, [r7, #12]
1000283e:	f001 f8c9 	bl	100039d4 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
10002842:	79fb      	ldrb	r3, [r7, #7]
10002844:	b29b      	uxth	r3, r3
10002846:	005b      	lsls	r3, r3, #1
10002848:	b29b      	uxth	r3, r3
1000284a:	3b01      	subs	r3, #1
1000284c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
1000284e:	e001      	b.n	10002854 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
10002850:	79fb      	ldrb	r3, [r7, #7]
10002852:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
10002854:	683b      	ldr	r3, [r7, #0]
10002856:	689c      	ldr	r4, [r3, #8]
10002858:	683b      	ldr	r3, [r7, #0]
1000285a:	7858      	ldrb	r0, [r3, #1]
1000285c:	68fb      	ldr	r3, [r7, #12]
1000285e:	7819      	ldrb	r1, [r3, #0]
10002860:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
10002862:	f107 0214 	add.w	r2, r7, #20
10002866:	47a0      	blx	r4
10002868:	4603      	mov	r3, r0
1000286a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
1000286e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
10002872:	2b00      	cmp	r3, #0
10002874:	d00b      	beq.n	1000288e <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
10002876:	23fc      	movs	r3, #252	@ 0xfc
10002878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
1000287c:	e007      	b.n	1000288e <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
1000287e:	23fd      	movs	r3, #253	@ 0xfd
10002880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
10002884:	e003      	b.n	1000288e <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
10002886:	23ff      	movs	r3, #255	@ 0xff
10002888:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
1000288c:	e000      	b.n	10002890 <bme280_set_regs+0xe6>
		if (len != 0) {
1000288e:	bf00      	nop
	}


	return rslt;
10002890:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
10002894:	4618      	mov	r0, r3
10002896:	3734      	adds	r7, #52	@ 0x34
10002898:	46bd      	mov	sp, r7
1000289a:	bd90      	pop	{r4, r7, pc}

1000289c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
1000289c:	b580      	push	{r7, lr}
1000289e:	b084      	sub	sp, #16
100028a0:	af00      	add	r7, sp, #0
100028a2:	4603      	mov	r3, r0
100028a4:	6039      	str	r1, [r7, #0]
100028a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
100028a8:	6838      	ldr	r0, [r7, #0]
100028aa:	f001 f9e7 	bl	10003c7c <null_ptr_check>
100028ae:	4603      	mov	r3, r0
100028b0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
100028b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
100028b6:	2b00      	cmp	r3, #0
100028b8:	d13f      	bne.n	1000293a <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
100028ba:	f107 030e 	add.w	r3, r7, #14
100028be:	6839      	ldr	r1, [r7, #0]
100028c0:	4618      	mov	r0, r3
100028c2:	f000 f874 	bl	100029ae <bme280_get_sensor_mode>
100028c6:	4603      	mov	r3, r0
100028c8:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
100028ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
100028ce:	2b00      	cmp	r3, #0
100028d0:	d107      	bne.n	100028e2 <bme280_set_sensor_settings+0x46>
100028d2:	7bbb      	ldrb	r3, [r7, #14]
100028d4:	2b00      	cmp	r3, #0
100028d6:	d004      	beq.n	100028e2 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
100028d8:	6838      	ldr	r0, [r7, #0]
100028da:	f000 fb3b 	bl	10002f54 <put_device_to_sleep>
100028de:	4603      	mov	r3, r0
100028e0:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
100028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
100028e6:	2b00      	cmp	r3, #0
100028e8:	d127      	bne.n	1000293a <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
100028ea:	79fb      	ldrb	r3, [r7, #7]
100028ec:	4619      	mov	r1, r3
100028ee:	2007      	movs	r0, #7
100028f0:	f001 f9a8 	bl	10003c44 <are_settings_changed>
100028f4:	4603      	mov	r3, r0
100028f6:	2b00      	cmp	r3, #0
100028f8:	d009      	beq.n	1000290e <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
100028fa:	683b      	ldr	r3, [r7, #0]
100028fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
10002900:	79fb      	ldrb	r3, [r7, #7]
10002902:	683a      	ldr	r2, [r7, #0]
10002904:	4618      	mov	r0, r3
10002906:	f000 f973 	bl	10002bf0 <set_osr_settings>
1000290a:	4603      	mov	r3, r0
1000290c:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
1000290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
10002912:	2b00      	cmp	r3, #0
10002914:	d111      	bne.n	1000293a <bme280_set_sensor_settings+0x9e>
10002916:	79fb      	ldrb	r3, [r7, #7]
10002918:	4619      	mov	r1, r3
1000291a:	2018      	movs	r0, #24
1000291c:	f001 f992 	bl	10003c44 <are_settings_changed>
10002920:	4603      	mov	r3, r0
10002922:	2b00      	cmp	r3, #0
10002924:	d009      	beq.n	1000293a <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
10002926:	683b      	ldr	r3, [r7, #0]
10002928:	f103 0138 	add.w	r1, r3, #56	@ 0x38
1000292c:	79fb      	ldrb	r3, [r7, #7]
1000292e:	683a      	ldr	r2, [r7, #0]
10002930:	4618      	mov	r0, r3
10002932:	f000 f9fa 	bl	10002d2a <set_filter_standby_settings>
10002936:	4603      	mov	r3, r0
10002938:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
1000293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
1000293e:	4618      	mov	r0, r3
10002940:	3710      	adds	r7, #16
10002942:	46bd      	mov	sp, r7
10002944:	bd80      	pop	{r7, pc}

10002946 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
10002946:	b580      	push	{r7, lr}
10002948:	b084      	sub	sp, #16
1000294a:	af00      	add	r7, sp, #0
1000294c:	4603      	mov	r3, r0
1000294e:	6039      	str	r1, [r7, #0]
10002950:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
10002952:	6838      	ldr	r0, [r7, #0]
10002954:	f001 f992 	bl	10003c7c <null_ptr_check>
10002958:	4603      	mov	r3, r0
1000295a:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
1000295c:	f997 300f 	ldrsb.w	r3, [r7, #15]
10002960:	2b00      	cmp	r3, #0
10002962:	d11e      	bne.n	100029a2 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
10002964:	f107 030e 	add.w	r3, r7, #14
10002968:	6839      	ldr	r1, [r7, #0]
1000296a:	4618      	mov	r0, r3
1000296c:	f000 f81f 	bl	100029ae <bme280_get_sensor_mode>
10002970:	4603      	mov	r3, r0
10002972:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
10002974:	f997 300f 	ldrsb.w	r3, [r7, #15]
10002978:	2b00      	cmp	r3, #0
1000297a:	d107      	bne.n	1000298c <bme280_set_sensor_mode+0x46>
1000297c:	7bbb      	ldrb	r3, [r7, #14]
1000297e:	2b00      	cmp	r3, #0
10002980:	d004      	beq.n	1000298c <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
10002982:	6838      	ldr	r0, [r7, #0]
10002984:	f000 fae6 	bl	10002f54 <put_device_to_sleep>
10002988:	4603      	mov	r3, r0
1000298a:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
1000298c:	f997 300f 	ldrsb.w	r3, [r7, #15]
10002990:	2b00      	cmp	r3, #0
10002992:	d106      	bne.n	100029a2 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
10002994:	79fb      	ldrb	r3, [r7, #7]
10002996:	6839      	ldr	r1, [r7, #0]
10002998:	4618      	mov	r0, r3
1000299a:	f000 faa8 	bl	10002eee <write_power_mode>
1000299e:	4603      	mov	r3, r0
100029a0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
100029a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
100029a6:	4618      	mov	r0, r3
100029a8:	3710      	adds	r7, #16
100029aa:	46bd      	mov	sp, r7
100029ac:	bd80      	pop	{r7, pc}

100029ae <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
100029ae:	b580      	push	{r7, lr}
100029b0:	b084      	sub	sp, #16
100029b2:	af00      	add	r7, sp, #0
100029b4:	6078      	str	r0, [r7, #4]
100029b6:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
100029b8:	6838      	ldr	r0, [r7, #0]
100029ba:	f001 f95f 	bl	10003c7c <null_ptr_check>
100029be:	4603      	mov	r3, r0
100029c0:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
100029c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
100029c6:	2b00      	cmp	r3, #0
100029c8:	d10e      	bne.n	100029e8 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
100029ca:	683b      	ldr	r3, [r7, #0]
100029cc:	2201      	movs	r2, #1
100029ce:	6879      	ldr	r1, [r7, #4]
100029d0:	20f4      	movs	r0, #244	@ 0xf4
100029d2:	f7ff feba 	bl	1000274a <bme280_get_regs>
100029d6:	4603      	mov	r3, r0
100029d8:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
100029da:	687b      	ldr	r3, [r7, #4]
100029dc:	781b      	ldrb	r3, [r3, #0]
100029de:	f003 0303 	and.w	r3, r3, #3
100029e2:	b2da      	uxtb	r2, r3
100029e4:	687b      	ldr	r3, [r7, #4]
100029e6:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
100029e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
100029ec:	4618      	mov	r0, r3
100029ee:	3710      	adds	r7, #16
100029f0:	46bd      	mov	sp, r7
100029f2:	bd80      	pop	{r7, pc}

100029f4 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
100029f4:	b580      	push	{r7, lr}
100029f6:	b084      	sub	sp, #16
100029f8:	af00      	add	r7, sp, #0
100029fa:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
100029fc:	23e0      	movs	r3, #224	@ 0xe0
100029fe:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
10002a00:	23b6      	movs	r3, #182	@ 0xb6
10002a02:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
10002a04:	6878      	ldr	r0, [r7, #4]
10002a06:	f001 f939 	bl	10003c7c <null_ptr_check>
10002a0a:	4603      	mov	r3, r0
10002a0c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
10002a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
10002a12:	2b00      	cmp	r3, #0
10002a14:	d10d      	bne.n	10002a32 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
10002a16:	f107 010d 	add.w	r1, r7, #13
10002a1a:	f107 000e 	add.w	r0, r7, #14
10002a1e:	687b      	ldr	r3, [r7, #4]
10002a20:	2201      	movs	r2, #1
10002a22:	f7ff fec2 	bl	100027aa <bme280_set_regs>
10002a26:	4603      	mov	r3, r0
10002a28:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
10002a2a:	687b      	ldr	r3, [r7, #4]
10002a2c:	68db      	ldr	r3, [r3, #12]
10002a2e:	2002      	movs	r0, #2
10002a30:	4798      	blx	r3
	}

	return rslt;
10002a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
10002a36:	4618      	mov	r0, r3
10002a38:	3710      	adds	r7, #16
10002a3a:	46bd      	mov	sp, r7
10002a3c:	bd80      	pop	{r7, pc}

10002a3e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
10002a3e:	b580      	push	{r7, lr}
10002a40:	b08a      	sub	sp, #40	@ 0x28
10002a42:	af00      	add	r7, sp, #0
10002a44:	4603      	mov	r3, r0
10002a46:	60b9      	str	r1, [r7, #8]
10002a48:	607a      	str	r2, [r7, #4]
10002a4a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
10002a4c:	f107 031c 	add.w	r3, r7, #28
10002a50:	2200      	movs	r2, #0
10002a52:	601a      	str	r2, [r3, #0]
10002a54:	605a      	str	r2, [r3, #4]
	struct bme280_uncomp_data uncomp_data = {0};
10002a56:	f107 0310 	add.w	r3, r7, #16
10002a5a:	2200      	movs	r2, #0
10002a5c:	601a      	str	r2, [r3, #0]
10002a5e:	605a      	str	r2, [r3, #4]
10002a60:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
10002a62:	6878      	ldr	r0, [r7, #4]
10002a64:	f001 f90a 	bl	10003c7c <null_ptr_check>
10002a68:	4603      	mov	r3, r0
10002a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
10002a6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
10002a72:	2b00      	cmp	r3, #0
10002a74:	d124      	bne.n	10002ac0 <bme280_get_sensor_data+0x82>
10002a76:	68bb      	ldr	r3, [r7, #8]
10002a78:	2b00      	cmp	r3, #0
10002a7a:	d021      	beq.n	10002ac0 <bme280_get_sensor_data+0x82>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
10002a7c:	f107 011c 	add.w	r1, r7, #28
10002a80:	687b      	ldr	r3, [r7, #4]
10002a82:	2208      	movs	r2, #8
10002a84:	20f7      	movs	r0, #247	@ 0xf7
10002a86:	f7ff fe60 	bl	1000274a <bme280_get_regs>
10002a8a:	4603      	mov	r3, r0
10002a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
10002a90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
10002a94:	2b00      	cmp	r3, #0
10002a96:	d116      	bne.n	10002ac6 <bme280_get_sensor_data+0x88>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
10002a98:	f107 0210 	add.w	r2, r7, #16
10002a9c:	f107 031c 	add.w	r3, r7, #28
10002aa0:	4611      	mov	r1, r2
10002aa2:	4618      	mov	r0, r3
10002aa4:	f000 f815 	bl	10002ad2 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
10002aa8:	687b      	ldr	r3, [r7, #4]
10002aaa:	3310      	adds	r3, #16
10002aac:	f107 0110 	add.w	r1, r7, #16
10002ab0:	7bf8      	ldrb	r0, [r7, #15]
10002ab2:	68ba      	ldr	r2, [r7, #8]
10002ab4:	f000 f853 	bl	10002b5e <bme280_compensate_data>
10002ab8:	4603      	mov	r3, r0
10002aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
10002abe:	e002      	b.n	10002ac6 <bme280_get_sensor_data+0x88>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
10002ac0:	23ff      	movs	r3, #255	@ 0xff
10002ac2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
10002ac6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
10002aca:	4618      	mov	r0, r3
10002acc:	3728      	adds	r7, #40	@ 0x28
10002ace:	46bd      	mov	sp, r7
10002ad0:	bd80      	pop	{r7, pc}

10002ad2 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
10002ad2:	b480      	push	{r7}
10002ad4:	b087      	sub	sp, #28
10002ad6:	af00      	add	r7, sp, #0
10002ad8:	6078      	str	r0, [r7, #4]
10002ada:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
10002adc:	687b      	ldr	r3, [r7, #4]
10002ade:	781b      	ldrb	r3, [r3, #0]
10002ae0:	031b      	lsls	r3, r3, #12
10002ae2:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
10002ae4:	687b      	ldr	r3, [r7, #4]
10002ae6:	3301      	adds	r3, #1
10002ae8:	781b      	ldrb	r3, [r3, #0]
10002aea:	011b      	lsls	r3, r3, #4
10002aec:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
10002aee:	687b      	ldr	r3, [r7, #4]
10002af0:	3302      	adds	r3, #2
10002af2:	781b      	ldrb	r3, [r3, #0]
10002af4:	091b      	lsrs	r3, r3, #4
10002af6:	b2db      	uxtb	r3, r3
10002af8:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
10002afa:	697a      	ldr	r2, [r7, #20]
10002afc:	693b      	ldr	r3, [r7, #16]
10002afe:	431a      	orrs	r2, r3
10002b00:	68fb      	ldr	r3, [r7, #12]
10002b02:	431a      	orrs	r2, r3
10002b04:	683b      	ldr	r3, [r7, #0]
10002b06:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
10002b08:	687b      	ldr	r3, [r7, #4]
10002b0a:	3303      	adds	r3, #3
10002b0c:	781b      	ldrb	r3, [r3, #0]
10002b0e:	031b      	lsls	r3, r3, #12
10002b10:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
10002b12:	687b      	ldr	r3, [r7, #4]
10002b14:	3304      	adds	r3, #4
10002b16:	781b      	ldrb	r3, [r3, #0]
10002b18:	011b      	lsls	r3, r3, #4
10002b1a:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
10002b1c:	687b      	ldr	r3, [r7, #4]
10002b1e:	3305      	adds	r3, #5
10002b20:	781b      	ldrb	r3, [r3, #0]
10002b22:	091b      	lsrs	r3, r3, #4
10002b24:	b2db      	uxtb	r3, r3
10002b26:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
10002b28:	697a      	ldr	r2, [r7, #20]
10002b2a:	693b      	ldr	r3, [r7, #16]
10002b2c:	431a      	orrs	r2, r3
10002b2e:	68fb      	ldr	r3, [r7, #12]
10002b30:	431a      	orrs	r2, r3
10002b32:	683b      	ldr	r3, [r7, #0]
10002b34:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
10002b36:	687b      	ldr	r3, [r7, #4]
10002b38:	3306      	adds	r3, #6
10002b3a:	781b      	ldrb	r3, [r3, #0]
10002b3c:	021b      	lsls	r3, r3, #8
10002b3e:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
10002b40:	687b      	ldr	r3, [r7, #4]
10002b42:	3307      	adds	r3, #7
10002b44:	781b      	ldrb	r3, [r3, #0]
10002b46:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
10002b48:	697a      	ldr	r2, [r7, #20]
10002b4a:	693b      	ldr	r3, [r7, #16]
10002b4c:	431a      	orrs	r2, r3
10002b4e:	683b      	ldr	r3, [r7, #0]
10002b50:	609a      	str	r2, [r3, #8]
}
10002b52:	bf00      	nop
10002b54:	371c      	adds	r7, #28
10002b56:	46bd      	mov	sp, r7
10002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
10002b5c:	4770      	bx	lr

10002b5e <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
10002b5e:	b580      	push	{r7, lr}
10002b60:	b086      	sub	sp, #24
10002b62:	af00      	add	r7, sp, #0
10002b64:	60b9      	str	r1, [r7, #8]
10002b66:	607a      	str	r2, [r7, #4]
10002b68:	603b      	str	r3, [r7, #0]
10002b6a:	4603      	mov	r3, r0
10002b6c:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
10002b6e:	2300      	movs	r3, #0
10002b70:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
10002b72:	68bb      	ldr	r3, [r7, #8]
10002b74:	2b00      	cmp	r3, #0
10002b76:	d033      	beq.n	10002be0 <bme280_compensate_data+0x82>
10002b78:	687b      	ldr	r3, [r7, #4]
10002b7a:	2b00      	cmp	r3, #0
10002b7c:	d030      	beq.n	10002be0 <bme280_compensate_data+0x82>
10002b7e:	683b      	ldr	r3, [r7, #0]
10002b80:	2b00      	cmp	r3, #0
10002b82:	d02d      	beq.n	10002be0 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
10002b84:	687b      	ldr	r3, [r7, #4]
10002b86:	2200      	movs	r2, #0
10002b88:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
10002b8a:	687b      	ldr	r3, [r7, #4]
10002b8c:	2200      	movs	r2, #0
10002b8e:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
10002b90:	687b      	ldr	r3, [r7, #4]
10002b92:	2200      	movs	r2, #0
10002b94:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
10002b96:	7bfb      	ldrb	r3, [r7, #15]
10002b98:	f003 0307 	and.w	r3, r3, #7
10002b9c:	2b00      	cmp	r3, #0
10002b9e:	d006      	beq.n	10002bae <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
10002ba0:	6839      	ldr	r1, [r7, #0]
10002ba2:	68b8      	ldr	r0, [r7, #8]
10002ba4:	f000 fa24 	bl	10002ff0 <compensate_temperature>
10002ba8:	4602      	mov	r2, r0
10002baa:	687b      	ldr	r3, [r7, #4]
10002bac:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
10002bae:	7bfb      	ldrb	r3, [r7, #15]
10002bb0:	f003 0301 	and.w	r3, r3, #1
10002bb4:	2b00      	cmp	r3, #0
10002bb6:	d006      	beq.n	10002bc6 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
10002bb8:	6839      	ldr	r1, [r7, #0]
10002bba:	68b8      	ldr	r0, [r7, #8]
10002bbc:	f000 fa7a 	bl	100030b4 <compensate_pressure>
10002bc0:	4602      	mov	r2, r0
10002bc2:	687b      	ldr	r3, [r7, #4]
10002bc4:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
10002bc6:	7bfb      	ldrb	r3, [r7, #15]
10002bc8:	f003 0304 	and.w	r3, r3, #4
10002bcc:	2b00      	cmp	r3, #0
10002bce:	d009      	beq.n	10002be4 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
10002bd0:	6839      	ldr	r1, [r7, #0]
10002bd2:	68b8      	ldr	r0, [r7, #8]
10002bd4:	f000 fe0e 	bl	100037f4 <compensate_humidity>
10002bd8:	4602      	mov	r2, r0
10002bda:	687b      	ldr	r3, [r7, #4]
10002bdc:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
10002bde:	e001      	b.n	10002be4 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
10002be0:	23ff      	movs	r3, #255	@ 0xff
10002be2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
10002be4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
10002be8:	4618      	mov	r0, r3
10002bea:	3718      	adds	r7, #24
10002bec:	46bd      	mov	sp, r7
10002bee:	bd80      	pop	{r7, pc}

10002bf0 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
10002bf0:	b580      	push	{r7, lr}
10002bf2:	b086      	sub	sp, #24
10002bf4:	af00      	add	r7, sp, #0
10002bf6:	4603      	mov	r3, r0
10002bf8:	60b9      	str	r1, [r7, #8]
10002bfa:	607a      	str	r2, [r7, #4]
10002bfc:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
10002bfe:	2301      	movs	r3, #1
10002c00:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
10002c02:	7bfb      	ldrb	r3, [r7, #15]
10002c04:	f003 0304 	and.w	r3, r3, #4
10002c08:	2b00      	cmp	r3, #0
10002c0a:	d005      	beq.n	10002c18 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
10002c0c:	6879      	ldr	r1, [r7, #4]
10002c0e:	68b8      	ldr	r0, [r7, #8]
10002c10:	f000 f815 	bl	10002c3e <set_osr_humidity_settings>
10002c14:	4603      	mov	r3, r0
10002c16:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
10002c18:	7bfb      	ldrb	r3, [r7, #15]
10002c1a:	f003 0303 	and.w	r3, r3, #3
10002c1e:	2b00      	cmp	r3, #0
10002c20:	d007      	beq.n	10002c32 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
10002c22:	7bfb      	ldrb	r3, [r7, #15]
10002c24:	687a      	ldr	r2, [r7, #4]
10002c26:	68b9      	ldr	r1, [r7, #8]
10002c28:	4618      	mov	r0, r3
10002c2a:	f000 f842 	bl	10002cb2 <set_osr_press_temp_settings>
10002c2e:	4603      	mov	r3, r0
10002c30:	75fb      	strb	r3, [r7, #23]

	return rslt;
10002c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
10002c36:	4618      	mov	r0, r3
10002c38:	3718      	adds	r7, #24
10002c3a:	46bd      	mov	sp, r7
10002c3c:	bd80      	pop	{r7, pc}

10002c3e <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
10002c3e:	b580      	push	{r7, lr}
10002c40:	b084      	sub	sp, #16
10002c42:	af00      	add	r7, sp, #0
10002c44:	6078      	str	r0, [r7, #4]
10002c46:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
10002c48:	23f2      	movs	r3, #242	@ 0xf2
10002c4a:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
10002c4c:	687b      	ldr	r3, [r7, #4]
10002c4e:	789b      	ldrb	r3, [r3, #2]
10002c50:	f003 0307 	and.w	r3, r3, #7
10002c54:	b2db      	uxtb	r3, r3
10002c56:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
10002c58:	f107 010e 	add.w	r1, r7, #14
10002c5c:	f107 000c 	add.w	r0, r7, #12
10002c60:	683b      	ldr	r3, [r7, #0]
10002c62:	2201      	movs	r2, #1
10002c64:	f7ff fda1 	bl	100027aa <bme280_set_regs>
10002c68:	4603      	mov	r3, r0
10002c6a:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
10002c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
10002c70:	2b00      	cmp	r3, #0
10002c72:	d118      	bne.n	10002ca6 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
10002c74:	23f4      	movs	r3, #244	@ 0xf4
10002c76:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
10002c78:	7b38      	ldrb	r0, [r7, #12]
10002c7a:	f107 010d 	add.w	r1, r7, #13
10002c7e:	683b      	ldr	r3, [r7, #0]
10002c80:	2201      	movs	r2, #1
10002c82:	f7ff fd62 	bl	1000274a <bme280_get_regs>
10002c86:	4603      	mov	r3, r0
10002c88:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
10002c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
10002c8e:	2b00      	cmp	r3, #0
10002c90:	d109      	bne.n	10002ca6 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
10002c92:	f107 010d 	add.w	r1, r7, #13
10002c96:	f107 000c 	add.w	r0, r7, #12
10002c9a:	683b      	ldr	r3, [r7, #0]
10002c9c:	2201      	movs	r2, #1
10002c9e:	f7ff fd84 	bl	100027aa <bme280_set_regs>
10002ca2:	4603      	mov	r3, r0
10002ca4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
10002ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
10002caa:	4618      	mov	r0, r3
10002cac:	3710      	adds	r7, #16
10002cae:	46bd      	mov	sp, r7
10002cb0:	bd80      	pop	{r7, pc}

10002cb2 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
10002cb2:	b580      	push	{r7, lr}
10002cb4:	b086      	sub	sp, #24
10002cb6:	af00      	add	r7, sp, #0
10002cb8:	4603      	mov	r3, r0
10002cba:	60b9      	str	r1, [r7, #8]
10002cbc:	607a      	str	r2, [r7, #4]
10002cbe:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
10002cc0:	23f4      	movs	r3, #244	@ 0xf4
10002cc2:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
10002cc4:	7db8      	ldrb	r0, [r7, #22]
10002cc6:	f107 0115 	add.w	r1, r7, #21
10002cca:	687b      	ldr	r3, [r7, #4]
10002ccc:	2201      	movs	r2, #1
10002cce:	f7ff fd3c 	bl	1000274a <bme280_get_regs>
10002cd2:	4603      	mov	r3, r0
10002cd4:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
10002cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
10002cda:	2b00      	cmp	r3, #0
10002cdc:	d11f      	bne.n	10002d1e <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
10002cde:	7bfb      	ldrb	r3, [r7, #15]
10002ce0:	f003 0301 	and.w	r3, r3, #1
10002ce4:	2b00      	cmp	r3, #0
10002ce6:	d005      	beq.n	10002cf4 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
10002ce8:	f107 0315 	add.w	r3, r7, #21
10002cec:	68b9      	ldr	r1, [r7, #8]
10002cee:	4618      	mov	r0, r3
10002cf0:	f000 f890 	bl	10002e14 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
10002cf4:	7bfb      	ldrb	r3, [r7, #15]
10002cf6:	f003 0302 	and.w	r3, r3, #2
10002cfa:	2b00      	cmp	r3, #0
10002cfc:	d005      	beq.n	10002d0a <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
10002cfe:	f107 0315 	add.w	r3, r7, #21
10002d02:	68b9      	ldr	r1, [r7, #8]
10002d04:	4618      	mov	r0, r3
10002d06:	f000 f8a3 	bl	10002e50 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
10002d0a:	f107 0115 	add.w	r1, r7, #21
10002d0e:	f107 0016 	add.w	r0, r7, #22
10002d12:	687b      	ldr	r3, [r7, #4]
10002d14:	2201      	movs	r2, #1
10002d16:	f7ff fd48 	bl	100027aa <bme280_set_regs>
10002d1a:	4603      	mov	r3, r0
10002d1c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
10002d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
10002d22:	4618      	mov	r0, r3
10002d24:	3718      	adds	r7, #24
10002d26:	46bd      	mov	sp, r7
10002d28:	bd80      	pop	{r7, pc}

10002d2a <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
10002d2a:	b580      	push	{r7, lr}
10002d2c:	b086      	sub	sp, #24
10002d2e:	af00      	add	r7, sp, #0
10002d30:	4603      	mov	r3, r0
10002d32:	60b9      	str	r1, [r7, #8]
10002d34:	607a      	str	r2, [r7, #4]
10002d36:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
10002d38:	23f5      	movs	r3, #245	@ 0xf5
10002d3a:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
10002d3c:	7db8      	ldrb	r0, [r7, #22]
10002d3e:	f107 0115 	add.w	r1, r7, #21
10002d42:	687b      	ldr	r3, [r7, #4]
10002d44:	2201      	movs	r2, #1
10002d46:	f7ff fd00 	bl	1000274a <bme280_get_regs>
10002d4a:	4603      	mov	r3, r0
10002d4c:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
10002d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
10002d52:	2b00      	cmp	r3, #0
10002d54:	d11f      	bne.n	10002d96 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
10002d56:	7bfb      	ldrb	r3, [r7, #15]
10002d58:	f003 0308 	and.w	r3, r3, #8
10002d5c:	2b00      	cmp	r3, #0
10002d5e:	d005      	beq.n	10002d6c <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
10002d60:	f107 0315 	add.w	r3, r7, #21
10002d64:	68b9      	ldr	r1, [r7, #8]
10002d66:	4618      	mov	r0, r3
10002d68:	f000 f81b 	bl	10002da2 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
10002d6c:	7bfb      	ldrb	r3, [r7, #15]
10002d6e:	f003 0310 	and.w	r3, r3, #16
10002d72:	2b00      	cmp	r3, #0
10002d74:	d005      	beq.n	10002d82 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
10002d76:	f107 0315 	add.w	r3, r7, #21
10002d7a:	68b9      	ldr	r1, [r7, #8]
10002d7c:	4618      	mov	r0, r3
10002d7e:	f000 f82e 	bl	10002dde <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
10002d82:	f107 0115 	add.w	r1, r7, #21
10002d86:	f107 0016 	add.w	r0, r7, #22
10002d8a:	687b      	ldr	r3, [r7, #4]
10002d8c:	2201      	movs	r2, #1
10002d8e:	f7ff fd0c 	bl	100027aa <bme280_set_regs>
10002d92:	4603      	mov	r3, r0
10002d94:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
10002d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
10002d9a:	4618      	mov	r0, r3
10002d9c:	3718      	adds	r7, #24
10002d9e:	46bd      	mov	sp, r7
10002da0:	bd80      	pop	{r7, pc}

10002da2 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
10002da2:	b480      	push	{r7}
10002da4:	b083      	sub	sp, #12
10002da6:	af00      	add	r7, sp, #0
10002da8:	6078      	str	r0, [r7, #4]
10002daa:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
10002dac:	687b      	ldr	r3, [r7, #4]
10002dae:	781b      	ldrb	r3, [r3, #0]
10002db0:	b25b      	sxtb	r3, r3
10002db2:	f023 031c 	bic.w	r3, r3, #28
10002db6:	b25a      	sxtb	r2, r3
10002db8:	683b      	ldr	r3, [r7, #0]
10002dba:	78db      	ldrb	r3, [r3, #3]
10002dbc:	b25b      	sxtb	r3, r3
10002dbe:	009b      	lsls	r3, r3, #2
10002dc0:	b25b      	sxtb	r3, r3
10002dc2:	f003 031c 	and.w	r3, r3, #28
10002dc6:	b25b      	sxtb	r3, r3
10002dc8:	4313      	orrs	r3, r2
10002dca:	b25b      	sxtb	r3, r3
10002dcc:	b2da      	uxtb	r2, r3
10002dce:	687b      	ldr	r3, [r7, #4]
10002dd0:	701a      	strb	r2, [r3, #0]
}
10002dd2:	bf00      	nop
10002dd4:	370c      	adds	r7, #12
10002dd6:	46bd      	mov	sp, r7
10002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
10002ddc:	4770      	bx	lr

10002dde <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
10002dde:	b480      	push	{r7}
10002de0:	b083      	sub	sp, #12
10002de2:	af00      	add	r7, sp, #0
10002de4:	6078      	str	r0, [r7, #4]
10002de6:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
10002de8:	687b      	ldr	r3, [r7, #4]
10002dea:	781b      	ldrb	r3, [r3, #0]
10002dec:	b25b      	sxtb	r3, r3
10002dee:	f003 031f 	and.w	r3, r3, #31
10002df2:	b25a      	sxtb	r2, r3
10002df4:	683b      	ldr	r3, [r7, #0]
10002df6:	791b      	ldrb	r3, [r3, #4]
10002df8:	b25b      	sxtb	r3, r3
10002dfa:	015b      	lsls	r3, r3, #5
10002dfc:	b25b      	sxtb	r3, r3
10002dfe:	4313      	orrs	r3, r2
10002e00:	b25b      	sxtb	r3, r3
10002e02:	b2da      	uxtb	r2, r3
10002e04:	687b      	ldr	r3, [r7, #4]
10002e06:	701a      	strb	r2, [r3, #0]
}
10002e08:	bf00      	nop
10002e0a:	370c      	adds	r7, #12
10002e0c:	46bd      	mov	sp, r7
10002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e12:	4770      	bx	lr

10002e14 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
10002e14:	b480      	push	{r7}
10002e16:	b083      	sub	sp, #12
10002e18:	af00      	add	r7, sp, #0
10002e1a:	6078      	str	r0, [r7, #4]
10002e1c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
10002e1e:	687b      	ldr	r3, [r7, #4]
10002e20:	781b      	ldrb	r3, [r3, #0]
10002e22:	b25b      	sxtb	r3, r3
10002e24:	f023 031c 	bic.w	r3, r3, #28
10002e28:	b25a      	sxtb	r2, r3
10002e2a:	683b      	ldr	r3, [r7, #0]
10002e2c:	781b      	ldrb	r3, [r3, #0]
10002e2e:	b25b      	sxtb	r3, r3
10002e30:	009b      	lsls	r3, r3, #2
10002e32:	b25b      	sxtb	r3, r3
10002e34:	f003 031c 	and.w	r3, r3, #28
10002e38:	b25b      	sxtb	r3, r3
10002e3a:	4313      	orrs	r3, r2
10002e3c:	b25b      	sxtb	r3, r3
10002e3e:	b2da      	uxtb	r2, r3
10002e40:	687b      	ldr	r3, [r7, #4]
10002e42:	701a      	strb	r2, [r3, #0]
}
10002e44:	bf00      	nop
10002e46:	370c      	adds	r7, #12
10002e48:	46bd      	mov	sp, r7
10002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e4e:	4770      	bx	lr

10002e50 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
10002e50:	b480      	push	{r7}
10002e52:	b083      	sub	sp, #12
10002e54:	af00      	add	r7, sp, #0
10002e56:	6078      	str	r0, [r7, #4]
10002e58:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
10002e5a:	687b      	ldr	r3, [r7, #4]
10002e5c:	781b      	ldrb	r3, [r3, #0]
10002e5e:	b25b      	sxtb	r3, r3
10002e60:	f003 031f 	and.w	r3, r3, #31
10002e64:	b25a      	sxtb	r2, r3
10002e66:	683b      	ldr	r3, [r7, #0]
10002e68:	785b      	ldrb	r3, [r3, #1]
10002e6a:	b25b      	sxtb	r3, r3
10002e6c:	015b      	lsls	r3, r3, #5
10002e6e:	b25b      	sxtb	r3, r3
10002e70:	4313      	orrs	r3, r2
10002e72:	b25b      	sxtb	r3, r3
10002e74:	b2da      	uxtb	r2, r3
10002e76:	687b      	ldr	r3, [r7, #4]
10002e78:	701a      	strb	r2, [r3, #0]
}
10002e7a:	bf00      	nop
10002e7c:	370c      	adds	r7, #12
10002e7e:	46bd      	mov	sp, r7
10002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e84:	4770      	bx	lr

10002e86 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
10002e86:	b480      	push	{r7}
10002e88:	b083      	sub	sp, #12
10002e8a:	af00      	add	r7, sp, #0
10002e8c:	6078      	str	r0, [r7, #4]
10002e8e:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
10002e90:	687b      	ldr	r3, [r7, #4]
10002e92:	781b      	ldrb	r3, [r3, #0]
10002e94:	f003 0307 	and.w	r3, r3, #7
10002e98:	b2da      	uxtb	r2, r3
10002e9a:	683b      	ldr	r3, [r7, #0]
10002e9c:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
10002e9e:	687b      	ldr	r3, [r7, #4]
10002ea0:	3302      	adds	r3, #2
10002ea2:	781b      	ldrb	r3, [r3, #0]
10002ea4:	109b      	asrs	r3, r3, #2
10002ea6:	b2db      	uxtb	r3, r3
10002ea8:	f003 0307 	and.w	r3, r3, #7
10002eac:	b2da      	uxtb	r2, r3
10002eae:	683b      	ldr	r3, [r7, #0]
10002eb0:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
10002eb2:	687b      	ldr	r3, [r7, #4]
10002eb4:	3302      	adds	r3, #2
10002eb6:	781b      	ldrb	r3, [r3, #0]
10002eb8:	095b      	lsrs	r3, r3, #5
10002eba:	b2da      	uxtb	r2, r3
10002ebc:	683b      	ldr	r3, [r7, #0]
10002ebe:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
10002ec0:	687b      	ldr	r3, [r7, #4]
10002ec2:	3303      	adds	r3, #3
10002ec4:	781b      	ldrb	r3, [r3, #0]
10002ec6:	109b      	asrs	r3, r3, #2
10002ec8:	b2db      	uxtb	r3, r3
10002eca:	f003 0307 	and.w	r3, r3, #7
10002ece:	b2da      	uxtb	r2, r3
10002ed0:	683b      	ldr	r3, [r7, #0]
10002ed2:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
10002ed4:	687b      	ldr	r3, [r7, #4]
10002ed6:	3303      	adds	r3, #3
10002ed8:	781b      	ldrb	r3, [r3, #0]
10002eda:	095b      	lsrs	r3, r3, #5
10002edc:	b2da      	uxtb	r2, r3
10002ede:	683b      	ldr	r3, [r7, #0]
10002ee0:	711a      	strb	r2, [r3, #4]
}
10002ee2:	bf00      	nop
10002ee4:	370c      	adds	r7, #12
10002ee6:	46bd      	mov	sp, r7
10002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
10002eec:	4770      	bx	lr

10002eee <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
10002eee:	b580      	push	{r7, lr}
10002ef0:	b084      	sub	sp, #16
10002ef2:	af00      	add	r7, sp, #0
10002ef4:	4603      	mov	r3, r0
10002ef6:	6039      	str	r1, [r7, #0]
10002ef8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
10002efa:	23f4      	movs	r3, #244	@ 0xf4
10002efc:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
10002efe:	7bb8      	ldrb	r0, [r7, #14]
10002f00:	f107 010d 	add.w	r1, r7, #13
10002f04:	683b      	ldr	r3, [r7, #0]
10002f06:	2201      	movs	r2, #1
10002f08:	f7ff fc1f 	bl	1000274a <bme280_get_regs>
10002f0c:	4603      	mov	r3, r0
10002f0e:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
10002f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
10002f14:	2b00      	cmp	r3, #0
10002f16:	d117      	bne.n	10002f48 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
10002f18:	7b7b      	ldrb	r3, [r7, #13]
10002f1a:	b25b      	sxtb	r3, r3
10002f1c:	f023 0303 	bic.w	r3, r3, #3
10002f20:	b25a      	sxtb	r2, r3
10002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
10002f26:	f003 0303 	and.w	r3, r3, #3
10002f2a:	b25b      	sxtb	r3, r3
10002f2c:	4313      	orrs	r3, r2
10002f2e:	b25b      	sxtb	r3, r3
10002f30:	b2db      	uxtb	r3, r3
10002f32:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
10002f34:	f107 010d 	add.w	r1, r7, #13
10002f38:	f107 000e 	add.w	r0, r7, #14
10002f3c:	683b      	ldr	r3, [r7, #0]
10002f3e:	2201      	movs	r2, #1
10002f40:	f7ff fc33 	bl	100027aa <bme280_set_regs>
10002f44:	4603      	mov	r3, r0
10002f46:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
10002f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
10002f4c:	4618      	mov	r0, r3
10002f4e:	3710      	adds	r7, #16
10002f50:	46bd      	mov	sp, r7
10002f52:	bd80      	pop	{r7, pc}

10002f54 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
10002f54:	b580      	push	{r7, lr}
10002f56:	b086      	sub	sp, #24
10002f58:	af00      	add	r7, sp, #0
10002f5a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
10002f5c:	f107 0110 	add.w	r1, r7, #16
10002f60:	687b      	ldr	r3, [r7, #4]
10002f62:	2204      	movs	r2, #4
10002f64:	20f2      	movs	r0, #242	@ 0xf2
10002f66:	f7ff fbf0 	bl	1000274a <bme280_get_regs>
10002f6a:	4603      	mov	r3, r0
10002f6c:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
10002f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
10002f72:	2b00      	cmp	r3, #0
10002f74:	d118      	bne.n	10002fa8 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
10002f76:	f107 0208 	add.w	r2, r7, #8
10002f7a:	f107 0310 	add.w	r3, r7, #16
10002f7e:	4611      	mov	r1, r2
10002f80:	4618      	mov	r0, r3
10002f82:	f7ff ff80 	bl	10002e86 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
10002f86:	6878      	ldr	r0, [r7, #4]
10002f88:	f7ff fd34 	bl	100029f4 <bme280_soft_reset>
10002f8c:	4603      	mov	r3, r0
10002f8e:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
10002f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
10002f94:	2b00      	cmp	r3, #0
10002f96:	d107      	bne.n	10002fa8 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
10002f98:	f107 0308 	add.w	r3, r7, #8
10002f9c:	6879      	ldr	r1, [r7, #4]
10002f9e:	4618      	mov	r0, r3
10002fa0:	f000 f808 	bl	10002fb4 <reload_device_settings>
10002fa4:	4603      	mov	r3, r0
10002fa6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
10002fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
10002fac:	4618      	mov	r0, r3
10002fae:	3718      	adds	r7, #24
10002fb0:	46bd      	mov	sp, r7
10002fb2:	bd80      	pop	{r7, pc}

10002fb4 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
10002fb4:	b580      	push	{r7, lr}
10002fb6:	b084      	sub	sp, #16
10002fb8:	af00      	add	r7, sp, #0
10002fba:	6078      	str	r0, [r7, #4]
10002fbc:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
10002fbe:	683a      	ldr	r2, [r7, #0]
10002fc0:	6879      	ldr	r1, [r7, #4]
10002fc2:	201f      	movs	r0, #31
10002fc4:	f7ff fe14 	bl	10002bf0 <set_osr_settings>
10002fc8:	4603      	mov	r3, r0
10002fca:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
10002fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
10002fd0:	2b00      	cmp	r3, #0
10002fd2:	d106      	bne.n	10002fe2 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
10002fd4:	683a      	ldr	r2, [r7, #0]
10002fd6:	6879      	ldr	r1, [r7, #4]
10002fd8:	201f      	movs	r0, #31
10002fda:	f7ff fea6 	bl	10002d2a <set_filter_standby_settings>
10002fde:	4603      	mov	r3, r0
10002fe0:	73fb      	strb	r3, [r7, #15]

	return rslt;
10002fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
10002fe6:	4618      	mov	r0, r3
10002fe8:	3710      	adds	r7, #16
10002fea:	46bd      	mov	sp, r7
10002fec:	bd80      	pop	{r7, pc}
	...

10002ff0 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
10002ff0:	b480      	push	{r7}
10002ff2:	b089      	sub	sp, #36	@ 0x24
10002ff4:	af00      	add	r7, sp, #0
10002ff6:	6078      	str	r0, [r7, #4]
10002ff8:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
10002ffa:	4b2d      	ldr	r3, [pc, #180]	@ (100030b0 <compensate_temperature+0xc0>)
10002ffc:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
10002ffe:	f242 1334 	movw	r3, #8500	@ 0x2134
10003002:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
10003004:	687b      	ldr	r3, [r7, #4]
10003006:	685b      	ldr	r3, [r3, #4]
10003008:	08db      	lsrs	r3, r3, #3
1000300a:	683a      	ldr	r2, [r7, #0]
1000300c:	8812      	ldrh	r2, [r2, #0]
1000300e:	0052      	lsls	r2, r2, #1
10003010:	1a9b      	subs	r3, r3, r2
10003012:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
10003014:	683b      	ldr	r3, [r7, #0]
10003016:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
1000301a:	461a      	mov	r2, r3
1000301c:	693b      	ldr	r3, [r7, #16]
1000301e:	fb02 f303 	mul.w	r3, r2, r3
10003022:	2b00      	cmp	r3, #0
10003024:	da01      	bge.n	1000302a <compensate_temperature+0x3a>
10003026:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
1000302a:	12db      	asrs	r3, r3, #11
1000302c:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
1000302e:	687b      	ldr	r3, [r7, #4]
10003030:	685b      	ldr	r3, [r3, #4]
10003032:	091b      	lsrs	r3, r3, #4
10003034:	683a      	ldr	r2, [r7, #0]
10003036:	8812      	ldrh	r2, [r2, #0]
10003038:	1a9b      	subs	r3, r3, r2
1000303a:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
1000303c:	68fb      	ldr	r3, [r7, #12]
1000303e:	fb03 f303 	mul.w	r3, r3, r3
10003042:	2b00      	cmp	r3, #0
10003044:	da01      	bge.n	1000304a <compensate_temperature+0x5a>
10003046:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
1000304a:	131b      	asrs	r3, r3, #12
1000304c:	461a      	mov	r2, r3
1000304e:	683b      	ldr	r3, [r7, #0]
10003050:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
10003054:	fb02 f303 	mul.w	r3, r2, r3
10003058:	2b00      	cmp	r3, #0
1000305a:	da02      	bge.n	10003062 <compensate_temperature+0x72>
1000305c:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
10003060:	333f      	adds	r3, #63	@ 0x3f
10003062:	139b      	asrs	r3, r3, #14
10003064:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
10003066:	693a      	ldr	r2, [r7, #16]
10003068:	68fb      	ldr	r3, [r7, #12]
1000306a:	441a      	add	r2, r3
1000306c:	683b      	ldr	r3, [r7, #0]
1000306e:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
10003070:	683b      	ldr	r3, [r7, #0]
10003072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10003074:	4613      	mov	r3, r2
10003076:	009b      	lsls	r3, r3, #2
10003078:	4413      	add	r3, r2
1000307a:	3380      	adds	r3, #128	@ 0x80
1000307c:	2b00      	cmp	r3, #0
1000307e:	da00      	bge.n	10003082 <compensate_temperature+0x92>
10003080:	33ff      	adds	r3, #255	@ 0xff
10003082:	121b      	asrs	r3, r3, #8
10003084:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
10003086:	69fa      	ldr	r2, [r7, #28]
10003088:	69bb      	ldr	r3, [r7, #24]
1000308a:	429a      	cmp	r2, r3
1000308c:	da02      	bge.n	10003094 <compensate_temperature+0xa4>
		temperature = temperature_min;
1000308e:	69bb      	ldr	r3, [r7, #24]
10003090:	61fb      	str	r3, [r7, #28]
10003092:	e005      	b.n	100030a0 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
10003094:	69fa      	ldr	r2, [r7, #28]
10003096:	697b      	ldr	r3, [r7, #20]
10003098:	429a      	cmp	r2, r3
1000309a:	dd01      	ble.n	100030a0 <compensate_temperature+0xb0>
		temperature = temperature_max;
1000309c:	697b      	ldr	r3, [r7, #20]
1000309e:	61fb      	str	r3, [r7, #28]

	return temperature;
100030a0:	69fb      	ldr	r3, [r7, #28]
}
100030a2:	4618      	mov	r0, r3
100030a4:	3724      	adds	r7, #36	@ 0x24
100030a6:	46bd      	mov	sp, r7
100030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
100030ac:	4770      	bx	lr
100030ae:	bf00      	nop
100030b0:	fffff060 	.word	0xfffff060

100030b4 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
100030b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
100030b8:	b0e8      	sub	sp, #416	@ 0x1a0
100030ba:	af00      	add	r7, sp, #0
100030bc:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
100030c0:	f8c7 1168 	str.w	r1, [r7, #360]	@ 0x168
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
100030c4:	4bbf      	ldr	r3, [pc, #764]	@ (100033c4 <compensate_pressure+0x310>)
100030c6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
	uint32_t pressure_max = 11000000;
100030ca:	4bbf      	ldr	r3, [pc, #764]	@ (100033c8 <compensate_pressure+0x314>)
100030cc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

	var1 = ((int64_t)calib_data->t_fine) - 128000;
100030d0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
100030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100030d6:	17da      	asrs	r2, r3, #31
100030d8:	4698      	mov	r8, r3
100030da:	4691      	mov	r9, r2
100030dc:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
100030e0:	f149 3bff 	adc.w	fp, r9, #4294967295
100030e4:	e9c7 ab62 	strd	sl, fp, [r7, #392]	@ 0x188
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
100030e8:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
100030ec:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
100030f0:	fb03 f102 	mul.w	r1, r3, r2
100030f4:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
100030f8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
100030fc:	fb02 f303 	mul.w	r3, r2, r3
10003100:	18ca      	adds	r2, r1, r3
10003102:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
10003106:	fba3 4503 	umull	r4, r5, r3, r3
1000310a:	1953      	adds	r3, r2, r5
1000310c:	461d      	mov	r5, r3
1000310e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
10003112:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
10003116:	b21b      	sxth	r3, r3
10003118:	17da      	asrs	r2, r3, #31
1000311a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
1000311e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
10003122:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
10003126:	4603      	mov	r3, r0
10003128:	fb03 f205 	mul.w	r2, r3, r5
1000312c:	460b      	mov	r3, r1
1000312e:	fb04 f303 	mul.w	r3, r4, r3
10003132:	4413      	add	r3, r2
10003134:	4602      	mov	r2, r0
10003136:	fba4 1202 	umull	r1, r2, r4, r2
1000313a:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
1000313e:	460a      	mov	r2, r1
10003140:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
10003144:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
10003148:	4413      	add	r3, r2
1000314a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
1000314e:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
10003152:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
10003156:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
1000315a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
1000315e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
10003162:	b21b      	sxth	r3, r3
10003164:	17da      	asrs	r2, r3, #31
10003166:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
1000316a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
1000316e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
10003172:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
10003176:	462a      	mov	r2, r5
10003178:	fb02 f203 	mul.w	r2, r2, r3
1000317c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
10003180:	4621      	mov	r1, r4
10003182:	fb01 f303 	mul.w	r3, r1, r3
10003186:	441a      	add	r2, r3
10003188:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
1000318c:	4621      	mov	r1, r4
1000318e:	fba3 1301 	umull	r1, r3, r3, r1
10003192:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
10003196:	460b      	mov	r3, r1
10003198:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
1000319c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
100031a0:	18d3      	adds	r3, r2, r3
100031a2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
100031a6:	f04f 0000 	mov.w	r0, #0
100031aa:	f04f 0100 	mov.w	r1, #0
100031ae:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
100031b2:	462b      	mov	r3, r5
100031b4:	0459      	lsls	r1, r3, #17
100031b6:	4623      	mov	r3, r4
100031b8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
100031bc:	4623      	mov	r3, r4
100031be:	0458      	lsls	r0, r3, #17
100031c0:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
100031c4:	1814      	adds	r4, r2, r0
100031c6:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
100031ca:	414b      	adcs	r3, r1
100031cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
100031d0:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
100031d4:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
100031d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
100031dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
100031e0:	b21b      	sxth	r3, r3
100031e2:	17da      	asrs	r2, r3, #31
100031e4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
100031e8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
100031ec:	f04f 0000 	mov.w	r0, #0
100031f0:	f04f 0100 	mov.w	r1, #0
100031f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
100031f8:	00d9      	lsls	r1, r3, #3
100031fa:	2000      	movs	r0, #0
100031fc:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
10003200:	1814      	adds	r4, r2, r0
10003202:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
10003206:	414b      	adcs	r3, r1
10003208:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
1000320c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
10003210:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
10003214:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
10003218:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
1000321c:	fb03 f102 	mul.w	r1, r3, r2
10003220:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
10003224:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
10003228:	fb02 f303 	mul.w	r3, r2, r3
1000322c:	18ca      	adds	r2, r1, r3
1000322e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
10003232:	fba3 1303 	umull	r1, r3, r3, r3
10003236:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
1000323a:	460b      	mov	r3, r1
1000323c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
10003240:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
10003244:	18d3      	adds	r3, r2, r3
10003246:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
1000324a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
1000324e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
10003252:	b21b      	sxth	r3, r3
10003254:	17da      	asrs	r2, r3, #31
10003256:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
1000325a:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
1000325e:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
10003262:	462b      	mov	r3, r5
10003264:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
10003268:	4642      	mov	r2, r8
1000326a:	fb02 f203 	mul.w	r2, r2, r3
1000326e:	464b      	mov	r3, r9
10003270:	4621      	mov	r1, r4
10003272:	fb01 f303 	mul.w	r3, r1, r3
10003276:	4413      	add	r3, r2
10003278:	4622      	mov	r2, r4
1000327a:	4641      	mov	r1, r8
1000327c:	fba2 1201 	umull	r1, r2, r2, r1
10003280:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
10003284:	460a      	mov	r2, r1
10003286:	f8c7 2150 	str.w	r2, [r7, #336]	@ 0x150
1000328a:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
1000328e:	4413      	add	r3, r2
10003290:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
10003294:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
10003298:	2b00      	cmp	r3, #0
1000329a:	da09      	bge.n	100032b0 <compensate_pressure+0x1fc>
1000329c:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
100032a0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
100032a4:	f143 0300 	adc.w	r3, r3, #0
100032a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
100032ac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
100032b0:	f04f 0000 	mov.w	r0, #0
100032b4:	f04f 0100 	mov.w	r1, #0
100032b8:	0a10      	lsrs	r0, r2, #8
100032ba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
100032be:	1219      	asrs	r1, r3, #8
100032c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
100032c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
100032c8:	b21b      	sxth	r3, r3
100032ca:	17da      	asrs	r2, r3, #31
100032cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
100032d0:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
100032d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
100032d8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
100032dc:	464a      	mov	r2, r9
100032de:	fb02 f203 	mul.w	r2, r2, r3
100032e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
100032e6:	4644      	mov	r4, r8
100032e8:	fb04 f303 	mul.w	r3, r4, r3
100032ec:	441a      	add	r2, r3
100032ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
100032f2:	4644      	mov	r4, r8
100032f4:	fba3 4304 	umull	r4, r3, r3, r4
100032f8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
100032fc:	4623      	mov	r3, r4
100032fe:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
10003302:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
10003306:	18d3      	adds	r3, r2, r3
10003308:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
1000330c:	f04f 0200 	mov.w	r2, #0
10003310:	f04f 0300 	mov.w	r3, #0
10003314:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
10003318:	464c      	mov	r4, r9
1000331a:	0323      	lsls	r3, r4, #12
1000331c:	4644      	mov	r4, r8
1000331e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
10003322:	4644      	mov	r4, r8
10003324:	0322      	lsls	r2, r4, #12
10003326:	1884      	adds	r4, r0, r2
10003328:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
1000332c:	eb41 0303 	adc.w	r3, r1, r3
10003330:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
10003334:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
10003338:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var3 = ((int64_t)1) * 140737488355328;
1000333c:	f04f 0200 	mov.w	r2, #0
10003340:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
10003344:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
10003348:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
1000334c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
10003350:	1884      	adds	r4, r0, r2
10003352:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
10003356:	eb41 0303 	adc.w	r3, r1, r3
1000335a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
1000335e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
10003362:	88db      	ldrh	r3, [r3, #6]
10003364:	b29b      	uxth	r3, r3
10003366:	2200      	movs	r2, #0
10003368:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
1000336c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
10003370:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
10003374:	462b      	mov	r3, r5
10003376:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
1000337a:	4642      	mov	r2, r8
1000337c:	fb02 f203 	mul.w	r2, r2, r3
10003380:	464b      	mov	r3, r9
10003382:	4621      	mov	r1, r4
10003384:	fb01 f303 	mul.w	r3, r1, r3
10003388:	4413      	add	r3, r2
1000338a:	4622      	mov	r2, r4
1000338c:	4641      	mov	r1, r8
1000338e:	fba2 1201 	umull	r1, r2, r2, r1
10003392:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
10003396:	460a      	mov	r2, r1
10003398:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
1000339c:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
100033a0:	4413      	add	r3, r2
100033a2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
100033a6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
100033aa:	2b00      	cmp	r3, #0
100033ac:	da0e      	bge.n	100033cc <compensate_pressure+0x318>
100033ae:	1e51      	subs	r1, r2, #1
100033b0:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
100033b4:	f143 0301 	adc.w	r3, r3, #1
100033b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
100033bc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
100033c0:	e004      	b.n	100033cc <compensate_pressure+0x318>
100033c2:	bf00      	nop
100033c4:	002dc6c0 	.word	0x002dc6c0
100033c8:	00a7d8c0 	.word	0x00a7d8c0
100033cc:	f04f 0000 	mov.w	r0, #0
100033d0:	f04f 0100 	mov.w	r1, #0
100033d4:	1058      	asrs	r0, r3, #1
100033d6:	17d9      	asrs	r1, r3, #31
100033d8:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188

	/* To avoid divide by zero exception */
	if (var1 != 0) {
100033dc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
100033e0:	4313      	orrs	r3, r2
100033e2:	f000 81f8 	beq.w	100037d6 <compensate_pressure+0x722>
		var4 = 1048576 - uncomp_data->pressure;
100033e6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
100033ea:	681b      	ldr	r3, [r3, #0]
100033ec:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
100033f0:	2200      	movs	r2, #0
100033f2:	67bb      	str	r3, [r7, #120]	@ 0x78
100033f4:	67fa      	str	r2, [r7, #124]	@ 0x7c
100033f6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
100033fa:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
100033fe:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
10003402:	f04f 0000 	mov.w	r0, #0
10003406:	f04f 0100 	mov.w	r1, #0
1000340a:	07d9      	lsls	r1, r3, #31
1000340c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
10003410:	07d0      	lsls	r0, r2, #31
10003412:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
10003416:	1a84      	subs	r4, r0, r2
10003418:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
1000341c:	eb61 0303 	sbc.w	r3, r1, r3
10003420:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
10003424:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
10003428:	4622      	mov	r2, r4
1000342a:	462b      	mov	r3, r5
1000342c:	1891      	adds	r1, r2, r2
1000342e:	6739      	str	r1, [r7, #112]	@ 0x70
10003430:	415b      	adcs	r3, r3
10003432:	677b      	str	r3, [r7, #116]	@ 0x74
10003434:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
10003438:	4621      	mov	r1, r4
1000343a:	1851      	adds	r1, r2, r1
1000343c:	66b9      	str	r1, [r7, #104]	@ 0x68
1000343e:	4629      	mov	r1, r5
10003440:	414b      	adcs	r3, r1
10003442:	66fb      	str	r3, [r7, #108]	@ 0x6c
10003444:	f04f 0200 	mov.w	r2, #0
10003448:	f04f 0300 	mov.w	r3, #0
1000344c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
10003450:	4649      	mov	r1, r9
10003452:	018b      	lsls	r3, r1, #6
10003454:	4641      	mov	r1, r8
10003456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
1000345a:	4641      	mov	r1, r8
1000345c:	018a      	lsls	r2, r1, #6
1000345e:	4641      	mov	r1, r8
10003460:	1889      	adds	r1, r1, r2
10003462:	6639      	str	r1, [r7, #96]	@ 0x60
10003464:	4649      	mov	r1, r9
10003466:	eb43 0101 	adc.w	r1, r3, r1
1000346a:	6679      	str	r1, [r7, #100]	@ 0x64
1000346c:	f04f 0200 	mov.w	r2, #0
10003470:	f04f 0300 	mov.w	r3, #0
10003474:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
10003478:	4649      	mov	r1, r9
1000347a:	008b      	lsls	r3, r1, #2
1000347c:	4641      	mov	r1, r8
1000347e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
10003482:	4641      	mov	r1, r8
10003484:	008a      	lsls	r2, r1, #2
10003486:	4610      	mov	r0, r2
10003488:	4619      	mov	r1, r3
1000348a:	4603      	mov	r3, r0
1000348c:	4622      	mov	r2, r4
1000348e:	189b      	adds	r3, r3, r2
10003490:	65bb      	str	r3, [r7, #88]	@ 0x58
10003492:	460b      	mov	r3, r1
10003494:	462a      	mov	r2, r5
10003496:	eb42 0303 	adc.w	r3, r2, r3
1000349a:	65fb      	str	r3, [r7, #92]	@ 0x5c
1000349c:	f04f 0200 	mov.w	r2, #0
100034a0:	f04f 0300 	mov.w	r3, #0
100034a4:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
100034a8:	4649      	mov	r1, r9
100034aa:	008b      	lsls	r3, r1, #2
100034ac:	4641      	mov	r1, r8
100034ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
100034b2:	4641      	mov	r1, r8
100034b4:	008a      	lsls	r2, r1, #2
100034b6:	4610      	mov	r0, r2
100034b8:	4619      	mov	r1, r3
100034ba:	4603      	mov	r3, r0
100034bc:	4622      	mov	r2, r4
100034be:	189b      	adds	r3, r3, r2
100034c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
100034c4:	462b      	mov	r3, r5
100034c6:	460a      	mov	r2, r1
100034c8:	eb42 0303 	adc.w	r3, r2, r3
100034cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
100034d0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
100034d4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
100034d8:	f7fd fb1e 	bl	10000b18 <__aeabi_ldivmod>
100034dc:	4602      	mov	r2, r0
100034de:	460b      	mov	r3, r1
100034e0:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
100034e4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
100034e8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
100034ec:	b21b      	sxth	r3, r3
100034ee:	17da      	asrs	r2, r3, #31
100034f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
100034f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
100034f8:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
100034fc:	2b00      	cmp	r3, #0
100034fe:	da08      	bge.n	10003512 <compensate_pressure+0x45e>
10003500:	f641 71ff 	movw	r1, #8191	@ 0x1fff
10003504:	1851      	adds	r1, r2, r1
10003506:	6539      	str	r1, [r7, #80]	@ 0x50
10003508:	f143 0300 	adc.w	r3, r3, #0
1000350c:	657b      	str	r3, [r7, #84]	@ 0x54
1000350e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
10003512:	f04f 0000 	mov.w	r0, #0
10003516:	f04f 0100 	mov.w	r1, #0
1000351a:	0b50      	lsrs	r0, r2, #13
1000351c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
10003520:	1359      	asrs	r1, r3, #13
10003522:	4602      	mov	r2, r0
10003524:	460b      	mov	r3, r1
10003526:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
1000352a:	4629      	mov	r1, r5
1000352c:	fb02 f001 	mul.w	r0, r2, r1
10003530:	4621      	mov	r1, r4
10003532:	fb01 f103 	mul.w	r1, r1, r3
10003536:	4401      	add	r1, r0
10003538:	4620      	mov	r0, r4
1000353a:	fba0 2302 	umull	r2, r3, r0, r2
1000353e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
10003542:	4613      	mov	r3, r2
10003544:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
10003548:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
1000354c:	18cb      	adds	r3, r1, r3
1000354e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
10003552:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
10003556:	2b00      	cmp	r3, #0
10003558:	da08      	bge.n	1000356c <compensate_pressure+0x4b8>
1000355a:	f641 71ff 	movw	r1, #8191	@ 0x1fff
1000355e:	1851      	adds	r1, r2, r1
10003560:	64b9      	str	r1, [r7, #72]	@ 0x48
10003562:	f143 0300 	adc.w	r3, r3, #0
10003566:	64fb      	str	r3, [r7, #76]	@ 0x4c
10003568:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
1000356c:	f04f 0000 	mov.w	r0, #0
10003570:	f04f 0100 	mov.w	r1, #0
10003574:	0b50      	lsrs	r0, r2, #13
10003576:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
1000357a:	1359      	asrs	r1, r3, #13
1000357c:	4602      	mov	r2, r0
1000357e:	460b      	mov	r3, r1
10003580:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
10003584:	4629      	mov	r1, r5
10003586:	fb02 f001 	mul.w	r0, r2, r1
1000358a:	4621      	mov	r1, r4
1000358c:	fb01 f103 	mul.w	r1, r1, r3
10003590:	4401      	add	r1, r0
10003592:	4620      	mov	r0, r4
10003594:	fba0 2302 	umull	r2, r3, r0, r2
10003598:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
1000359c:	4613      	mov	r3, r2
1000359e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
100035a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
100035a6:	18cb      	adds	r3, r1, r3
100035a8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
100035ac:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
100035b0:	2b00      	cmp	r3, #0
100035b2:	da08      	bge.n	100035c6 <compensate_pressure+0x512>
100035b4:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
100035b8:	1851      	adds	r1, r2, r1
100035ba:	6439      	str	r1, [r7, #64]	@ 0x40
100035bc:	f143 0300 	adc.w	r3, r3, #0
100035c0:	647b      	str	r3, [r7, #68]	@ 0x44
100035c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
100035c6:	f04f 0000 	mov.w	r0, #0
100035ca:	f04f 0100 	mov.w	r1, #0
100035ce:	0e50      	lsrs	r0, r2, #25
100035d0:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
100035d4:	1659      	asrs	r1, r3, #25
100035d6:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
100035da:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
100035de:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
100035e2:	b21b      	sxth	r3, r3
100035e4:	17da      	asrs	r2, r3, #31
100035e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
100035ea:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
100035ee:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
100035f2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
100035f6:	462a      	mov	r2, r5
100035f8:	fb02 f203 	mul.w	r2, r2, r3
100035fc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
10003600:	4621      	mov	r1, r4
10003602:	fb01 f303 	mul.w	r3, r1, r3
10003606:	441a      	add	r2, r3
10003608:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
1000360c:	4621      	mov	r1, r4
1000360e:	fba3 1301 	umull	r1, r3, r3, r1
10003612:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
10003616:	460b      	mov	r3, r1
10003618:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
1000361c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
10003620:	18d3      	adds	r3, r2, r3
10003622:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
10003626:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
1000362a:	2b00      	cmp	r3, #0
1000362c:	da07      	bge.n	1000363e <compensate_pressure+0x58a>
1000362e:	4970      	ldr	r1, [pc, #448]	@ (100037f0 <compensate_pressure+0x73c>)
10003630:	1851      	adds	r1, r2, r1
10003632:	63b9      	str	r1, [r7, #56]	@ 0x38
10003634:	f143 0300 	adc.w	r3, r3, #0
10003638:	63fb      	str	r3, [r7, #60]	@ 0x3c
1000363a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
1000363e:	f04f 0000 	mov.w	r0, #0
10003642:	f04f 0100 	mov.w	r1, #0
10003646:	0cd0      	lsrs	r0, r2, #19
10003648:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
1000364c:	14d9      	asrs	r1, r3, #19
1000364e:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
10003652:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
10003656:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
1000365a:	1884      	adds	r4, r0, r2
1000365c:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
10003660:	eb41 0303 	adc.w	r3, r1, r3
10003664:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
10003668:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
1000366c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
10003670:	4621      	mov	r1, r4
10003672:	1889      	adds	r1, r1, r2
10003674:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
10003678:	4629      	mov	r1, r5
1000367a:	eb43 0101 	adc.w	r1, r3, r1
1000367e:	f8c7 10bc 	str.w	r1, [r7, #188]	@ 0xbc
10003682:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
10003686:	2b00      	cmp	r3, #0
10003688:	da07      	bge.n	1000369a <compensate_pressure+0x5e6>
1000368a:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
1000368e:	6339      	str	r1, [r7, #48]	@ 0x30
10003690:	f143 0300 	adc.w	r3, r3, #0
10003694:	637b      	str	r3, [r7, #52]	@ 0x34
10003696:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
1000369a:	f04f 0000 	mov.w	r0, #0
1000369e:	f04f 0100 	mov.w	r1, #0
100036a2:	0a10      	lsrs	r0, r2, #8
100036a4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
100036a8:	1219      	asrs	r1, r3, #8
100036aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
100036ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
100036b2:	b21b      	sxth	r3, r3
100036b4:	17da      	asrs	r2, r3, #31
100036b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
100036ba:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
100036be:	f04f 0200 	mov.w	r2, #0
100036c2:	f04f 0300 	mov.w	r3, #0
100036c6:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
100036ca:	464c      	mov	r4, r9
100036cc:	0123      	lsls	r3, r4, #4
100036ce:	4644      	mov	r4, r8
100036d0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
100036d4:	4644      	mov	r4, r8
100036d6:	0122      	lsls	r2, r4, #4
100036d8:	1884      	adds	r4, r0, r2
100036da:	62bc      	str	r4, [r7, #40]	@ 0x28
100036dc:	eb41 0303 	adc.w	r3, r1, r3
100036e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
100036e2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
100036e6:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
100036ea:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
100036ee:	f04f 0000 	mov.w	r0, #0
100036f2:	f04f 0100 	mov.w	r1, #0
100036f6:	0fd8      	lsrs	r0, r3, #31
100036f8:	2100      	movs	r1, #0
100036fa:	1884      	adds	r4, r0, r2
100036fc:	623c      	str	r4, [r7, #32]
100036fe:	eb41 0303 	adc.w	r3, r1, r3
10003702:	627b      	str	r3, [r7, #36]	@ 0x24
10003704:	f04f 0200 	mov.w	r2, #0
10003708:	f04f 0300 	mov.w	r3, #0
1000370c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
10003710:	4621      	mov	r1, r4
10003712:	084a      	lsrs	r2, r1, #1
10003714:	4629      	mov	r1, r5
10003716:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
1000371a:	4629      	mov	r1, r5
1000371c:	104b      	asrs	r3, r1, #1
1000371e:	4610      	mov	r0, r2
10003720:	4619      	mov	r1, r3
10003722:	4602      	mov	r2, r0
10003724:	460b      	mov	r3, r1
10003726:	1894      	adds	r4, r2, r2
10003728:	61bc      	str	r4, [r7, #24]
1000372a:	415b      	adcs	r3, r3
1000372c:	61fb      	str	r3, [r7, #28]
1000372e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
10003732:	1814      	adds	r4, r2, r0
10003734:	613c      	str	r4, [r7, #16]
10003736:	414b      	adcs	r3, r1
10003738:	617b      	str	r3, [r7, #20]
1000373a:	f04f 0200 	mov.w	r2, #0
1000373e:	f04f 0300 	mov.w	r3, #0
10003742:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
10003746:	464c      	mov	r4, r9
10003748:	0163      	lsls	r3, r4, #5
1000374a:	4644      	mov	r4, r8
1000374c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
10003750:	4644      	mov	r4, r8
10003752:	0162      	lsls	r2, r4, #5
10003754:	4644      	mov	r4, r8
10003756:	18a4      	adds	r4, r4, r2
10003758:	60bc      	str	r4, [r7, #8]
1000375a:	464c      	mov	r4, r9
1000375c:	eb43 0404 	adc.w	r4, r3, r4
10003760:	60fc      	str	r4, [r7, #12]
10003762:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
10003766:	4623      	mov	r3, r4
10003768:	181b      	adds	r3, r3, r0
1000376a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
1000376e:	462b      	mov	r3, r5
10003770:	eb41 0303 	adc.w	r3, r1, r3
10003774:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
10003778:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
1000377c:	2b00      	cmp	r3, #0
1000377e:	da07      	bge.n	10003790 <compensate_pressure+0x6dc>
10003780:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
10003784:	6039      	str	r1, [r7, #0]
10003786:	f143 0300 	adc.w	r3, r3, #0
1000378a:	607b      	str	r3, [r7, #4]
1000378c:	e9d7 2300 	ldrd	r2, r3, [r7]
10003790:	f04f 0000 	mov.w	r0, #0
10003794:	f04f 0100 	mov.w	r1, #0
10003798:	09d0      	lsrs	r0, r2, #7
1000379a:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
1000379e:	11d9      	asrs	r1, r3, #7
100037a0:	4602      	mov	r2, r0
100037a2:	460b      	mov	r3, r1
100037a4:	4613      	mov	r3, r2
100037a6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

		if (pressure < pressure_min)
100037aa:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
100037ae:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
100037b2:	429a      	cmp	r2, r3
100037b4:	d204      	bcs.n	100037c0 <compensate_pressure+0x70c>
			pressure = pressure_min;
100037b6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
100037ba:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
100037be:	e00e      	b.n	100037de <compensate_pressure+0x72a>
		else if (pressure > pressure_max)
100037c0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
100037c4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
100037c8:	429a      	cmp	r2, r3
100037ca:	d908      	bls.n	100037de <compensate_pressure+0x72a>
			pressure = pressure_max;
100037cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
100037d0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
100037d4:	e003      	b.n	100037de <compensate_pressure+0x72a>
	} else {
		pressure = pressure_min;
100037d6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
100037da:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
	}

	return pressure;
100037de:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
}
100037e2:	4618      	mov	r0, r3
100037e4:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
100037e8:	46bd      	mov	sp, r7
100037ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
100037ee:	bf00      	nop
100037f0:	0007ffff 	.word	0x0007ffff

100037f4 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
100037f4:	b480      	push	{r7}
100037f6:	b08b      	sub	sp, #44	@ 0x2c
100037f8:	af00      	add	r7, sp, #0
100037fa:	6078      	str	r0, [r7, #4]
100037fc:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
100037fe:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
10003802:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
10003804:	683b      	ldr	r3, [r7, #0]
10003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10003808:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
1000380c:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
1000380e:	687b      	ldr	r3, [r7, #4]
10003810:	689b      	ldr	r3, [r3, #8]
10003812:	039b      	lsls	r3, r3, #14
10003814:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
10003816:	683b      	ldr	r3, [r7, #0]
10003818:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
1000381c:	051b      	lsls	r3, r3, #20
1000381e:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
10003820:	683b      	ldr	r3, [r7, #0]
10003822:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
10003826:	461a      	mov	r2, r3
10003828:	69fb      	ldr	r3, [r7, #28]
1000382a:	fb02 f303 	mul.w	r3, r2, r3
1000382e:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
10003830:	69ba      	ldr	r2, [r7, #24]
10003832:	697b      	ldr	r3, [r7, #20]
10003834:	1ad2      	subs	r2, r2, r3
10003836:	693b      	ldr	r3, [r7, #16]
10003838:	1ad3      	subs	r3, r2, r3
1000383a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
1000383e:	2b00      	cmp	r3, #0
10003840:	da02      	bge.n	10003848 <compensate_humidity+0x54>
10003842:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
10003846:	337f      	adds	r3, #127	@ 0x7f
10003848:	13db      	asrs	r3, r3, #15
1000384a:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
1000384c:	683b      	ldr	r3, [r7, #0]
1000384e:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
10003852:	461a      	mov	r2, r3
10003854:	69fb      	ldr	r3, [r7, #28]
10003856:	fb02 f303 	mul.w	r3, r2, r3
1000385a:	2b00      	cmp	r3, #0
1000385c:	da01      	bge.n	10003862 <compensate_humidity+0x6e>
1000385e:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
10003862:	129b      	asrs	r3, r3, #10
10003864:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
10003866:	683b      	ldr	r3, [r7, #0]
10003868:	7f1b      	ldrb	r3, [r3, #28]
1000386a:	461a      	mov	r2, r3
1000386c:	69fb      	ldr	r3, [r7, #28]
1000386e:	fb02 f303 	mul.w	r3, r2, r3
10003872:	2b00      	cmp	r3, #0
10003874:	da01      	bge.n	1000387a <compensate_humidity+0x86>
10003876:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
1000387a:	12db      	asrs	r3, r3, #11
1000387c:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
1000387e:	697b      	ldr	r3, [r7, #20]
10003880:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
10003884:	69ba      	ldr	r2, [r7, #24]
10003886:	fb02 f303 	mul.w	r3, r2, r3
1000388a:	2b00      	cmp	r3, #0
1000388c:	da01      	bge.n	10003892 <compensate_humidity+0x9e>
1000388e:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
10003892:	129b      	asrs	r3, r3, #10
10003894:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
10003898:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
1000389a:	683b      	ldr	r3, [r7, #0]
1000389c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
100038a0:	461a      	mov	r2, r3
100038a2:	693b      	ldr	r3, [r7, #16]
100038a4:	fb02 f303 	mul.w	r3, r2, r3
100038a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
100038ac:	2b00      	cmp	r3, #0
100038ae:	da02      	bge.n	100038b6 <compensate_humidity+0xc2>
100038b0:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
100038b4:	333f      	adds	r3, #63	@ 0x3f
100038b6:	139b      	asrs	r3, r3, #14
100038b8:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
100038ba:	68fb      	ldr	r3, [r7, #12]
100038bc:	69ba      	ldr	r2, [r7, #24]
100038be:	fb02 f303 	mul.w	r3, r2, r3
100038c2:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
100038c4:	697b      	ldr	r3, [r7, #20]
100038c6:	2b00      	cmp	r3, #0
100038c8:	da02      	bge.n	100038d0 <compensate_humidity+0xdc>
100038ca:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
100038ce:	337f      	adds	r3, #127	@ 0x7f
100038d0:	13db      	asrs	r3, r3, #15
100038d2:	461a      	mov	r2, r3
100038d4:	697b      	ldr	r3, [r7, #20]
100038d6:	2b00      	cmp	r3, #0
100038d8:	da02      	bge.n	100038e0 <compensate_humidity+0xec>
100038da:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
100038de:	337f      	adds	r3, #127	@ 0x7f
100038e0:	13db      	asrs	r3, r3, #15
100038e2:	fb02 f303 	mul.w	r3, r2, r3
100038e6:	2b00      	cmp	r3, #0
100038e8:	da00      	bge.n	100038ec <compensate_humidity+0xf8>
100038ea:	337f      	adds	r3, #127	@ 0x7f
100038ec:	11db      	asrs	r3, r3, #7
100038ee:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
100038f0:	683b      	ldr	r3, [r7, #0]
100038f2:	7e1b      	ldrb	r3, [r3, #24]
100038f4:	461a      	mov	r2, r3
100038f6:	693b      	ldr	r3, [r7, #16]
100038f8:	fb02 f303 	mul.w	r3, r2, r3
100038fc:	2b00      	cmp	r3, #0
100038fe:	da00      	bge.n	10003902 <compensate_humidity+0x10e>
10003900:	330f      	adds	r3, #15
10003902:	111b      	asrs	r3, r3, #4
10003904:	425b      	negs	r3, r3
10003906:	461a      	mov	r2, r3
10003908:	697b      	ldr	r3, [r7, #20]
1000390a:	4413      	add	r3, r2
1000390c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
1000390e:	68fb      	ldr	r3, [r7, #12]
10003910:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
10003914:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
10003916:	68fb      	ldr	r3, [r7, #12]
10003918:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
1000391c:	bfa8      	it	ge
1000391e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
10003922:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
10003924:	68fb      	ldr	r3, [r7, #12]
10003926:	2b00      	cmp	r3, #0
10003928:	da01      	bge.n	1000392e <compensate_humidity+0x13a>
1000392a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
1000392e:	131b      	asrs	r3, r3, #12
10003930:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
10003932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10003934:	6a3b      	ldr	r3, [r7, #32]
10003936:	429a      	cmp	r2, r3
10003938:	d901      	bls.n	1000393e <compensate_humidity+0x14a>
		humidity = humidity_max;
1000393a:	6a3b      	ldr	r3, [r7, #32]
1000393c:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
1000393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10003940:	4618      	mov	r0, r3
10003942:	372c      	adds	r7, #44	@ 0x2c
10003944:	46bd      	mov	sp, r7
10003946:	f85d 7b04 	ldr.w	r7, [sp], #4
1000394a:	4770      	bx	lr

1000394c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
1000394c:	b580      	push	{r7, lr}
1000394e:	b08a      	sub	sp, #40	@ 0x28
10003950:	af00      	add	r7, sp, #0
10003952:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
10003954:	2388      	movs	r3, #136	@ 0x88
10003956:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
1000395a:	f107 030c 	add.w	r3, r7, #12
1000395e:	2200      	movs	r2, #0
10003960:	601a      	str	r2, [r3, #0]
10003962:	605a      	str	r2, [r3, #4]
10003964:	609a      	str	r2, [r3, #8]
10003966:	60da      	str	r2, [r3, #12]
10003968:	611a      	str	r2, [r3, #16]
1000396a:	615a      	str	r2, [r3, #20]
1000396c:	831a      	strh	r2, [r3, #24]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
1000396e:	f107 010c 	add.w	r1, r7, #12
10003972:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
10003976:	687b      	ldr	r3, [r7, #4]
10003978:	221a      	movs	r2, #26
1000397a:	f7fe fee6 	bl	1000274a <bme280_get_regs>
1000397e:	4603      	mov	r3, r0
10003980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
10003984:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
10003988:	2b00      	cmp	r3, #0
1000398a:	d11d      	bne.n	100039c8 <get_calib_data+0x7c>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
1000398c:	f107 030c 	add.w	r3, r7, #12
10003990:	6879      	ldr	r1, [r7, #4]
10003992:	4618      	mov	r0, r3
10003994:	f000 f84a 	bl	10003a2c <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
10003998:	23e1      	movs	r3, #225	@ 0xe1
1000399a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
1000399e:	f107 010c 	add.w	r1, r7, #12
100039a2:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
100039a6:	687b      	ldr	r3, [r7, #4]
100039a8:	2207      	movs	r2, #7
100039aa:	f7fe fece 	bl	1000274a <bme280_get_regs>
100039ae:	4603      	mov	r3, r0
100039b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
100039b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
100039b8:	2b00      	cmp	r3, #0
100039ba:	d105      	bne.n	100039c8 <get_calib_data+0x7c>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
100039bc:	f107 030c 	add.w	r3, r7, #12
100039c0:	6879      	ldr	r1, [r7, #4]
100039c2:	4618      	mov	r0, r3
100039c4:	f000 f8ee 	bl	10003ba4 <parse_humidity_calib_data>
		}
	}

	return rslt;
100039c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
100039cc:	4618      	mov	r0, r3
100039ce:	3728      	adds	r7, #40	@ 0x28
100039d0:	46bd      	mov	sp, r7
100039d2:	bd80      	pop	{r7, pc}

100039d4 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
100039d4:	b480      	push	{r7}
100039d6:	b087      	sub	sp, #28
100039d8:	af00      	add	r7, sp, #0
100039da:	60f8      	str	r0, [r7, #12]
100039dc:	60b9      	str	r1, [r7, #8]
100039de:	607a      	str	r2, [r7, #4]
100039e0:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
100039e2:	2301      	movs	r3, #1
100039e4:	75fb      	strb	r3, [r7, #23]
100039e6:	e016      	b.n	10003a16 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
100039e8:	7dfb      	ldrb	r3, [r7, #23]
100039ea:	68fa      	ldr	r2, [r7, #12]
100039ec:	441a      	add	r2, r3
100039ee:	7dfb      	ldrb	r3, [r7, #23]
100039f0:	005b      	lsls	r3, r3, #1
100039f2:	3b01      	subs	r3, #1
100039f4:	68b9      	ldr	r1, [r7, #8]
100039f6:	440b      	add	r3, r1
100039f8:	7812      	ldrb	r2, [r2, #0]
100039fa:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
100039fc:	7dfb      	ldrb	r3, [r7, #23]
100039fe:	687a      	ldr	r2, [r7, #4]
10003a00:	441a      	add	r2, r3
10003a02:	7dfb      	ldrb	r3, [r7, #23]
10003a04:	005b      	lsls	r3, r3, #1
10003a06:	4619      	mov	r1, r3
10003a08:	68bb      	ldr	r3, [r7, #8]
10003a0a:	440b      	add	r3, r1
10003a0c:	7812      	ldrb	r2, [r2, #0]
10003a0e:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
10003a10:	7dfb      	ldrb	r3, [r7, #23]
10003a12:	3301      	adds	r3, #1
10003a14:	75fb      	strb	r3, [r7, #23]
10003a16:	7dfa      	ldrb	r2, [r7, #23]
10003a18:	78fb      	ldrb	r3, [r7, #3]
10003a1a:	429a      	cmp	r2, r3
10003a1c:	d3e4      	bcc.n	100039e8 <interleave_reg_addr+0x14>
	}
}
10003a1e:	bf00      	nop
10003a20:	bf00      	nop
10003a22:	371c      	adds	r7, #28
10003a24:	46bd      	mov	sp, r7
10003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
10003a2a:	4770      	bx	lr

10003a2c <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
10003a2c:	b480      	push	{r7}
10003a2e:	b085      	sub	sp, #20
10003a30:	af00      	add	r7, sp, #0
10003a32:	6078      	str	r0, [r7, #4]
10003a34:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
10003a36:	683b      	ldr	r3, [r7, #0]
10003a38:	3310      	adds	r3, #16
10003a3a:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
10003a3c:	687b      	ldr	r3, [r7, #4]
10003a3e:	3301      	adds	r3, #1
10003a40:	781b      	ldrb	r3, [r3, #0]
10003a42:	b21b      	sxth	r3, r3
10003a44:	021b      	lsls	r3, r3, #8
10003a46:	b21a      	sxth	r2, r3
10003a48:	687b      	ldr	r3, [r7, #4]
10003a4a:	781b      	ldrb	r3, [r3, #0]
10003a4c:	b21b      	sxth	r3, r3
10003a4e:	4313      	orrs	r3, r2
10003a50:	b21b      	sxth	r3, r3
10003a52:	b29a      	uxth	r2, r3
10003a54:	68fb      	ldr	r3, [r7, #12]
10003a56:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
10003a58:	687b      	ldr	r3, [r7, #4]
10003a5a:	3303      	adds	r3, #3
10003a5c:	781b      	ldrb	r3, [r3, #0]
10003a5e:	b21b      	sxth	r3, r3
10003a60:	021b      	lsls	r3, r3, #8
10003a62:	b21a      	sxth	r2, r3
10003a64:	687b      	ldr	r3, [r7, #4]
10003a66:	3302      	adds	r3, #2
10003a68:	781b      	ldrb	r3, [r3, #0]
10003a6a:	b21b      	sxth	r3, r3
10003a6c:	4313      	orrs	r3, r2
10003a6e:	b21a      	sxth	r2, r3
10003a70:	68fb      	ldr	r3, [r7, #12]
10003a72:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
10003a74:	687b      	ldr	r3, [r7, #4]
10003a76:	3305      	adds	r3, #5
10003a78:	781b      	ldrb	r3, [r3, #0]
10003a7a:	b21b      	sxth	r3, r3
10003a7c:	021b      	lsls	r3, r3, #8
10003a7e:	b21a      	sxth	r2, r3
10003a80:	687b      	ldr	r3, [r7, #4]
10003a82:	3304      	adds	r3, #4
10003a84:	781b      	ldrb	r3, [r3, #0]
10003a86:	b21b      	sxth	r3, r3
10003a88:	4313      	orrs	r3, r2
10003a8a:	b21a      	sxth	r2, r3
10003a8c:	68fb      	ldr	r3, [r7, #12]
10003a8e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
10003a90:	687b      	ldr	r3, [r7, #4]
10003a92:	3307      	adds	r3, #7
10003a94:	781b      	ldrb	r3, [r3, #0]
10003a96:	b21b      	sxth	r3, r3
10003a98:	021b      	lsls	r3, r3, #8
10003a9a:	b21a      	sxth	r2, r3
10003a9c:	687b      	ldr	r3, [r7, #4]
10003a9e:	3306      	adds	r3, #6
10003aa0:	781b      	ldrb	r3, [r3, #0]
10003aa2:	b21b      	sxth	r3, r3
10003aa4:	4313      	orrs	r3, r2
10003aa6:	b21b      	sxth	r3, r3
10003aa8:	b29a      	uxth	r2, r3
10003aaa:	68fb      	ldr	r3, [r7, #12]
10003aac:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
10003aae:	687b      	ldr	r3, [r7, #4]
10003ab0:	3309      	adds	r3, #9
10003ab2:	781b      	ldrb	r3, [r3, #0]
10003ab4:	b21b      	sxth	r3, r3
10003ab6:	021b      	lsls	r3, r3, #8
10003ab8:	b21a      	sxth	r2, r3
10003aba:	687b      	ldr	r3, [r7, #4]
10003abc:	3308      	adds	r3, #8
10003abe:	781b      	ldrb	r3, [r3, #0]
10003ac0:	b21b      	sxth	r3, r3
10003ac2:	4313      	orrs	r3, r2
10003ac4:	b21a      	sxth	r2, r3
10003ac6:	68fb      	ldr	r3, [r7, #12]
10003ac8:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
10003aca:	687b      	ldr	r3, [r7, #4]
10003acc:	330b      	adds	r3, #11
10003ace:	781b      	ldrb	r3, [r3, #0]
10003ad0:	b21b      	sxth	r3, r3
10003ad2:	021b      	lsls	r3, r3, #8
10003ad4:	b21a      	sxth	r2, r3
10003ad6:	687b      	ldr	r3, [r7, #4]
10003ad8:	330a      	adds	r3, #10
10003ada:	781b      	ldrb	r3, [r3, #0]
10003adc:	b21b      	sxth	r3, r3
10003ade:	4313      	orrs	r3, r2
10003ae0:	b21a      	sxth	r2, r3
10003ae2:	68fb      	ldr	r3, [r7, #12]
10003ae4:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
10003ae6:	687b      	ldr	r3, [r7, #4]
10003ae8:	330d      	adds	r3, #13
10003aea:	781b      	ldrb	r3, [r3, #0]
10003aec:	b21b      	sxth	r3, r3
10003aee:	021b      	lsls	r3, r3, #8
10003af0:	b21a      	sxth	r2, r3
10003af2:	687b      	ldr	r3, [r7, #4]
10003af4:	330c      	adds	r3, #12
10003af6:	781b      	ldrb	r3, [r3, #0]
10003af8:	b21b      	sxth	r3, r3
10003afa:	4313      	orrs	r3, r2
10003afc:	b21a      	sxth	r2, r3
10003afe:	68fb      	ldr	r3, [r7, #12]
10003b00:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
10003b02:	687b      	ldr	r3, [r7, #4]
10003b04:	330f      	adds	r3, #15
10003b06:	781b      	ldrb	r3, [r3, #0]
10003b08:	b21b      	sxth	r3, r3
10003b0a:	021b      	lsls	r3, r3, #8
10003b0c:	b21a      	sxth	r2, r3
10003b0e:	687b      	ldr	r3, [r7, #4]
10003b10:	330e      	adds	r3, #14
10003b12:	781b      	ldrb	r3, [r3, #0]
10003b14:	b21b      	sxth	r3, r3
10003b16:	4313      	orrs	r3, r2
10003b18:	b21a      	sxth	r2, r3
10003b1a:	68fb      	ldr	r3, [r7, #12]
10003b1c:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
10003b1e:	687b      	ldr	r3, [r7, #4]
10003b20:	3311      	adds	r3, #17
10003b22:	781b      	ldrb	r3, [r3, #0]
10003b24:	b21b      	sxth	r3, r3
10003b26:	021b      	lsls	r3, r3, #8
10003b28:	b21a      	sxth	r2, r3
10003b2a:	687b      	ldr	r3, [r7, #4]
10003b2c:	3310      	adds	r3, #16
10003b2e:	781b      	ldrb	r3, [r3, #0]
10003b30:	b21b      	sxth	r3, r3
10003b32:	4313      	orrs	r3, r2
10003b34:	b21a      	sxth	r2, r3
10003b36:	68fb      	ldr	r3, [r7, #12]
10003b38:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
10003b3a:	687b      	ldr	r3, [r7, #4]
10003b3c:	3313      	adds	r3, #19
10003b3e:	781b      	ldrb	r3, [r3, #0]
10003b40:	b21b      	sxth	r3, r3
10003b42:	021b      	lsls	r3, r3, #8
10003b44:	b21a      	sxth	r2, r3
10003b46:	687b      	ldr	r3, [r7, #4]
10003b48:	3312      	adds	r3, #18
10003b4a:	781b      	ldrb	r3, [r3, #0]
10003b4c:	b21b      	sxth	r3, r3
10003b4e:	4313      	orrs	r3, r2
10003b50:	b21a      	sxth	r2, r3
10003b52:	68fb      	ldr	r3, [r7, #12]
10003b54:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
10003b56:	687b      	ldr	r3, [r7, #4]
10003b58:	3315      	adds	r3, #21
10003b5a:	781b      	ldrb	r3, [r3, #0]
10003b5c:	b21b      	sxth	r3, r3
10003b5e:	021b      	lsls	r3, r3, #8
10003b60:	b21a      	sxth	r2, r3
10003b62:	687b      	ldr	r3, [r7, #4]
10003b64:	3314      	adds	r3, #20
10003b66:	781b      	ldrb	r3, [r3, #0]
10003b68:	b21b      	sxth	r3, r3
10003b6a:	4313      	orrs	r3, r2
10003b6c:	b21a      	sxth	r2, r3
10003b6e:	68fb      	ldr	r3, [r7, #12]
10003b70:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
10003b72:	687b      	ldr	r3, [r7, #4]
10003b74:	3317      	adds	r3, #23
10003b76:	781b      	ldrb	r3, [r3, #0]
10003b78:	b21b      	sxth	r3, r3
10003b7a:	021b      	lsls	r3, r3, #8
10003b7c:	b21a      	sxth	r2, r3
10003b7e:	687b      	ldr	r3, [r7, #4]
10003b80:	3316      	adds	r3, #22
10003b82:	781b      	ldrb	r3, [r3, #0]
10003b84:	b21b      	sxth	r3, r3
10003b86:	4313      	orrs	r3, r2
10003b88:	b21a      	sxth	r2, r3
10003b8a:	68fb      	ldr	r3, [r7, #12]
10003b8c:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
10003b8e:	687b      	ldr	r3, [r7, #4]
10003b90:	3319      	adds	r3, #25
10003b92:	781a      	ldrb	r2, [r3, #0]
10003b94:	68fb      	ldr	r3, [r7, #12]
10003b96:	761a      	strb	r2, [r3, #24]

}
10003b98:	bf00      	nop
10003b9a:	3714      	adds	r7, #20
10003b9c:	46bd      	mov	sp, r7
10003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
10003ba2:	4770      	bx	lr

10003ba4 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
10003ba4:	b480      	push	{r7}
10003ba6:	b087      	sub	sp, #28
10003ba8:	af00      	add	r7, sp, #0
10003baa:	6078      	str	r0, [r7, #4]
10003bac:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
10003bae:	683b      	ldr	r3, [r7, #0]
10003bb0:	3310      	adds	r3, #16
10003bb2:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
10003bb4:	687b      	ldr	r3, [r7, #4]
10003bb6:	3301      	adds	r3, #1
10003bb8:	781b      	ldrb	r3, [r3, #0]
10003bba:	b21b      	sxth	r3, r3
10003bbc:	021b      	lsls	r3, r3, #8
10003bbe:	b21a      	sxth	r2, r3
10003bc0:	687b      	ldr	r3, [r7, #4]
10003bc2:	781b      	ldrb	r3, [r3, #0]
10003bc4:	b21b      	sxth	r3, r3
10003bc6:	4313      	orrs	r3, r2
10003bc8:	b21a      	sxth	r2, r3
10003bca:	697b      	ldr	r3, [r7, #20]
10003bcc:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
10003bce:	687b      	ldr	r3, [r7, #4]
10003bd0:	3302      	adds	r3, #2
10003bd2:	781a      	ldrb	r2, [r3, #0]
10003bd4:	697b      	ldr	r3, [r7, #20]
10003bd6:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
10003bd8:	687b      	ldr	r3, [r7, #4]
10003bda:	3303      	adds	r3, #3
10003bdc:	781b      	ldrb	r3, [r3, #0]
10003bde:	b25b      	sxtb	r3, r3
10003be0:	b29b      	uxth	r3, r3
10003be2:	011b      	lsls	r3, r3, #4
10003be4:	b29b      	uxth	r3, r3
10003be6:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
10003be8:	687b      	ldr	r3, [r7, #4]
10003bea:	3304      	adds	r3, #4
10003bec:	781b      	ldrb	r3, [r3, #0]
10003bee:	b21b      	sxth	r3, r3
10003bf0:	f003 030f 	and.w	r3, r3, #15
10003bf4:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
10003bf6:	8a7a      	ldrh	r2, [r7, #18]
10003bf8:	8a3b      	ldrh	r3, [r7, #16]
10003bfa:	4313      	orrs	r3, r2
10003bfc:	b21a      	sxth	r2, r3
10003bfe:	697b      	ldr	r3, [r7, #20]
10003c00:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
10003c02:	687b      	ldr	r3, [r7, #4]
10003c04:	3305      	adds	r3, #5
10003c06:	781b      	ldrb	r3, [r3, #0]
10003c08:	b25b      	sxtb	r3, r3
10003c0a:	b29b      	uxth	r3, r3
10003c0c:	011b      	lsls	r3, r3, #4
10003c0e:	b29b      	uxth	r3, r3
10003c10:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
10003c12:	687b      	ldr	r3, [r7, #4]
10003c14:	3304      	adds	r3, #4
10003c16:	781b      	ldrb	r3, [r3, #0]
10003c18:	091b      	lsrs	r3, r3, #4
10003c1a:	b2db      	uxtb	r3, r3
10003c1c:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
10003c1e:	89fa      	ldrh	r2, [r7, #14]
10003c20:	89bb      	ldrh	r3, [r7, #12]
10003c22:	4313      	orrs	r3, r2
10003c24:	b21a      	sxth	r2, r3
10003c26:	697b      	ldr	r3, [r7, #20]
10003c28:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
10003c2a:	687b      	ldr	r3, [r7, #4]
10003c2c:	3306      	adds	r3, #6
10003c2e:	781b      	ldrb	r3, [r3, #0]
10003c30:	b25a      	sxtb	r2, r3
10003c32:	697b      	ldr	r3, [r7, #20]
10003c34:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
10003c38:	bf00      	nop
10003c3a:	371c      	adds	r7, #28
10003c3c:	46bd      	mov	sp, r7
10003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
10003c42:	4770      	bx	lr

10003c44 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
10003c44:	b480      	push	{r7}
10003c46:	b085      	sub	sp, #20
10003c48:	af00      	add	r7, sp, #0
10003c4a:	4603      	mov	r3, r0
10003c4c:	460a      	mov	r2, r1
10003c4e:	71fb      	strb	r3, [r7, #7]
10003c50:	4613      	mov	r3, r2
10003c52:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
10003c54:	2300      	movs	r3, #0
10003c56:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
10003c58:	79fa      	ldrb	r2, [r7, #7]
10003c5a:	79bb      	ldrb	r3, [r7, #6]
10003c5c:	4013      	ands	r3, r2
10003c5e:	b2db      	uxtb	r3, r3
10003c60:	2b00      	cmp	r3, #0
10003c62:	d002      	beq.n	10003c6a <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
10003c64:	2301      	movs	r3, #1
10003c66:	73fb      	strb	r3, [r7, #15]
10003c68:	e001      	b.n	10003c6e <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
10003c6a:	2300      	movs	r3, #0
10003c6c:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
10003c6e:	7bfb      	ldrb	r3, [r7, #15]
}
10003c70:	4618      	mov	r0, r3
10003c72:	3714      	adds	r7, #20
10003c74:	46bd      	mov	sp, r7
10003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
10003c7a:	4770      	bx	lr

10003c7c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
10003c7c:	b480      	push	{r7}
10003c7e:	b085      	sub	sp, #20
10003c80:	af00      	add	r7, sp, #0
10003c82:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
10003c84:	687b      	ldr	r3, [r7, #4]
10003c86:	2b00      	cmp	r3, #0
10003c88:	d00b      	beq.n	10003ca2 <null_ptr_check+0x26>
10003c8a:	687b      	ldr	r3, [r7, #4]
10003c8c:	685b      	ldr	r3, [r3, #4]
10003c8e:	2b00      	cmp	r3, #0
10003c90:	d007      	beq.n	10003ca2 <null_ptr_check+0x26>
10003c92:	687b      	ldr	r3, [r7, #4]
10003c94:	689b      	ldr	r3, [r3, #8]
10003c96:	2b00      	cmp	r3, #0
10003c98:	d003      	beq.n	10003ca2 <null_ptr_check+0x26>
10003c9a:	687b      	ldr	r3, [r7, #4]
10003c9c:	68db      	ldr	r3, [r3, #12]
10003c9e:	2b00      	cmp	r3, #0
10003ca0:	d102      	bne.n	10003ca8 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
10003ca2:	23ff      	movs	r3, #255	@ 0xff
10003ca4:	73fb      	strb	r3, [r7, #15]
10003ca6:	e001      	b.n	10003cac <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
10003ca8:	2300      	movs	r3, #0
10003caa:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
10003cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
10003cb0:	4618      	mov	r0, r3
10003cb2:	3714      	adds	r7, #20
10003cb4:	46bd      	mov	sp, r7
10003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
10003cba:	4770      	bx	lr

10003cbc <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10003cbc:	b580      	push	{r7, lr}
10003cbe:	b088      	sub	sp, #32
10003cc0:	af00      	add	r7, sp, #0
10003cc2:	4603      	mov	r3, r0
10003cc4:	71fb      	strb	r3, [r7, #7]
int32_t  status = BSP_ERROR_NONE;
10003cc6:	2300      	movs	r3, #0
10003cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if(Led == LED6)
10003cca:	79fb      	ldrb	r3, [r7, #7]
10003ccc:	2b00      	cmp	r3, #0
10003cce:	d105      	bne.n	10003cdc <BSP_LED_Init+0x20>
  {
    LED6_GPIO_CLK_ENABLE();
10003cd0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cd4:	2201      	movs	r2, #1
10003cd6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
10003cda:	e019      	b.n	10003d10 <BSP_LED_Init+0x54>
  }
  else if (Led == LED5)
10003cdc:	79fb      	ldrb	r3, [r7, #7]
10003cde:	2b01      	cmp	r3, #1
10003ce0:	d105      	bne.n	10003cee <BSP_LED_Init+0x32>
  {
    LED5_GPIO_CLK_ENABLE();
10003ce2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003ce6:	2201      	movs	r2, #1
10003ce8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
10003cec:	e010      	b.n	10003d10 <BSP_LED_Init+0x54>
  }
  else if (Led == LED7)
10003cee:	79fb      	ldrb	r3, [r7, #7]
10003cf0:	2b02      	cmp	r3, #2
10003cf2:	d105      	bne.n	10003d00 <BSP_LED_Init+0x44>
  {
    LED7_GPIO_CLK_ENABLE();
10003cf4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003cf8:	2280      	movs	r2, #128	@ 0x80
10003cfa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
10003cfe:	e007      	b.n	10003d10 <BSP_LED_Init+0x54>
  }
  else if (Led == LED8)
10003d00:	79fb      	ldrb	r3, [r7, #7]
10003d02:	2b03      	cmp	r3, #3
10003d04:	d104      	bne.n	10003d10 <BSP_LED_Init+0x54>
  {
    LED8_GPIO_CLK_ENABLE();
10003d06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10003d0a:	2208      	movs	r2, #8
10003d0c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	@ 0xaa8
  }

    /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
10003d10:	79fb      	ldrb	r3, [r7, #7]
10003d12:	4a16      	ldr	r2, [pc, #88]	@ (10003d6c <BSP_LED_Init+0xb0>)
10003d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10003d18:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
10003d1a:	2301      	movs	r3, #1
10003d1c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
10003d1e:	2301      	movs	r3, #1
10003d20:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
10003d22:	2303      	movs	r3, #3
10003d24:	617b      	str	r3, [r7, #20]
  BSP_ENTER_CRITICAL_SECTION(LED_PORT[Led]);
10003d26:	79fb      	ldrb	r3, [r7, #7]
10003d28:	4a11      	ldr	r2, [pc, #68]	@ (10003d70 <BSP_LED_Init+0xb4>)
10003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10003d2e:	2164      	movs	r1, #100	@ 0x64
10003d30:	4618      	mov	r0, r3
10003d32:	f7fd f8f7 	bl	10000f24 <Periph_Lock>
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
10003d36:	79fb      	ldrb	r3, [r7, #7]
10003d38:	4a0d      	ldr	r2, [pc, #52]	@ (10003d70 <BSP_LED_Init+0xb4>)
10003d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10003d3e:	f107 0208 	add.w	r2, r7, #8
10003d42:	4611      	mov	r1, r2
10003d44:	4618      	mov	r0, r3
10003d46:	f000 fe35 	bl	100049b4 <HAL_GPIO_Init>
  BSP_EXIT_CRITICAL_SECTION(LED_PORT[Led]);
10003d4a:	79fb      	ldrb	r3, [r7, #7]
10003d4c:	4a08      	ldr	r2, [pc, #32]	@ (10003d70 <BSP_LED_Init+0xb4>)
10003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10003d52:	4618      	mov	r0, r3
10003d54:	f7fd f974 	bl	10001040 <Periph_Unlock>
  
  /* By default, turn off LED */
  BSP_LED_Off(Led);
10003d58:	79fb      	ldrb	r3, [r7, #7]
10003d5a:	4618      	mov	r0, r3
10003d5c:	f000 f80a 	bl	10003d74 <BSP_LED_Off>

return status;
10003d60:	69fb      	ldr	r3, [r7, #28]
}
10003d62:	4618      	mov	r0, r3
10003d64:	3720      	adds	r7, #32
10003d66:	46bd      	mov	sp, r7
10003d68:	bd80      	pop	{r7, pc}
10003d6a:	bf00      	nop
10003d6c:	100119dc 	.word	0x100119dc
10003d70:	1002008c 	.word	0x1002008c

10003d74 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
10003d74:	b580      	push	{r7, lr}
10003d76:	b084      	sub	sp, #16
10003d78:	af00      	add	r7, sp, #0
10003d7a:	4603      	mov	r3, r0
10003d7c:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
10003d7e:	2300      	movs	r3, #0
10003d80:	60fb      	str	r3, [r7, #12]
  if((Led == LED5) || (Led == LED6))
10003d82:	79fb      	ldrb	r3, [r7, #7]
10003d84:	2b01      	cmp	r3, #1
10003d86:	d002      	beq.n	10003d8e <BSP_LED_Off+0x1a>
10003d88:	79fb      	ldrb	r3, [r7, #7]
10003d8a:	2b00      	cmp	r3, #0
10003d8c:	d10d      	bne.n	10003daa <BSP_LED_Off+0x36>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10003d8e:	79fb      	ldrb	r3, [r7, #7]
10003d90:	4a12      	ldr	r2, [pc, #72]	@ (10003ddc <BSP_LED_Off+0x68>)
10003d92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
10003d96:	79fb      	ldrb	r3, [r7, #7]
10003d98:	4a11      	ldr	r2, [pc, #68]	@ (10003de0 <BSP_LED_Off+0x6c>)
10003d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10003d9e:	b29b      	uxth	r3, r3
10003da0:	2201      	movs	r2, #1
10003da2:	4619      	mov	r1, r3
10003da4:	f000 ffb0 	bl	10004d08 <HAL_GPIO_WritePin>
10003da8:	e012      	b.n	10003dd0 <BSP_LED_Off+0x5c>
  }
  else if ((Led == LED7) || (Led == LED8))
10003daa:	79fb      	ldrb	r3, [r7, #7]
10003dac:	2b02      	cmp	r3, #2
10003dae:	d002      	beq.n	10003db6 <BSP_LED_Off+0x42>
10003db0:	79fb      	ldrb	r3, [r7, #7]
10003db2:	2b03      	cmp	r3, #3
10003db4:	d10c      	bne.n	10003dd0 <BSP_LED_Off+0x5c>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
10003db6:	79fb      	ldrb	r3, [r7, #7]
10003db8:	4a08      	ldr	r2, [pc, #32]	@ (10003ddc <BSP_LED_Off+0x68>)
10003dba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
10003dbe:	79fb      	ldrb	r3, [r7, #7]
10003dc0:	4a07      	ldr	r2, [pc, #28]	@ (10003de0 <BSP_LED_Off+0x6c>)
10003dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10003dc6:	b29b      	uxth	r3, r3
10003dc8:	2200      	movs	r2, #0
10003dca:	4619      	mov	r1, r3
10003dcc:	f000 ff9c 	bl	10004d08 <HAL_GPIO_WritePin>
  }

  return status;
10003dd0:	68fb      	ldr	r3, [r7, #12]
}
10003dd2:	4618      	mov	r0, r3
10003dd4:	3710      	adds	r7, #16
10003dd6:	46bd      	mov	sp, r7
10003dd8:	bd80      	pop	{r7, pc}
10003dda:	bf00      	nop
10003ddc:	1002008c 	.word	0x1002008c
10003de0:	100119dc 	.word	0x100119dc

10003de4 <BSP_LED_Toggle>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
10003de4:	b580      	push	{r7, lr}
10003de6:	b084      	sub	sp, #16
10003de8:	af00      	add	r7, sp, #0
10003dea:	4603      	mov	r3, r0
10003dec:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
10003dee:	2300      	movs	r3, #0
10003df0:	60fb      	str	r3, [r7, #12]
  /* Toggle GPIO Led Pin */
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
10003df2:	79fb      	ldrb	r3, [r7, #7]
10003df4:	4a08      	ldr	r2, [pc, #32]	@ (10003e18 <BSP_LED_Toggle+0x34>)
10003df6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
10003dfa:	79fb      	ldrb	r3, [r7, #7]
10003dfc:	4907      	ldr	r1, [pc, #28]	@ (10003e1c <BSP_LED_Toggle+0x38>)
10003dfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10003e02:	b29b      	uxth	r3, r3
10003e04:	4619      	mov	r1, r3
10003e06:	4610      	mov	r0, r2
10003e08:	f000 ff97 	bl	10004d3a <HAL_GPIO_TogglePin>
  return status;
10003e0c:	68fb      	ldr	r3, [r7, #12]
}
10003e0e:	4618      	mov	r0, r3
10003e10:	3710      	adds	r7, #16
10003e12:	46bd      	mov	sp, r7
10003e14:	bd80      	pop	{r7, pc}
10003e16:	bf00      	nop
10003e18:	1002008c 	.word	0x1002008c
10003e1c:	100119dc 	.word	0x100119dc

10003e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10003e20:	b480      	push	{r7}
10003e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10003e24:	4b0f      	ldr	r3, [pc, #60]	@ (10003e64 <SystemInit+0x44>)
10003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
10003e2a:	4a0e      	ldr	r2, [pc, #56]	@ (10003e64 <SystemInit+0x44>)
10003e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
10003e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10003e34:	4b0c      	ldr	r3, [pc, #48]	@ (10003e68 <SystemInit+0x48>)
10003e36:	2200      	movs	r2, #0
10003e38:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
10003e3a:	4b0b      	ldr	r3, [pc, #44]	@ (10003e68 <SystemInit+0x48>)
10003e3c:	2200      	movs	r2, #0
10003e3e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10003e40:	4b09      	ldr	r3, [pc, #36]	@ (10003e68 <SystemInit+0x48>)
10003e42:	2200      	movs	r2, #0
10003e44:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10003e46:	4b08      	ldr	r3, [pc, #32]	@ (10003e68 <SystemInit+0x48>)
10003e48:	2200      	movs	r2, #0
10003e4a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
10003e4c:	4b06      	ldr	r3, [pc, #24]	@ (10003e68 <SystemInit+0x48>)
10003e4e:	2200      	movs	r2, #0
10003e50:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10003e52:	4b05      	ldr	r3, [pc, #20]	@ (10003e68 <SystemInit+0x48>)
10003e54:	2200      	movs	r2, #0
10003e56:	625a      	str	r2, [r3, #36]	@ 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10003e58:	bf00      	nop
10003e5a:	46bd      	mov	sp, r7
10003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
10003e60:	4770      	bx	lr
10003e62:	bf00      	nop
10003e64:	e000ed00 	.word	0xe000ed00
10003e68:	5000d0c0 	.word	0x5000d0c0

10003e6c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
10003e6c:	b480      	push	{r7}
10003e6e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
10003e70:	bf00      	nop
10003e72:	46bd      	mov	sp, r7
10003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
10003e78:	4770      	bx	lr
	...

10003e7c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
10003e7c:	b580      	push	{r7, lr}
10003e7e:	b086      	sub	sp, #24
10003e80:	af04      	add	r7, sp, #16
10003e82:	4603      	mov	r3, r0
10003e84:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
10003e86:	f04f 33ff 	mov.w	r3, #4294967295
10003e8a:	9302      	str	r3, [sp, #8]
10003e8c:	2301      	movs	r3, #1
10003e8e:	9301      	str	r3, [sp, #4]
10003e90:	1dfb      	adds	r3, r7, #7
10003e92:	9300      	str	r3, [sp, #0]
10003e94:	2301      	movs	r3, #1
10003e96:	2200      	movs	r2, #0
10003e98:	2178      	movs	r1, #120	@ 0x78
10003e9a:	4803      	ldr	r0, [pc, #12]	@ (10003ea8 <ssd1306_WriteCommand+0x2c>)
10003e9c:	f001 f820 	bl	10004ee0 <HAL_I2C_Mem_Write>
}
10003ea0:	bf00      	nop
10003ea2:	3708      	adds	r7, #8
10003ea4:	46bd      	mov	sp, r7
10003ea6:	bd80      	pop	{r7, pc}
10003ea8:	10020344 	.word	0x10020344

10003eac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
10003eac:	b580      	push	{r7, lr}
10003eae:	b086      	sub	sp, #24
10003eb0:	af04      	add	r7, sp, #16
10003eb2:	6078      	str	r0, [r7, #4]
10003eb4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
10003eb6:	683b      	ldr	r3, [r7, #0]
10003eb8:	b29b      	uxth	r3, r3
10003eba:	f04f 32ff 	mov.w	r2, #4294967295
10003ebe:	9202      	str	r2, [sp, #8]
10003ec0:	9301      	str	r3, [sp, #4]
10003ec2:	687b      	ldr	r3, [r7, #4]
10003ec4:	9300      	str	r3, [sp, #0]
10003ec6:	2301      	movs	r3, #1
10003ec8:	2240      	movs	r2, #64	@ 0x40
10003eca:	2178      	movs	r1, #120	@ 0x78
10003ecc:	4803      	ldr	r0, [pc, #12]	@ (10003edc <ssd1306_WriteData+0x30>)
10003ece:	f001 f807 	bl	10004ee0 <HAL_I2C_Mem_Write>
}
10003ed2:	bf00      	nop
10003ed4:	3708      	adds	r7, #8
10003ed6:	46bd      	mov	sp, r7
10003ed8:	bd80      	pop	{r7, pc}
10003eda:	bf00      	nop
10003edc:	10020344 	.word	0x10020344

10003ee0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
int ssd1306_Init(void) {
10003ee0:	b580      	push	{r7, lr}
10003ee2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
10003ee4:	f7ff ffc2 	bl	10003e6c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
10003ee8:	2064      	movs	r0, #100	@ 0x64
10003eea:	f000 fa75 	bl	100043d8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
10003eee:	2000      	movs	r0, #0
10003ef0:	f000 f9e4 	bl	100042bc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
10003ef4:	2020      	movs	r0, #32
10003ef6:	f7ff ffc1 	bl	10003e7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
10003efa:	2000      	movs	r0, #0
10003efc:	f7ff ffbe 	bl	10003e7c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
10003f00:	20b0      	movs	r0, #176	@ 0xb0
10003f02:	f7ff ffbb 	bl	10003e7c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
10003f06:	20c8      	movs	r0, #200	@ 0xc8
10003f08:	f7ff ffb8 	bl	10003e7c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
10003f0c:	2000      	movs	r0, #0
10003f0e:	f7ff ffb5 	bl	10003e7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
10003f12:	2010      	movs	r0, #16
10003f14:	f7ff ffb2 	bl	10003e7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
10003f18:	2040      	movs	r0, #64	@ 0x40
10003f1a:	f7ff ffaf 	bl	10003e7c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
10003f1e:	20ff      	movs	r0, #255	@ 0xff
10003f20:	f000 f9b8 	bl	10004294 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
10003f24:	20a1      	movs	r0, #161	@ 0xa1
10003f26:	f7ff ffa9 	bl	10003e7c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
10003f2a:	20a6      	movs	r0, #166	@ 0xa6
10003f2c:	f7ff ffa6 	bl	10003e7c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
10003f30:	20a8      	movs	r0, #168	@ 0xa8
10003f32:	f7ff ffa3 	bl	10003e7c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
10003f36:	203f      	movs	r0, #63	@ 0x3f
10003f38:	f7ff ffa0 	bl	10003e7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
10003f3c:	20a4      	movs	r0, #164	@ 0xa4
10003f3e:	f7ff ff9d 	bl	10003e7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
10003f42:	20d3      	movs	r0, #211	@ 0xd3
10003f44:	f7ff ff9a 	bl	10003e7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
10003f48:	2000      	movs	r0, #0
10003f4a:	f7ff ff97 	bl	10003e7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
10003f4e:	20d5      	movs	r0, #213	@ 0xd5
10003f50:	f7ff ff94 	bl	10003e7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
10003f54:	20f0      	movs	r0, #240	@ 0xf0
10003f56:	f7ff ff91 	bl	10003e7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
10003f5a:	20d9      	movs	r0, #217	@ 0xd9
10003f5c:	f7ff ff8e 	bl	10003e7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
10003f60:	2022      	movs	r0, #34	@ 0x22
10003f62:	f7ff ff8b 	bl	10003e7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
10003f66:	20da      	movs	r0, #218	@ 0xda
10003f68:	f7ff ff88 	bl	10003e7c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
10003f6c:	2012      	movs	r0, #18
10003f6e:	f7ff ff85 	bl	10003e7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
10003f72:	20db      	movs	r0, #219	@ 0xdb
10003f74:	f7ff ff82 	bl	10003e7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
10003f78:	2020      	movs	r0, #32
10003f7a:	f7ff ff7f 	bl	10003e7c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
10003f7e:	208d      	movs	r0, #141	@ 0x8d
10003f80:	f7ff ff7c 	bl	10003e7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
10003f84:	2014      	movs	r0, #20
10003f86:	f7ff ff79 	bl	10003e7c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
10003f8a:	2001      	movs	r0, #1
10003f8c:	f000 f996 	bl	100042bc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
10003f90:	2000      	movs	r0, #0
10003f92:	f000 f811 	bl	10003fb8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
10003f96:	f000 f831 	bl	10003ffc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
10003f9a:	4b06      	ldr	r3, [pc, #24]	@ (10003fb4 <ssd1306_Init+0xd4>)
10003f9c:	2200      	movs	r2, #0
10003f9e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
10003fa0:	4b04      	ldr	r3, [pc, #16]	@ (10003fb4 <ssd1306_Init+0xd4>)
10003fa2:	2200      	movs	r2, #0
10003fa4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
10003fa6:	4b03      	ldr	r3, [pc, #12]	@ (10003fb4 <ssd1306_Init+0xd4>)
10003fa8:	2201      	movs	r2, #1
10003faa:	711a      	strb	r2, [r3, #4]

    return 0;
10003fac:	2300      	movs	r3, #0
}
10003fae:	4618      	mov	r0, r3
10003fb0:	bd80      	pop	{r7, pc}
10003fb2:	bf00      	nop
10003fb4:	1002168c 	.word	0x1002168c

10003fb8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
10003fb8:	b580      	push	{r7, lr}
10003fba:	b082      	sub	sp, #8
10003fbc:	af00      	add	r7, sp, #0
10003fbe:	4603      	mov	r3, r0
10003fc0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
10003fc2:	79fb      	ldrb	r3, [r7, #7]
10003fc4:	2b00      	cmp	r3, #0
10003fc6:	d101      	bne.n	10003fcc <ssd1306_Fill+0x14>
10003fc8:	2300      	movs	r3, #0
10003fca:	e000      	b.n	10003fce <ssd1306_Fill+0x16>
10003fcc:	23ff      	movs	r3, #255	@ 0xff
10003fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
10003fd2:	4619      	mov	r1, r3
10003fd4:	4803      	ldr	r0, [pc, #12]	@ (10003fe4 <ssd1306_Fill+0x2c>)
10003fd6:	f009 fee2 	bl	1000dd9e <memset>
}
10003fda:	bf00      	nop
10003fdc:	3708      	adds	r7, #8
10003fde:	46bd      	mov	sp, r7
10003fe0:	bd80      	pop	{r7, pc}
10003fe2:	bf00      	nop
10003fe4:	1002128c 	.word	0x1002128c

10003fe8 <ssd1306_Clear>:
void ssd1306_Clear(void){
10003fe8:	b580      	push	{r7, lr}
10003fea:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
10003fec:	2000      	movs	r0, #0
10003fee:	f7ff ffe3 	bl	10003fb8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
10003ff2:	f000 f803 	bl	10003ffc <ssd1306_UpdateScreen>
}
10003ff6:	bf00      	nop
10003ff8:	bd80      	pop	{r7, pc}
	...

10003ffc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
10003ffc:	b580      	push	{r7, lr}
10003ffe:	b082      	sub	sp, #8
10004000:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
10004002:	2300      	movs	r3, #0
10004004:	71fb      	strb	r3, [r7, #7]
10004006:	e016      	b.n	10004036 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
10004008:	79fb      	ldrb	r3, [r7, #7]
1000400a:	3b50      	subs	r3, #80	@ 0x50
1000400c:	b2db      	uxtb	r3, r3
1000400e:	4618      	mov	r0, r3
10004010:	f7ff ff34 	bl	10003e7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
10004014:	2000      	movs	r0, #0
10004016:	f7ff ff31 	bl	10003e7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
1000401a:	2010      	movs	r0, #16
1000401c:	f7ff ff2e 	bl	10003e7c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
10004020:	79fb      	ldrb	r3, [r7, #7]
10004022:	01db      	lsls	r3, r3, #7
10004024:	4a08      	ldr	r2, [pc, #32]	@ (10004048 <ssd1306_UpdateScreen+0x4c>)
10004026:	4413      	add	r3, r2
10004028:	2180      	movs	r1, #128	@ 0x80
1000402a:	4618      	mov	r0, r3
1000402c:	f7ff ff3e 	bl	10003eac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
10004030:	79fb      	ldrb	r3, [r7, #7]
10004032:	3301      	adds	r3, #1
10004034:	71fb      	strb	r3, [r7, #7]
10004036:	79fb      	ldrb	r3, [r7, #7]
10004038:	2b07      	cmp	r3, #7
1000403a:	d9e5      	bls.n	10004008 <ssd1306_UpdateScreen+0xc>
    }
}
1000403c:	bf00      	nop
1000403e:	bf00      	nop
10004040:	3708      	adds	r7, #8
10004042:	46bd      	mov	sp, r7
10004044:	bd80      	pop	{r7, pc}
10004046:	bf00      	nop
10004048:	1002128c 	.word	0x1002128c

1000404c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
1000404c:	b480      	push	{r7}
1000404e:	b083      	sub	sp, #12
10004050:	af00      	add	r7, sp, #0
10004052:	4603      	mov	r3, r0
10004054:	71fb      	strb	r3, [r7, #7]
10004056:	460b      	mov	r3, r1
10004058:	71bb      	strb	r3, [r7, #6]
1000405a:	4613      	mov	r3, r2
1000405c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
1000405e:	f997 3007 	ldrsb.w	r3, [r7, #7]
10004062:	2b00      	cmp	r3, #0
10004064:	db3d      	blt.n	100040e2 <ssd1306_DrawPixel+0x96>
10004066:	79bb      	ldrb	r3, [r7, #6]
10004068:	2b3f      	cmp	r3, #63	@ 0x3f
1000406a:	d83a      	bhi.n	100040e2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
1000406c:	797b      	ldrb	r3, [r7, #5]
1000406e:	2b01      	cmp	r3, #1
10004070:	d11a      	bne.n	100040a8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
10004072:	79fa      	ldrb	r2, [r7, #7]
10004074:	79bb      	ldrb	r3, [r7, #6]
10004076:	08db      	lsrs	r3, r3, #3
10004078:	b2d8      	uxtb	r0, r3
1000407a:	4603      	mov	r3, r0
1000407c:	01db      	lsls	r3, r3, #7
1000407e:	4413      	add	r3, r2
10004080:	4a1b      	ldr	r2, [pc, #108]	@ (100040f0 <ssd1306_DrawPixel+0xa4>)
10004082:	5cd3      	ldrb	r3, [r2, r3]
10004084:	b25a      	sxtb	r2, r3
10004086:	79bb      	ldrb	r3, [r7, #6]
10004088:	f003 0307 	and.w	r3, r3, #7
1000408c:	2101      	movs	r1, #1
1000408e:	fa01 f303 	lsl.w	r3, r1, r3
10004092:	b25b      	sxtb	r3, r3
10004094:	4313      	orrs	r3, r2
10004096:	b259      	sxtb	r1, r3
10004098:	79fa      	ldrb	r2, [r7, #7]
1000409a:	4603      	mov	r3, r0
1000409c:	01db      	lsls	r3, r3, #7
1000409e:	4413      	add	r3, r2
100040a0:	b2c9      	uxtb	r1, r1
100040a2:	4a13      	ldr	r2, [pc, #76]	@ (100040f0 <ssd1306_DrawPixel+0xa4>)
100040a4:	54d1      	strb	r1, [r2, r3]
100040a6:	e01d      	b.n	100040e4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
100040a8:	79fa      	ldrb	r2, [r7, #7]
100040aa:	79bb      	ldrb	r3, [r7, #6]
100040ac:	08db      	lsrs	r3, r3, #3
100040ae:	b2d8      	uxtb	r0, r3
100040b0:	4603      	mov	r3, r0
100040b2:	01db      	lsls	r3, r3, #7
100040b4:	4413      	add	r3, r2
100040b6:	4a0e      	ldr	r2, [pc, #56]	@ (100040f0 <ssd1306_DrawPixel+0xa4>)
100040b8:	5cd3      	ldrb	r3, [r2, r3]
100040ba:	b25a      	sxtb	r2, r3
100040bc:	79bb      	ldrb	r3, [r7, #6]
100040be:	f003 0307 	and.w	r3, r3, #7
100040c2:	2101      	movs	r1, #1
100040c4:	fa01 f303 	lsl.w	r3, r1, r3
100040c8:	b25b      	sxtb	r3, r3
100040ca:	43db      	mvns	r3, r3
100040cc:	b25b      	sxtb	r3, r3
100040ce:	4013      	ands	r3, r2
100040d0:	b259      	sxtb	r1, r3
100040d2:	79fa      	ldrb	r2, [r7, #7]
100040d4:	4603      	mov	r3, r0
100040d6:	01db      	lsls	r3, r3, #7
100040d8:	4413      	add	r3, r2
100040da:	b2c9      	uxtb	r1, r1
100040dc:	4a04      	ldr	r2, [pc, #16]	@ (100040f0 <ssd1306_DrawPixel+0xa4>)
100040de:	54d1      	strb	r1, [r2, r3]
100040e0:	e000      	b.n	100040e4 <ssd1306_DrawPixel+0x98>
        return;
100040e2:	bf00      	nop
    }
}
100040e4:	370c      	adds	r7, #12
100040e6:	46bd      	mov	sp, r7
100040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100040ec:	4770      	bx	lr
100040ee:	bf00      	nop
100040f0:	1002128c 	.word	0x1002128c

100040f4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
100040f4:	b590      	push	{r4, r7, lr}
100040f6:	b089      	sub	sp, #36	@ 0x24
100040f8:	af00      	add	r7, sp, #0
100040fa:	4604      	mov	r4, r0
100040fc:	4638      	mov	r0, r7
100040fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
10004102:	4623      	mov	r3, r4
10004104:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
10004106:	7bfb      	ldrb	r3, [r7, #15]
10004108:	2b1f      	cmp	r3, #31
1000410a:	d902      	bls.n	10004112 <ssd1306_WriteChar+0x1e>
1000410c:	7bfb      	ldrb	r3, [r7, #15]
1000410e:	2b7e      	cmp	r3, #126	@ 0x7e
10004110:	d901      	bls.n	10004116 <ssd1306_WriteChar+0x22>
        return 0;
10004112:	2300      	movs	r3, #0
10004114:	e079      	b.n	1000420a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
10004116:	68bb      	ldr	r3, [r7, #8]
10004118:	2b00      	cmp	r3, #0
1000411a:	d005      	beq.n	10004128 <ssd1306_WriteChar+0x34>
1000411c:	68ba      	ldr	r2, [r7, #8]
1000411e:	7bfb      	ldrb	r3, [r7, #15]
10004120:	3b20      	subs	r3, #32
10004122:	4413      	add	r3, r2
10004124:	781b      	ldrb	r3, [r3, #0]
10004126:	e000      	b.n	1000412a <ssd1306_WriteChar+0x36>
10004128:	783b      	ldrb	r3, [r7, #0]
1000412a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
1000412c:	4b39      	ldr	r3, [pc, #228]	@ (10004214 <ssd1306_WriteChar+0x120>)
1000412e:	881b      	ldrh	r3, [r3, #0]
10004130:	461a      	mov	r2, r3
10004132:	7dfb      	ldrb	r3, [r7, #23]
10004134:	4413      	add	r3, r2
10004136:	2b80      	cmp	r3, #128	@ 0x80
10004138:	dc06      	bgt.n	10004148 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
1000413a:	4b36      	ldr	r3, [pc, #216]	@ (10004214 <ssd1306_WriteChar+0x120>)
1000413c:	885b      	ldrh	r3, [r3, #2]
1000413e:	461a      	mov	r2, r3
10004140:	787b      	ldrb	r3, [r7, #1]
10004142:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
10004144:	2b40      	cmp	r3, #64	@ 0x40
10004146:	dd01      	ble.n	1000414c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
10004148:	2300      	movs	r3, #0
1000414a:	e05e      	b.n	1000420a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
1000414c:	2300      	movs	r3, #0
1000414e:	61fb      	str	r3, [r7, #28]
10004150:	e04d      	b.n	100041ee <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
10004152:	687a      	ldr	r2, [r7, #4]
10004154:	7bfb      	ldrb	r3, [r7, #15]
10004156:	3b20      	subs	r3, #32
10004158:	7879      	ldrb	r1, [r7, #1]
1000415a:	fb01 f303 	mul.w	r3, r1, r3
1000415e:	4619      	mov	r1, r3
10004160:	69fb      	ldr	r3, [r7, #28]
10004162:	440b      	add	r3, r1
10004164:	005b      	lsls	r3, r3, #1
10004166:	4413      	add	r3, r2
10004168:	881b      	ldrh	r3, [r3, #0]
1000416a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
1000416c:	2300      	movs	r3, #0
1000416e:	61bb      	str	r3, [r7, #24]
10004170:	e036      	b.n	100041e0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
10004172:	693a      	ldr	r2, [r7, #16]
10004174:	69bb      	ldr	r3, [r7, #24]
10004176:	fa02 f303 	lsl.w	r3, r2, r3
1000417a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
1000417e:	2b00      	cmp	r3, #0
10004180:	d013      	beq.n	100041aa <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
10004182:	4b24      	ldr	r3, [pc, #144]	@ (10004214 <ssd1306_WriteChar+0x120>)
10004184:	881b      	ldrh	r3, [r3, #0]
10004186:	b2da      	uxtb	r2, r3
10004188:	69bb      	ldr	r3, [r7, #24]
1000418a:	b2db      	uxtb	r3, r3
1000418c:	4413      	add	r3, r2
1000418e:	b2d8      	uxtb	r0, r3
10004190:	4b20      	ldr	r3, [pc, #128]	@ (10004214 <ssd1306_WriteChar+0x120>)
10004192:	885b      	ldrh	r3, [r3, #2]
10004194:	b2da      	uxtb	r2, r3
10004196:	69fb      	ldr	r3, [r7, #28]
10004198:	b2db      	uxtb	r3, r3
1000419a:	4413      	add	r3, r2
1000419c:	b2db      	uxtb	r3, r3
1000419e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
100041a2:	4619      	mov	r1, r3
100041a4:	f7ff ff52 	bl	1000404c <ssd1306_DrawPixel>
100041a8:	e017      	b.n	100041da <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
100041aa:	4b1a      	ldr	r3, [pc, #104]	@ (10004214 <ssd1306_WriteChar+0x120>)
100041ac:	881b      	ldrh	r3, [r3, #0]
100041ae:	b2da      	uxtb	r2, r3
100041b0:	69bb      	ldr	r3, [r7, #24]
100041b2:	b2db      	uxtb	r3, r3
100041b4:	4413      	add	r3, r2
100041b6:	b2d8      	uxtb	r0, r3
100041b8:	4b16      	ldr	r3, [pc, #88]	@ (10004214 <ssd1306_WriteChar+0x120>)
100041ba:	885b      	ldrh	r3, [r3, #2]
100041bc:	b2da      	uxtb	r2, r3
100041be:	69fb      	ldr	r3, [r7, #28]
100041c0:	b2db      	uxtb	r3, r3
100041c2:	4413      	add	r3, r2
100041c4:	b2d9      	uxtb	r1, r3
100041c6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
100041ca:	2b00      	cmp	r3, #0
100041cc:	bf0c      	ite	eq
100041ce:	2301      	moveq	r3, #1
100041d0:	2300      	movne	r3, #0
100041d2:	b2db      	uxtb	r3, r3
100041d4:	461a      	mov	r2, r3
100041d6:	f7ff ff39 	bl	1000404c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
100041da:	69bb      	ldr	r3, [r7, #24]
100041dc:	3301      	adds	r3, #1
100041de:	61bb      	str	r3, [r7, #24]
100041e0:	7dfb      	ldrb	r3, [r7, #23]
100041e2:	69ba      	ldr	r2, [r7, #24]
100041e4:	429a      	cmp	r2, r3
100041e6:	d3c4      	bcc.n	10004172 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
100041e8:	69fb      	ldr	r3, [r7, #28]
100041ea:	3301      	adds	r3, #1
100041ec:	61fb      	str	r3, [r7, #28]
100041ee:	787b      	ldrb	r3, [r7, #1]
100041f0:	461a      	mov	r2, r3
100041f2:	69fb      	ldr	r3, [r7, #28]
100041f4:	4293      	cmp	r3, r2
100041f6:	d3ac      	bcc.n	10004152 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
100041f8:	4b06      	ldr	r3, [pc, #24]	@ (10004214 <ssd1306_WriteChar+0x120>)
100041fa:	881a      	ldrh	r2, [r3, #0]
100041fc:	7dfb      	ldrb	r3, [r7, #23]
100041fe:	b29b      	uxth	r3, r3
10004200:	4413      	add	r3, r2
10004202:	b29a      	uxth	r2, r3
10004204:	4b03      	ldr	r3, [pc, #12]	@ (10004214 <ssd1306_WriteChar+0x120>)
10004206:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
10004208:	7bfb      	ldrb	r3, [r7, #15]
}
1000420a:	4618      	mov	r0, r3
1000420c:	3724      	adds	r7, #36	@ 0x24
1000420e:	46bd      	mov	sp, r7
10004210:	bd90      	pop	{r4, r7, pc}
10004212:	bf00      	nop
10004214:	1002168c 	.word	0x1002168c

10004218 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
10004218:	b580      	push	{r7, lr}
1000421a:	b086      	sub	sp, #24
1000421c:	af02      	add	r7, sp, #8
1000421e:	60f8      	str	r0, [r7, #12]
10004220:	4638      	mov	r0, r7
10004222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
10004226:	e013      	b.n	10004250 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
10004228:	68fb      	ldr	r3, [r7, #12]
1000422a:	7818      	ldrb	r0, [r3, #0]
1000422c:	7e3b      	ldrb	r3, [r7, #24]
1000422e:	9300      	str	r3, [sp, #0]
10004230:	463b      	mov	r3, r7
10004232:	cb0e      	ldmia	r3, {r1, r2, r3}
10004234:	f7ff ff5e 	bl	100040f4 <ssd1306_WriteChar>
10004238:	4603      	mov	r3, r0
1000423a:	461a      	mov	r2, r3
1000423c:	68fb      	ldr	r3, [r7, #12]
1000423e:	781b      	ldrb	r3, [r3, #0]
10004240:	429a      	cmp	r2, r3
10004242:	d002      	beq.n	1000424a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
10004244:	68fb      	ldr	r3, [r7, #12]
10004246:	781b      	ldrb	r3, [r3, #0]
10004248:	e008      	b.n	1000425c <ssd1306_WriteString+0x44>
        }
        str++;
1000424a:	68fb      	ldr	r3, [r7, #12]
1000424c:	3301      	adds	r3, #1
1000424e:	60fb      	str	r3, [r7, #12]
    while (*str) {
10004250:	68fb      	ldr	r3, [r7, #12]
10004252:	781b      	ldrb	r3, [r3, #0]
10004254:	2b00      	cmp	r3, #0
10004256:	d1e7      	bne.n	10004228 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
10004258:	68fb      	ldr	r3, [r7, #12]
1000425a:	781b      	ldrb	r3, [r3, #0]
}
1000425c:	4618      	mov	r0, r3
1000425e:	3710      	adds	r7, #16
10004260:	46bd      	mov	sp, r7
10004262:	bd80      	pop	{r7, pc}

10004264 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
10004264:	b480      	push	{r7}
10004266:	b083      	sub	sp, #12
10004268:	af00      	add	r7, sp, #0
1000426a:	4603      	mov	r3, r0
1000426c:	460a      	mov	r2, r1
1000426e:	71fb      	strb	r3, [r7, #7]
10004270:	4613      	mov	r3, r2
10004272:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
10004274:	79fb      	ldrb	r3, [r7, #7]
10004276:	b29a      	uxth	r2, r3
10004278:	4b05      	ldr	r3, [pc, #20]	@ (10004290 <ssd1306_SetCursor+0x2c>)
1000427a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
1000427c:	79bb      	ldrb	r3, [r7, #6]
1000427e:	b29a      	uxth	r2, r3
10004280:	4b03      	ldr	r3, [pc, #12]	@ (10004290 <ssd1306_SetCursor+0x2c>)
10004282:	805a      	strh	r2, [r3, #2]
}
10004284:	bf00      	nop
10004286:	370c      	adds	r7, #12
10004288:	46bd      	mov	sp, r7
1000428a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000428e:	4770      	bx	lr
10004290:	1002168c 	.word	0x1002168c

10004294 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
10004294:	b580      	push	{r7, lr}
10004296:	b084      	sub	sp, #16
10004298:	af00      	add	r7, sp, #0
1000429a:	4603      	mov	r3, r0
1000429c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
1000429e:	2381      	movs	r3, #129	@ 0x81
100042a0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
100042a2:	7bfb      	ldrb	r3, [r7, #15]
100042a4:	4618      	mov	r0, r3
100042a6:	f7ff fde9 	bl	10003e7c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
100042aa:	79fb      	ldrb	r3, [r7, #7]
100042ac:	4618      	mov	r0, r3
100042ae:	f7ff fde5 	bl	10003e7c <ssd1306_WriteCommand>
}
100042b2:	bf00      	nop
100042b4:	3710      	adds	r7, #16
100042b6:	46bd      	mov	sp, r7
100042b8:	bd80      	pop	{r7, pc}
	...

100042bc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
100042bc:	b580      	push	{r7, lr}
100042be:	b084      	sub	sp, #16
100042c0:	af00      	add	r7, sp, #0
100042c2:	4603      	mov	r3, r0
100042c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
100042c6:	79fb      	ldrb	r3, [r7, #7]
100042c8:	2b00      	cmp	r3, #0
100042ca:	d005      	beq.n	100042d8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
100042cc:	23af      	movs	r3, #175	@ 0xaf
100042ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
100042d0:	4b08      	ldr	r3, [pc, #32]	@ (100042f4 <ssd1306_SetDisplayOn+0x38>)
100042d2:	2201      	movs	r2, #1
100042d4:	715a      	strb	r2, [r3, #5]
100042d6:	e004      	b.n	100042e2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
100042d8:	23ae      	movs	r3, #174	@ 0xae
100042da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
100042dc:	4b05      	ldr	r3, [pc, #20]	@ (100042f4 <ssd1306_SetDisplayOn+0x38>)
100042de:	2200      	movs	r2, #0
100042e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
100042e2:	7bfb      	ldrb	r3, [r7, #15]
100042e4:	4618      	mov	r0, r3
100042e6:	f7ff fdc9 	bl	10003e7c <ssd1306_WriteCommand>
}
100042ea:	bf00      	nop
100042ec:	3710      	adds	r7, #16
100042ee:	46bd      	mov	sp, r7
100042f0:	bd80      	pop	{r7, pc}
100042f2:	bf00      	nop
100042f4:	1002168c 	.word	0x1002168c

100042f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100042f8:	b580      	push	{r7, lr}
100042fa:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
100042fc:	2003      	movs	r0, #3
100042fe:	f000 f969 	bl	100045d4 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10004302:	f003 fe86 	bl	10008012 <HAL_RCC_GetSystemCoreClockFreq>
10004306:	4603      	mov	r3, r0
10004308:	4a07      	ldr	r2, [pc, #28]	@ (10004328 <HAL_Init+0x30>)
1000430a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
1000430c:	200f      	movs	r0, #15
1000430e:	f000 f80d 	bl	1000432c <HAL_InitTick>
10004312:	4603      	mov	r3, r0
10004314:	2b00      	cmp	r3, #0
10004316:	d001      	beq.n	1000431c <HAL_Init+0x24>
  {
    return HAL_ERROR;
10004318:	2301      	movs	r3, #1
1000431a:	e002      	b.n	10004322 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
1000431c:	f7fe f84c 	bl	100023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10004320:	2300      	movs	r3, #0
}
10004322:	4618      	mov	r0, r3
10004324:	bd80      	pop	{r7, pc}
10004326:	bf00      	nop
10004328:	1002009c 	.word	0x1002009c

1000432c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
1000432c:	b580      	push	{r7, lr}
1000432e:	b082      	sub	sp, #8
10004330:	af00      	add	r7, sp, #0
10004332:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10004334:	4b15      	ldr	r3, [pc, #84]	@ (1000438c <HAL_InitTick+0x60>)
10004336:	781b      	ldrb	r3, [r3, #0]
10004338:	2b00      	cmp	r3, #0
1000433a:	d101      	bne.n	10004340 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
1000433c:	2301      	movs	r3, #1
1000433e:	e021      	b.n	10004384 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10004340:	4b13      	ldr	r3, [pc, #76]	@ (10004390 <HAL_InitTick+0x64>)
10004342:	681a      	ldr	r2, [r3, #0]
10004344:	4b11      	ldr	r3, [pc, #68]	@ (1000438c <HAL_InitTick+0x60>)
10004346:	781b      	ldrb	r3, [r3, #0]
10004348:	4619      	mov	r1, r3
1000434a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
1000434e:	fbb3 f3f1 	udiv	r3, r3, r1
10004352:	fbb2 f3f3 	udiv	r3, r2, r3
10004356:	4618      	mov	r0, r3
10004358:	f000 f971 	bl	1000463e <HAL_SYSTICK_Config>
1000435c:	4603      	mov	r3, r0
1000435e:	2b00      	cmp	r3, #0
10004360:	d001      	beq.n	10004366 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10004362:	2301      	movs	r3, #1
10004364:	e00e      	b.n	10004384 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10004366:	687b      	ldr	r3, [r7, #4]
10004368:	2b0f      	cmp	r3, #15
1000436a:	d80a      	bhi.n	10004382 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
1000436c:	2200      	movs	r2, #0
1000436e:	6879      	ldr	r1, [r7, #4]
10004370:	f04f 30ff 	mov.w	r0, #4294967295
10004374:	f000 f939 	bl	100045ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10004378:	4a06      	ldr	r2, [pc, #24]	@ (10004394 <HAL_InitTick+0x68>)
1000437a:	687b      	ldr	r3, [r7, #4]
1000437c:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
1000437e:	2300      	movs	r3, #0
10004380:	e000      	b.n	10004384 <HAL_InitTick+0x58>
    return HAL_ERROR;
10004382:	2301      	movs	r3, #1
}
10004384:	4618      	mov	r0, r3
10004386:	3708      	adds	r7, #8
10004388:	46bd      	mov	sp, r7
1000438a:	bd80      	pop	{r7, pc}
1000438c:	100200a4 	.word	0x100200a4
10004390:	1002009c 	.word	0x1002009c
10004394:	100200a0 	.word	0x100200a0

10004398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10004398:	b480      	push	{r7}
1000439a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1000439c:	4b06      	ldr	r3, [pc, #24]	@ (100043b8 <HAL_IncTick+0x20>)
1000439e:	781b      	ldrb	r3, [r3, #0]
100043a0:	461a      	mov	r2, r3
100043a2:	4b06      	ldr	r3, [pc, #24]	@ (100043bc <HAL_IncTick+0x24>)
100043a4:	681b      	ldr	r3, [r3, #0]
100043a6:	4413      	add	r3, r2
100043a8:	4a04      	ldr	r2, [pc, #16]	@ (100043bc <HAL_IncTick+0x24>)
100043aa:	6013      	str	r3, [r2, #0]
}
100043ac:	bf00      	nop
100043ae:	46bd      	mov	sp, r7
100043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
100043b4:	4770      	bx	lr
100043b6:	bf00      	nop
100043b8:	100200a4 	.word	0x100200a4
100043bc:	10021694 	.word	0x10021694

100043c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100043c0:	b480      	push	{r7}
100043c2:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
100043c4:	4b03      	ldr	r3, [pc, #12]	@ (100043d4 <HAL_GetTick+0x14>)
100043c6:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
100043c8:	4618      	mov	r0, r3
100043ca:	46bd      	mov	sp, r7
100043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
100043d0:	4770      	bx	lr
100043d2:	bf00      	nop
100043d4:	10021694 	.word	0x10021694

100043d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
100043d8:	b580      	push	{r7, lr}
100043da:	b084      	sub	sp, #16
100043dc:	af00      	add	r7, sp, #0
100043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100043e0:	f7ff ffee 	bl	100043c0 <HAL_GetTick>
100043e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
100043e6:	687b      	ldr	r3, [r7, #4]
100043e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
100043ea:	68fb      	ldr	r3, [r7, #12]
100043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
100043f0:	d005      	beq.n	100043fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
100043f2:	4b0a      	ldr	r3, [pc, #40]	@ (1000441c <HAL_Delay+0x44>)
100043f4:	781b      	ldrb	r3, [r3, #0]
100043f6:	461a      	mov	r2, r3
100043f8:	68fb      	ldr	r3, [r7, #12]
100043fa:	4413      	add	r3, r2
100043fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
100043fe:	bf00      	nop
10004400:	f7ff ffde 	bl	100043c0 <HAL_GetTick>
10004404:	4602      	mov	r2, r0
10004406:	68bb      	ldr	r3, [r7, #8]
10004408:	1ad3      	subs	r3, r2, r3
1000440a:	68fa      	ldr	r2, [r7, #12]
1000440c:	429a      	cmp	r2, r3
1000440e:	d8f7      	bhi.n	10004400 <HAL_Delay+0x28>
  {
  }
}
10004410:	bf00      	nop
10004412:	bf00      	nop
10004414:	3710      	adds	r7, #16
10004416:	46bd      	mov	sp, r7
10004418:	bd80      	pop	{r7, pc}
1000441a:	bf00      	nop
1000441c:	100200a4 	.word	0x100200a4

10004420 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
10004420:	b480      	push	{r7}
10004422:	af00      	add	r7, sp, #0
 return __STM32MP1xx_HAL_VERSION;
10004424:	4b02      	ldr	r3, [pc, #8]	@ (10004430 <HAL_GetHalVersion+0x10>)
}
10004426:	4618      	mov	r0, r3
10004428:	46bd      	mov	sp, r7
1000442a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000442e:	4770      	bx	lr
10004430:	01070000 	.word	0x01070000

10004434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10004434:	b480      	push	{r7}
10004436:	b085      	sub	sp, #20
10004438:	af00      	add	r7, sp, #0
1000443a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
1000443c:	687b      	ldr	r3, [r7, #4]
1000443e:	f003 0307 	and.w	r3, r3, #7
10004442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10004444:	4b0c      	ldr	r3, [pc, #48]	@ (10004478 <__NVIC_SetPriorityGrouping+0x44>)
10004446:	68db      	ldr	r3, [r3, #12]
10004448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
1000444a:	68ba      	ldr	r2, [r7, #8]
1000444c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
10004450:	4013      	ands	r3, r2
10004452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10004454:	68fb      	ldr	r3, [r7, #12]
10004456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10004458:	68bb      	ldr	r3, [r7, #8]
1000445a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
1000445c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
10004460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
10004464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10004466:	4a04      	ldr	r2, [pc, #16]	@ (10004478 <__NVIC_SetPriorityGrouping+0x44>)
10004468:	68bb      	ldr	r3, [r7, #8]
1000446a:	60d3      	str	r3, [r2, #12]
}
1000446c:	bf00      	nop
1000446e:	3714      	adds	r7, #20
10004470:	46bd      	mov	sp, r7
10004472:	f85d 7b04 	ldr.w	r7, [sp], #4
10004476:	4770      	bx	lr
10004478:	e000ed00 	.word	0xe000ed00

1000447c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
1000447c:	b480      	push	{r7}
1000447e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10004480:	4b04      	ldr	r3, [pc, #16]	@ (10004494 <__NVIC_GetPriorityGrouping+0x18>)
10004482:	68db      	ldr	r3, [r3, #12]
10004484:	0a1b      	lsrs	r3, r3, #8
10004486:	f003 0307 	and.w	r3, r3, #7
}
1000448a:	4618      	mov	r0, r3
1000448c:	46bd      	mov	sp, r7
1000448e:	f85d 7b04 	ldr.w	r7, [sp], #4
10004492:	4770      	bx	lr
10004494:	e000ed00 	.word	0xe000ed00

10004498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004498:	b480      	push	{r7}
1000449a:	b083      	sub	sp, #12
1000449c:	af00      	add	r7, sp, #0
1000449e:	4603      	mov	r3, r0
100044a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100044a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100044a6:	2b00      	cmp	r3, #0
100044a8:	db0b      	blt.n	100044c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100044aa:	88fb      	ldrh	r3, [r7, #6]
100044ac:	f003 021f 	and.w	r2, r3, #31
100044b0:	4907      	ldr	r1, [pc, #28]	@ (100044d0 <__NVIC_EnableIRQ+0x38>)
100044b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100044b6:	095b      	lsrs	r3, r3, #5
100044b8:	2001      	movs	r0, #1
100044ba:	fa00 f202 	lsl.w	r2, r0, r2
100044be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
100044c2:	bf00      	nop
100044c4:	370c      	adds	r7, #12
100044c6:	46bd      	mov	sp, r7
100044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
100044cc:	4770      	bx	lr
100044ce:	bf00      	nop
100044d0:	e000e100 	.word	0xe000e100

100044d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100044d4:	b480      	push	{r7}
100044d6:	b083      	sub	sp, #12
100044d8:	af00      	add	r7, sp, #0
100044da:	4603      	mov	r3, r0
100044dc:	6039      	str	r1, [r7, #0]
100044de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100044e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100044e4:	2b00      	cmp	r3, #0
100044e6:	db0a      	blt.n	100044fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100044e8:	683b      	ldr	r3, [r7, #0]
100044ea:	b2da      	uxtb	r2, r3
100044ec:	490c      	ldr	r1, [pc, #48]	@ (10004520 <__NVIC_SetPriority+0x4c>)
100044ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100044f2:	0112      	lsls	r2, r2, #4
100044f4:	b2d2      	uxtb	r2, r2
100044f6:	440b      	add	r3, r1
100044f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
100044fc:	e00a      	b.n	10004514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100044fe:	683b      	ldr	r3, [r7, #0]
10004500:	b2da      	uxtb	r2, r3
10004502:	4908      	ldr	r1, [pc, #32]	@ (10004524 <__NVIC_SetPriority+0x50>)
10004504:	88fb      	ldrh	r3, [r7, #6]
10004506:	f003 030f 	and.w	r3, r3, #15
1000450a:	3b04      	subs	r3, #4
1000450c:	0112      	lsls	r2, r2, #4
1000450e:	b2d2      	uxtb	r2, r2
10004510:	440b      	add	r3, r1
10004512:	761a      	strb	r2, [r3, #24]
}
10004514:	bf00      	nop
10004516:	370c      	adds	r7, #12
10004518:	46bd      	mov	sp, r7
1000451a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000451e:	4770      	bx	lr
10004520:	e000e100 	.word	0xe000e100
10004524:	e000ed00 	.word	0xe000ed00

10004528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10004528:	b480      	push	{r7}
1000452a:	b089      	sub	sp, #36	@ 0x24
1000452c:	af00      	add	r7, sp, #0
1000452e:	60f8      	str	r0, [r7, #12]
10004530:	60b9      	str	r1, [r7, #8]
10004532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10004534:	68fb      	ldr	r3, [r7, #12]
10004536:	f003 0307 	and.w	r3, r3, #7
1000453a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
1000453c:	69fb      	ldr	r3, [r7, #28]
1000453e:	f1c3 0307 	rsb	r3, r3, #7
10004542:	2b04      	cmp	r3, #4
10004544:	bf28      	it	cs
10004546:	2304      	movcs	r3, #4
10004548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
1000454a:	69fb      	ldr	r3, [r7, #28]
1000454c:	3304      	adds	r3, #4
1000454e:	2b06      	cmp	r3, #6
10004550:	d902      	bls.n	10004558 <NVIC_EncodePriority+0x30>
10004552:	69fb      	ldr	r3, [r7, #28]
10004554:	3b03      	subs	r3, #3
10004556:	e000      	b.n	1000455a <NVIC_EncodePriority+0x32>
10004558:	2300      	movs	r3, #0
1000455a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
1000455c:	f04f 32ff 	mov.w	r2, #4294967295
10004560:	69bb      	ldr	r3, [r7, #24]
10004562:	fa02 f303 	lsl.w	r3, r2, r3
10004566:	43da      	mvns	r2, r3
10004568:	68bb      	ldr	r3, [r7, #8]
1000456a:	401a      	ands	r2, r3
1000456c:	697b      	ldr	r3, [r7, #20]
1000456e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10004570:	f04f 31ff 	mov.w	r1, #4294967295
10004574:	697b      	ldr	r3, [r7, #20]
10004576:	fa01 f303 	lsl.w	r3, r1, r3
1000457a:	43d9      	mvns	r1, r3
1000457c:	687b      	ldr	r3, [r7, #4]
1000457e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10004580:	4313      	orrs	r3, r2
         );
}
10004582:	4618      	mov	r0, r3
10004584:	3724      	adds	r7, #36	@ 0x24
10004586:	46bd      	mov	sp, r7
10004588:	f85d 7b04 	ldr.w	r7, [sp], #4
1000458c:	4770      	bx	lr
	...

10004590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10004590:	b580      	push	{r7, lr}
10004592:	b082      	sub	sp, #8
10004594:	af00      	add	r7, sp, #0
10004596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10004598:	687b      	ldr	r3, [r7, #4]
1000459a:	3b01      	subs	r3, #1
1000459c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
100045a0:	d301      	bcc.n	100045a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
100045a2:	2301      	movs	r3, #1
100045a4:	e00f      	b.n	100045c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100045a6:	4a0a      	ldr	r2, [pc, #40]	@ (100045d0 <SysTick_Config+0x40>)
100045a8:	687b      	ldr	r3, [r7, #4]
100045aa:	3b01      	subs	r3, #1
100045ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100045ae:	210f      	movs	r1, #15
100045b0:	f04f 30ff 	mov.w	r0, #4294967295
100045b4:	f7ff ff8e 	bl	100044d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100045b8:	4b05      	ldr	r3, [pc, #20]	@ (100045d0 <SysTick_Config+0x40>)
100045ba:	2200      	movs	r2, #0
100045bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100045be:	4b04      	ldr	r3, [pc, #16]	@ (100045d0 <SysTick_Config+0x40>)
100045c0:	2207      	movs	r2, #7
100045c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100045c4:	2300      	movs	r3, #0
}
100045c6:	4618      	mov	r0, r3
100045c8:	3708      	adds	r7, #8
100045ca:	46bd      	mov	sp, r7
100045cc:	bd80      	pop	{r7, pc}
100045ce:	bf00      	nop
100045d0:	e000e010 	.word	0xe000e010

100045d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100045d4:	b580      	push	{r7, lr}
100045d6:	b082      	sub	sp, #8
100045d8:	af00      	add	r7, sp, #0
100045da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
100045dc:	6878      	ldr	r0, [r7, #4]
100045de:	f7ff ff29 	bl	10004434 <__NVIC_SetPriorityGrouping>
}
100045e2:	bf00      	nop
100045e4:	3708      	adds	r7, #8
100045e6:	46bd      	mov	sp, r7
100045e8:	bd80      	pop	{r7, pc}

100045ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
100045ea:	b580      	push	{r7, lr}
100045ec:	b086      	sub	sp, #24
100045ee:	af00      	add	r7, sp, #0
100045f0:	4603      	mov	r3, r0
100045f2:	60b9      	str	r1, [r7, #8]
100045f4:	607a      	str	r2, [r7, #4]
100045f6:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
100045f8:	2300      	movs	r3, #0
100045fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
100045fc:	f7ff ff3e 	bl	1000447c <__NVIC_GetPriorityGrouping>
10004600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10004602:	687a      	ldr	r2, [r7, #4]
10004604:	68b9      	ldr	r1, [r7, #8]
10004606:	6978      	ldr	r0, [r7, #20]
10004608:	f7ff ff8e 	bl	10004528 <NVIC_EncodePriority>
1000460c:	4602      	mov	r2, r0
1000460e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10004612:	4611      	mov	r1, r2
10004614:	4618      	mov	r0, r3
10004616:	f7ff ff5d 	bl	100044d4 <__NVIC_SetPriority>
}
1000461a:	bf00      	nop
1000461c:	3718      	adds	r7, #24
1000461e:	46bd      	mov	sp, r7
10004620:	bd80      	pop	{r7, pc}

10004622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10004622:	b580      	push	{r7, lr}
10004624:	b082      	sub	sp, #8
10004626:	af00      	add	r7, sp, #0
10004628:	4603      	mov	r3, r0
1000462a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1000462c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10004630:	4618      	mov	r0, r3
10004632:	f7ff ff31 	bl	10004498 <__NVIC_EnableIRQ>
}
10004636:	bf00      	nop
10004638:	3708      	adds	r7, #8
1000463a:	46bd      	mov	sp, r7
1000463c:	bd80      	pop	{r7, pc}

1000463e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1000463e:	b580      	push	{r7, lr}
10004640:	b082      	sub	sp, #8
10004642:	af00      	add	r7, sp, #0
10004644:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10004646:	6878      	ldr	r0, [r7, #4]
10004648:	f7ff ffa2 	bl	10004590 <SysTick_Config>
1000464c:	4603      	mov	r3, r0
}
1000464e:	4618      	mov	r0, r3
10004650:	3708      	adds	r7, #8
10004652:	46bd      	mov	sp, r7
10004654:	bd80      	pop	{r7, pc}

10004656 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
10004656:	b580      	push	{r7, lr}
10004658:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
1000465a:	f000 f802 	bl	10004662 <HAL_SYSTICK_Callback>
}
1000465e:	bf00      	nop
10004660:	bd80      	pop	{r7, pc}

10004662 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
10004662:	b480      	push	{r7}
10004664:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
10004666:	bf00      	nop
10004668:	46bd      	mov	sp, r7
1000466a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000466e:	4770      	bx	lr

10004670 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
10004670:	b480      	push	{r7}
10004672:	b083      	sub	sp, #12
10004674:	af00      	add	r7, sp, #0
10004676:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (hdma == NULL)
10004678:	687b      	ldr	r3, [r7, #4]
1000467a:	2b00      	cmp	r3, #0
1000467c:	d101      	bne.n	10004682 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
1000467e:	2301      	movs	r3, #1
10004680:	e017      	b.n	100046b2 <HAL_DMA_Abort_IT+0x42>
  }

  if (hdma->State != HAL_DMA_STATE_BUSY)
10004682:	687b      	ldr	r3, [r7, #4]
10004684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
10004688:	b2db      	uxtb	r3, r3
1000468a:	2b02      	cmp	r3, #2
1000468c:	d004      	beq.n	10004698 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
1000468e:	687b      	ldr	r3, [r7, #4]
10004690:	2280      	movs	r2, #128	@ 0x80
10004692:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
10004694:	2301      	movs	r3, #1
10004696:	e00c      	b.n	100046b2 <HAL_DMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
10004698:	687b      	ldr	r3, [r7, #4]
1000469a:	2204      	movs	r2, #4
1000469c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
100046a0:	687b      	ldr	r3, [r7, #4]
100046a2:	681b      	ldr	r3, [r3, #0]
100046a4:	681a      	ldr	r2, [r3, #0]
100046a6:	687b      	ldr	r3, [r7, #4]
100046a8:	681b      	ldr	r3, [r3, #0]
100046aa:	f022 0201 	bic.w	r2, r2, #1
100046ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
100046b0:	2300      	movs	r3, #0
}
100046b2:	4618      	mov	r0, r3
100046b4:	370c      	adds	r7, #12
100046b6:	46bd      	mov	sp, r7
100046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
100046bc:	4770      	bx	lr

100046be <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
100046be:	b480      	push	{r7}
100046c0:	b083      	sub	sp, #12
100046c2:	af00      	add	r7, sp, #0
100046c4:	6078      	str	r0, [r7, #4]
  return hdma->State;
100046c6:	687b      	ldr	r3, [r7, #4]
100046c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
100046cc:	b2db      	uxtb	r3, r3
}
100046ce:	4618      	mov	r0, r3
100046d0:	370c      	adds	r7, #12
100046d2:	46bd      	mov	sp, r7
100046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100046d8:	4770      	bx	lr
	...

100046dc <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
100046dc:	b480      	push	{r7}
100046de:	b089      	sub	sp, #36	@ 0x24
100046e0:	af00      	add	r7, sp, #0
100046e2:	6078      	str	r0, [r7, #4]
100046e4:	6039      	str	r1, [r7, #0]
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
100046e6:	687b      	ldr	r3, [r7, #4]
100046e8:	2b00      	cmp	r3, #0
100046ea:	d002      	beq.n	100046f2 <HAL_EXTI_SetConfigLine+0x16>
100046ec:	683b      	ldr	r3, [r7, #0]
100046ee:	2b00      	cmp	r3, #0
100046f0:	d101      	bne.n	100046f6 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
100046f2:	2301      	movs	r3, #1
100046f4:	e0da      	b.n	100048ac <HAL_EXTI_SetConfigLine+0x1d0>

  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
100046f6:	683b      	ldr	r3, [r7, #0]
100046f8:	681a      	ldr	r2, [r3, #0]
100046fa:	687b      	ldr	r3, [r7, #4]
100046fc:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
100046fe:	683b      	ldr	r3, [r7, #0]
10004700:	681b      	ldr	r3, [r3, #0]
10004702:	0c1b      	lsrs	r3, r3, #16
10004704:	f003 0303 	and.w	r3, r3, #3
10004708:	61bb      	str	r3, [r7, #24]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
1000470a:	683b      	ldr	r3, [r7, #0]
1000470c:	681b      	ldr	r3, [r3, #0]
1000470e:	f003 031f 	and.w	r3, r3, #31
10004712:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
10004714:	2201      	movs	r2, #1
10004716:	697b      	ldr	r3, [r7, #20]
10004718:	fa02 f303 	lsl.w	r3, r2, r3
1000471c:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x0u)
1000471e:	683b      	ldr	r3, [r7, #0]
10004720:	681b      	ldr	r3, [r3, #0]
10004722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
10004726:	2b00      	cmp	r3, #0
10004728:	d062      	beq.n	100047f0 <HAL_EXTI_SetConfigLine+0x114>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
1000472a:	69bb      	ldr	r3, [r7, #24]
1000472c:	015b      	lsls	r3, r3, #5
1000472e:	f103 43a0 	add.w	r3, r3, #1342177280	@ 0x50000000
10004732:	f503 4350 	add.w	r3, r3, #53248	@ 0xd000
10004736:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
10004738:	68fb      	ldr	r3, [r7, #12]
1000473a:	681b      	ldr	r3, [r3, #0]
1000473c:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x0u)
1000473e:	683b      	ldr	r3, [r7, #0]
10004740:	689b      	ldr	r3, [r3, #8]
10004742:	f003 0301 	and.w	r3, r3, #1
10004746:	2b00      	cmp	r3, #0
10004748:	d004      	beq.n	10004754 <HAL_EXTI_SetConfigLine+0x78>
    {
      regval |= maskline;
1000474a:	69fa      	ldr	r2, [r7, #28]
1000474c:	693b      	ldr	r3, [r7, #16]
1000474e:	4313      	orrs	r3, r2
10004750:	61fb      	str	r3, [r7, #28]
10004752:	e004      	b.n	1000475e <HAL_EXTI_SetConfigLine+0x82>
    }
    else
    {
      regval &= ~maskline;
10004754:	693b      	ldr	r3, [r7, #16]
10004756:	43db      	mvns	r3, r3
10004758:	69fa      	ldr	r2, [r7, #28]
1000475a:	4013      	ands	r3, r2
1000475c:	61fb      	str	r3, [r7, #28]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
1000475e:	68fb      	ldr	r3, [r7, #12]
10004760:	69fa      	ldr	r2, [r7, #28]
10004762:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
10004764:	69bb      	ldr	r3, [r7, #24]
10004766:	015a      	lsls	r2, r3, #5
10004768:	4b53      	ldr	r3, [pc, #332]	@ (100048b8 <HAL_EXTI_SetConfigLine+0x1dc>)
1000476a:	4413      	add	r3, r2
1000476c:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
1000476e:	68fb      	ldr	r3, [r7, #12]
10004770:	681b      	ldr	r3, [r3, #0]
10004772:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x0u)
10004774:	683b      	ldr	r3, [r7, #0]
10004776:	689b      	ldr	r3, [r3, #8]
10004778:	f003 0302 	and.w	r3, r3, #2
1000477c:	2b00      	cmp	r3, #0
1000477e:	d004      	beq.n	1000478a <HAL_EXTI_SetConfigLine+0xae>
    {
      regval |= maskline;
10004780:	69fa      	ldr	r2, [r7, #28]
10004782:	693b      	ldr	r3, [r7, #16]
10004784:	4313      	orrs	r3, r2
10004786:	61fb      	str	r3, [r7, #28]
10004788:	e004      	b.n	10004794 <HAL_EXTI_SetConfigLine+0xb8>
    }
    else
    {
      regval &= ~maskline;
1000478a:	693b      	ldr	r3, [r7, #16]
1000478c:	43db      	mvns	r3, r3
1000478e:	69fa      	ldr	r2, [r7, #28]
10004790:	4013      	ands	r3, r2
10004792:	61fb      	str	r3, [r7, #28]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
10004794:	68fb      	ldr	r3, [r7, #12]
10004796:	69fa      	ldr	r2, [r7, #28]
10004798:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
1000479a:	683b      	ldr	r3, [r7, #0]
1000479c:	681b      	ldr	r3, [r3, #0]
1000479e:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
100047a2:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
100047a6:	d123      	bne.n	100047f0 <HAL_EXTI_SetConfigLine+0x114>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = EXTI->EXTICR[linepos >> 2u];
100047a8:	4a44      	ldr	r2, [pc, #272]	@ (100048bc <HAL_EXTI_SetConfigLine+0x1e0>)
100047aa:	697b      	ldr	r3, [r7, #20]
100047ac:	089b      	lsrs	r3, r3, #2
100047ae:	3318      	adds	r3, #24
100047b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100047b4:	61fb      	str	r3, [r7, #28]
      regval &= ~(EXTI_EXTICR1_EXTI0 << (EXTI_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
100047b6:	697b      	ldr	r3, [r7, #20]
100047b8:	f003 0303 	and.w	r3, r3, #3
100047bc:	00db      	lsls	r3, r3, #3
100047be:	220f      	movs	r2, #15
100047c0:	fa02 f303 	lsl.w	r3, r2, r3
100047c4:	43db      	mvns	r3, r3
100047c6:	69fa      	ldr	r2, [r7, #28]
100047c8:	4013      	ands	r3, r2
100047ca:	61fb      	str	r3, [r7, #28]
      regval |= (pExtiConfig->GPIOSel << (EXTI_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
100047cc:	683b      	ldr	r3, [r7, #0]
100047ce:	68da      	ldr	r2, [r3, #12]
100047d0:	697b      	ldr	r3, [r7, #20]
100047d2:	f003 0303 	and.w	r3, r3, #3
100047d6:	00db      	lsls	r3, r3, #3
100047d8:	fa02 f303 	lsl.w	r3, r2, r3
100047dc:	69fa      	ldr	r2, [r7, #28]
100047de:	4313      	orrs	r3, r2
100047e0:	61fb      	str	r3, [r7, #28]
      EXTI->EXTICR[linepos >> 2u] = regval;
100047e2:	4936      	ldr	r1, [pc, #216]	@ (100048bc <HAL_EXTI_SetConfigLine+0x1e0>)
100047e4:	697b      	ldr	r3, [r7, #20]
100047e6:	089b      	lsrs	r3, r3, #2
100047e8:	3318      	adds	r3, #24
100047ea:	69fa      	ldr	r2, [r7, #28]
100047ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }


  /*Set Interrupt And Event Mask for Core 1 if configuration for Core 1 given into parameter mode */
  if ((pExtiConfig->Mode & EXTI_MODE_C1) != 0x0u)
100047f0:	683b      	ldr	r3, [r7, #0]
100047f2:	685b      	ldr	r3, [r3, #4]
100047f4:	f003 0310 	and.w	r3, r3, #16
100047f8:	2b00      	cmp	r3, #0
100047fa:	d01a      	beq.n	10004832 <HAL_EXTI_SetConfigLine+0x156>
  {
    regaddr = (&EXTI->C1IMR1 + (EXTI_MODE_OFFSET * offset));
100047fc:	69bb      	ldr	r3, [r7, #24]
100047fe:	011a      	lsls	r2, r3, #4
10004800:	4b2f      	ldr	r3, [pc, #188]	@ (100048c0 <HAL_EXTI_SetConfigLine+0x1e4>)
10004802:	4413      	add	r3, r2
10004804:	60fb      	str	r3, [r7, #12]

    regval = *regaddr;
10004806:	68fb      	ldr	r3, [r7, #12]
10004808:	681b      	ldr	r3, [r3, #0]
1000480a:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x0u)
1000480c:	683b      	ldr	r3, [r7, #0]
1000480e:	685b      	ldr	r3, [r3, #4]
10004810:	f003 0301 	and.w	r3, r3, #1
10004814:	2b00      	cmp	r3, #0
10004816:	d004      	beq.n	10004822 <HAL_EXTI_SetConfigLine+0x146>
    {
      regval |= maskline;
10004818:	69fa      	ldr	r2, [r7, #28]
1000481a:	693b      	ldr	r3, [r7, #16]
1000481c:	4313      	orrs	r3, r2
1000481e:	61fb      	str	r3, [r7, #28]
10004820:	e004      	b.n	1000482c <HAL_EXTI_SetConfigLine+0x150>
    }
    else
    {
      regval &= ~maskline;
10004822:	693b      	ldr	r3, [r7, #16]
10004824:	43db      	mvns	r3, r3
10004826:	69fa      	ldr	r2, [r7, #28]
10004828:	4013      	ands	r3, r2
1000482a:	61fb      	str	r3, [r7, #28]
    }

    /* Store interrupt mode */
    *regaddr = regval;
1000482c:	68fb      	ldr	r3, [r7, #12]
1000482e:	69fa      	ldr	r2, [r7, #28]
10004830:	601a      	str	r2, [r3, #0]
  }

  /*Set Interrupt And Event Mask for Core 2 if configuration for Core 2 given into parameter mode  */
  if ((pExtiConfig->Mode & EXTI_MODE_C2) != 0x0u)
10004832:	683b      	ldr	r3, [r7, #0]
10004834:	685b      	ldr	r3, [r3, #4]
10004836:	f003 0320 	and.w	r3, r3, #32
1000483a:	2b00      	cmp	r3, #0
1000483c:	d035      	beq.n	100048aa <HAL_EXTI_SetConfigLine+0x1ce>
  {
    regaddr = (&EXTI->C2IMR1 + (EXTI_MODE_OFFSET * offset));
1000483e:	69bb      	ldr	r3, [r7, #24]
10004840:	011a      	lsls	r2, r3, #4
10004842:	4b20      	ldr	r3, [pc, #128]	@ (100048c4 <HAL_EXTI_SetConfigLine+0x1e8>)
10004844:	4413      	add	r3, r2
10004846:	60fb      	str	r3, [r7, #12]

    regval = *regaddr;
10004848:	68fb      	ldr	r3, [r7, #12]
1000484a:	681b      	ldr	r3, [r3, #0]
1000484c:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x0u)
1000484e:	683b      	ldr	r3, [r7, #0]
10004850:	685b      	ldr	r3, [r3, #4]
10004852:	f003 0301 	and.w	r3, r3, #1
10004856:	2b00      	cmp	r3, #0
10004858:	d004      	beq.n	10004864 <HAL_EXTI_SetConfigLine+0x188>
    {
      regval |= maskline;
1000485a:	69fa      	ldr	r2, [r7, #28]
1000485c:	693b      	ldr	r3, [r7, #16]
1000485e:	4313      	orrs	r3, r2
10004860:	61fb      	str	r3, [r7, #28]
10004862:	e004      	b.n	1000486e <HAL_EXTI_SetConfigLine+0x192>
    }
    else
    {
      regval &= ~maskline;
10004864:	693b      	ldr	r3, [r7, #16]
10004866:	43db      	mvns	r3, r3
10004868:	69fa      	ldr	r2, [r7, #28]
1000486a:	4013      	ands	r3, r2
1000486c:	61fb      	str	r3, [r7, #28]
    }

    /* Store interrupt mode */
    *regaddr = regval;
1000486e:	68fb      	ldr	r3, [r7, #12]
10004870:	69fa      	ldr	r2, [r7, #28]
10004872:	601a      	str	r2, [r3, #0]

    /* The event mode cannot be configured if the line does not support it */
    assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

    regaddr = (&EXTI->C2EMR1 + (EXTI_MODE_OFFSET * offset));
10004874:	69bb      	ldr	r3, [r7, #24]
10004876:	011a      	lsls	r2, r3, #4
10004878:	4b13      	ldr	r3, [pc, #76]	@ (100048c8 <HAL_EXTI_SetConfigLine+0x1ec>)
1000487a:	4413      	add	r3, r2
1000487c:	60fb      	str	r3, [r7, #12]

    regval = *regaddr;
1000487e:	68fb      	ldr	r3, [r7, #12]
10004880:	681b      	ldr	r3, [r3, #0]
10004882:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x0u)
10004884:	683b      	ldr	r3, [r7, #0]
10004886:	685b      	ldr	r3, [r3, #4]
10004888:	f003 0302 	and.w	r3, r3, #2
1000488c:	2b00      	cmp	r3, #0
1000488e:	d004      	beq.n	1000489a <HAL_EXTI_SetConfigLine+0x1be>
    {
      regval |= maskline;
10004890:	69fa      	ldr	r2, [r7, #28]
10004892:	693b      	ldr	r3, [r7, #16]
10004894:	4313      	orrs	r3, r2
10004896:	61fb      	str	r3, [r7, #28]
10004898:	e004      	b.n	100048a4 <HAL_EXTI_SetConfigLine+0x1c8>
    }
    else
    {
      regval &= ~maskline;
1000489a:	693b      	ldr	r3, [r7, #16]
1000489c:	43db      	mvns	r3, r3
1000489e:	69fa      	ldr	r2, [r7, #28]
100048a0:	4013      	ands	r3, r2
100048a2:	61fb      	str	r3, [r7, #28]
    }

    /* Store event mode */
    *regaddr = regval;
100048a4:	68fb      	ldr	r3, [r7, #12]
100048a6:	69fa      	ldr	r2, [r7, #28]
100048a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
100048aa:	2300      	movs	r3, #0
}
100048ac:	4618      	mov	r0, r3
100048ae:	3724      	adds	r7, #36	@ 0x24
100048b0:	46bd      	mov	sp, r7
100048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
100048b6:	4770      	bx	lr
100048b8:	5000d004 	.word	0x5000d004
100048bc:	5000d000 	.word	0x5000d000
100048c0:	5000d080 	.word	0x5000d080
100048c4:	5000d0c0 	.word	0x5000d0c0
100048c8:	5000d0c4 	.word	0x5000d0c4

100048cc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
100048cc:	b480      	push	{r7}
100048ce:	b087      	sub	sp, #28
100048d0:	af00      	add	r7, sp, #0
100048d2:	60f8      	str	r0, [r7, #12]
100048d4:	460b      	mov	r3, r1
100048d6:	607a      	str	r2, [r7, #4]
100048d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
100048da:	2300      	movs	r3, #0
100048dc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
100048de:	7afb      	ldrb	r3, [r7, #11]
100048e0:	2b02      	cmp	r3, #2
100048e2:	d011      	beq.n	10004908 <HAL_EXTI_RegisterCallback+0x3c>
100048e4:	2b02      	cmp	r3, #2
100048e6:	dc13      	bgt.n	10004910 <HAL_EXTI_RegisterCallback+0x44>
100048e8:	2b00      	cmp	r3, #0
100048ea:	d002      	beq.n	100048f2 <HAL_EXTI_RegisterCallback+0x26>
100048ec:	2b01      	cmp	r3, #1
100048ee:	d007      	beq.n	10004900 <HAL_EXTI_RegisterCallback+0x34>
100048f0:	e00e      	b.n	10004910 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
100048f2:	68fb      	ldr	r3, [r7, #12]
100048f4:	687a      	ldr	r2, [r7, #4]
100048f6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
100048f8:	68fb      	ldr	r3, [r7, #12]
100048fa:	687a      	ldr	r2, [r7, #4]
100048fc:	609a      	str	r2, [r3, #8]
      break;
100048fe:	e00a      	b.n	10004916 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
10004900:	68fb      	ldr	r3, [r7, #12]
10004902:	687a      	ldr	r2, [r7, #4]
10004904:	605a      	str	r2, [r3, #4]
      break;
10004906:	e006      	b.n	10004916 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
10004908:	68fb      	ldr	r3, [r7, #12]
1000490a:	687a      	ldr	r2, [r7, #4]
1000490c:	609a      	str	r2, [r3, #8]
      break;
1000490e:	e002      	b.n	10004916 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
10004910:	2301      	movs	r3, #1
10004912:	75fb      	strb	r3, [r7, #23]
      break;
10004914:	bf00      	nop
  }

  return status;
10004916:	7dfb      	ldrb	r3, [r7, #23]
}
10004918:	4618      	mov	r0, r3
1000491a:	371c      	adds	r7, #28
1000491c:	46bd      	mov	sp, r7
1000491e:	f85d 7b04 	ldr.w	r7, [sp], #4
10004922:	4770      	bx	lr

10004924 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
10004924:	b580      	push	{r7, lr}
10004926:	b086      	sub	sp, #24
10004928:	af00      	add	r7, sp, #0
1000492a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
1000492c:	687b      	ldr	r3, [r7, #4]
1000492e:	681b      	ldr	r3, [r3, #0]
10004930:	0c1b      	lsrs	r3, r3, #16
10004932:	f003 0303 	and.w	r3, r3, #3
10004936:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
10004938:	687b      	ldr	r3, [r7, #4]
1000493a:	681b      	ldr	r3, [r3, #0]
1000493c:	f003 031f 	and.w	r3, r3, #31
10004940:	2201      	movs	r2, #1
10004942:	fa02 f303 	lsl.w	r3, r2, r3
10004946:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
10004948:	697b      	ldr	r3, [r7, #20]
1000494a:	015a      	lsls	r2, r3, #5
1000494c:	4b17      	ldr	r3, [pc, #92]	@ (100049ac <HAL_EXTI_IRQHandler+0x88>)
1000494e:	4413      	add	r3, r2
10004950:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
10004952:	68fb      	ldr	r3, [r7, #12]
10004954:	681b      	ldr	r3, [r3, #0]
10004956:	693a      	ldr	r2, [r7, #16]
10004958:	4013      	ands	r3, r2
1000495a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x0u)
1000495c:	68bb      	ldr	r3, [r7, #8]
1000495e:	2b00      	cmp	r3, #0
10004960:	d009      	beq.n	10004976 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
10004962:	68fb      	ldr	r3, [r7, #12]
10004964:	693a      	ldr	r2, [r7, #16]
10004966:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
10004968:	687b      	ldr	r3, [r7, #4]
1000496a:	685b      	ldr	r3, [r3, #4]
1000496c:	2b00      	cmp	r3, #0
1000496e:	d002      	beq.n	10004976 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
10004970:	687b      	ldr	r3, [r7, #4]
10004972:	685b      	ldr	r3, [r3, #4]
10004974:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
10004976:	697b      	ldr	r3, [r7, #20]
10004978:	015a      	lsls	r2, r3, #5
1000497a:	4b0d      	ldr	r3, [pc, #52]	@ (100049b0 <HAL_EXTI_IRQHandler+0x8c>)
1000497c:	4413      	add	r3, r2
1000497e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
10004980:	68fb      	ldr	r3, [r7, #12]
10004982:	681b      	ldr	r3, [r3, #0]
10004984:	693a      	ldr	r2, [r7, #16]
10004986:	4013      	ands	r3, r2
10004988:	60bb      	str	r3, [r7, #8]

  if (regval != 0x0u)
1000498a:	68bb      	ldr	r3, [r7, #8]
1000498c:	2b00      	cmp	r3, #0
1000498e:	d009      	beq.n	100049a4 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
10004990:	68fb      	ldr	r3, [r7, #12]
10004992:	693a      	ldr	r2, [r7, #16]
10004994:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
10004996:	687b      	ldr	r3, [r7, #4]
10004998:	689b      	ldr	r3, [r3, #8]
1000499a:	2b00      	cmp	r3, #0
1000499c:	d002      	beq.n	100049a4 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
1000499e:	687b      	ldr	r3, [r7, #4]
100049a0:	689b      	ldr	r3, [r3, #8]
100049a2:	4798      	blx	r3
    }
  }
}
100049a4:	bf00      	nop
100049a6:	3718      	adds	r7, #24
100049a8:	46bd      	mov	sp, r7
100049aa:	bd80      	pop	{r7, pc}
100049ac:	5000d00c 	.word	0x5000d00c
100049b0:	5000d010 	.word	0x5000d010

100049b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100049b4:	b480      	push	{r7}
100049b6:	b089      	sub	sp, #36	@ 0x24
100049b8:	af00      	add	r7, sp, #0
100049ba:	6078      	str	r0, [r7, #4]
100049bc:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
100049be:	4b8a      	ldr	r3, [pc, #552]	@ (10004be8 <HAL_GPIO_Init+0x234>)
100049c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
100049c2:	2300      	movs	r3, #0
100049c4:	61fb      	str	r3, [r7, #28]
100049c6:	e191      	b.n	10004cec <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
100049c8:	2201      	movs	r2, #1
100049ca:	69fb      	ldr	r3, [r7, #28]
100049cc:	fa02 f303 	lsl.w	r3, r2, r3
100049d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
100049d2:	683b      	ldr	r3, [r7, #0]
100049d4:	681b      	ldr	r3, [r3, #0]
100049d6:	693a      	ldr	r2, [r7, #16]
100049d8:	4013      	ands	r3, r2
100049da:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
100049dc:	68fa      	ldr	r2, [r7, #12]
100049de:	693b      	ldr	r3, [r7, #16]
100049e0:	429a      	cmp	r2, r3
100049e2:	f040 8180 	bne.w	10004ce6 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100049e6:	683b      	ldr	r3, [r7, #0]
100049e8:	685b      	ldr	r3, [r3, #4]
100049ea:	2b02      	cmp	r3, #2
100049ec:	d003      	beq.n	100049f6 <HAL_GPIO_Init+0x42>
100049ee:	683b      	ldr	r3, [r7, #0]
100049f0:	685b      	ldr	r3, [r3, #4]
100049f2:	2b12      	cmp	r3, #18
100049f4:	d123      	bne.n	10004a3e <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
100049f6:	69fb      	ldr	r3, [r7, #28]
100049f8:	08da      	lsrs	r2, r3, #3
100049fa:	687b      	ldr	r3, [r7, #4]
100049fc:	3208      	adds	r2, #8
100049fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10004a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10004a04:	69fb      	ldr	r3, [r7, #28]
10004a06:	f003 0307 	and.w	r3, r3, #7
10004a0a:	009b      	lsls	r3, r3, #2
10004a0c:	220f      	movs	r2, #15
10004a0e:	fa02 f303 	lsl.w	r3, r2, r3
10004a12:	43db      	mvns	r3, r3
10004a14:	69ba      	ldr	r2, [r7, #24]
10004a16:	4013      	ands	r3, r2
10004a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
10004a1a:	683b      	ldr	r3, [r7, #0]
10004a1c:	691a      	ldr	r2, [r3, #16]
10004a1e:	69fb      	ldr	r3, [r7, #28]
10004a20:	f003 0307 	and.w	r3, r3, #7
10004a24:	009b      	lsls	r3, r3, #2
10004a26:	fa02 f303 	lsl.w	r3, r2, r3
10004a2a:	69ba      	ldr	r2, [r7, #24]
10004a2c:	4313      	orrs	r3, r2
10004a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10004a30:	69fb      	ldr	r3, [r7, #28]
10004a32:	08da      	lsrs	r2, r3, #3
10004a34:	687b      	ldr	r3, [r7, #4]
10004a36:	3208      	adds	r2, #8
10004a38:	69b9      	ldr	r1, [r7, #24]
10004a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10004a3e:	687b      	ldr	r3, [r7, #4]
10004a40:	681b      	ldr	r3, [r3, #0]
10004a42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10004a44:	69fb      	ldr	r3, [r7, #28]
10004a46:	005b      	lsls	r3, r3, #1
10004a48:	2203      	movs	r2, #3
10004a4a:	fa02 f303 	lsl.w	r3, r2, r3
10004a4e:	43db      	mvns	r3, r3
10004a50:	69ba      	ldr	r2, [r7, #24]
10004a52:	4013      	ands	r3, r2
10004a54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10004a56:	683b      	ldr	r3, [r7, #0]
10004a58:	685b      	ldr	r3, [r3, #4]
10004a5a:	f003 0203 	and.w	r2, r3, #3
10004a5e:	69fb      	ldr	r3, [r7, #28]
10004a60:	005b      	lsls	r3, r3, #1
10004a62:	fa02 f303 	lsl.w	r3, r2, r3
10004a66:	69ba      	ldr	r2, [r7, #24]
10004a68:	4313      	orrs	r3, r2
10004a6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10004a6c:	687b      	ldr	r3, [r7, #4]
10004a6e:	69ba      	ldr	r2, [r7, #24]
10004a70:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10004a72:	683b      	ldr	r3, [r7, #0]
10004a74:	685b      	ldr	r3, [r3, #4]
10004a76:	2b01      	cmp	r3, #1
10004a78:	d00b      	beq.n	10004a92 <HAL_GPIO_Init+0xde>
10004a7a:	683b      	ldr	r3, [r7, #0]
10004a7c:	685b      	ldr	r3, [r3, #4]
10004a7e:	2b02      	cmp	r3, #2
10004a80:	d007      	beq.n	10004a92 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10004a82:	683b      	ldr	r3, [r7, #0]
10004a84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10004a86:	2b11      	cmp	r3, #17
10004a88:	d003      	beq.n	10004a92 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10004a8a:	683b      	ldr	r3, [r7, #0]
10004a8c:	685b      	ldr	r3, [r3, #4]
10004a8e:	2b12      	cmp	r3, #18
10004a90:	d130      	bne.n	10004af4 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10004a92:	687b      	ldr	r3, [r7, #4]
10004a94:	689b      	ldr	r3, [r3, #8]
10004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10004a98:	69fb      	ldr	r3, [r7, #28]
10004a9a:	005b      	lsls	r3, r3, #1
10004a9c:	2203      	movs	r2, #3
10004a9e:	fa02 f303 	lsl.w	r3, r2, r3
10004aa2:	43db      	mvns	r3, r3
10004aa4:	69ba      	ldr	r2, [r7, #24]
10004aa6:	4013      	ands	r3, r2
10004aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10004aaa:	683b      	ldr	r3, [r7, #0]
10004aac:	68da      	ldr	r2, [r3, #12]
10004aae:	69fb      	ldr	r3, [r7, #28]
10004ab0:	005b      	lsls	r3, r3, #1
10004ab2:	fa02 f303 	lsl.w	r3, r2, r3
10004ab6:	69ba      	ldr	r2, [r7, #24]
10004ab8:	4313      	orrs	r3, r2
10004aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10004abc:	687b      	ldr	r3, [r7, #4]
10004abe:	69ba      	ldr	r2, [r7, #24]
10004ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10004ac2:	687b      	ldr	r3, [r7, #4]
10004ac4:	685b      	ldr	r3, [r3, #4]
10004ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10004ac8:	2201      	movs	r2, #1
10004aca:	69fb      	ldr	r3, [r7, #28]
10004acc:	fa02 f303 	lsl.w	r3, r2, r3
10004ad0:	43db      	mvns	r3, r3
10004ad2:	69ba      	ldr	r2, [r7, #24]
10004ad4:	4013      	ands	r3, r2
10004ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10004ad8:	683b      	ldr	r3, [r7, #0]
10004ada:	685b      	ldr	r3, [r3, #4]
10004adc:	091b      	lsrs	r3, r3, #4
10004ade:	f003 0201 	and.w	r2, r3, #1
10004ae2:	69fb      	ldr	r3, [r7, #28]
10004ae4:	fa02 f303 	lsl.w	r3, r2, r3
10004ae8:	69ba      	ldr	r2, [r7, #24]
10004aea:	4313      	orrs	r3, r2
10004aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10004aee:	687b      	ldr	r3, [r7, #4]
10004af0:	69ba      	ldr	r2, [r7, #24]
10004af2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10004af4:	687b      	ldr	r3, [r7, #4]
10004af6:	68db      	ldr	r3, [r3, #12]
10004af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10004afa:	69fb      	ldr	r3, [r7, #28]
10004afc:	005b      	lsls	r3, r3, #1
10004afe:	2203      	movs	r2, #3
10004b00:	fa02 f303 	lsl.w	r3, r2, r3
10004b04:	43db      	mvns	r3, r3
10004b06:	69ba      	ldr	r2, [r7, #24]
10004b08:	4013      	ands	r3, r2
10004b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10004b0c:	683b      	ldr	r3, [r7, #0]
10004b0e:	689a      	ldr	r2, [r3, #8]
10004b10:	69fb      	ldr	r3, [r7, #28]
10004b12:	005b      	lsls	r3, r3, #1
10004b14:	fa02 f303 	lsl.w	r3, r2, r3
10004b18:	69ba      	ldr	r2, [r7, #24]
10004b1a:	4313      	orrs	r3, r2
10004b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10004b1e:	687b      	ldr	r3, [r7, #4]
10004b20:	69ba      	ldr	r2, [r7, #24]
10004b22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10004b24:	683b      	ldr	r3, [r7, #0]
10004b26:	685b      	ldr	r3, [r3, #4]
10004b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
10004b2c:	2b00      	cmp	r3, #0
10004b2e:	f000 80da 	beq.w	10004ce6 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10004b32:	4a2e      	ldr	r2, [pc, #184]	@ (10004bec <HAL_GPIO_Init+0x238>)
10004b34:	69fb      	ldr	r3, [r7, #28]
10004b36:	089b      	lsrs	r3, r3, #2
10004b38:	3318      	adds	r3, #24
10004b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10004b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10004b40:	69fb      	ldr	r3, [r7, #28]
10004b42:	f003 0303 	and.w	r3, r3, #3
10004b46:	00db      	lsls	r3, r3, #3
10004b48:	22ff      	movs	r2, #255	@ 0xff
10004b4a:	fa02 f303 	lsl.w	r3, r2, r3
10004b4e:	43db      	mvns	r3, r3
10004b50:	69ba      	ldr	r2, [r7, #24]
10004b52:	4013      	ands	r3, r2
10004b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10004b56:	687b      	ldr	r3, [r7, #4]
10004b58:	4a25      	ldr	r2, [pc, #148]	@ (10004bf0 <HAL_GPIO_Init+0x23c>)
10004b5a:	4293      	cmp	r3, r2
10004b5c:	d05e      	beq.n	10004c1c <HAL_GPIO_Init+0x268>
10004b5e:	687b      	ldr	r3, [r7, #4]
10004b60:	4a24      	ldr	r2, [pc, #144]	@ (10004bf4 <HAL_GPIO_Init+0x240>)
10004b62:	4293      	cmp	r3, r2
10004b64:	d03d      	beq.n	10004be2 <HAL_GPIO_Init+0x22e>
10004b66:	687b      	ldr	r3, [r7, #4]
10004b68:	4a23      	ldr	r2, [pc, #140]	@ (10004bf8 <HAL_GPIO_Init+0x244>)
10004b6a:	4293      	cmp	r3, r2
10004b6c:	d037      	beq.n	10004bde <HAL_GPIO_Init+0x22a>
10004b6e:	687b      	ldr	r3, [r7, #4]
10004b70:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
10004b74:	d031      	beq.n	10004bda <HAL_GPIO_Init+0x226>
10004b76:	687b      	ldr	r3, [r7, #4]
10004b78:	4a20      	ldr	r2, [pc, #128]	@ (10004bfc <HAL_GPIO_Init+0x248>)
10004b7a:	4293      	cmp	r3, r2
10004b7c:	d02b      	beq.n	10004bd6 <HAL_GPIO_Init+0x222>
10004b7e:	687b      	ldr	r3, [r7, #4]
10004b80:	4a1f      	ldr	r2, [pc, #124]	@ (10004c00 <HAL_GPIO_Init+0x24c>)
10004b82:	4293      	cmp	r3, r2
10004b84:	d025      	beq.n	10004bd2 <HAL_GPIO_Init+0x21e>
10004b86:	687b      	ldr	r3, [r7, #4]
10004b88:	4a1e      	ldr	r2, [pc, #120]	@ (10004c04 <HAL_GPIO_Init+0x250>)
10004b8a:	4293      	cmp	r3, r2
10004b8c:	d01f      	beq.n	10004bce <HAL_GPIO_Init+0x21a>
10004b8e:	687b      	ldr	r3, [r7, #4]
10004b90:	4a1d      	ldr	r2, [pc, #116]	@ (10004c08 <HAL_GPIO_Init+0x254>)
10004b92:	4293      	cmp	r3, r2
10004b94:	d019      	beq.n	10004bca <HAL_GPIO_Init+0x216>
10004b96:	687b      	ldr	r3, [r7, #4]
10004b98:	4a1c      	ldr	r2, [pc, #112]	@ (10004c0c <HAL_GPIO_Init+0x258>)
10004b9a:	4293      	cmp	r3, r2
10004b9c:	d013      	beq.n	10004bc6 <HAL_GPIO_Init+0x212>
10004b9e:	687b      	ldr	r3, [r7, #4]
10004ba0:	4a1b      	ldr	r2, [pc, #108]	@ (10004c10 <HAL_GPIO_Init+0x25c>)
10004ba2:	4293      	cmp	r3, r2
10004ba4:	d00d      	beq.n	10004bc2 <HAL_GPIO_Init+0x20e>
10004ba6:	687b      	ldr	r3, [r7, #4]
10004ba8:	4a1a      	ldr	r2, [pc, #104]	@ (10004c14 <HAL_GPIO_Init+0x260>)
10004baa:	4293      	cmp	r3, r2
10004bac:	d007      	beq.n	10004bbe <HAL_GPIO_Init+0x20a>
10004bae:	687b      	ldr	r3, [r7, #4]
10004bb0:	4a19      	ldr	r2, [pc, #100]	@ (10004c18 <HAL_GPIO_Init+0x264>)
10004bb2:	4293      	cmp	r3, r2
10004bb4:	d101      	bne.n	10004bba <HAL_GPIO_Init+0x206>
10004bb6:	230b      	movs	r3, #11
10004bb8:	e031      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004bba:	2319      	movs	r3, #25
10004bbc:	e02f      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004bbe:	230a      	movs	r3, #10
10004bc0:	e02d      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004bc2:	2309      	movs	r3, #9
10004bc4:	e02b      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004bc6:	2308      	movs	r3, #8
10004bc8:	e029      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004bca:	2307      	movs	r3, #7
10004bcc:	e027      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004bce:	2306      	movs	r3, #6
10004bd0:	e025      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004bd2:	2305      	movs	r3, #5
10004bd4:	e023      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004bd6:	2304      	movs	r3, #4
10004bd8:	e021      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004bda:	2303      	movs	r3, #3
10004bdc:	e01f      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004bde:	2302      	movs	r3, #2
10004be0:	e01d      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004be2:	2301      	movs	r3, #1
10004be4:	e01b      	b.n	10004c1e <HAL_GPIO_Init+0x26a>
10004be6:	bf00      	nop
10004be8:	5000d0c0 	.word	0x5000d0c0
10004bec:	5000d000 	.word	0x5000d000
10004bf0:	50002000 	.word	0x50002000
10004bf4:	50003000 	.word	0x50003000
10004bf8:	50004000 	.word	0x50004000
10004bfc:	50006000 	.word	0x50006000
10004c00:	50007000 	.word	0x50007000
10004c04:	50008000 	.word	0x50008000
10004c08:	50009000 	.word	0x50009000
10004c0c:	5000a000 	.word	0x5000a000
10004c10:	5000b000 	.word	0x5000b000
10004c14:	5000c000 	.word	0x5000c000
10004c18:	54004000 	.word	0x54004000
10004c1c:	2300      	movs	r3, #0
10004c1e:	69fa      	ldr	r2, [r7, #28]
10004c20:	f002 0203 	and.w	r2, r2, #3
10004c24:	00d2      	lsls	r2, r2, #3
10004c26:	4093      	lsls	r3, r2
10004c28:	461a      	mov	r2, r3
10004c2a:	69bb      	ldr	r3, [r7, #24]
10004c2c:	4313      	orrs	r3, r2
10004c2e:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10004c30:	4934      	ldr	r1, [pc, #208]	@ (10004d04 <HAL_GPIO_Init+0x350>)
10004c32:	69fb      	ldr	r3, [r7, #28]
10004c34:	089b      	lsrs	r3, r3, #2
10004c36:	3318      	adds	r3, #24
10004c38:	69ba      	ldr	r2, [r7, #24]
10004c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10004c3e:	697b      	ldr	r3, [r7, #20]
10004c40:	681b      	ldr	r3, [r3, #0]
10004c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10004c44:	68fb      	ldr	r3, [r7, #12]
10004c46:	43db      	mvns	r3, r3
10004c48:	69ba      	ldr	r2, [r7, #24]
10004c4a:	4013      	ands	r3, r2
10004c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10004c4e:	683b      	ldr	r3, [r7, #0]
10004c50:	685b      	ldr	r3, [r3, #4]
10004c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
10004c56:	2b00      	cmp	r3, #0
10004c58:	d003      	beq.n	10004c62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10004c5a:	69ba      	ldr	r2, [r7, #24]
10004c5c:	68fb      	ldr	r3, [r7, #12]
10004c5e:	4313      	orrs	r3, r2
10004c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10004c62:	697b      	ldr	r3, [r7, #20]
10004c64:	69ba      	ldr	r2, [r7, #24]
10004c66:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10004c68:	697b      	ldr	r3, [r7, #20]
10004c6a:	685b      	ldr	r3, [r3, #4]
10004c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10004c6e:	68fb      	ldr	r3, [r7, #12]
10004c70:	43db      	mvns	r3, r3
10004c72:	69ba      	ldr	r2, [r7, #24]
10004c74:	4013      	ands	r3, r2
10004c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10004c78:	683b      	ldr	r3, [r7, #0]
10004c7a:	685b      	ldr	r3, [r3, #4]
10004c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
10004c80:	2b00      	cmp	r3, #0
10004c82:	d003      	beq.n	10004c8c <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10004c84:	69ba      	ldr	r2, [r7, #24]
10004c86:	68fb      	ldr	r3, [r7, #12]
10004c88:	4313      	orrs	r3, r2
10004c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10004c8c:	697b      	ldr	r3, [r7, #20]
10004c8e:	69ba      	ldr	r2, [r7, #24]
10004c90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10004c92:	4b1c      	ldr	r3, [pc, #112]	@ (10004d04 <HAL_GPIO_Init+0x350>)
10004c94:	681b      	ldr	r3, [r3, #0]
10004c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10004c98:	68fb      	ldr	r3, [r7, #12]
10004c9a:	43db      	mvns	r3, r3
10004c9c:	69ba      	ldr	r2, [r7, #24]
10004c9e:	4013      	ands	r3, r2
10004ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10004ca2:	683b      	ldr	r3, [r7, #0]
10004ca4:	685b      	ldr	r3, [r3, #4]
10004ca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
10004caa:	2b00      	cmp	r3, #0
10004cac:	d003      	beq.n	10004cb6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10004cae:	69ba      	ldr	r2, [r7, #24]
10004cb0:	68fb      	ldr	r3, [r7, #12]
10004cb2:	4313      	orrs	r3, r2
10004cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10004cb6:	4a13      	ldr	r2, [pc, #76]	@ (10004d04 <HAL_GPIO_Init+0x350>)
10004cb8:	69bb      	ldr	r3, [r7, #24]
10004cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10004cbc:	4b11      	ldr	r3, [pc, #68]	@ (10004d04 <HAL_GPIO_Init+0x350>)
10004cbe:	685b      	ldr	r3, [r3, #4]
10004cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10004cc2:	68fb      	ldr	r3, [r7, #12]
10004cc4:	43db      	mvns	r3, r3
10004cc6:	69ba      	ldr	r2, [r7, #24]
10004cc8:	4013      	ands	r3, r2
10004cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10004ccc:	683b      	ldr	r3, [r7, #0]
10004cce:	685b      	ldr	r3, [r3, #4]
10004cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
10004cd4:	2b00      	cmp	r3, #0
10004cd6:	d003      	beq.n	10004ce0 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10004cd8:	69ba      	ldr	r2, [r7, #24]
10004cda:	68fb      	ldr	r3, [r7, #12]
10004cdc:	4313      	orrs	r3, r2
10004cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10004ce0:	4a08      	ldr	r2, [pc, #32]	@ (10004d04 <HAL_GPIO_Init+0x350>)
10004ce2:	69bb      	ldr	r3, [r7, #24]
10004ce4:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10004ce6:	69fb      	ldr	r3, [r7, #28]
10004ce8:	3301      	adds	r3, #1
10004cea:	61fb      	str	r3, [r7, #28]
10004cec:	69fb      	ldr	r3, [r7, #28]
10004cee:	2b0f      	cmp	r3, #15
10004cf0:	f67f ae6a 	bls.w	100049c8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10004cf4:	bf00      	nop
10004cf6:	bf00      	nop
10004cf8:	3724      	adds	r7, #36	@ 0x24
10004cfa:	46bd      	mov	sp, r7
10004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
10004d00:	4770      	bx	lr
10004d02:	bf00      	nop
10004d04:	5000d000 	.word	0x5000d000

10004d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10004d08:	b480      	push	{r7}
10004d0a:	b083      	sub	sp, #12
10004d0c:	af00      	add	r7, sp, #0
10004d0e:	6078      	str	r0, [r7, #4]
10004d10:	460b      	mov	r3, r1
10004d12:	807b      	strh	r3, [r7, #2]
10004d14:	4613      	mov	r3, r2
10004d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10004d18:	787b      	ldrb	r3, [r7, #1]
10004d1a:	2b00      	cmp	r3, #0
10004d1c:	d003      	beq.n	10004d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10004d1e:	887a      	ldrh	r2, [r7, #2]
10004d20:	687b      	ldr	r3, [r7, #4]
10004d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10004d24:	e003      	b.n	10004d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10004d26:	887b      	ldrh	r3, [r7, #2]
10004d28:	041a      	lsls	r2, r3, #16
10004d2a:	687b      	ldr	r3, [r7, #4]
10004d2c:	619a      	str	r2, [r3, #24]
}
10004d2e:	bf00      	nop
10004d30:	370c      	adds	r7, #12
10004d32:	46bd      	mov	sp, r7
10004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
10004d38:	4770      	bx	lr

10004d3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10004d3a:	b480      	push	{r7}
10004d3c:	b083      	sub	sp, #12
10004d3e:	af00      	add	r7, sp, #0
10004d40:	6078      	str	r0, [r7, #4]
10004d42:	460b      	mov	r3, r1
10004d44:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
10004d46:	687b      	ldr	r3, [r7, #4]
10004d48:	695a      	ldr	r2, [r3, #20]
10004d4a:	887b      	ldrh	r3, [r7, #2]
10004d4c:	4013      	ands	r3, r2
10004d4e:	2b00      	cmp	r3, #0
10004d50:	d003      	beq.n	10004d5a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10004d52:	887a      	ldrh	r2, [r7, #2]
10004d54:	687b      	ldr	r3, [r7, #4]
10004d56:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
10004d58:	e002      	b.n	10004d60 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10004d5a:	887a      	ldrh	r2, [r7, #2]
10004d5c:	687b      	ldr	r3, [r7, #4]
10004d5e:	619a      	str	r2, [r3, #24]
}
10004d60:	bf00      	nop
10004d62:	370c      	adds	r7, #12
10004d64:	46bd      	mov	sp, r7
10004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
10004d6a:	4770      	bx	lr

10004d6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
10004d6c:	b480      	push	{r7}
10004d6e:	b083      	sub	sp, #12
10004d70:	af00      	add	r7, sp, #0
10004d72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
10004d74:	f04f 4298 	mov.w	r2, #1275068416	@ 0x4c000000
10004d78:	687b      	ldr	r3, [r7, #4]
10004d7a:	3320      	adds	r3, #32
10004d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10004d80:	4a05      	ldr	r2, [pc, #20]	@ (10004d98 <HAL_HSEM_FastTake+0x2c>)
10004d82:	4293      	cmp	r3, r2
10004d84:	d101      	bne.n	10004d8a <HAL_HSEM_FastTake+0x1e>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
10004d86:	2300      	movs	r3, #0
10004d88:	e000      	b.n	10004d8c <HAL_HSEM_FastTake+0x20>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
10004d8a:	2301      	movs	r3, #1
}
10004d8c:	4618      	mov	r0, r3
10004d8e:	370c      	adds	r7, #12
10004d90:	46bd      	mov	sp, r7
10004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
10004d96:	4770      	bx	lr
10004d98:	80000200 	.word	0x80000200

10004d9c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
10004d9c:	b480      	push	{r7}
10004d9e:	b083      	sub	sp, #12
10004da0:	af00      	add	r7, sp, #0
10004da2:	6078      	str	r0, [r7, #4]
10004da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
10004da6:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
10004daa:	683b      	ldr	r3, [r7, #0]
10004dac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
10004db0:	687b      	ldr	r3, [r7, #4]
10004db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
10004db6:	bf00      	nop
10004db8:	370c      	adds	r7, #12
10004dba:	46bd      	mov	sp, r7
10004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
10004dc0:	4770      	bx	lr

10004dc2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
10004dc2:	b580      	push	{r7, lr}
10004dc4:	b082      	sub	sp, #8
10004dc6:	af00      	add	r7, sp, #0
10004dc8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
10004dca:	687b      	ldr	r3, [r7, #4]
10004dcc:	2b00      	cmp	r3, #0
10004dce:	d101      	bne.n	10004dd4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
10004dd0:	2301      	movs	r3, #1
10004dd2:	e081      	b.n	10004ed8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
10004dd4:	687b      	ldr	r3, [r7, #4]
10004dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10004dda:	b2db      	uxtb	r3, r3
10004ddc:	2b00      	cmp	r3, #0
10004dde:	d106      	bne.n	10004dee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
10004de0:	687b      	ldr	r3, [r7, #4]
10004de2:	2200      	movs	r2, #0
10004de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
10004de8:	6878      	ldr	r0, [r7, #4]
10004dea:	f7fd fb0b 	bl	10002404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
10004dee:	687b      	ldr	r3, [r7, #4]
10004df0:	2224      	movs	r2, #36	@ 0x24
10004df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
10004df6:	687b      	ldr	r3, [r7, #4]
10004df8:	681b      	ldr	r3, [r3, #0]
10004dfa:	681a      	ldr	r2, [r3, #0]
10004dfc:	687b      	ldr	r3, [r7, #4]
10004dfe:	681b      	ldr	r3, [r3, #0]
10004e00:	f022 0201 	bic.w	r2, r2, #1
10004e04:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
10004e06:	687b      	ldr	r3, [r7, #4]
10004e08:	685a      	ldr	r2, [r3, #4]
10004e0a:	687b      	ldr	r3, [r7, #4]
10004e0c:	681b      	ldr	r3, [r3, #0]
10004e0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
10004e12:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
10004e14:	687b      	ldr	r3, [r7, #4]
10004e16:	681b      	ldr	r3, [r3, #0]
10004e18:	689a      	ldr	r2, [r3, #8]
10004e1a:	687b      	ldr	r3, [r7, #4]
10004e1c:	681b      	ldr	r3, [r3, #0]
10004e1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
10004e22:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
10004e24:	687b      	ldr	r3, [r7, #4]
10004e26:	68db      	ldr	r3, [r3, #12]
10004e28:	2b01      	cmp	r3, #1
10004e2a:	d107      	bne.n	10004e3c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
10004e2c:	687b      	ldr	r3, [r7, #4]
10004e2e:	689a      	ldr	r2, [r3, #8]
10004e30:	687b      	ldr	r3, [r7, #4]
10004e32:	681b      	ldr	r3, [r3, #0]
10004e34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
10004e38:	609a      	str	r2, [r3, #8]
10004e3a:	e006      	b.n	10004e4a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
10004e3c:	687b      	ldr	r3, [r7, #4]
10004e3e:	689a      	ldr	r2, [r3, #8]
10004e40:	687b      	ldr	r3, [r7, #4]
10004e42:	681b      	ldr	r3, [r3, #0]
10004e44:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
10004e48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10004e4a:	687b      	ldr	r3, [r7, #4]
10004e4c:	68db      	ldr	r3, [r3, #12]
10004e4e:	2b02      	cmp	r3, #2
10004e50:	d104      	bne.n	10004e5c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
10004e52:	687b      	ldr	r3, [r7, #4]
10004e54:	681b      	ldr	r3, [r3, #0]
10004e56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
10004e5a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
10004e5c:	687b      	ldr	r3, [r7, #4]
10004e5e:	681b      	ldr	r3, [r3, #0]
10004e60:	685b      	ldr	r3, [r3, #4]
10004e62:	687a      	ldr	r2, [r7, #4]
10004e64:	6812      	ldr	r2, [r2, #0]
10004e66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
10004e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
10004e6e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
10004e70:	687b      	ldr	r3, [r7, #4]
10004e72:	681b      	ldr	r3, [r3, #0]
10004e74:	68da      	ldr	r2, [r3, #12]
10004e76:	687b      	ldr	r3, [r7, #4]
10004e78:	681b      	ldr	r3, [r3, #0]
10004e7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
10004e7e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
10004e80:	687b      	ldr	r3, [r7, #4]
10004e82:	691a      	ldr	r2, [r3, #16]
10004e84:	687b      	ldr	r3, [r7, #4]
10004e86:	695b      	ldr	r3, [r3, #20]
10004e88:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
10004e8c:	687b      	ldr	r3, [r7, #4]
10004e8e:	699b      	ldr	r3, [r3, #24]
10004e90:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
10004e92:	687b      	ldr	r3, [r7, #4]
10004e94:	681b      	ldr	r3, [r3, #0]
10004e96:	430a      	orrs	r2, r1
10004e98:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
10004e9a:	687b      	ldr	r3, [r7, #4]
10004e9c:	69d9      	ldr	r1, [r3, #28]
10004e9e:	687b      	ldr	r3, [r7, #4]
10004ea0:	6a1a      	ldr	r2, [r3, #32]
10004ea2:	687b      	ldr	r3, [r7, #4]
10004ea4:	681b      	ldr	r3, [r3, #0]
10004ea6:	430a      	orrs	r2, r1
10004ea8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
10004eaa:	687b      	ldr	r3, [r7, #4]
10004eac:	681b      	ldr	r3, [r3, #0]
10004eae:	681a      	ldr	r2, [r3, #0]
10004eb0:	687b      	ldr	r3, [r7, #4]
10004eb2:	681b      	ldr	r3, [r3, #0]
10004eb4:	f042 0201 	orr.w	r2, r2, #1
10004eb8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10004eba:	687b      	ldr	r3, [r7, #4]
10004ebc:	2200      	movs	r2, #0
10004ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
10004ec0:	687b      	ldr	r3, [r7, #4]
10004ec2:	2220      	movs	r2, #32
10004ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
10004ec8:	687b      	ldr	r3, [r7, #4]
10004eca:	2200      	movs	r2, #0
10004ecc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
10004ece:	687b      	ldr	r3, [r7, #4]
10004ed0:	2200      	movs	r2, #0
10004ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
10004ed6:	2300      	movs	r3, #0
}
10004ed8:	4618      	mov	r0, r3
10004eda:	3708      	adds	r7, #8
10004edc:	46bd      	mov	sp, r7
10004ede:	bd80      	pop	{r7, pc}

10004ee0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10004ee0:	b580      	push	{r7, lr}
10004ee2:	b088      	sub	sp, #32
10004ee4:	af02      	add	r7, sp, #8
10004ee6:	60f8      	str	r0, [r7, #12]
10004ee8:	4608      	mov	r0, r1
10004eea:	4611      	mov	r1, r2
10004eec:	461a      	mov	r2, r3
10004eee:	4603      	mov	r3, r0
10004ef0:	817b      	strh	r3, [r7, #10]
10004ef2:	460b      	mov	r3, r1
10004ef4:	813b      	strh	r3, [r7, #8]
10004ef6:	4613      	mov	r3, r2
10004ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10004efa:	68fb      	ldr	r3, [r7, #12]
10004efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10004f00:	b2db      	uxtb	r3, r3
10004f02:	2b20      	cmp	r3, #32
10004f04:	f040 80f9 	bne.w	100050fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
10004f08:	6a3b      	ldr	r3, [r7, #32]
10004f0a:	2b00      	cmp	r3, #0
10004f0c:	d002      	beq.n	10004f14 <HAL_I2C_Mem_Write+0x34>
10004f0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
10004f10:	2b00      	cmp	r3, #0
10004f12:	d105      	bne.n	10004f20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10004f14:	68fb      	ldr	r3, [r7, #12]
10004f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
10004f1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
10004f1c:	2301      	movs	r3, #1
10004f1e:	e0ed      	b.n	100050fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10004f20:	68fb      	ldr	r3, [r7, #12]
10004f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
10004f26:	2b01      	cmp	r3, #1
10004f28:	d101      	bne.n	10004f2e <HAL_I2C_Mem_Write+0x4e>
10004f2a:	2302      	movs	r3, #2
10004f2c:	e0e6      	b.n	100050fc <HAL_I2C_Mem_Write+0x21c>
10004f2e:	68fb      	ldr	r3, [r7, #12]
10004f30:	2201      	movs	r2, #1
10004f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
10004f36:	f7ff fa43 	bl	100043c0 <HAL_GetTick>
10004f3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
10004f3c:	697b      	ldr	r3, [r7, #20]
10004f3e:	9300      	str	r3, [sp, #0]
10004f40:	2319      	movs	r3, #25
10004f42:	2201      	movs	r2, #1
10004f44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
10004f48:	68f8      	ldr	r0, [r7, #12]
10004f4a:	f000 ffe2 	bl	10005f12 <I2C_WaitOnFlagUntilTimeout>
10004f4e:	4603      	mov	r3, r0
10004f50:	2b00      	cmp	r3, #0
10004f52:	d001      	beq.n	10004f58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
10004f54:	2301      	movs	r3, #1
10004f56:	e0d1      	b.n	100050fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
10004f58:	68fb      	ldr	r3, [r7, #12]
10004f5a:	2221      	movs	r2, #33	@ 0x21
10004f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
10004f60:	68fb      	ldr	r3, [r7, #12]
10004f62:	2240      	movs	r2, #64	@ 0x40
10004f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10004f68:	68fb      	ldr	r3, [r7, #12]
10004f6a:	2200      	movs	r2, #0
10004f6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
10004f6e:	68fb      	ldr	r3, [r7, #12]
10004f70:	6a3a      	ldr	r2, [r7, #32]
10004f72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
10004f74:	68fb      	ldr	r3, [r7, #12]
10004f76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
10004f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
10004f7a:	68fb      	ldr	r3, [r7, #12]
10004f7c:	2200      	movs	r2, #0
10004f7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
10004f80:	88f8      	ldrh	r0, [r7, #6]
10004f82:	893a      	ldrh	r2, [r7, #8]
10004f84:	8979      	ldrh	r1, [r7, #10]
10004f86:	697b      	ldr	r3, [r7, #20]
10004f88:	9301      	str	r3, [sp, #4]
10004f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10004f8c:	9300      	str	r3, [sp, #0]
10004f8e:	4603      	mov	r3, r0
10004f90:	68f8      	ldr	r0, [r7, #12]
10004f92:	f000 fb93 	bl	100056bc <I2C_RequestMemoryWrite>
10004f96:	4603      	mov	r3, r0
10004f98:	2b00      	cmp	r3, #0
10004f9a:	d005      	beq.n	10004fa8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10004f9c:	68fb      	ldr	r3, [r7, #12]
10004f9e:	2200      	movs	r2, #0
10004fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
10004fa4:	2301      	movs	r3, #1
10004fa6:	e0a9      	b.n	100050fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10004fa8:	68fb      	ldr	r3, [r7, #12]
10004faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10004fac:	b29b      	uxth	r3, r3
10004fae:	2bff      	cmp	r3, #255	@ 0xff
10004fb0:	d90e      	bls.n	10004fd0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10004fb2:	68fb      	ldr	r3, [r7, #12]
10004fb4:	22ff      	movs	r2, #255	@ 0xff
10004fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
10004fb8:	68fb      	ldr	r3, [r7, #12]
10004fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10004fbc:	b2da      	uxtb	r2, r3
10004fbe:	8979      	ldrh	r1, [r7, #10]
10004fc0:	2300      	movs	r3, #0
10004fc2:	9300      	str	r3, [sp, #0]
10004fc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
10004fc8:	68f8      	ldr	r0, [r7, #12]
10004fca:	f001 f94b 	bl	10006264 <I2C_TransferConfig>
10004fce:	e00f      	b.n	10004ff0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10004fd0:	68fb      	ldr	r3, [r7, #12]
10004fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10004fd4:	b29a      	uxth	r2, r3
10004fd6:	68fb      	ldr	r3, [r7, #12]
10004fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
10004fda:	68fb      	ldr	r3, [r7, #12]
10004fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10004fde:	b2da      	uxtb	r2, r3
10004fe0:	8979      	ldrh	r1, [r7, #10]
10004fe2:	2300      	movs	r3, #0
10004fe4:	9300      	str	r3, [sp, #0]
10004fe6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
10004fea:	68f8      	ldr	r0, [r7, #12]
10004fec:	f001 f93a 	bl	10006264 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
10004ff0:	697a      	ldr	r2, [r7, #20]
10004ff2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
10004ff4:	68f8      	ldr	r0, [r7, #12]
10004ff6:	f000 ffcc 	bl	10005f92 <I2C_WaitOnTXISFlagUntilTimeout>
10004ffa:	4603      	mov	r3, r0
10004ffc:	2b00      	cmp	r3, #0
10004ffe:	d001      	beq.n	10005004 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
10005000:	2301      	movs	r3, #1
10005002:	e07b      	b.n	100050fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10005004:	68fb      	ldr	r3, [r7, #12]
10005006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005008:	781a      	ldrb	r2, [r3, #0]
1000500a:	68fb      	ldr	r3, [r7, #12]
1000500c:	681b      	ldr	r3, [r3, #0]
1000500e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10005010:	68fb      	ldr	r3, [r7, #12]
10005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005014:	1c5a      	adds	r2, r3, #1
10005016:	68fb      	ldr	r3, [r7, #12]
10005018:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
1000501a:	68fb      	ldr	r3, [r7, #12]
1000501c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1000501e:	b29b      	uxth	r3, r3
10005020:	3b01      	subs	r3, #1
10005022:	b29a      	uxth	r2, r3
10005024:	68fb      	ldr	r3, [r7, #12]
10005026:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
10005028:	68fb      	ldr	r3, [r7, #12]
1000502a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1000502c:	3b01      	subs	r3, #1
1000502e:	b29a      	uxth	r2, r3
10005030:	68fb      	ldr	r3, [r7, #12]
10005032:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10005034:	68fb      	ldr	r3, [r7, #12]
10005036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10005038:	b29b      	uxth	r3, r3
1000503a:	2b00      	cmp	r3, #0
1000503c:	d034      	beq.n	100050a8 <HAL_I2C_Mem_Write+0x1c8>
1000503e:	68fb      	ldr	r3, [r7, #12]
10005040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10005042:	2b00      	cmp	r3, #0
10005044:	d130      	bne.n	100050a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
10005046:	697b      	ldr	r3, [r7, #20]
10005048:	9300      	str	r3, [sp, #0]
1000504a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000504c:	2200      	movs	r2, #0
1000504e:	2180      	movs	r1, #128	@ 0x80
10005050:	68f8      	ldr	r0, [r7, #12]
10005052:	f000 ff5e 	bl	10005f12 <I2C_WaitOnFlagUntilTimeout>
10005056:	4603      	mov	r3, r0
10005058:	2b00      	cmp	r3, #0
1000505a:	d001      	beq.n	10005060 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
1000505c:	2301      	movs	r3, #1
1000505e:	e04d      	b.n	100050fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
10005060:	68fb      	ldr	r3, [r7, #12]
10005062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10005064:	b29b      	uxth	r3, r3
10005066:	2bff      	cmp	r3, #255	@ 0xff
10005068:	d90e      	bls.n	10005088 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
1000506a:	68fb      	ldr	r3, [r7, #12]
1000506c:	22ff      	movs	r2, #255	@ 0xff
1000506e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
10005070:	68fb      	ldr	r3, [r7, #12]
10005072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10005074:	b2da      	uxtb	r2, r3
10005076:	8979      	ldrh	r1, [r7, #10]
10005078:	2300      	movs	r3, #0
1000507a:	9300      	str	r3, [sp, #0]
1000507c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
10005080:	68f8      	ldr	r0, [r7, #12]
10005082:	f001 f8ef 	bl	10006264 <I2C_TransferConfig>
10005086:	e00f      	b.n	100050a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
10005088:	68fb      	ldr	r3, [r7, #12]
1000508a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1000508c:	b29a      	uxth	r2, r3
1000508e:	68fb      	ldr	r3, [r7, #12]
10005090:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
10005092:	68fb      	ldr	r3, [r7, #12]
10005094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10005096:	b2da      	uxtb	r2, r3
10005098:	8979      	ldrh	r1, [r7, #10]
1000509a:	2300      	movs	r3, #0
1000509c:	9300      	str	r3, [sp, #0]
1000509e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
100050a2:	68f8      	ldr	r0, [r7, #12]
100050a4:	f001 f8de 	bl	10006264 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
100050a8:	68fb      	ldr	r3, [r7, #12]
100050aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100050ac:	b29b      	uxth	r3, r3
100050ae:	2b00      	cmp	r3, #0
100050b0:	d19e      	bne.n	10004ff0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
100050b2:	697a      	ldr	r2, [r7, #20]
100050b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
100050b6:	68f8      	ldr	r0, [r7, #12]
100050b8:	f000 ffab 	bl	10006012 <I2C_WaitOnSTOPFlagUntilTimeout>
100050bc:	4603      	mov	r3, r0
100050be:	2b00      	cmp	r3, #0
100050c0:	d001      	beq.n	100050c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
100050c2:	2301      	movs	r3, #1
100050c4:	e01a      	b.n	100050fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100050c6:	68fb      	ldr	r3, [r7, #12]
100050c8:	681b      	ldr	r3, [r3, #0]
100050ca:	2220      	movs	r2, #32
100050cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
100050ce:	68fb      	ldr	r3, [r7, #12]
100050d0:	681b      	ldr	r3, [r3, #0]
100050d2:	6859      	ldr	r1, [r3, #4]
100050d4:	68fb      	ldr	r3, [r7, #12]
100050d6:	681a      	ldr	r2, [r3, #0]
100050d8:	4b0a      	ldr	r3, [pc, #40]	@ (10005104 <HAL_I2C_Mem_Write+0x224>)
100050da:	400b      	ands	r3, r1
100050dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
100050de:	68fb      	ldr	r3, [r7, #12]
100050e0:	2220      	movs	r2, #32
100050e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
100050e6:	68fb      	ldr	r3, [r7, #12]
100050e8:	2200      	movs	r2, #0
100050ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
100050ee:	68fb      	ldr	r3, [r7, #12]
100050f0:	2200      	movs	r2, #0
100050f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
100050f6:	2300      	movs	r3, #0
100050f8:	e000      	b.n	100050fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
100050fa:	2302      	movs	r3, #2
  }
}
100050fc:	4618      	mov	r0, r3
100050fe:	3718      	adds	r7, #24
10005100:	46bd      	mov	sp, r7
10005102:	bd80      	pop	{r7, pc}
10005104:	fe00e800 	.word	0xfe00e800

10005108 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10005108:	b580      	push	{r7, lr}
1000510a:	b088      	sub	sp, #32
1000510c:	af02      	add	r7, sp, #8
1000510e:	60f8      	str	r0, [r7, #12]
10005110:	4608      	mov	r0, r1
10005112:	4611      	mov	r1, r2
10005114:	461a      	mov	r2, r3
10005116:	4603      	mov	r3, r0
10005118:	817b      	strh	r3, [r7, #10]
1000511a:	460b      	mov	r3, r1
1000511c:	813b      	strh	r3, [r7, #8]
1000511e:	4613      	mov	r3, r2
10005120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10005122:	68fb      	ldr	r3, [r7, #12]
10005124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10005128:	b2db      	uxtb	r3, r3
1000512a:	2b20      	cmp	r3, #32
1000512c:	f040 80fd 	bne.w	1000532a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
10005130:	6a3b      	ldr	r3, [r7, #32]
10005132:	2b00      	cmp	r3, #0
10005134:	d002      	beq.n	1000513c <HAL_I2C_Mem_Read+0x34>
10005136:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
10005138:	2b00      	cmp	r3, #0
1000513a:	d105      	bne.n	10005148 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
1000513c:	68fb      	ldr	r3, [r7, #12]
1000513e:	f44f 7200 	mov.w	r2, #512	@ 0x200
10005142:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
10005144:	2301      	movs	r3, #1
10005146:	e0f1      	b.n	1000532c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10005148:	68fb      	ldr	r3, [r7, #12]
1000514a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
1000514e:	2b01      	cmp	r3, #1
10005150:	d101      	bne.n	10005156 <HAL_I2C_Mem_Read+0x4e>
10005152:	2302      	movs	r3, #2
10005154:	e0ea      	b.n	1000532c <HAL_I2C_Mem_Read+0x224>
10005156:	68fb      	ldr	r3, [r7, #12]
10005158:	2201      	movs	r2, #1
1000515a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
1000515e:	f7ff f92f 	bl	100043c0 <HAL_GetTick>
10005162:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
10005164:	697b      	ldr	r3, [r7, #20]
10005166:	9300      	str	r3, [sp, #0]
10005168:	2319      	movs	r3, #25
1000516a:	2201      	movs	r2, #1
1000516c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
10005170:	68f8      	ldr	r0, [r7, #12]
10005172:	f000 fece 	bl	10005f12 <I2C_WaitOnFlagUntilTimeout>
10005176:	4603      	mov	r3, r0
10005178:	2b00      	cmp	r3, #0
1000517a:	d001      	beq.n	10005180 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
1000517c:	2301      	movs	r3, #1
1000517e:	e0d5      	b.n	1000532c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
10005180:	68fb      	ldr	r3, [r7, #12]
10005182:	2222      	movs	r2, #34	@ 0x22
10005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
10005188:	68fb      	ldr	r3, [r7, #12]
1000518a:	2240      	movs	r2, #64	@ 0x40
1000518c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10005190:	68fb      	ldr	r3, [r7, #12]
10005192:	2200      	movs	r2, #0
10005194:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
10005196:	68fb      	ldr	r3, [r7, #12]
10005198:	6a3a      	ldr	r2, [r7, #32]
1000519a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
1000519c:	68fb      	ldr	r3, [r7, #12]
1000519e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
100051a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
100051a2:	68fb      	ldr	r3, [r7, #12]
100051a4:	2200      	movs	r2, #0
100051a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
100051a8:	88f8      	ldrh	r0, [r7, #6]
100051aa:	893a      	ldrh	r2, [r7, #8]
100051ac:	8979      	ldrh	r1, [r7, #10]
100051ae:	697b      	ldr	r3, [r7, #20]
100051b0:	9301      	str	r3, [sp, #4]
100051b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100051b4:	9300      	str	r3, [sp, #0]
100051b6:	4603      	mov	r3, r0
100051b8:	68f8      	ldr	r0, [r7, #12]
100051ba:	f000 fad3 	bl	10005764 <I2C_RequestMemoryRead>
100051be:	4603      	mov	r3, r0
100051c0:	2b00      	cmp	r3, #0
100051c2:	d005      	beq.n	100051d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
100051c4:	68fb      	ldr	r3, [r7, #12]
100051c6:	2200      	movs	r2, #0
100051c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
100051cc:	2301      	movs	r3, #1
100051ce:	e0ad      	b.n	1000532c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
100051d0:	68fb      	ldr	r3, [r7, #12]
100051d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100051d4:	b29b      	uxth	r3, r3
100051d6:	2bff      	cmp	r3, #255	@ 0xff
100051d8:	d90e      	bls.n	100051f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
100051da:	68fb      	ldr	r3, [r7, #12]
100051dc:	22ff      	movs	r2, #255	@ 0xff
100051de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
100051e0:	68fb      	ldr	r3, [r7, #12]
100051e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100051e4:	b2da      	uxtb	r2, r3
100051e6:	8979      	ldrh	r1, [r7, #10]
100051e8:	4b52      	ldr	r3, [pc, #328]	@ (10005334 <HAL_I2C_Mem_Read+0x22c>)
100051ea:	9300      	str	r3, [sp, #0]
100051ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
100051f0:	68f8      	ldr	r0, [r7, #12]
100051f2:	f001 f837 	bl	10006264 <I2C_TransferConfig>
100051f6:	e00f      	b.n	10005218 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
100051f8:	68fb      	ldr	r3, [r7, #12]
100051fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100051fc:	b29a      	uxth	r2, r3
100051fe:	68fb      	ldr	r3, [r7, #12]
10005200:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
10005202:	68fb      	ldr	r3, [r7, #12]
10005204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10005206:	b2da      	uxtb	r2, r3
10005208:	8979      	ldrh	r1, [r7, #10]
1000520a:	4b4a      	ldr	r3, [pc, #296]	@ (10005334 <HAL_I2C_Mem_Read+0x22c>)
1000520c:	9300      	str	r3, [sp, #0]
1000520e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
10005212:	68f8      	ldr	r0, [r7, #12]
10005214:	f001 f826 	bl	10006264 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
10005218:	697b      	ldr	r3, [r7, #20]
1000521a:	9300      	str	r3, [sp, #0]
1000521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000521e:	2200      	movs	r2, #0
10005220:	2104      	movs	r1, #4
10005222:	68f8      	ldr	r0, [r7, #12]
10005224:	f000 fe75 	bl	10005f12 <I2C_WaitOnFlagUntilTimeout>
10005228:	4603      	mov	r3, r0
1000522a:	2b00      	cmp	r3, #0
1000522c:	d001      	beq.n	10005232 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
1000522e:	2301      	movs	r3, #1
10005230:	e07c      	b.n	1000532c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10005232:	68fb      	ldr	r3, [r7, #12]
10005234:	681b      	ldr	r3, [r3, #0]
10005236:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10005238:	68fb      	ldr	r3, [r7, #12]
1000523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000523c:	b2d2      	uxtb	r2, r2
1000523e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10005240:	68fb      	ldr	r3, [r7, #12]
10005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005244:	1c5a      	adds	r2, r3, #1
10005246:	68fb      	ldr	r3, [r7, #12]
10005248:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
1000524a:	68fb      	ldr	r3, [r7, #12]
1000524c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1000524e:	3b01      	subs	r3, #1
10005250:	b29a      	uxth	r2, r3
10005252:	68fb      	ldr	r3, [r7, #12]
10005254:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10005256:	68fb      	ldr	r3, [r7, #12]
10005258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1000525a:	b29b      	uxth	r3, r3
1000525c:	3b01      	subs	r3, #1
1000525e:	b29a      	uxth	r2, r3
10005260:	68fb      	ldr	r3, [r7, #12]
10005262:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10005264:	68fb      	ldr	r3, [r7, #12]
10005266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10005268:	b29b      	uxth	r3, r3
1000526a:	2b00      	cmp	r3, #0
1000526c:	d034      	beq.n	100052d8 <HAL_I2C_Mem_Read+0x1d0>
1000526e:	68fb      	ldr	r3, [r7, #12]
10005270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10005272:	2b00      	cmp	r3, #0
10005274:	d130      	bne.n	100052d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
10005276:	697b      	ldr	r3, [r7, #20]
10005278:	9300      	str	r3, [sp, #0]
1000527a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000527c:	2200      	movs	r2, #0
1000527e:	2180      	movs	r1, #128	@ 0x80
10005280:	68f8      	ldr	r0, [r7, #12]
10005282:	f000 fe46 	bl	10005f12 <I2C_WaitOnFlagUntilTimeout>
10005286:	4603      	mov	r3, r0
10005288:	2b00      	cmp	r3, #0
1000528a:	d001      	beq.n	10005290 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
1000528c:	2301      	movs	r3, #1
1000528e:	e04d      	b.n	1000532c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
10005290:	68fb      	ldr	r3, [r7, #12]
10005292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10005294:	b29b      	uxth	r3, r3
10005296:	2bff      	cmp	r3, #255	@ 0xff
10005298:	d90e      	bls.n	100052b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
1000529a:	68fb      	ldr	r3, [r7, #12]
1000529c:	22ff      	movs	r2, #255	@ 0xff
1000529e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
100052a0:	68fb      	ldr	r3, [r7, #12]
100052a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100052a4:	b2da      	uxtb	r2, r3
100052a6:	8979      	ldrh	r1, [r7, #10]
100052a8:	2300      	movs	r3, #0
100052aa:	9300      	str	r3, [sp, #0]
100052ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
100052b0:	68f8      	ldr	r0, [r7, #12]
100052b2:	f000 ffd7 	bl	10006264 <I2C_TransferConfig>
100052b6:	e00f      	b.n	100052d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
100052b8:	68fb      	ldr	r3, [r7, #12]
100052ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100052bc:	b29a      	uxth	r2, r3
100052be:	68fb      	ldr	r3, [r7, #12]
100052c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
100052c2:	68fb      	ldr	r3, [r7, #12]
100052c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100052c6:	b2da      	uxtb	r2, r3
100052c8:	8979      	ldrh	r1, [r7, #10]
100052ca:	2300      	movs	r3, #0
100052cc:	9300      	str	r3, [sp, #0]
100052ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
100052d2:	68f8      	ldr	r0, [r7, #12]
100052d4:	f000 ffc6 	bl	10006264 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
100052d8:	68fb      	ldr	r3, [r7, #12]
100052da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100052dc:	b29b      	uxth	r3, r3
100052de:	2b00      	cmp	r3, #0
100052e0:	d19a      	bne.n	10005218 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
100052e2:	697a      	ldr	r2, [r7, #20]
100052e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
100052e6:	68f8      	ldr	r0, [r7, #12]
100052e8:	f000 fe93 	bl	10006012 <I2C_WaitOnSTOPFlagUntilTimeout>
100052ec:	4603      	mov	r3, r0
100052ee:	2b00      	cmp	r3, #0
100052f0:	d001      	beq.n	100052f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
100052f2:	2301      	movs	r3, #1
100052f4:	e01a      	b.n	1000532c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100052f6:	68fb      	ldr	r3, [r7, #12]
100052f8:	681b      	ldr	r3, [r3, #0]
100052fa:	2220      	movs	r2, #32
100052fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
100052fe:	68fb      	ldr	r3, [r7, #12]
10005300:	681b      	ldr	r3, [r3, #0]
10005302:	6859      	ldr	r1, [r3, #4]
10005304:	68fb      	ldr	r3, [r7, #12]
10005306:	681a      	ldr	r2, [r3, #0]
10005308:	4b0b      	ldr	r3, [pc, #44]	@ (10005338 <HAL_I2C_Mem_Read+0x230>)
1000530a:	400b      	ands	r3, r1
1000530c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
1000530e:	68fb      	ldr	r3, [r7, #12]
10005310:	2220      	movs	r2, #32
10005312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
10005316:	68fb      	ldr	r3, [r7, #12]
10005318:	2200      	movs	r2, #0
1000531a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1000531e:	68fb      	ldr	r3, [r7, #12]
10005320:	2200      	movs	r2, #0
10005322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
10005326:	2300      	movs	r3, #0
10005328:	e000      	b.n	1000532c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
1000532a:	2302      	movs	r3, #2
  }
}
1000532c:	4618      	mov	r0, r3
1000532e:	3718      	adds	r7, #24
10005330:	46bd      	mov	sp, r7
10005332:	bd80      	pop	{r7, pc}
10005334:	80002400 	.word	0x80002400
10005338:	fe00e800 	.word	0xfe00e800

1000533c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
1000533c:	b580      	push	{r7, lr}
1000533e:	b084      	sub	sp, #16
10005340:	af00      	add	r7, sp, #0
10005342:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10005344:	687b      	ldr	r3, [r7, #4]
10005346:	681b      	ldr	r3, [r3, #0]
10005348:	699b      	ldr	r3, [r3, #24]
1000534a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
1000534c:	687b      	ldr	r3, [r7, #4]
1000534e:	681b      	ldr	r3, [r3, #0]
10005350:	681b      	ldr	r3, [r3, #0]
10005352:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
10005354:	687b      	ldr	r3, [r7, #4]
10005356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10005358:	2b00      	cmp	r3, #0
1000535a:	d005      	beq.n	10005368 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
1000535c:	687b      	ldr	r3, [r7, #4]
1000535e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10005360:	68ba      	ldr	r2, [r7, #8]
10005362:	68f9      	ldr	r1, [r7, #12]
10005364:	6878      	ldr	r0, [r7, #4]
10005366:	4798      	blx	r3
  }
}
10005368:	bf00      	nop
1000536a:	3710      	adds	r7, #16
1000536c:	46bd      	mov	sp, r7
1000536e:	bd80      	pop	{r7, pc}

10005370 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
10005370:	b580      	push	{r7, lr}
10005372:	b086      	sub	sp, #24
10005374:	af00      	add	r7, sp, #0
10005376:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10005378:	687b      	ldr	r3, [r7, #4]
1000537a:	681b      	ldr	r3, [r3, #0]
1000537c:	699b      	ldr	r3, [r3, #24]
1000537e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10005380:	687b      	ldr	r3, [r7, #4]
10005382:	681b      	ldr	r3, [r3, #0]
10005384:	681b      	ldr	r3, [r3, #0]
10005386:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10005388:	697b      	ldr	r3, [r7, #20]
1000538a:	0a1b      	lsrs	r3, r3, #8
1000538c:	f003 0301 	and.w	r3, r3, #1
10005390:	2b00      	cmp	r3, #0
10005392:	d010      	beq.n	100053b6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10005394:	693b      	ldr	r3, [r7, #16]
10005396:	09db      	lsrs	r3, r3, #7
10005398:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
1000539c:	2b00      	cmp	r3, #0
1000539e:	d00a      	beq.n	100053b6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
100053a0:	687b      	ldr	r3, [r7, #4]
100053a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100053a4:	f043 0201 	orr.w	r2, r3, #1
100053a8:	687b      	ldr	r3, [r7, #4]
100053aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
100053ac:	687b      	ldr	r3, [r7, #4]
100053ae:	681b      	ldr	r3, [r3, #0]
100053b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
100053b4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
100053b6:	697b      	ldr	r3, [r7, #20]
100053b8:	0a9b      	lsrs	r3, r3, #10
100053ba:	f003 0301 	and.w	r3, r3, #1
100053be:	2b00      	cmp	r3, #0
100053c0:	d010      	beq.n	100053e4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
100053c2:	693b      	ldr	r3, [r7, #16]
100053c4:	09db      	lsrs	r3, r3, #7
100053c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
100053ca:	2b00      	cmp	r3, #0
100053cc:	d00a      	beq.n	100053e4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
100053ce:	687b      	ldr	r3, [r7, #4]
100053d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100053d2:	f043 0208 	orr.w	r2, r3, #8
100053d6:	687b      	ldr	r3, [r7, #4]
100053d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
100053da:	687b      	ldr	r3, [r7, #4]
100053dc:	681b      	ldr	r3, [r3, #0]
100053de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
100053e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
100053e4:	697b      	ldr	r3, [r7, #20]
100053e6:	0a5b      	lsrs	r3, r3, #9
100053e8:	f003 0301 	and.w	r3, r3, #1
100053ec:	2b00      	cmp	r3, #0
100053ee:	d010      	beq.n	10005412 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
100053f0:	693b      	ldr	r3, [r7, #16]
100053f2:	09db      	lsrs	r3, r3, #7
100053f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
100053f8:	2b00      	cmp	r3, #0
100053fa:	d00a      	beq.n	10005412 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
100053fc:	687b      	ldr	r3, [r7, #4]
100053fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10005400:	f043 0202 	orr.w	r2, r3, #2
10005404:	687b      	ldr	r3, [r7, #4]
10005406:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
10005408:	687b      	ldr	r3, [r7, #4]
1000540a:	681b      	ldr	r3, [r3, #0]
1000540c:	f44f 7200 	mov.w	r2, #512	@ 0x200
10005410:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
10005412:	687b      	ldr	r3, [r7, #4]
10005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10005416:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
10005418:	68fb      	ldr	r3, [r7, #12]
1000541a:	f003 030b 	and.w	r3, r3, #11
1000541e:	2b00      	cmp	r3, #0
10005420:	d003      	beq.n	1000542a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
10005422:	68f9      	ldr	r1, [r7, #12]
10005424:	6878      	ldr	r0, [r7, #4]
10005426:	f000 fc33 	bl	10005c90 <I2C_ITError>
  }
}
1000542a:	bf00      	nop
1000542c:	3718      	adds	r7, #24
1000542e:	46bd      	mov	sp, r7
10005430:	bd80      	pop	{r7, pc}

10005432 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10005432:	b480      	push	{r7}
10005434:	b083      	sub	sp, #12
10005436:	af00      	add	r7, sp, #0
10005438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
1000543a:	bf00      	nop
1000543c:	370c      	adds	r7, #12
1000543e:	46bd      	mov	sp, r7
10005440:	f85d 7b04 	ldr.w	r7, [sp], #4
10005444:	4770      	bx	lr

10005446 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10005446:	b480      	push	{r7}
10005448:	b083      	sub	sp, #12
1000544a:	af00      	add	r7, sp, #0
1000544c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
1000544e:	bf00      	nop
10005450:	370c      	adds	r7, #12
10005452:	46bd      	mov	sp, r7
10005454:	f85d 7b04 	ldr.w	r7, [sp], #4
10005458:	4770      	bx	lr

1000545a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
1000545a:	b480      	push	{r7}
1000545c:	b083      	sub	sp, #12
1000545e:	af00      	add	r7, sp, #0
10005460:	6078      	str	r0, [r7, #4]
10005462:	460b      	mov	r3, r1
10005464:	70fb      	strb	r3, [r7, #3]
10005466:	4613      	mov	r3, r2
10005468:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
1000546a:	bf00      	nop
1000546c:	370c      	adds	r7, #12
1000546e:	46bd      	mov	sp, r7
10005470:	f85d 7b04 	ldr.w	r7, [sp], #4
10005474:	4770      	bx	lr

10005476 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
10005476:	b480      	push	{r7}
10005478:	b083      	sub	sp, #12
1000547a:	af00      	add	r7, sp, #0
1000547c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
1000547e:	bf00      	nop
10005480:	370c      	adds	r7, #12
10005482:	46bd      	mov	sp, r7
10005484:	f85d 7b04 	ldr.w	r7, [sp], #4
10005488:	4770      	bx	lr

1000548a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
1000548a:	b480      	push	{r7}
1000548c:	b083      	sub	sp, #12
1000548e:	af00      	add	r7, sp, #0
10005490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
10005492:	bf00      	nop
10005494:	370c      	adds	r7, #12
10005496:	46bd      	mov	sp, r7
10005498:	f85d 7b04 	ldr.w	r7, [sp], #4
1000549c:	4770      	bx	lr

1000549e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
1000549e:	b480      	push	{r7}
100054a0:	b083      	sub	sp, #12
100054a2:	af00      	add	r7, sp, #0
100054a4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
100054a6:	687b      	ldr	r3, [r7, #4]
100054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
100054aa:	4618      	mov	r0, r3
100054ac:	370c      	adds	r7, #12
100054ae:	46bd      	mov	sp, r7
100054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
100054b4:	4770      	bx	lr

100054b6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
100054b6:	b580      	push	{r7, lr}
100054b8:	b086      	sub	sp, #24
100054ba:	af00      	add	r7, sp, #0
100054bc:	60f8      	str	r0, [r7, #12]
100054be:	60b9      	str	r1, [r7, #8]
100054c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
100054c2:	68fb      	ldr	r3, [r7, #12]
100054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100054c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
100054c8:	68bb      	ldr	r3, [r7, #8]
100054ca:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
100054cc:	68fb      	ldr	r3, [r7, #12]
100054ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
100054d2:	2b01      	cmp	r3, #1
100054d4:	d101      	bne.n	100054da <I2C_Slave_ISR_IT+0x24>
100054d6:	2302      	movs	r3, #2
100054d8:	e0ec      	b.n	100056b4 <I2C_Slave_ISR_IT+0x1fe>
100054da:	68fb      	ldr	r3, [r7, #12]
100054dc:	2201      	movs	r2, #1
100054de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
100054e2:	693b      	ldr	r3, [r7, #16]
100054e4:	095b      	lsrs	r3, r3, #5
100054e6:	f003 0301 	and.w	r3, r3, #1
100054ea:	2b00      	cmp	r3, #0
100054ec:	d009      	beq.n	10005502 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
100054ee:	687b      	ldr	r3, [r7, #4]
100054f0:	095b      	lsrs	r3, r3, #5
100054f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
100054f6:	2b00      	cmp	r3, #0
100054f8:	d003      	beq.n	10005502 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
100054fa:	6939      	ldr	r1, [r7, #16]
100054fc:	68f8      	ldr	r0, [r7, #12]
100054fe:	f000 fa67 	bl	100059d0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10005502:	693b      	ldr	r3, [r7, #16]
10005504:	091b      	lsrs	r3, r3, #4
10005506:	f003 0301 	and.w	r3, r3, #1
1000550a:	2b00      	cmp	r3, #0
1000550c:	d04d      	beq.n	100055aa <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
1000550e:	687b      	ldr	r3, [r7, #4]
10005510:	091b      	lsrs	r3, r3, #4
10005512:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10005516:	2b00      	cmp	r3, #0
10005518:	d047      	beq.n	100055aa <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
1000551a:	68fb      	ldr	r3, [r7, #12]
1000551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1000551e:	b29b      	uxth	r3, r3
10005520:	2b00      	cmp	r3, #0
10005522:	d128      	bne.n	10005576 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10005524:	68fb      	ldr	r3, [r7, #12]
10005526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
1000552a:	b2db      	uxtb	r3, r3
1000552c:	2b28      	cmp	r3, #40	@ 0x28
1000552e:	d108      	bne.n	10005542 <I2C_Slave_ISR_IT+0x8c>
10005530:	697b      	ldr	r3, [r7, #20]
10005532:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
10005536:	d104      	bne.n	10005542 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10005538:	6939      	ldr	r1, [r7, #16]
1000553a:	68f8      	ldr	r0, [r7, #12]
1000553c:	f000 fb52 	bl	10005be4 <I2C_ITListenCplt>
10005540:	e032      	b.n	100055a8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10005542:	68fb      	ldr	r3, [r7, #12]
10005544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10005548:	b2db      	uxtb	r3, r3
1000554a:	2b29      	cmp	r3, #41	@ 0x29
1000554c:	d10e      	bne.n	1000556c <I2C_Slave_ISR_IT+0xb6>
1000554e:	697b      	ldr	r3, [r7, #20]
10005550:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
10005554:	d00a      	beq.n	1000556c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10005556:	68fb      	ldr	r3, [r7, #12]
10005558:	681b      	ldr	r3, [r3, #0]
1000555a:	2210      	movs	r2, #16
1000555c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
1000555e:	68f8      	ldr	r0, [r7, #12]
10005560:	f000 fc95 	bl	10005e8e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10005564:	68f8      	ldr	r0, [r7, #12]
10005566:	f000 f9d5 	bl	10005914 <I2C_ITSlaveSeqCplt>
1000556a:	e01d      	b.n	100055a8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1000556c:	68fb      	ldr	r3, [r7, #12]
1000556e:	681b      	ldr	r3, [r3, #0]
10005570:	2210      	movs	r2, #16
10005572:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
10005574:	e096      	b.n	100056a4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10005576:	68fb      	ldr	r3, [r7, #12]
10005578:	681b      	ldr	r3, [r3, #0]
1000557a:	2210      	movs	r2, #16
1000557c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1000557e:	68fb      	ldr	r3, [r7, #12]
10005580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10005582:	f043 0204 	orr.w	r2, r3, #4
10005586:	68fb      	ldr	r3, [r7, #12]
10005588:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
1000558a:	697b      	ldr	r3, [r7, #20]
1000558c:	2b00      	cmp	r3, #0
1000558e:	d004      	beq.n	1000559a <I2C_Slave_ISR_IT+0xe4>
10005590:	697b      	ldr	r3, [r7, #20]
10005592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10005596:	f040 8085 	bne.w	100056a4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
1000559a:	68fb      	ldr	r3, [r7, #12]
1000559c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1000559e:	4619      	mov	r1, r3
100055a0:	68f8      	ldr	r0, [r7, #12]
100055a2:	f000 fb75 	bl	10005c90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
100055a6:	e07d      	b.n	100056a4 <I2C_Slave_ISR_IT+0x1ee>
100055a8:	e07c      	b.n	100056a4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100055aa:	693b      	ldr	r3, [r7, #16]
100055ac:	089b      	lsrs	r3, r3, #2
100055ae:	f003 0301 	and.w	r3, r3, #1
100055b2:	2b00      	cmp	r3, #0
100055b4:	d030      	beq.n	10005618 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
100055b6:	687b      	ldr	r3, [r7, #4]
100055b8:	089b      	lsrs	r3, r3, #2
100055ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100055be:	2b00      	cmp	r3, #0
100055c0:	d02a      	beq.n	10005618 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
100055c2:	68fb      	ldr	r3, [r7, #12]
100055c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100055c6:	b29b      	uxth	r3, r3
100055c8:	2b00      	cmp	r3, #0
100055ca:	d018      	beq.n	100055fe <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100055cc:	68fb      	ldr	r3, [r7, #12]
100055ce:	681b      	ldr	r3, [r3, #0]
100055d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100055d2:	68fb      	ldr	r3, [r7, #12]
100055d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100055d6:	b2d2      	uxtb	r2, r2
100055d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100055da:	68fb      	ldr	r3, [r7, #12]
100055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100055de:	1c5a      	adds	r2, r3, #1
100055e0:	68fb      	ldr	r3, [r7, #12]
100055e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
100055e4:	68fb      	ldr	r3, [r7, #12]
100055e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100055e8:	3b01      	subs	r3, #1
100055ea:	b29a      	uxth	r2, r3
100055ec:	68fb      	ldr	r3, [r7, #12]
100055ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
100055f0:	68fb      	ldr	r3, [r7, #12]
100055f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100055f4:	b29b      	uxth	r3, r3
100055f6:	3b01      	subs	r3, #1
100055f8:	b29a      	uxth	r2, r3
100055fa:	68fb      	ldr	r3, [r7, #12]
100055fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
100055fe:	68fb      	ldr	r3, [r7, #12]
10005600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10005602:	b29b      	uxth	r3, r3
10005604:	2b00      	cmp	r3, #0
10005606:	d14f      	bne.n	100056a8 <I2C_Slave_ISR_IT+0x1f2>
10005608:	697b      	ldr	r3, [r7, #20]
1000560a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
1000560e:	d04b      	beq.n	100056a8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
10005610:	68f8      	ldr	r0, [r7, #12]
10005612:	f000 f97f 	bl	10005914 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
10005616:	e047      	b.n	100056a8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10005618:	693b      	ldr	r3, [r7, #16]
1000561a:	08db      	lsrs	r3, r3, #3
1000561c:	f003 0301 	and.w	r3, r3, #1
10005620:	2b00      	cmp	r3, #0
10005622:	d00a      	beq.n	1000563a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10005624:	687b      	ldr	r3, [r7, #4]
10005626:	08db      	lsrs	r3, r3, #3
10005628:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
1000562c:	2b00      	cmp	r3, #0
1000562e:	d004      	beq.n	1000563a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
10005630:	6939      	ldr	r1, [r7, #16]
10005632:	68f8      	ldr	r0, [r7, #12]
10005634:	f000 f8ea 	bl	1000580c <I2C_ITAddrCplt>
10005638:	e037      	b.n	100056aa <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
1000563a:	693b      	ldr	r3, [r7, #16]
1000563c:	085b      	lsrs	r3, r3, #1
1000563e:	f003 0301 	and.w	r3, r3, #1
10005642:	2b00      	cmp	r3, #0
10005644:	d031      	beq.n	100056aa <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10005646:	687b      	ldr	r3, [r7, #4]
10005648:	085b      	lsrs	r3, r3, #1
1000564a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
1000564e:	2b00      	cmp	r3, #0
10005650:	d02b      	beq.n	100056aa <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
10005652:	68fb      	ldr	r3, [r7, #12]
10005654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10005656:	b29b      	uxth	r3, r3
10005658:	2b00      	cmp	r3, #0
1000565a:	d018      	beq.n	1000568e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
1000565c:	68fb      	ldr	r3, [r7, #12]
1000565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005660:	781a      	ldrb	r2, [r3, #0]
10005662:	68fb      	ldr	r3, [r7, #12]
10005664:	681b      	ldr	r3, [r3, #0]
10005666:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10005668:	68fb      	ldr	r3, [r7, #12]
1000566a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000566c:	1c5a      	adds	r2, r3, #1
1000566e:	68fb      	ldr	r3, [r7, #12]
10005670:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
10005672:	68fb      	ldr	r3, [r7, #12]
10005674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10005676:	b29b      	uxth	r3, r3
10005678:	3b01      	subs	r3, #1
1000567a:	b29a      	uxth	r2, r3
1000567c:	68fb      	ldr	r3, [r7, #12]
1000567e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
10005680:	68fb      	ldr	r3, [r7, #12]
10005682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10005684:	3b01      	subs	r3, #1
10005686:	b29a      	uxth	r2, r3
10005688:	68fb      	ldr	r3, [r7, #12]
1000568a:	851a      	strh	r2, [r3, #40]	@ 0x28
1000568c:	e00d      	b.n	100056aa <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
1000568e:	697b      	ldr	r3, [r7, #20]
10005690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10005694:	d002      	beq.n	1000569c <I2C_Slave_ISR_IT+0x1e6>
10005696:	697b      	ldr	r3, [r7, #20]
10005698:	2b00      	cmp	r3, #0
1000569a:	d106      	bne.n	100056aa <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
1000569c:	68f8      	ldr	r0, [r7, #12]
1000569e:	f000 f939 	bl	10005914 <I2C_ITSlaveSeqCplt>
100056a2:	e002      	b.n	100056aa <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
100056a4:	bf00      	nop
100056a6:	e000      	b.n	100056aa <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
100056a8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
100056aa:	68fb      	ldr	r3, [r7, #12]
100056ac:	2200      	movs	r2, #0
100056ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
100056b2:	2300      	movs	r3, #0
}
100056b4:	4618      	mov	r0, r3
100056b6:	3718      	adds	r7, #24
100056b8:	46bd      	mov	sp, r7
100056ba:	bd80      	pop	{r7, pc}

100056bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
100056bc:	b580      	push	{r7, lr}
100056be:	b086      	sub	sp, #24
100056c0:	af02      	add	r7, sp, #8
100056c2:	60f8      	str	r0, [r7, #12]
100056c4:	4608      	mov	r0, r1
100056c6:	4611      	mov	r1, r2
100056c8:	461a      	mov	r2, r3
100056ca:	4603      	mov	r3, r0
100056cc:	817b      	strh	r3, [r7, #10]
100056ce:	460b      	mov	r3, r1
100056d0:	813b      	strh	r3, [r7, #8]
100056d2:	4613      	mov	r3, r2
100056d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
100056d6:	88fb      	ldrh	r3, [r7, #6]
100056d8:	b2da      	uxtb	r2, r3
100056da:	8979      	ldrh	r1, [r7, #10]
100056dc:	4b20      	ldr	r3, [pc, #128]	@ (10005760 <I2C_RequestMemoryWrite+0xa4>)
100056de:	9300      	str	r3, [sp, #0]
100056e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
100056e4:	68f8      	ldr	r0, [r7, #12]
100056e6:	f000 fdbd 	bl	10006264 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
100056ea:	69fa      	ldr	r2, [r7, #28]
100056ec:	69b9      	ldr	r1, [r7, #24]
100056ee:	68f8      	ldr	r0, [r7, #12]
100056f0:	f000 fc4f 	bl	10005f92 <I2C_WaitOnTXISFlagUntilTimeout>
100056f4:	4603      	mov	r3, r0
100056f6:	2b00      	cmp	r3, #0
100056f8:	d001      	beq.n	100056fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
100056fa:	2301      	movs	r3, #1
100056fc:	e02c      	b.n	10005758 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
100056fe:	88fb      	ldrh	r3, [r7, #6]
10005700:	2b01      	cmp	r3, #1
10005702:	d105      	bne.n	10005710 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10005704:	893b      	ldrh	r3, [r7, #8]
10005706:	b2da      	uxtb	r2, r3
10005708:	68fb      	ldr	r3, [r7, #12]
1000570a:	681b      	ldr	r3, [r3, #0]
1000570c:	629a      	str	r2, [r3, #40]	@ 0x28
1000570e:	e015      	b.n	1000573c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10005710:	893b      	ldrh	r3, [r7, #8]
10005712:	0a1b      	lsrs	r3, r3, #8
10005714:	b29b      	uxth	r3, r3
10005716:	b2da      	uxtb	r2, r3
10005718:	68fb      	ldr	r3, [r7, #12]
1000571a:	681b      	ldr	r3, [r3, #0]
1000571c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
1000571e:	69fa      	ldr	r2, [r7, #28]
10005720:	69b9      	ldr	r1, [r7, #24]
10005722:	68f8      	ldr	r0, [r7, #12]
10005724:	f000 fc35 	bl	10005f92 <I2C_WaitOnTXISFlagUntilTimeout>
10005728:	4603      	mov	r3, r0
1000572a:	2b00      	cmp	r3, #0
1000572c:	d001      	beq.n	10005732 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
1000572e:	2301      	movs	r3, #1
10005730:	e012      	b.n	10005758 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10005732:	893b      	ldrh	r3, [r7, #8]
10005734:	b2da      	uxtb	r2, r3
10005736:	68fb      	ldr	r3, [r7, #12]
10005738:	681b      	ldr	r3, [r3, #0]
1000573a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
1000573c:	69fb      	ldr	r3, [r7, #28]
1000573e:	9300      	str	r3, [sp, #0]
10005740:	69bb      	ldr	r3, [r7, #24]
10005742:	2200      	movs	r2, #0
10005744:	2180      	movs	r1, #128	@ 0x80
10005746:	68f8      	ldr	r0, [r7, #12]
10005748:	f000 fbe3 	bl	10005f12 <I2C_WaitOnFlagUntilTimeout>
1000574c:	4603      	mov	r3, r0
1000574e:	2b00      	cmp	r3, #0
10005750:	d001      	beq.n	10005756 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
10005752:	2301      	movs	r3, #1
10005754:	e000      	b.n	10005758 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
10005756:	2300      	movs	r3, #0
}
10005758:	4618      	mov	r0, r3
1000575a:	3710      	adds	r7, #16
1000575c:	46bd      	mov	sp, r7
1000575e:	bd80      	pop	{r7, pc}
10005760:	80002000 	.word	0x80002000

10005764 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
10005764:	b580      	push	{r7, lr}
10005766:	b086      	sub	sp, #24
10005768:	af02      	add	r7, sp, #8
1000576a:	60f8      	str	r0, [r7, #12]
1000576c:	4608      	mov	r0, r1
1000576e:	4611      	mov	r1, r2
10005770:	461a      	mov	r2, r3
10005772:	4603      	mov	r3, r0
10005774:	817b      	strh	r3, [r7, #10]
10005776:	460b      	mov	r3, r1
10005778:	813b      	strh	r3, [r7, #8]
1000577a:	4613      	mov	r3, r2
1000577c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
1000577e:	88fb      	ldrh	r3, [r7, #6]
10005780:	b2da      	uxtb	r2, r3
10005782:	8979      	ldrh	r1, [r7, #10]
10005784:	4b20      	ldr	r3, [pc, #128]	@ (10005808 <I2C_RequestMemoryRead+0xa4>)
10005786:	9300      	str	r3, [sp, #0]
10005788:	2300      	movs	r3, #0
1000578a:	68f8      	ldr	r0, [r7, #12]
1000578c:	f000 fd6a 	bl	10006264 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10005790:	69fa      	ldr	r2, [r7, #28]
10005792:	69b9      	ldr	r1, [r7, #24]
10005794:	68f8      	ldr	r0, [r7, #12]
10005796:	f000 fbfc 	bl	10005f92 <I2C_WaitOnTXISFlagUntilTimeout>
1000579a:	4603      	mov	r3, r0
1000579c:	2b00      	cmp	r3, #0
1000579e:	d001      	beq.n	100057a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
100057a0:	2301      	movs	r3, #1
100057a2:	e02c      	b.n	100057fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
100057a4:	88fb      	ldrh	r3, [r7, #6]
100057a6:	2b01      	cmp	r3, #1
100057a8:	d105      	bne.n	100057b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
100057aa:	893b      	ldrh	r3, [r7, #8]
100057ac:	b2da      	uxtb	r2, r3
100057ae:	68fb      	ldr	r3, [r7, #12]
100057b0:	681b      	ldr	r3, [r3, #0]
100057b2:	629a      	str	r2, [r3, #40]	@ 0x28
100057b4:	e015      	b.n	100057e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
100057b6:	893b      	ldrh	r3, [r7, #8]
100057b8:	0a1b      	lsrs	r3, r3, #8
100057ba:	b29b      	uxth	r3, r3
100057bc:	b2da      	uxtb	r2, r3
100057be:	68fb      	ldr	r3, [r7, #12]
100057c0:	681b      	ldr	r3, [r3, #0]
100057c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
100057c4:	69fa      	ldr	r2, [r7, #28]
100057c6:	69b9      	ldr	r1, [r7, #24]
100057c8:	68f8      	ldr	r0, [r7, #12]
100057ca:	f000 fbe2 	bl	10005f92 <I2C_WaitOnTXISFlagUntilTimeout>
100057ce:	4603      	mov	r3, r0
100057d0:	2b00      	cmp	r3, #0
100057d2:	d001      	beq.n	100057d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
100057d4:	2301      	movs	r3, #1
100057d6:	e012      	b.n	100057fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
100057d8:	893b      	ldrh	r3, [r7, #8]
100057da:	b2da      	uxtb	r2, r3
100057dc:	68fb      	ldr	r3, [r7, #12]
100057de:	681b      	ldr	r3, [r3, #0]
100057e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
100057e2:	69fb      	ldr	r3, [r7, #28]
100057e4:	9300      	str	r3, [sp, #0]
100057e6:	69bb      	ldr	r3, [r7, #24]
100057e8:	2200      	movs	r2, #0
100057ea:	2140      	movs	r1, #64	@ 0x40
100057ec:	68f8      	ldr	r0, [r7, #12]
100057ee:	f000 fb90 	bl	10005f12 <I2C_WaitOnFlagUntilTimeout>
100057f2:	4603      	mov	r3, r0
100057f4:	2b00      	cmp	r3, #0
100057f6:	d001      	beq.n	100057fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
100057f8:	2301      	movs	r3, #1
100057fa:	e000      	b.n	100057fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
100057fc:	2300      	movs	r3, #0
}
100057fe:	4618      	mov	r0, r3
10005800:	3710      	adds	r7, #16
10005802:	46bd      	mov	sp, r7
10005804:	bd80      	pop	{r7, pc}
10005806:	bf00      	nop
10005808:	80002000 	.word	0x80002000

1000580c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
1000580c:	b580      	push	{r7, lr}
1000580e:	b084      	sub	sp, #16
10005810:	af00      	add	r7, sp, #0
10005812:	6078      	str	r0, [r7, #4]
10005814:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
10005816:	687b      	ldr	r3, [r7, #4]
10005818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
1000581c:	b2db      	uxtb	r3, r3
1000581e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
10005822:	2b28      	cmp	r3, #40	@ 0x28
10005824:	d16a      	bne.n	100058fc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
10005826:	687b      	ldr	r3, [r7, #4]
10005828:	681b      	ldr	r3, [r3, #0]
1000582a:	699b      	ldr	r3, [r3, #24]
1000582c:	0c1b      	lsrs	r3, r3, #16
1000582e:	b2db      	uxtb	r3, r3
10005830:	f003 0301 	and.w	r3, r3, #1
10005834:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
10005836:	687b      	ldr	r3, [r7, #4]
10005838:	681b      	ldr	r3, [r3, #0]
1000583a:	699b      	ldr	r3, [r3, #24]
1000583c:	0c1b      	lsrs	r3, r3, #16
1000583e:	b29b      	uxth	r3, r3
10005840:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
10005844:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
10005846:	687b      	ldr	r3, [r7, #4]
10005848:	681b      	ldr	r3, [r3, #0]
1000584a:	689b      	ldr	r3, [r3, #8]
1000584c:	b29b      	uxth	r3, r3
1000584e:	f3c3 0309 	ubfx	r3, r3, #0, #10
10005852:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
10005854:	687b      	ldr	r3, [r7, #4]
10005856:	681b      	ldr	r3, [r3, #0]
10005858:	68db      	ldr	r3, [r3, #12]
1000585a:	b29b      	uxth	r3, r3
1000585c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
10005860:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10005862:	687b      	ldr	r3, [r7, #4]
10005864:	68db      	ldr	r3, [r3, #12]
10005866:	2b02      	cmp	r3, #2
10005868:	d138      	bne.n	100058dc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
1000586a:	897b      	ldrh	r3, [r7, #10]
1000586c:	09db      	lsrs	r3, r3, #7
1000586e:	b29a      	uxth	r2, r3
10005870:	89bb      	ldrh	r3, [r7, #12]
10005872:	4053      	eors	r3, r2
10005874:	b29b      	uxth	r3, r3
10005876:	f003 0306 	and.w	r3, r3, #6
1000587a:	2b00      	cmp	r3, #0
1000587c:	d11c      	bne.n	100058b8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
1000587e:	897b      	ldrh	r3, [r7, #10]
10005880:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
10005882:	687b      	ldr	r3, [r7, #4]
10005884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10005886:	1c5a      	adds	r2, r3, #1
10005888:	687b      	ldr	r3, [r7, #4]
1000588a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
1000588c:	687b      	ldr	r3, [r7, #4]
1000588e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10005890:	2b02      	cmp	r3, #2
10005892:	d13b      	bne.n	1000590c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
10005894:	687b      	ldr	r3, [r7, #4]
10005896:	2200      	movs	r2, #0
10005898:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
1000589a:	687b      	ldr	r3, [r7, #4]
1000589c:	681b      	ldr	r3, [r3, #0]
1000589e:	2208      	movs	r2, #8
100058a0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
100058a2:	687b      	ldr	r3, [r7, #4]
100058a4:	2200      	movs	r2, #0
100058a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
100058aa:	89ba      	ldrh	r2, [r7, #12]
100058ac:	7bfb      	ldrb	r3, [r7, #15]
100058ae:	4619      	mov	r1, r3
100058b0:	6878      	ldr	r0, [r7, #4]
100058b2:	f7ff fdd2 	bl	1000545a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
100058b6:	e029      	b.n	1000590c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
100058b8:	893b      	ldrh	r3, [r7, #8]
100058ba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
100058bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
100058c0:	6878      	ldr	r0, [r7, #4]
100058c2:	f000 fd01 	bl	100062c8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
100058c6:	687b      	ldr	r3, [r7, #4]
100058c8:	2200      	movs	r2, #0
100058ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
100058ce:	89ba      	ldrh	r2, [r7, #12]
100058d0:	7bfb      	ldrb	r3, [r7, #15]
100058d2:	4619      	mov	r1, r3
100058d4:	6878      	ldr	r0, [r7, #4]
100058d6:	f7ff fdc0 	bl	1000545a <HAL_I2C_AddrCallback>
}
100058da:	e017      	b.n	1000590c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
100058dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
100058e0:	6878      	ldr	r0, [r7, #4]
100058e2:	f000 fcf1 	bl	100062c8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
100058e6:	687b      	ldr	r3, [r7, #4]
100058e8:	2200      	movs	r2, #0
100058ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
100058ee:	89ba      	ldrh	r2, [r7, #12]
100058f0:	7bfb      	ldrb	r3, [r7, #15]
100058f2:	4619      	mov	r1, r3
100058f4:	6878      	ldr	r0, [r7, #4]
100058f6:	f7ff fdb0 	bl	1000545a <HAL_I2C_AddrCallback>
}
100058fa:	e007      	b.n	1000590c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
100058fc:	687b      	ldr	r3, [r7, #4]
100058fe:	681b      	ldr	r3, [r3, #0]
10005900:	2208      	movs	r2, #8
10005902:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
10005904:	687b      	ldr	r3, [r7, #4]
10005906:	2200      	movs	r2, #0
10005908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
1000590c:	bf00      	nop
1000590e:	3710      	adds	r7, #16
10005910:	46bd      	mov	sp, r7
10005912:	bd80      	pop	{r7, pc}

10005914 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
10005914:	b580      	push	{r7, lr}
10005916:	b084      	sub	sp, #16
10005918:	af00      	add	r7, sp, #0
1000591a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
1000591c:	687b      	ldr	r3, [r7, #4]
1000591e:	681b      	ldr	r3, [r3, #0]
10005920:	681b      	ldr	r3, [r3, #0]
10005922:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
10005924:	687b      	ldr	r3, [r7, #4]
10005926:	2200      	movs	r2, #0
10005928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
1000592c:	68fb      	ldr	r3, [r7, #12]
1000592e:	0b9b      	lsrs	r3, r3, #14
10005930:	f003 0301 	and.w	r3, r3, #1
10005934:	2b00      	cmp	r3, #0
10005936:	d008      	beq.n	1000594a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10005938:	687b      	ldr	r3, [r7, #4]
1000593a:	681b      	ldr	r3, [r3, #0]
1000593c:	681a      	ldr	r2, [r3, #0]
1000593e:	687b      	ldr	r3, [r7, #4]
10005940:	681b      	ldr	r3, [r3, #0]
10005942:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
10005946:	601a      	str	r2, [r3, #0]
10005948:	e00d      	b.n	10005966 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
1000594a:	68fb      	ldr	r3, [r7, #12]
1000594c:	0bdb      	lsrs	r3, r3, #15
1000594e:	f003 0301 	and.w	r3, r3, #1
10005952:	2b00      	cmp	r3, #0
10005954:	d007      	beq.n	10005966 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10005956:	687b      	ldr	r3, [r7, #4]
10005958:	681b      	ldr	r3, [r3, #0]
1000595a:	681a      	ldr	r2, [r3, #0]
1000595c:	687b      	ldr	r3, [r7, #4]
1000595e:	681b      	ldr	r3, [r3, #0]
10005960:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
10005964:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
10005966:	687b      	ldr	r3, [r7, #4]
10005968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
1000596c:	b2db      	uxtb	r3, r3
1000596e:	2b29      	cmp	r3, #41	@ 0x29
10005970:	d112      	bne.n	10005998 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10005972:	687b      	ldr	r3, [r7, #4]
10005974:	2228      	movs	r2, #40	@ 0x28
10005976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
1000597a:	687b      	ldr	r3, [r7, #4]
1000597c:	2221      	movs	r2, #33	@ 0x21
1000597e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10005980:	2101      	movs	r1, #1
10005982:	6878      	ldr	r0, [r7, #4]
10005984:	f000 fca0 	bl	100062c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10005988:	687b      	ldr	r3, [r7, #4]
1000598a:	2200      	movs	r2, #0
1000598c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10005990:	6878      	ldr	r0, [r7, #4]
10005992:	f7ff fd4e 	bl	10005432 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
10005996:	e017      	b.n	100059c8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
10005998:	687b      	ldr	r3, [r7, #4]
1000599a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
1000599e:	b2db      	uxtb	r3, r3
100059a0:	2b2a      	cmp	r3, #42	@ 0x2a
100059a2:	d111      	bne.n	100059c8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
100059a4:	687b      	ldr	r3, [r7, #4]
100059a6:	2228      	movs	r2, #40	@ 0x28
100059a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
100059ac:	687b      	ldr	r3, [r7, #4]
100059ae:	2222      	movs	r2, #34	@ 0x22
100059b0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
100059b2:	2102      	movs	r1, #2
100059b4:	6878      	ldr	r0, [r7, #4]
100059b6:	f000 fc87 	bl	100062c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
100059ba:	687b      	ldr	r3, [r7, #4]
100059bc:	2200      	movs	r2, #0
100059be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
100059c2:	6878      	ldr	r0, [r7, #4]
100059c4:	f7ff fd3f 	bl	10005446 <HAL_I2C_SlaveRxCpltCallback>
}
100059c8:	bf00      	nop
100059ca:	3710      	adds	r7, #16
100059cc:	46bd      	mov	sp, r7
100059ce:	bd80      	pop	{r7, pc}

100059d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
100059d0:	b580      	push	{r7, lr}
100059d2:	b086      	sub	sp, #24
100059d4:	af00      	add	r7, sp, #0
100059d6:	6078      	str	r0, [r7, #4]
100059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
100059da:	687b      	ldr	r3, [r7, #4]
100059dc:	681b      	ldr	r3, [r3, #0]
100059de:	681b      	ldr	r3, [r3, #0]
100059e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
100059e2:	683b      	ldr	r3, [r7, #0]
100059e4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
100059e6:	687b      	ldr	r3, [r7, #4]
100059e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
100059ec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100059ee:	687b      	ldr	r3, [r7, #4]
100059f0:	681b      	ldr	r3, [r3, #0]
100059f2:	2220      	movs	r2, #32
100059f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
100059f6:	7bfb      	ldrb	r3, [r7, #15]
100059f8:	2b21      	cmp	r3, #33	@ 0x21
100059fa:	d002      	beq.n	10005a02 <I2C_ITSlaveCplt+0x32>
100059fc:	7bfb      	ldrb	r3, [r7, #15]
100059fe:	2b29      	cmp	r3, #41	@ 0x29
10005a00:	d108      	bne.n	10005a14 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
10005a02:	f248 0101 	movw	r1, #32769	@ 0x8001
10005a06:	6878      	ldr	r0, [r7, #4]
10005a08:	f000 fc5e 	bl	100062c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10005a0c:	687b      	ldr	r3, [r7, #4]
10005a0e:	2221      	movs	r2, #33	@ 0x21
10005a10:	631a      	str	r2, [r3, #48]	@ 0x30
10005a12:	e00d      	b.n	10005a30 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10005a14:	7bfb      	ldrb	r3, [r7, #15]
10005a16:	2b22      	cmp	r3, #34	@ 0x22
10005a18:	d002      	beq.n	10005a20 <I2C_ITSlaveCplt+0x50>
10005a1a:	7bfb      	ldrb	r3, [r7, #15]
10005a1c:	2b2a      	cmp	r3, #42	@ 0x2a
10005a1e:	d107      	bne.n	10005a30 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
10005a20:	f248 0102 	movw	r1, #32770	@ 0x8002
10005a24:	6878      	ldr	r0, [r7, #4]
10005a26:	f000 fc4f 	bl	100062c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10005a2a:	687b      	ldr	r3, [r7, #4]
10005a2c:	2222      	movs	r2, #34	@ 0x22
10005a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
10005a30:	687b      	ldr	r3, [r7, #4]
10005a32:	681b      	ldr	r3, [r3, #0]
10005a34:	685a      	ldr	r2, [r3, #4]
10005a36:	687b      	ldr	r3, [r7, #4]
10005a38:	681b      	ldr	r3, [r3, #0]
10005a3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
10005a3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10005a40:	687b      	ldr	r3, [r7, #4]
10005a42:	681b      	ldr	r3, [r3, #0]
10005a44:	6859      	ldr	r1, [r3, #4]
10005a46:	687b      	ldr	r3, [r7, #4]
10005a48:	681a      	ldr	r2, [r3, #0]
10005a4a:	4b64      	ldr	r3, [pc, #400]	@ (10005bdc <I2C_ITSlaveCplt+0x20c>)
10005a4c:	400b      	ands	r3, r1
10005a4e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10005a50:	6878      	ldr	r0, [r7, #4]
10005a52:	f000 fa1c 	bl	10005e8e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10005a56:	693b      	ldr	r3, [r7, #16]
10005a58:	0b9b      	lsrs	r3, r3, #14
10005a5a:	f003 0301 	and.w	r3, r3, #1
10005a5e:	2b00      	cmp	r3, #0
10005a60:	d013      	beq.n	10005a8a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10005a62:	687b      	ldr	r3, [r7, #4]
10005a64:	681b      	ldr	r3, [r3, #0]
10005a66:	681a      	ldr	r2, [r3, #0]
10005a68:	687b      	ldr	r3, [r7, #4]
10005a6a:	681b      	ldr	r3, [r3, #0]
10005a6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
10005a70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
10005a72:	687b      	ldr	r3, [r7, #4]
10005a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005a76:	2b00      	cmp	r3, #0
10005a78:	d020      	beq.n	10005abc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
10005a7a:	687b      	ldr	r3, [r7, #4]
10005a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005a7e:	681b      	ldr	r3, [r3, #0]
10005a80:	685b      	ldr	r3, [r3, #4]
10005a82:	b29a      	uxth	r2, r3
10005a84:	687b      	ldr	r3, [r7, #4]
10005a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
10005a88:	e018      	b.n	10005abc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = I2C_GET_MDMA_REMAIN_DATA_TX(hi2c);
    }
#endif /* HAL_MDMA_MODULE_ENABLED */
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
10005a8a:	693b      	ldr	r3, [r7, #16]
10005a8c:	0bdb      	lsrs	r3, r3, #15
10005a8e:	f003 0301 	and.w	r3, r3, #1
10005a92:	2b00      	cmp	r3, #0
10005a94:	d012      	beq.n	10005abc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10005a96:	687b      	ldr	r3, [r7, #4]
10005a98:	681b      	ldr	r3, [r3, #0]
10005a9a:	681a      	ldr	r2, [r3, #0]
10005a9c:	687b      	ldr	r3, [r7, #4]
10005a9e:	681b      	ldr	r3, [r3, #0]
10005aa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
10005aa4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
10005aa6:	687b      	ldr	r3, [r7, #4]
10005aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005aaa:	2b00      	cmp	r3, #0
10005aac:	d006      	beq.n	10005abc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
10005aae:	687b      	ldr	r3, [r7, #4]
10005ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005ab2:	681b      	ldr	r3, [r3, #0]
10005ab4:	685b      	ldr	r3, [r3, #4]
10005ab6:	b29a      	uxth	r2, r3
10005ab8:	687b      	ldr	r3, [r7, #4]
10005aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
10005abc:	697b      	ldr	r3, [r7, #20]
10005abe:	089b      	lsrs	r3, r3, #2
10005ac0:	f003 0301 	and.w	r3, r3, #1
10005ac4:	2b00      	cmp	r3, #0
10005ac6:	d020      	beq.n	10005b0a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
10005ac8:	697b      	ldr	r3, [r7, #20]
10005aca:	f023 0304 	bic.w	r3, r3, #4
10005ace:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10005ad0:	687b      	ldr	r3, [r7, #4]
10005ad2:	681b      	ldr	r3, [r3, #0]
10005ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10005ad6:	687b      	ldr	r3, [r7, #4]
10005ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005ada:	b2d2      	uxtb	r2, r2
10005adc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10005ade:	687b      	ldr	r3, [r7, #4]
10005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005ae2:	1c5a      	adds	r2, r3, #1
10005ae4:	687b      	ldr	r3, [r7, #4]
10005ae6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
10005ae8:	687b      	ldr	r3, [r7, #4]
10005aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10005aec:	2b00      	cmp	r3, #0
10005aee:	d00c      	beq.n	10005b0a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
10005af0:	687b      	ldr	r3, [r7, #4]
10005af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10005af4:	3b01      	subs	r3, #1
10005af6:	b29a      	uxth	r2, r3
10005af8:	687b      	ldr	r3, [r7, #4]
10005afa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10005afc:	687b      	ldr	r3, [r7, #4]
10005afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10005b00:	b29b      	uxth	r3, r3
10005b02:	3b01      	subs	r3, #1
10005b04:	b29a      	uxth	r2, r3
10005b06:	687b      	ldr	r3, [r7, #4]
10005b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
10005b0a:	687b      	ldr	r3, [r7, #4]
10005b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10005b0e:	b29b      	uxth	r3, r3
10005b10:	2b00      	cmp	r3, #0
10005b12:	d005      	beq.n	10005b20 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10005b14:	687b      	ldr	r3, [r7, #4]
10005b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10005b18:	f043 0204 	orr.w	r2, r3, #4
10005b1c:	687b      	ldr	r3, [r7, #4]
10005b1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
10005b20:	687b      	ldr	r3, [r7, #4]
10005b22:	2200      	movs	r2, #0
10005b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
10005b28:	687b      	ldr	r3, [r7, #4]
10005b2a:	2200      	movs	r2, #0
10005b2c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
10005b2e:	687b      	ldr	r3, [r7, #4]
10005b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10005b32:	2b00      	cmp	r3, #0
10005b34:	d010      	beq.n	10005b58 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
10005b36:	687b      	ldr	r3, [r7, #4]
10005b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10005b3a:	4619      	mov	r1, r3
10005b3c:	6878      	ldr	r0, [r7, #4]
10005b3e:	f000 f8a7 	bl	10005c90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
10005b42:	687b      	ldr	r3, [r7, #4]
10005b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10005b48:	b2db      	uxtb	r3, r3
10005b4a:	2b28      	cmp	r3, #40	@ 0x28
10005b4c:	d141      	bne.n	10005bd2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
10005b4e:	6979      	ldr	r1, [r7, #20]
10005b50:	6878      	ldr	r0, [r7, #4]
10005b52:	f000 f847 	bl	10005be4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10005b56:	e03c      	b.n	10005bd2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10005b58:	687b      	ldr	r3, [r7, #4]
10005b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10005b5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
10005b60:	d014      	beq.n	10005b8c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
10005b62:	6878      	ldr	r0, [r7, #4]
10005b64:	f7ff fed6 	bl	10005914 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10005b68:	687b      	ldr	r3, [r7, #4]
10005b6a:	4a1d      	ldr	r2, [pc, #116]	@ (10005be0 <I2C_ITSlaveCplt+0x210>)
10005b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
10005b6e:	687b      	ldr	r3, [r7, #4]
10005b70:	2220      	movs	r2, #32
10005b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
10005b76:	687b      	ldr	r3, [r7, #4]
10005b78:	2200      	movs	r2, #0
10005b7a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10005b7c:	687b      	ldr	r3, [r7, #4]
10005b7e:	2200      	movs	r2, #0
10005b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
10005b84:	6878      	ldr	r0, [r7, #4]
10005b86:	f7ff fc76 	bl	10005476 <HAL_I2C_ListenCpltCallback>
}
10005b8a:	e022      	b.n	10005bd2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10005b8c:	687b      	ldr	r3, [r7, #4]
10005b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10005b92:	b2db      	uxtb	r3, r3
10005b94:	2b22      	cmp	r3, #34	@ 0x22
10005b96:	d10e      	bne.n	10005bb6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
10005b98:	687b      	ldr	r3, [r7, #4]
10005b9a:	2220      	movs	r2, #32
10005b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
10005ba0:	687b      	ldr	r3, [r7, #4]
10005ba2:	2200      	movs	r2, #0
10005ba4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10005ba6:	687b      	ldr	r3, [r7, #4]
10005ba8:	2200      	movs	r2, #0
10005baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10005bae:	6878      	ldr	r0, [r7, #4]
10005bb0:	f7ff fc49 	bl	10005446 <HAL_I2C_SlaveRxCpltCallback>
}
10005bb4:	e00d      	b.n	10005bd2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
10005bb6:	687b      	ldr	r3, [r7, #4]
10005bb8:	2220      	movs	r2, #32
10005bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
10005bbe:	687b      	ldr	r3, [r7, #4]
10005bc0:	2200      	movs	r2, #0
10005bc2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10005bc4:	687b      	ldr	r3, [r7, #4]
10005bc6:	2200      	movs	r2, #0
10005bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10005bcc:	6878      	ldr	r0, [r7, #4]
10005bce:	f7ff fc30 	bl	10005432 <HAL_I2C_SlaveTxCpltCallback>
}
10005bd2:	bf00      	nop
10005bd4:	3718      	adds	r7, #24
10005bd6:	46bd      	mov	sp, r7
10005bd8:	bd80      	pop	{r7, pc}
10005bda:	bf00      	nop
10005bdc:	fe00e800 	.word	0xfe00e800
10005be0:	ffff0000 	.word	0xffff0000

10005be4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10005be4:	b580      	push	{r7, lr}
10005be6:	b082      	sub	sp, #8
10005be8:	af00      	add	r7, sp, #0
10005bea:	6078      	str	r0, [r7, #4]
10005bec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10005bee:	687b      	ldr	r3, [r7, #4]
10005bf0:	4a26      	ldr	r2, [pc, #152]	@ (10005c8c <I2C_ITListenCplt+0xa8>)
10005bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
10005bf4:	687b      	ldr	r3, [r7, #4]
10005bf6:	2200      	movs	r2, #0
10005bf8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
10005bfa:	687b      	ldr	r3, [r7, #4]
10005bfc:	2220      	movs	r2, #32
10005bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
10005c02:	687b      	ldr	r3, [r7, #4]
10005c04:	2200      	movs	r2, #0
10005c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
10005c0a:	687b      	ldr	r3, [r7, #4]
10005c0c:	2200      	movs	r2, #0
10005c0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
10005c10:	683b      	ldr	r3, [r7, #0]
10005c12:	089b      	lsrs	r3, r3, #2
10005c14:	f003 0301 	and.w	r3, r3, #1
10005c18:	2b00      	cmp	r3, #0
10005c1a:	d022      	beq.n	10005c62 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10005c1c:	687b      	ldr	r3, [r7, #4]
10005c1e:	681b      	ldr	r3, [r3, #0]
10005c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10005c22:	687b      	ldr	r3, [r7, #4]
10005c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005c26:	b2d2      	uxtb	r2, r2
10005c28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10005c2a:	687b      	ldr	r3, [r7, #4]
10005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10005c2e:	1c5a      	adds	r2, r3, #1
10005c30:	687b      	ldr	r3, [r7, #4]
10005c32:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
10005c34:	687b      	ldr	r3, [r7, #4]
10005c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10005c38:	2b00      	cmp	r3, #0
10005c3a:	d012      	beq.n	10005c62 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
10005c3c:	687b      	ldr	r3, [r7, #4]
10005c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10005c40:	3b01      	subs	r3, #1
10005c42:	b29a      	uxth	r2, r3
10005c44:	687b      	ldr	r3, [r7, #4]
10005c46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10005c48:	687b      	ldr	r3, [r7, #4]
10005c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10005c4c:	b29b      	uxth	r3, r3
10005c4e:	3b01      	subs	r3, #1
10005c50:	b29a      	uxth	r2, r3
10005c52:	687b      	ldr	r3, [r7, #4]
10005c54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10005c56:	687b      	ldr	r3, [r7, #4]
10005c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10005c5a:	f043 0204 	orr.w	r2, r3, #4
10005c5e:	687b      	ldr	r3, [r7, #4]
10005c60:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10005c62:	f248 0103 	movw	r1, #32771	@ 0x8003
10005c66:	6878      	ldr	r0, [r7, #4]
10005c68:	f000 fb2e 	bl	100062c8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10005c6c:	687b      	ldr	r3, [r7, #4]
10005c6e:	681b      	ldr	r3, [r3, #0]
10005c70:	2210      	movs	r2, #16
10005c72:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10005c74:	687b      	ldr	r3, [r7, #4]
10005c76:	2200      	movs	r2, #0
10005c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
10005c7c:	6878      	ldr	r0, [r7, #4]
10005c7e:	f7ff fbfa 	bl	10005476 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
10005c82:	bf00      	nop
10005c84:	3708      	adds	r7, #8
10005c86:	46bd      	mov	sp, r7
10005c88:	bd80      	pop	{r7, pc}
10005c8a:	bf00      	nop
10005c8c:	ffff0000 	.word	0xffff0000

10005c90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
10005c90:	b580      	push	{r7, lr}
10005c92:	b084      	sub	sp, #16
10005c94:	af00      	add	r7, sp, #0
10005c96:	6078      	str	r0, [r7, #4]
10005c98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
10005c9a:	687b      	ldr	r3, [r7, #4]
10005c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10005ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
10005ca2:	687b      	ldr	r3, [r7, #4]
10005ca4:	2200      	movs	r2, #0
10005ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
10005caa:	687b      	ldr	r3, [r7, #4]
10005cac:	4a61      	ldr	r2, [pc, #388]	@ (10005e34 <I2C_ITError+0x1a4>)
10005cae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
10005cb0:	687b      	ldr	r3, [r7, #4]
10005cb2:	2200      	movs	r2, #0
10005cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
10005cb6:	687b      	ldr	r3, [r7, #4]
10005cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10005cba:	683b      	ldr	r3, [r7, #0]
10005cbc:	431a      	orrs	r2, r3
10005cbe:	687b      	ldr	r3, [r7, #4]
10005cc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
10005cc2:	7bfb      	ldrb	r3, [r7, #15]
10005cc4:	2b28      	cmp	r3, #40	@ 0x28
10005cc6:	d005      	beq.n	10005cd4 <I2C_ITError+0x44>
10005cc8:	7bfb      	ldrb	r3, [r7, #15]
10005cca:	2b29      	cmp	r3, #41	@ 0x29
10005ccc:	d002      	beq.n	10005cd4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
10005cce:	7bfb      	ldrb	r3, [r7, #15]
10005cd0:	2b2a      	cmp	r3, #42	@ 0x2a
10005cd2:	d10b      	bne.n	10005cec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10005cd4:	2103      	movs	r1, #3
10005cd6:	6878      	ldr	r0, [r7, #4]
10005cd8:	f000 faf6 	bl	100062c8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10005cdc:	687b      	ldr	r3, [r7, #4]
10005cde:	2228      	movs	r2, #40	@ 0x28
10005ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
10005ce4:	687b      	ldr	r3, [r7, #4]
10005ce6:	4a54      	ldr	r2, [pc, #336]	@ (10005e38 <I2C_ITError+0x1a8>)
10005ce8:	635a      	str	r2, [r3, #52]	@ 0x34
10005cea:	e011      	b.n	10005d10 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
10005cec:	f248 0103 	movw	r1, #32771	@ 0x8003
10005cf0:	6878      	ldr	r0, [r7, #4]
10005cf2:	f000 fae9 	bl	100062c8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
10005cf6:	687b      	ldr	r3, [r7, #4]
10005cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10005cfc:	b2db      	uxtb	r3, r3
10005cfe:	2b60      	cmp	r3, #96	@ 0x60
10005d00:	d003      	beq.n	10005d0a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
10005d02:	687b      	ldr	r3, [r7, #4]
10005d04:	2220      	movs	r2, #32
10005d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
    hi2c->XferISR       = NULL;
10005d0a:	687b      	ldr	r3, [r7, #4]
10005d0c:	2200      	movs	r2, #0
10005d0e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
10005d10:	687b      	ldr	r3, [r7, #4]
10005d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10005d14:	60bb      	str	r3, [r7, #8]
#ifdef HAL_MDMA_MODULE_ENABLED
  if (((hi2c->hdmatx != NULL) || (hi2c->hmdmatx != NULL)) && \
      ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
#else
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
10005d16:	687b      	ldr	r3, [r7, #4]
10005d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005d1a:	2b00      	cmp	r3, #0
10005d1c:	d03e      	beq.n	10005d9c <I2C_ITError+0x10c>
10005d1e:	68bb      	ldr	r3, [r7, #8]
10005d20:	2b11      	cmp	r3, #17
10005d22:	d002      	beq.n	10005d2a <I2C_ITError+0x9a>
10005d24:	68bb      	ldr	r3, [r7, #8]
10005d26:	2b21      	cmp	r3, #33	@ 0x21
10005d28:	d138      	bne.n	10005d9c <I2C_ITError+0x10c>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
#endif /* HAL_MDMA_MODULE_ENABLED */
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
10005d2a:	687b      	ldr	r3, [r7, #4]
10005d2c:	681b      	ldr	r3, [r3, #0]
10005d2e:	681b      	ldr	r3, [r3, #0]
10005d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
10005d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
10005d38:	d107      	bne.n	10005d4a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10005d3a:	687b      	ldr	r3, [r7, #4]
10005d3c:	681b      	ldr	r3, [r3, #0]
10005d3e:	681a      	ldr	r2, [r3, #0]
10005d40:	687b      	ldr	r3, [r7, #4]
10005d42:	681b      	ldr	r3, [r3, #0]
10005d44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
10005d48:	601a      	str	r2, [r3, #0]
    }

    if ((hi2c->hdmatx != NULL) && (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY))
10005d4a:	687b      	ldr	r3, [r7, #4]
10005d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005d4e:	2b00      	cmp	r3, #0
10005d50:	d01f      	beq.n	10005d92 <I2C_ITError+0x102>
10005d52:	687b      	ldr	r3, [r7, #4]
10005d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005d56:	4618      	mov	r0, r3
10005d58:	f7fe fcb1 	bl	100046be <HAL_DMA_GetState>
10005d5c:	4603      	mov	r3, r0
10005d5e:	2b01      	cmp	r3, #1
10005d60:	d017      	beq.n	10005d92 <I2C_ITError+0x102>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
10005d62:	687b      	ldr	r3, [r7, #4]
10005d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005d66:	4a35      	ldr	r2, [pc, #212]	@ (10005e3c <I2C_ITError+0x1ac>)
10005d68:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10005d6a:	687b      	ldr	r3, [r7, #4]
10005d6c:	2200      	movs	r2, #0
10005d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
10005d72:	687b      	ldr	r3, [r7, #4]
10005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005d76:	4618      	mov	r0, r3
10005d78:	f7fe fc7a 	bl	10004670 <HAL_DMA_Abort_IT>
10005d7c:	4603      	mov	r3, r0
10005d7e:	2b00      	cmp	r3, #0
10005d80:	d00b      	beq.n	10005d9a <I2C_ITError+0x10a>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
10005d82:	687b      	ldr	r3, [r7, #4]
10005d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10005d88:	687a      	ldr	r2, [r7, #4]
10005d8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
10005d8c:	4610      	mov	r0, r2
10005d8e:	4798      	blx	r3
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
10005d90:	e003      	b.n	10005d9a <I2C_ITError+0x10a>
      }
    }
#endif /* HAL_MDMA_MODULE_ENABLED */
    else
    {
      I2C_TreatErrorCallback(hi2c);
10005d92:	6878      	ldr	r0, [r7, #4]
10005d94:	f000 f854 	bl	10005e40 <I2C_TreatErrorCallback>
    if ((hi2c->hdmatx != NULL) && (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY))
10005d98:	e047      	b.n	10005e2a <I2C_ITError+0x19a>
10005d9a:	e046      	b.n	10005e2a <I2C_ITError+0x19a>
  /* Abort DMA RX transfer if any */
#ifdef HAL_MDMA_MODULE_ENABLED
  else if (((hi2c->hdmarx != NULL) || (hi2c->hmdmarx != NULL)) && \
           ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
#else
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
10005d9c:	687b      	ldr	r3, [r7, #4]
10005d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005da0:	2b00      	cmp	r3, #0
10005da2:	d03e      	beq.n	10005e22 <I2C_ITError+0x192>
10005da4:	68bb      	ldr	r3, [r7, #8]
10005da6:	2b12      	cmp	r3, #18
10005da8:	d002      	beq.n	10005db0 <I2C_ITError+0x120>
10005daa:	68bb      	ldr	r3, [r7, #8]
10005dac:	2b22      	cmp	r3, #34	@ 0x22
10005dae:	d138      	bne.n	10005e22 <I2C_ITError+0x192>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
#endif /* HAL_MDMA_MODULE_ENABLED */
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
10005db0:	687b      	ldr	r3, [r7, #4]
10005db2:	681b      	ldr	r3, [r3, #0]
10005db4:	681b      	ldr	r3, [r3, #0]
10005db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
10005dba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
10005dbe:	d107      	bne.n	10005dd0 <I2C_ITError+0x140>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10005dc0:	687b      	ldr	r3, [r7, #4]
10005dc2:	681b      	ldr	r3, [r3, #0]
10005dc4:	681a      	ldr	r2, [r3, #0]
10005dc6:	687b      	ldr	r3, [r7, #4]
10005dc8:	681b      	ldr	r3, [r3, #0]
10005dca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
10005dce:	601a      	str	r2, [r3, #0]
    }

    if ((hi2c->hdmarx != NULL) && (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY))
10005dd0:	687b      	ldr	r3, [r7, #4]
10005dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005dd4:	2b00      	cmp	r3, #0
10005dd6:	d01f      	beq.n	10005e18 <I2C_ITError+0x188>
10005dd8:	687b      	ldr	r3, [r7, #4]
10005dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005ddc:	4618      	mov	r0, r3
10005dde:	f7fe fc6e 	bl	100046be <HAL_DMA_GetState>
10005de2:	4603      	mov	r3, r0
10005de4:	2b01      	cmp	r3, #1
10005de6:	d017      	beq.n	10005e18 <I2C_ITError+0x188>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
10005de8:	687b      	ldr	r3, [r7, #4]
10005dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005dec:	4a13      	ldr	r2, [pc, #76]	@ (10005e3c <I2C_ITError+0x1ac>)
10005dee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10005df0:	687b      	ldr	r3, [r7, #4]
10005df2:	2200      	movs	r2, #0
10005df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
10005df8:	687b      	ldr	r3, [r7, #4]
10005dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005dfc:	4618      	mov	r0, r3
10005dfe:	f7fe fc37 	bl	10004670 <HAL_DMA_Abort_IT>
10005e02:	4603      	mov	r3, r0
10005e04:	2b00      	cmp	r3, #0
10005e06:	d00b      	beq.n	10005e20 <I2C_ITError+0x190>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
10005e08:	687b      	ldr	r3, [r7, #4]
10005e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10005e0e:	687a      	ldr	r2, [r7, #4]
10005e10:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
10005e12:	4610      	mov	r0, r2
10005e14:	4798      	blx	r3
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
10005e16:	e003      	b.n	10005e20 <I2C_ITError+0x190>
      }
    }
#endif /* HAL_MDMA_MODULE_ENABLED */
    else
    {
      I2C_TreatErrorCallback(hi2c);
10005e18:	6878      	ldr	r0, [r7, #4]
10005e1a:	f000 f811 	bl	10005e40 <I2C_TreatErrorCallback>
    if ((hi2c->hdmarx != NULL) && (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY))
10005e1e:	e004      	b.n	10005e2a <I2C_ITError+0x19a>
10005e20:	e003      	b.n	10005e2a <I2C_ITError+0x19a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
10005e22:	6878      	ldr	r0, [r7, #4]
10005e24:	f000 f80c 	bl	10005e40 <I2C_TreatErrorCallback>
  }
}
10005e28:	bf00      	nop
10005e2a:	bf00      	nop
10005e2c:	3710      	adds	r7, #16
10005e2e:	46bd      	mov	sp, r7
10005e30:	bd80      	pop	{r7, pc}
10005e32:	bf00      	nop
10005e34:	ffff0000 	.word	0xffff0000
10005e38:	100054b7 	.word	0x100054b7
10005e3c:	10005ed7 	.word	0x10005ed7

10005e40 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
10005e40:	b580      	push	{r7, lr}
10005e42:	b082      	sub	sp, #8
10005e44:	af00      	add	r7, sp, #0
10005e46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
10005e48:	687b      	ldr	r3, [r7, #4]
10005e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10005e4e:	b2db      	uxtb	r3, r3
10005e50:	2b60      	cmp	r3, #96	@ 0x60
10005e52:	d10e      	bne.n	10005e72 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
10005e54:	687b      	ldr	r3, [r7, #4]
10005e56:	2220      	movs	r2, #32
10005e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
10005e5c:	687b      	ldr	r3, [r7, #4]
10005e5e:	2200      	movs	r2, #0
10005e60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10005e62:	687b      	ldr	r3, [r7, #4]
10005e64:	2200      	movs	r2, #0
10005e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
10005e6a:	6878      	ldr	r0, [r7, #4]
10005e6c:	f7ff fb0d 	bl	1000548a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10005e70:	e009      	b.n	10005e86 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
10005e72:	687b      	ldr	r3, [r7, #4]
10005e74:	2200      	movs	r2, #0
10005e76:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10005e78:	687b      	ldr	r3, [r7, #4]
10005e7a:	2200      	movs	r2, #0
10005e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
10005e80:	6878      	ldr	r0, [r7, #4]
10005e82:	f7fb ffac 	bl	10001dde <HAL_I2C_ErrorCallback>
}
10005e86:	bf00      	nop
10005e88:	3708      	adds	r7, #8
10005e8a:	46bd      	mov	sp, r7
10005e8c:	bd80      	pop	{r7, pc}

10005e8e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
10005e8e:	b480      	push	{r7}
10005e90:	b083      	sub	sp, #12
10005e92:	af00      	add	r7, sp, #0
10005e94:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
10005e96:	687b      	ldr	r3, [r7, #4]
10005e98:	681b      	ldr	r3, [r3, #0]
10005e9a:	699b      	ldr	r3, [r3, #24]
10005e9c:	f003 0302 	and.w	r3, r3, #2
10005ea0:	2b02      	cmp	r3, #2
10005ea2:	d103      	bne.n	10005eac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
10005ea4:	687b      	ldr	r3, [r7, #4]
10005ea6:	681b      	ldr	r3, [r3, #0]
10005ea8:	2200      	movs	r2, #0
10005eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
10005eac:	687b      	ldr	r3, [r7, #4]
10005eae:	681b      	ldr	r3, [r3, #0]
10005eb0:	699b      	ldr	r3, [r3, #24]
10005eb2:	f003 0301 	and.w	r3, r3, #1
10005eb6:	2b01      	cmp	r3, #1
10005eb8:	d007      	beq.n	10005eca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
10005eba:	687b      	ldr	r3, [r7, #4]
10005ebc:	681b      	ldr	r3, [r3, #0]
10005ebe:	699a      	ldr	r2, [r3, #24]
10005ec0:	687b      	ldr	r3, [r7, #4]
10005ec2:	681b      	ldr	r3, [r3, #0]
10005ec4:	f042 0201 	orr.w	r2, r2, #1
10005ec8:	619a      	str	r2, [r3, #24]
  }
}
10005eca:	bf00      	nop
10005ecc:	370c      	adds	r7, #12
10005ece:	46bd      	mov	sp, r7
10005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
10005ed4:	4770      	bx	lr

10005ed6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
10005ed6:	b580      	push	{r7, lr}
10005ed8:	b084      	sub	sp, #16
10005eda:	af00      	add	r7, sp, #0
10005edc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
10005ede:	687b      	ldr	r3, [r7, #4]
10005ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
10005ee4:	68fb      	ldr	r3, [r7, #12]
10005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005ee8:	2b00      	cmp	r3, #0
10005eea:	d003      	beq.n	10005ef4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
10005eec:	68fb      	ldr	r3, [r7, #12]
10005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10005ef0:	2200      	movs	r2, #0
10005ef2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
10005ef4:	68fb      	ldr	r3, [r7, #12]
10005ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005ef8:	2b00      	cmp	r3, #0
10005efa:	d003      	beq.n	10005f04 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
10005efc:	68fb      	ldr	r3, [r7, #12]
10005efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10005f00:	2200      	movs	r2, #0
10005f02:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
10005f04:	68f8      	ldr	r0, [r7, #12]
10005f06:	f7ff ff9b 	bl	10005e40 <I2C_TreatErrorCallback>
}
10005f0a:	bf00      	nop
10005f0c:	3710      	adds	r7, #16
10005f0e:	46bd      	mov	sp, r7
10005f10:	bd80      	pop	{r7, pc}

10005f12 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
10005f12:	b580      	push	{r7, lr}
10005f14:	b084      	sub	sp, #16
10005f16:	af00      	add	r7, sp, #0
10005f18:	60f8      	str	r0, [r7, #12]
10005f1a:	60b9      	str	r1, [r7, #8]
10005f1c:	603b      	str	r3, [r7, #0]
10005f1e:	4613      	mov	r3, r2
10005f20:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
10005f22:	e022      	b.n	10005f6a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10005f24:	683b      	ldr	r3, [r7, #0]
10005f26:	f1b3 3fff 	cmp.w	r3, #4294967295
10005f2a:	d01e      	beq.n	10005f6a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10005f2c:	f7fe fa48 	bl	100043c0 <HAL_GetTick>
10005f30:	4602      	mov	r2, r0
10005f32:	69bb      	ldr	r3, [r7, #24]
10005f34:	1ad3      	subs	r3, r2, r3
10005f36:	683a      	ldr	r2, [r7, #0]
10005f38:	429a      	cmp	r2, r3
10005f3a:	d302      	bcc.n	10005f42 <I2C_WaitOnFlagUntilTimeout+0x30>
10005f3c:	683b      	ldr	r3, [r7, #0]
10005f3e:	2b00      	cmp	r3, #0
10005f40:	d113      	bne.n	10005f6a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10005f42:	68fb      	ldr	r3, [r7, #12]
10005f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10005f46:	f043 0220 	orr.w	r2, r3, #32
10005f4a:	68fb      	ldr	r3, [r7, #12]
10005f4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
10005f4e:	68fb      	ldr	r3, [r7, #12]
10005f50:	2220      	movs	r2, #32
10005f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
10005f56:	68fb      	ldr	r3, [r7, #12]
10005f58:	2200      	movs	r2, #0
10005f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
10005f5e:	68fb      	ldr	r3, [r7, #12]
10005f60:	2200      	movs	r2, #0
10005f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
10005f66:	2301      	movs	r3, #1
10005f68:	e00f      	b.n	10005f8a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
10005f6a:	68fb      	ldr	r3, [r7, #12]
10005f6c:	681b      	ldr	r3, [r3, #0]
10005f6e:	699a      	ldr	r2, [r3, #24]
10005f70:	68bb      	ldr	r3, [r7, #8]
10005f72:	4013      	ands	r3, r2
10005f74:	68ba      	ldr	r2, [r7, #8]
10005f76:	429a      	cmp	r2, r3
10005f78:	bf0c      	ite	eq
10005f7a:	2301      	moveq	r3, #1
10005f7c:	2300      	movne	r3, #0
10005f7e:	b2db      	uxtb	r3, r3
10005f80:	461a      	mov	r2, r3
10005f82:	79fb      	ldrb	r3, [r7, #7]
10005f84:	429a      	cmp	r2, r3
10005f86:	d0cd      	beq.n	10005f24 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
10005f88:	2300      	movs	r3, #0
}
10005f8a:	4618      	mov	r0, r3
10005f8c:	3710      	adds	r7, #16
10005f8e:	46bd      	mov	sp, r7
10005f90:	bd80      	pop	{r7, pc}

10005f92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
10005f92:	b580      	push	{r7, lr}
10005f94:	b084      	sub	sp, #16
10005f96:	af00      	add	r7, sp, #0
10005f98:	60f8      	str	r0, [r7, #12]
10005f9a:	60b9      	str	r1, [r7, #8]
10005f9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10005f9e:	e02c      	b.n	10005ffa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
10005fa0:	687a      	ldr	r2, [r7, #4]
10005fa2:	68b9      	ldr	r1, [r7, #8]
10005fa4:	68f8      	ldr	r0, [r7, #12]
10005fa6:	f000 f871 	bl	1000608c <I2C_IsErrorOccurred>
10005faa:	4603      	mov	r3, r0
10005fac:	2b00      	cmp	r3, #0
10005fae:	d001      	beq.n	10005fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
10005fb0:	2301      	movs	r3, #1
10005fb2:	e02a      	b.n	1000600a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10005fb4:	68bb      	ldr	r3, [r7, #8]
10005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
10005fba:	d01e      	beq.n	10005ffa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10005fbc:	f7fe fa00 	bl	100043c0 <HAL_GetTick>
10005fc0:	4602      	mov	r2, r0
10005fc2:	687b      	ldr	r3, [r7, #4]
10005fc4:	1ad3      	subs	r3, r2, r3
10005fc6:	68ba      	ldr	r2, [r7, #8]
10005fc8:	429a      	cmp	r2, r3
10005fca:	d302      	bcc.n	10005fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
10005fcc:	68bb      	ldr	r3, [r7, #8]
10005fce:	2b00      	cmp	r3, #0
10005fd0:	d113      	bne.n	10005ffa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10005fd2:	68fb      	ldr	r3, [r7, #12]
10005fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10005fd6:	f043 0220 	orr.w	r2, r3, #32
10005fda:	68fb      	ldr	r3, [r7, #12]
10005fdc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
10005fde:	68fb      	ldr	r3, [r7, #12]
10005fe0:	2220      	movs	r2, #32
10005fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
10005fe6:	68fb      	ldr	r3, [r7, #12]
10005fe8:	2200      	movs	r2, #0
10005fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
10005fee:	68fb      	ldr	r3, [r7, #12]
10005ff0:	2200      	movs	r2, #0
10005ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
10005ff6:	2301      	movs	r3, #1
10005ff8:	e007      	b.n	1000600a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10005ffa:	68fb      	ldr	r3, [r7, #12]
10005ffc:	681b      	ldr	r3, [r3, #0]
10005ffe:	699b      	ldr	r3, [r3, #24]
10006000:	f003 0302 	and.w	r3, r3, #2
10006004:	2b02      	cmp	r3, #2
10006006:	d1cb      	bne.n	10005fa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
10006008:	2300      	movs	r3, #0
}
1000600a:	4618      	mov	r0, r3
1000600c:	3710      	adds	r7, #16
1000600e:	46bd      	mov	sp, r7
10006010:	bd80      	pop	{r7, pc}

10006012 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
10006012:	b580      	push	{r7, lr}
10006014:	b084      	sub	sp, #16
10006016:	af00      	add	r7, sp, #0
10006018:	60f8      	str	r0, [r7, #12]
1000601a:	60b9      	str	r1, [r7, #8]
1000601c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
1000601e:	e028      	b.n	10006072 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
10006020:	687a      	ldr	r2, [r7, #4]
10006022:	68b9      	ldr	r1, [r7, #8]
10006024:	68f8      	ldr	r0, [r7, #12]
10006026:	f000 f831 	bl	1000608c <I2C_IsErrorOccurred>
1000602a:	4603      	mov	r3, r0
1000602c:	2b00      	cmp	r3, #0
1000602e:	d001      	beq.n	10006034 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
10006030:	2301      	movs	r3, #1
10006032:	e026      	b.n	10006082 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10006034:	f7fe f9c4 	bl	100043c0 <HAL_GetTick>
10006038:	4602      	mov	r2, r0
1000603a:	687b      	ldr	r3, [r7, #4]
1000603c:	1ad3      	subs	r3, r2, r3
1000603e:	68ba      	ldr	r2, [r7, #8]
10006040:	429a      	cmp	r2, r3
10006042:	d302      	bcc.n	1000604a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
10006044:	68bb      	ldr	r3, [r7, #8]
10006046:	2b00      	cmp	r3, #0
10006048:	d113      	bne.n	10006072 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
1000604a:	68fb      	ldr	r3, [r7, #12]
1000604c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1000604e:	f043 0220 	orr.w	r2, r3, #32
10006052:	68fb      	ldr	r3, [r7, #12]
10006054:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
10006056:	68fb      	ldr	r3, [r7, #12]
10006058:	2220      	movs	r2, #32
1000605a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
1000605e:	68fb      	ldr	r3, [r7, #12]
10006060:	2200      	movs	r2, #0
10006062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10006066:	68fb      	ldr	r3, [r7, #12]
10006068:	2200      	movs	r2, #0
1000606a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
1000606e:	2301      	movs	r3, #1
10006070:	e007      	b.n	10006082 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10006072:	68fb      	ldr	r3, [r7, #12]
10006074:	681b      	ldr	r3, [r3, #0]
10006076:	699b      	ldr	r3, [r3, #24]
10006078:	f003 0320 	and.w	r3, r3, #32
1000607c:	2b20      	cmp	r3, #32
1000607e:	d1cf      	bne.n	10006020 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
10006080:	2300      	movs	r3, #0
}
10006082:	4618      	mov	r0, r3
10006084:	3710      	adds	r7, #16
10006086:	46bd      	mov	sp, r7
10006088:	bd80      	pop	{r7, pc}
	...

1000608c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
1000608c:	b580      	push	{r7, lr}
1000608e:	b08a      	sub	sp, #40	@ 0x28
10006090:	af00      	add	r7, sp, #0
10006092:	60f8      	str	r0, [r7, #12]
10006094:	60b9      	str	r1, [r7, #8]
10006096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10006098:	2300      	movs	r3, #0
1000609a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
1000609e:	68fb      	ldr	r3, [r7, #12]
100060a0:	681b      	ldr	r3, [r3, #0]
100060a2:	699b      	ldr	r3, [r3, #24]
100060a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
100060a6:	2300      	movs	r3, #0
100060a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
100060aa:	687b      	ldr	r3, [r7, #4]
100060ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
100060ae:	69bb      	ldr	r3, [r7, #24]
100060b0:	f003 0310 	and.w	r3, r3, #16
100060b4:	2b00      	cmp	r3, #0
100060b6:	d075      	beq.n	100061a4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100060b8:	68fb      	ldr	r3, [r7, #12]
100060ba:	681b      	ldr	r3, [r3, #0]
100060bc:	2210      	movs	r2, #16
100060be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
100060c0:	e056      	b.n	10006170 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
100060c2:	68bb      	ldr	r3, [r7, #8]
100060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
100060c8:	d052      	beq.n	10006170 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
100060ca:	f7fe f979 	bl	100043c0 <HAL_GetTick>
100060ce:	4602      	mov	r2, r0
100060d0:	69fb      	ldr	r3, [r7, #28]
100060d2:	1ad3      	subs	r3, r2, r3
100060d4:	68ba      	ldr	r2, [r7, #8]
100060d6:	429a      	cmp	r2, r3
100060d8:	d302      	bcc.n	100060e0 <I2C_IsErrorOccurred+0x54>
100060da:	68bb      	ldr	r3, [r7, #8]
100060dc:	2b00      	cmp	r3, #0
100060de:	d147      	bne.n	10006170 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
100060e0:	68fb      	ldr	r3, [r7, #12]
100060e2:	681b      	ldr	r3, [r3, #0]
100060e4:	685b      	ldr	r3, [r3, #4]
100060e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
100060ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
100060ec:	68fb      	ldr	r3, [r7, #12]
100060ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
100060f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
100060f4:	68fb      	ldr	r3, [r7, #12]
100060f6:	681b      	ldr	r3, [r3, #0]
100060f8:	699b      	ldr	r3, [r3, #24]
100060fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
100060fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
10006102:	d12e      	bne.n	10006162 <I2C_IsErrorOccurred+0xd6>
10006104:	697b      	ldr	r3, [r7, #20]
10006106:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
1000610a:	d02a      	beq.n	10006162 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
1000610c:	7cfb      	ldrb	r3, [r7, #19]
1000610e:	2b20      	cmp	r3, #32
10006110:	d027      	beq.n	10006162 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
10006112:	68fb      	ldr	r3, [r7, #12]
10006114:	681b      	ldr	r3, [r3, #0]
10006116:	685a      	ldr	r2, [r3, #4]
10006118:	68fb      	ldr	r3, [r7, #12]
1000611a:	681b      	ldr	r3, [r3, #0]
1000611c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
10006120:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
10006122:	f7fe f94d 	bl	100043c0 <HAL_GetTick>
10006126:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10006128:	e01b      	b.n	10006162 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
1000612a:	f7fe f949 	bl	100043c0 <HAL_GetTick>
1000612e:	4602      	mov	r2, r0
10006130:	69fb      	ldr	r3, [r7, #28]
10006132:	1ad3      	subs	r3, r2, r3
10006134:	2b19      	cmp	r3, #25
10006136:	d914      	bls.n	10006162 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10006138:	68fb      	ldr	r3, [r7, #12]
1000613a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1000613c:	f043 0220 	orr.w	r2, r3, #32
10006140:	68fb      	ldr	r3, [r7, #12]
10006142:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
10006144:	68fb      	ldr	r3, [r7, #12]
10006146:	2220      	movs	r2, #32
10006148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
1000614c:	68fb      	ldr	r3, [r7, #12]
1000614e:	2200      	movs	r2, #0
10006150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
10006154:	68fb      	ldr	r3, [r7, #12]
10006156:	2200      	movs	r2, #0
10006158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              
              status = HAL_ERROR;
1000615c:	2301      	movs	r3, #1
1000615e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10006162:	68fb      	ldr	r3, [r7, #12]
10006164:	681b      	ldr	r3, [r3, #0]
10006166:	699b      	ldr	r3, [r3, #24]
10006168:	f003 0320 	and.w	r3, r3, #32
1000616c:	2b20      	cmp	r3, #32
1000616e:	d1dc      	bne.n	1000612a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
10006170:	68fb      	ldr	r3, [r7, #12]
10006172:	681b      	ldr	r3, [r3, #0]
10006174:	699b      	ldr	r3, [r3, #24]
10006176:	f003 0320 	and.w	r3, r3, #32
1000617a:	2b20      	cmp	r3, #32
1000617c:	d003      	beq.n	10006186 <I2C_IsErrorOccurred+0xfa>
1000617e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10006182:	2b00      	cmp	r3, #0
10006184:	d09d      	beq.n	100060c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
10006186:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
1000618a:	2b00      	cmp	r3, #0
1000618c:	d103      	bne.n	10006196 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1000618e:	68fb      	ldr	r3, [r7, #12]
10006190:	681b      	ldr	r3, [r3, #0]
10006192:	2220      	movs	r2, #32
10006194:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
10006196:	6a3b      	ldr	r3, [r7, #32]
10006198:	f043 0304 	orr.w	r3, r3, #4
1000619c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
1000619e:	2301      	movs	r3, #1
100061a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
100061a4:	68fb      	ldr	r3, [r7, #12]
100061a6:	681b      	ldr	r3, [r3, #0]
100061a8:	699b      	ldr	r3, [r3, #24]
100061aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
100061ac:	69bb      	ldr	r3, [r7, #24]
100061ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100061b2:	2b00      	cmp	r3, #0
100061b4:	d00b      	beq.n	100061ce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
100061b6:	6a3b      	ldr	r3, [r7, #32]
100061b8:	f043 0301 	orr.w	r3, r3, #1
100061bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
100061be:	68fb      	ldr	r3, [r7, #12]
100061c0:	681b      	ldr	r3, [r3, #0]
100061c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
100061c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
100061c8:	2301      	movs	r3, #1
100061ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
100061ce:	69bb      	ldr	r3, [r7, #24]
100061d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
100061d4:	2b00      	cmp	r3, #0
100061d6:	d00b      	beq.n	100061f0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
100061d8:	6a3b      	ldr	r3, [r7, #32]
100061da:	f043 0308 	orr.w	r3, r3, #8
100061de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
100061e0:	68fb      	ldr	r3, [r7, #12]
100061e2:	681b      	ldr	r3, [r3, #0]
100061e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
100061e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
100061ea:	2301      	movs	r3, #1
100061ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
100061f0:	69bb      	ldr	r3, [r7, #24]
100061f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
100061f6:	2b00      	cmp	r3, #0
100061f8:	d00b      	beq.n	10006212 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
100061fa:	6a3b      	ldr	r3, [r7, #32]
100061fc:	f043 0302 	orr.w	r3, r3, #2
10006200:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
10006202:	68fb      	ldr	r3, [r7, #12]
10006204:	681b      	ldr	r3, [r3, #0]
10006206:	f44f 7200 	mov.w	r2, #512	@ 0x200
1000620a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
1000620c:	2301      	movs	r3, #1
1000620e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
10006212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10006216:	2b00      	cmp	r3, #0
10006218:	d01c      	beq.n	10006254 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
1000621a:	68f8      	ldr	r0, [r7, #12]
1000621c:	f7ff fe37 	bl	10005e8e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
10006220:	68fb      	ldr	r3, [r7, #12]
10006222:	681b      	ldr	r3, [r3, #0]
10006224:	6859      	ldr	r1, [r3, #4]
10006226:	68fb      	ldr	r3, [r7, #12]
10006228:	681a      	ldr	r2, [r3, #0]
1000622a:	4b0d      	ldr	r3, [pc, #52]	@ (10006260 <I2C_IsErrorOccurred+0x1d4>)
1000622c:	400b      	ands	r3, r1
1000622e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
10006230:	68fb      	ldr	r3, [r7, #12]
10006232:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10006234:	6a3b      	ldr	r3, [r7, #32]
10006236:	431a      	orrs	r2, r3
10006238:	68fb      	ldr	r3, [r7, #12]
1000623a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
1000623c:	68fb      	ldr	r3, [r7, #12]
1000623e:	2220      	movs	r2, #32
10006240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
10006244:	68fb      	ldr	r3, [r7, #12]
10006246:	2200      	movs	r2, #0
10006248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1000624c:	68fb      	ldr	r3, [r7, #12]
1000624e:	2200      	movs	r2, #0
10006250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
10006254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
10006258:	4618      	mov	r0, r3
1000625a:	3728      	adds	r7, #40	@ 0x28
1000625c:	46bd      	mov	sp, r7
1000625e:	bd80      	pop	{r7, pc}
10006260:	fe00e800 	.word	0xfe00e800

10006264 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
10006264:	b480      	push	{r7}
10006266:	b087      	sub	sp, #28
10006268:	af00      	add	r7, sp, #0
1000626a:	60f8      	str	r0, [r7, #12]
1000626c:	607b      	str	r3, [r7, #4]
1000626e:	460b      	mov	r3, r1
10006270:	817b      	strh	r3, [r7, #10]
10006272:	4613      	mov	r3, r2
10006274:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10006276:	897b      	ldrh	r3, [r7, #10]
10006278:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
1000627c:	7a7b      	ldrb	r3, [r7, #9]
1000627e:	041b      	lsls	r3, r3, #16
10006280:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10006284:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
10006286:	687b      	ldr	r3, [r7, #4]
10006288:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
1000628a:	6a3b      	ldr	r3, [r7, #32]
1000628c:	4313      	orrs	r3, r2
1000628e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
10006292:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
10006294:	68fb      	ldr	r3, [r7, #12]
10006296:	681b      	ldr	r3, [r3, #0]
10006298:	685a      	ldr	r2, [r3, #4]
1000629a:	6a3b      	ldr	r3, [r7, #32]
1000629c:	0d5b      	lsrs	r3, r3, #21
1000629e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
100062a2:	4b08      	ldr	r3, [pc, #32]	@ (100062c4 <I2C_TransferConfig+0x60>)
100062a4:	430b      	orrs	r3, r1
100062a6:	43db      	mvns	r3, r3
100062a8:	ea02 0103 	and.w	r1, r2, r3
100062ac:	68fb      	ldr	r3, [r7, #12]
100062ae:	681b      	ldr	r3, [r3, #0]
100062b0:	697a      	ldr	r2, [r7, #20]
100062b2:	430a      	orrs	r2, r1
100062b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
100062b6:	bf00      	nop
100062b8:	371c      	adds	r7, #28
100062ba:	46bd      	mov	sp, r7
100062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
100062c0:	4770      	bx	lr
100062c2:	bf00      	nop
100062c4:	03ff63ff 	.word	0x03ff63ff

100062c8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
100062c8:	b480      	push	{r7}
100062ca:	b085      	sub	sp, #20
100062cc:	af00      	add	r7, sp, #0
100062ce:	6078      	str	r0, [r7, #4]
100062d0:	460b      	mov	r3, r1
100062d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
100062d4:	2300      	movs	r3, #0
100062d6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
100062d8:	887b      	ldrh	r3, [r7, #2]
100062da:	f003 0301 	and.w	r3, r3, #1
100062de:	2b00      	cmp	r3, #0
100062e0:	d00f      	beq.n	10006302 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
100062e2:	68fb      	ldr	r3, [r7, #12]
100062e4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
100062e8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
100062ea:	687b      	ldr	r3, [r7, #4]
100062ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
100062f0:	b2db      	uxtb	r3, r3
100062f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
100062f6:	2b28      	cmp	r3, #40	@ 0x28
100062f8:	d003      	beq.n	10006302 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100062fa:	68fb      	ldr	r3, [r7, #12]
100062fc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
10006300:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
10006302:	887b      	ldrh	r3, [r7, #2]
10006304:	f003 0302 	and.w	r3, r3, #2
10006308:	2b00      	cmp	r3, #0
1000630a:	d00f      	beq.n	1000632c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
1000630c:	68fb      	ldr	r3, [r7, #12]
1000630e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
10006312:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
10006314:	687b      	ldr	r3, [r7, #4]
10006316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
1000631a:	b2db      	uxtb	r3, r3
1000631c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
10006320:	2b28      	cmp	r3, #40	@ 0x28
10006322:	d003      	beq.n	1000632c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10006324:	68fb      	ldr	r3, [r7, #12]
10006326:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
1000632a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1000632c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
10006330:	2b00      	cmp	r3, #0
10006332:	da03      	bge.n	1000633c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10006334:	68fb      	ldr	r3, [r7, #12]
10006336:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
1000633a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
1000633c:	887b      	ldrh	r3, [r7, #2]
1000633e:	2b10      	cmp	r3, #16
10006340:	d103      	bne.n	1000634a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
10006342:	68fb      	ldr	r3, [r7, #12]
10006344:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
10006348:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
1000634a:	887b      	ldrh	r3, [r7, #2]
1000634c:	2b20      	cmp	r3, #32
1000634e:	d103      	bne.n	10006358 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
10006350:	68fb      	ldr	r3, [r7, #12]
10006352:	f043 0320 	orr.w	r3, r3, #32
10006356:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
10006358:	887b      	ldrh	r3, [r7, #2]
1000635a:	2b40      	cmp	r3, #64	@ 0x40
1000635c:	d103      	bne.n	10006366 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
1000635e:	68fb      	ldr	r3, [r7, #12]
10006360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10006364:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
10006366:	687b      	ldr	r3, [r7, #4]
10006368:	681b      	ldr	r3, [r3, #0]
1000636a:	6819      	ldr	r1, [r3, #0]
1000636c:	68fb      	ldr	r3, [r7, #12]
1000636e:	43da      	mvns	r2, r3
10006370:	687b      	ldr	r3, [r7, #4]
10006372:	681b      	ldr	r3, [r3, #0]
10006374:	400a      	ands	r2, r1
10006376:	601a      	str	r2, [r3, #0]
}
10006378:	bf00      	nop
1000637a:	3714      	adds	r7, #20
1000637c:	46bd      	mov	sp, r7
1000637e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006382:	4770      	bx	lr

10006384 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
10006384:	b480      	push	{r7}
10006386:	b083      	sub	sp, #12
10006388:	af00      	add	r7, sp, #0
1000638a:	6078      	str	r0, [r7, #4]
1000638c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
1000638e:	687b      	ldr	r3, [r7, #4]
10006390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
10006394:	b2db      	uxtb	r3, r3
10006396:	2b20      	cmp	r3, #32
10006398:	d138      	bne.n	1000640c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
1000639a:	687b      	ldr	r3, [r7, #4]
1000639c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
100063a0:	2b01      	cmp	r3, #1
100063a2:	d101      	bne.n	100063a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
100063a4:	2302      	movs	r3, #2
100063a6:	e032      	b.n	1000640e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
100063a8:	687b      	ldr	r3, [r7, #4]
100063aa:	2201      	movs	r2, #1
100063ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
100063b0:	687b      	ldr	r3, [r7, #4]
100063b2:	2224      	movs	r2, #36	@ 0x24
100063b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
100063b8:	687b      	ldr	r3, [r7, #4]
100063ba:	681b      	ldr	r3, [r3, #0]
100063bc:	681a      	ldr	r2, [r3, #0]
100063be:	687b      	ldr	r3, [r7, #4]
100063c0:	681b      	ldr	r3, [r3, #0]
100063c2:	f022 0201 	bic.w	r2, r2, #1
100063c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
100063c8:	687b      	ldr	r3, [r7, #4]
100063ca:	681b      	ldr	r3, [r3, #0]
100063cc:	681a      	ldr	r2, [r3, #0]
100063ce:	687b      	ldr	r3, [r7, #4]
100063d0:	681b      	ldr	r3, [r3, #0]
100063d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
100063d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
100063d8:	687b      	ldr	r3, [r7, #4]
100063da:	681b      	ldr	r3, [r3, #0]
100063dc:	6819      	ldr	r1, [r3, #0]
100063de:	687b      	ldr	r3, [r7, #4]
100063e0:	681b      	ldr	r3, [r3, #0]
100063e2:	683a      	ldr	r2, [r7, #0]
100063e4:	430a      	orrs	r2, r1
100063e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
100063e8:	687b      	ldr	r3, [r7, #4]
100063ea:	681b      	ldr	r3, [r3, #0]
100063ec:	681a      	ldr	r2, [r3, #0]
100063ee:	687b      	ldr	r3, [r7, #4]
100063f0:	681b      	ldr	r3, [r3, #0]
100063f2:	f042 0201 	orr.w	r2, r2, #1
100063f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
100063f8:	687b      	ldr	r3, [r7, #4]
100063fa:	2220      	movs	r2, #32
100063fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10006400:	687b      	ldr	r3, [r7, #4]
10006402:	2200      	movs	r2, #0
10006404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
10006408:	2300      	movs	r3, #0
1000640a:	e000      	b.n	1000640e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
1000640c:	2302      	movs	r3, #2
  }
}
1000640e:	4618      	mov	r0, r3
10006410:	370c      	adds	r7, #12
10006412:	46bd      	mov	sp, r7
10006414:	f85d 7b04 	ldr.w	r7, [sp], #4
10006418:	4770      	bx	lr

1000641a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
1000641a:	b480      	push	{r7}
1000641c:	b085      	sub	sp, #20
1000641e:	af00      	add	r7, sp, #0
10006420:	6078      	str	r0, [r7, #4]
10006422:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10006424:	687b      	ldr	r3, [r7, #4]
10006426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
1000642a:	b2db      	uxtb	r3, r3
1000642c:	2b20      	cmp	r3, #32
1000642e:	d139      	bne.n	100064a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10006430:	687b      	ldr	r3, [r7, #4]
10006432:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
10006436:	2b01      	cmp	r3, #1
10006438:	d101      	bne.n	1000643e <HAL_I2CEx_ConfigDigitalFilter+0x24>
1000643a:	2302      	movs	r3, #2
1000643c:	e033      	b.n	100064a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
1000643e:	687b      	ldr	r3, [r7, #4]
10006440:	2201      	movs	r2, #1
10006442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
10006446:	687b      	ldr	r3, [r7, #4]
10006448:	2224      	movs	r2, #36	@ 0x24
1000644a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
1000644e:	687b      	ldr	r3, [r7, #4]
10006450:	681b      	ldr	r3, [r3, #0]
10006452:	681a      	ldr	r2, [r3, #0]
10006454:	687b      	ldr	r3, [r7, #4]
10006456:	681b      	ldr	r3, [r3, #0]
10006458:	f022 0201 	bic.w	r2, r2, #1
1000645c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
1000645e:	687b      	ldr	r3, [r7, #4]
10006460:	681b      	ldr	r3, [r3, #0]
10006462:	681b      	ldr	r3, [r3, #0]
10006464:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
10006466:	68fb      	ldr	r3, [r7, #12]
10006468:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
1000646c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
1000646e:	683b      	ldr	r3, [r7, #0]
10006470:	021b      	lsls	r3, r3, #8
10006472:	68fa      	ldr	r2, [r7, #12]
10006474:	4313      	orrs	r3, r2
10006476:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
10006478:	687b      	ldr	r3, [r7, #4]
1000647a:	681b      	ldr	r3, [r3, #0]
1000647c:	68fa      	ldr	r2, [r7, #12]
1000647e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10006480:	687b      	ldr	r3, [r7, #4]
10006482:	681b      	ldr	r3, [r3, #0]
10006484:	681a      	ldr	r2, [r3, #0]
10006486:	687b      	ldr	r3, [r7, #4]
10006488:	681b      	ldr	r3, [r3, #0]
1000648a:	f042 0201 	orr.w	r2, r2, #1
1000648e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10006490:	687b      	ldr	r3, [r7, #4]
10006492:	2220      	movs	r2, #32
10006494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10006498:	687b      	ldr	r3, [r7, #4]
1000649a:	2200      	movs	r2, #0
1000649c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
100064a0:	2300      	movs	r3, #0
100064a2:	e000      	b.n	100064a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
100064a4:	2302      	movs	r3, #2
  }
}
100064a6:	4618      	mov	r0, r3
100064a8:	3714      	adds	r7, #20
100064aa:	46bd      	mov	sp, r7
100064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
100064b0:	4770      	bx	lr
	...

100064b4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C6 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C6 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
100064b4:	b480      	push	{r7}
100064b6:	b083      	sub	sp, #12
100064b8:	af00      	add	r7, sp, #0
100064ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
100064bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100064c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
100064c4:	f8c3 2a90 	str.w	r2, [r3, #2704]	@ 0xa90

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCSETR, (uint32_t)ConfigFastModePlus);
100064c8:	4b05      	ldr	r3, [pc, #20]	@ (100064e0 <HAL_I2CEx_EnableFastModePlus+0x2c>)
100064ca:	685a      	ldr	r2, [r3, #4]
100064cc:	4904      	ldr	r1, [pc, #16]	@ (100064e0 <HAL_I2CEx_EnableFastModePlus+0x2c>)
100064ce:	687b      	ldr	r3, [r7, #4]
100064d0:	4313      	orrs	r3, r2
100064d2:	604b      	str	r3, [r1, #4]
}
100064d4:	bf00      	nop
100064d6:	370c      	adds	r7, #12
100064d8:	46bd      	mov	sp, r7
100064da:	f85d 7b04 	ldr.w	r7, [sp], #4
100064de:	4770      	bx	lr
100064e0:	50020000 	.word	0x50020000

100064e4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
100064e4:	b580      	push	{r7, lr}
100064e6:	b084      	sub	sp, #16
100064e8:	af00      	add	r7, sp, #0
100064ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
100064ec:	2300      	movs	r3, #0
100064ee:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
100064f0:	687b      	ldr	r3, [r7, #4]
100064f2:	2b00      	cmp	r3, #0
100064f4:	d01e      	beq.n	10006534 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

#if defined(CORE_CM4)
    IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100064f6:	4b13      	ldr	r3, [pc, #76]	@ (10006544 <HAL_IPCC_Init+0x60>)
100064f8:	60bb      	str	r3, [r7, #8]
#else
    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif

    if (hipcc->State == HAL_IPCC_STATE_RESET)
100064fa:	687b      	ldr	r3, [r7, #4]
100064fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10006500:	b2db      	uxtb	r3, r3
10006502:	2b00      	cmp	r3, #0
10006504:	d102      	bne.n	1000650c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
10006506:	6878      	ldr	r0, [r7, #4]
10006508:	f7fb ff5e 	bl	100023c8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
1000650c:	68b8      	ldr	r0, [r7, #8]
1000650e:	f000 f99d 	bl	1000684c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10006512:	68bb      	ldr	r3, [r7, #8]
10006514:	681b      	ldr	r3, [r3, #0]
10006516:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
1000651a:	68bb      	ldr	r3, [r7, #8]
1000651c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
1000651e:	6878      	ldr	r0, [r7, #4]
10006520:	f000 f96e 	bl	10006800 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
10006524:	687b      	ldr	r3, [r7, #4]
10006526:	2200      	movs	r2, #0
10006528:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
1000652a:	687b      	ldr	r3, [r7, #4]
1000652c:	2201      	movs	r2, #1
1000652e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
10006532:	e001      	b.n	10006538 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
10006534:	2301      	movs	r3, #1
10006536:	73fb      	strb	r3, [r7, #15]
  }

  return err;
10006538:	7bfb      	ldrb	r3, [r7, #15]
}
1000653a:	4618      	mov	r0, r3
1000653c:	3710      	adds	r7, #16
1000653e:	46bd      	mov	sp, r7
10006540:	bd80      	pop	{r7, pc}
10006542:	bf00      	nop
10006544:	4c001010 	.word	0x4c001010

10006548 <HAL_IPCC_ActivateNotification>:
  * @param  ChannelDir Channel direction
  * @param  cb Interrupt callback
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_ActivateNotification(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir, ChannelCb cb)
{
10006548:	b580      	push	{r7, lr}
1000654a:	b086      	sub	sp, #24
1000654c:	af00      	add	r7, sp, #0
1000654e:	60f8      	str	r0, [r7, #12]
10006550:	60b9      	str	r1, [r7, #8]
10006552:	603b      	str	r3, [r7, #0]
10006554:	4613      	mov	r3, r2
10006556:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
10006558:	2300      	movs	r3, #0
1000655a:	75fb      	strb	r3, [r7, #23]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
1000655c:	68fb      	ldr	r3, [r7, #12]
1000655e:	2b00      	cmp	r3, #0
10006560:	d039      	beq.n	100065d6 <HAL_IPCC_ActivateNotification+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    /* Check IPCC state */
    if (hipcc->State == HAL_IPCC_STATE_READY)
10006562:	68fb      	ldr	r3, [r7, #12]
10006564:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10006568:	b2db      	uxtb	r3, r3
1000656a:	2b01      	cmp	r3, #1
1000656c:	d130      	bne.n	100065d0 <HAL_IPCC_ActivateNotification+0x88>
    {
      /* Set callback and register masking information */
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
1000656e:	79fb      	ldrb	r3, [r7, #7]
10006570:	2b00      	cmp	r3, #0
10006572:	d113      	bne.n	1000659c <HAL_IPCC_ActivateNotification+0x54>
      {
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10006574:	68fa      	ldr	r2, [r7, #12]
10006576:	68bb      	ldr	r3, [r7, #8]
10006578:	3306      	adds	r3, #6
1000657a:	009b      	lsls	r3, r3, #2
1000657c:	4413      	add	r3, r2
1000657e:	683a      	ldr	r2, [r7, #0]
10006580:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10006582:	68fb      	ldr	r3, [r7, #12]
10006584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10006586:	68bb      	ldr	r3, [r7, #8]
10006588:	f003 030f 	and.w	r3, r3, #15
1000658c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
10006590:	fa01 f303 	lsl.w	r3, r1, r3
10006594:	431a      	orrs	r2, r3
10006596:	68fb      	ldr	r3, [r7, #12]
10006598:	635a      	str	r2, [r3, #52]	@ 0x34
1000659a:	e010      	b.n	100065be <HAL_IPCC_ActivateNotification+0x76>
      }
      else
      {
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
1000659c:	68fa      	ldr	r2, [r7, #12]
1000659e:	68bb      	ldr	r3, [r7, #8]
100065a0:	009b      	lsls	r3, r3, #2
100065a2:	4413      	add	r3, r2
100065a4:	683a      	ldr	r2, [r7, #0]
100065a6:	605a      	str	r2, [r3, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100065a8:	68fb      	ldr	r3, [r7, #12]
100065aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100065ac:	68bb      	ldr	r3, [r7, #8]
100065ae:	f003 030f 	and.w	r3, r3, #15
100065b2:	2101      	movs	r1, #1
100065b4:	fa01 f303 	lsl.w	r3, r1, r3
100065b8:	431a      	orrs	r2, r3
100065ba:	68fb      	ldr	r3, [r7, #12]
100065bc:	635a      	str	r2, [r3, #52]	@ 0x34
      }

      /* Unmask only the channels in reception (Transmission channel mask/unmask is done in HAL_IPCC_NotifyCPU) */
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
100065be:	79fb      	ldrb	r3, [r7, #7]
100065c0:	2b01      	cmp	r3, #1
100065c2:	d10a      	bne.n	100065da <HAL_IPCC_ActivateNotification+0x92>
      {
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
100065c4:	79fb      	ldrb	r3, [r7, #7]
100065c6:	4619      	mov	r1, r3
100065c8:	68b8      	ldr	r0, [r7, #8]
100065ca:	f000 f8eb 	bl	100067a4 <IPCC_UnmaskInterrupt>
100065ce:	e004      	b.n	100065da <HAL_IPCC_ActivateNotification+0x92>
      }
    }
    else
    {
      err = HAL_ERROR;
100065d0:	2301      	movs	r3, #1
100065d2:	75fb      	strb	r3, [r7, #23]
100065d4:	e001      	b.n	100065da <HAL_IPCC_ActivateNotification+0x92>
    }
  }
  else
  {
    err = HAL_ERROR;
100065d6:	2301      	movs	r3, #1
100065d8:	75fb      	strb	r3, [r7, #23]
  }
  return err;
100065da:	7dfb      	ldrb	r3, [r7, #23]
}
100065dc:	4618      	mov	r0, r3
100065de:	3718      	adds	r7, #24
100065e0:	46bd      	mov	sp, r7
100065e2:	bd80      	pop	{r7, pc}

100065e4 <HAL_IPCC_GetChannelStatus>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval Channel status
  */
IPCC_CHANNELStatusTypeDef HAL_IPCC_GetChannelStatus(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100065e4:	b480      	push	{r7}
100065e6:	b089      	sub	sp, #36	@ 0x24
100065e8:	af00      	add	r7, sp, #0
100065ea:	60f8      	str	r0, [r7, #12]
100065ec:	60b9      	str	r1, [r7, #8]
100065ee:	4613      	mov	r3, r2
100065f0:	71fb      	strb	r3, [r7, #7]
  uint32_t channel_state;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100065f2:	4b14      	ldr	r3, [pc, #80]	@ (10006644 <HAL_IPCC_GetChannelStatus+0x60>)
100065f4:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
100065f6:	4b14      	ldr	r3, [pc, #80]	@ (10006648 <HAL_IPCC_GetChannelStatus+0x64>)
100065f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Read corresponding channel depending of the MCU and the direction */
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100065fa:	79fb      	ldrb	r3, [r7, #7]
100065fc:	2b00      	cmp	r3, #0
100065fe:	d10a      	bne.n	10006616 <HAL_IPCC_GetChannelStatus+0x32>
  {
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10006600:	69bb      	ldr	r3, [r7, #24]
10006602:	68da      	ldr	r2, [r3, #12]
10006604:	68bb      	ldr	r3, [r7, #8]
10006606:	f003 030f 	and.w	r3, r3, #15
1000660a:	2101      	movs	r1, #1
1000660c:	fa01 f303 	lsl.w	r3, r1, r3
10006610:	4013      	ands	r3, r2
10006612:	61fb      	str	r3, [r7, #28]
10006614:	e009      	b.n	1000662a <HAL_IPCC_GetChannelStatus+0x46>
  }
  else
  {
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10006616:	697b      	ldr	r3, [r7, #20]
10006618:	68da      	ldr	r2, [r3, #12]
1000661a:	68bb      	ldr	r3, [r7, #8]
1000661c:	f003 030f 	and.w	r3, r3, #15
10006620:	2101      	movs	r1, #1
10006622:	fa01 f303 	lsl.w	r3, r1, r3
10006626:	4013      	ands	r3, r2
10006628:	61fb      	str	r3, [r7, #28]
  }

  return (channel_state == 0UL) ? IPCC_CHANNEL_STATUS_FREE : IPCC_CHANNEL_STATUS_OCCUPIED ;
1000662a:	69fb      	ldr	r3, [r7, #28]
1000662c:	2b00      	cmp	r3, #0
1000662e:	bf14      	ite	ne
10006630:	2301      	movne	r3, #1
10006632:	2300      	moveq	r3, #0
10006634:	b2db      	uxtb	r3, r3
}
10006636:	4618      	mov	r0, r3
10006638:	3724      	adds	r7, #36	@ 0x24
1000663a:	46bd      	mov	sp, r7
1000663c:	f85d 7b04 	ldr.w	r7, [sp], #4
10006640:	4770      	bx	lr
10006642:	bf00      	nop
10006644:	4c001010 	.word	0x4c001010
10006648:	4c001000 	.word	0x4c001000

1000664c <HAL_IPCC_NotifyCPU>:
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_NotifyCPU(IPCC_HandleTypeDef const *const hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000664c:	b580      	push	{r7, lr}
1000664e:	b088      	sub	sp, #32
10006650:	af00      	add	r7, sp, #0
10006652:	60f8      	str	r0, [r7, #12]
10006654:	60b9      	str	r1, [r7, #8]
10006656:	4613      	mov	r3, r2
10006658:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef err = HAL_OK;
1000665a:	2300      	movs	r3, #0
1000665c:	77fb      	strb	r3, [r7, #31]
  uint32_t mask;
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
1000665e:	4b1d      	ldr	r3, [pc, #116]	@ (100066d4 <HAL_IPCC_NotifyCPU+0x88>)
10006660:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

  /* Check if IPCC is initiliased */
  if (hipcc->State == HAL_IPCC_STATE_READY)
10006662:	68fb      	ldr	r3, [r7, #12]
10006664:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
10006668:	b2db      	uxtb	r3, r3
1000666a:	2b01      	cmp	r3, #1
1000666c:	d12a      	bne.n	100066c4 <HAL_IPCC_NotifyCPU+0x78>
  {
    /* For IPCC_CHANNEL_DIR_TX, set the status. For IPCC_CHANNEL_DIR_RX, clear the status */
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
1000666e:	69bb      	ldr	r3, [r7, #24]
10006670:	689a      	ldr	r2, [r3, #8]
10006672:	79fb      	ldrb	r3, [r7, #7]
10006674:	2b00      	cmp	r3, #0
10006676:	d102      	bne.n	1000667e <HAL_IPCC_NotifyCPU+0x32>
10006678:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
1000667c:	e000      	b.n	10006680 <HAL_IPCC_NotifyCPU+0x34>
1000667e:	2101      	movs	r1, #1
10006680:	68bb      	ldr	r3, [r7, #8]
10006682:	f003 030f 	and.w	r3, r3, #15
10006686:	fa01 f303 	lsl.w	r3, r1, r3
1000668a:	431a      	orrs	r2, r3
1000668c:	69bb      	ldr	r3, [r7, #24]
1000668e:	609a      	str	r2, [r3, #8]

    /* Unmask interrupt if the callback is requested */
    mask = ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_MR_CH1FM_Msk : IPCC_MR_CH1OM_Msk) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10006690:	79fb      	ldrb	r3, [r7, #7]
10006692:	2b00      	cmp	r3, #0
10006694:	d102      	bne.n	1000669c <HAL_IPCC_NotifyCPU+0x50>
10006696:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
1000669a:	e000      	b.n	1000669e <HAL_IPCC_NotifyCPU+0x52>
1000669c:	2201      	movs	r2, #1
1000669e:	68bb      	ldr	r3, [r7, #8]
100066a0:	f003 030f 	and.w	r3, r3, #15
100066a4:	fa02 f303 	lsl.w	r3, r2, r3
100066a8:	617b      	str	r3, [r7, #20]
    if ((hipcc->callbackRequest & mask) == mask)
100066aa:	68fb      	ldr	r3, [r7, #12]
100066ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100066ae:	697b      	ldr	r3, [r7, #20]
100066b0:	4013      	ands	r3, r2
100066b2:	697a      	ldr	r2, [r7, #20]
100066b4:	429a      	cmp	r2, r3
100066b6:	d107      	bne.n	100066c8 <HAL_IPCC_NotifyCPU+0x7c>
    {
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
100066b8:	79fb      	ldrb	r3, [r7, #7]
100066ba:	4619      	mov	r1, r3
100066bc:	68b8      	ldr	r0, [r7, #8]
100066be:	f000 f871 	bl	100067a4 <IPCC_UnmaskInterrupt>
100066c2:	e001      	b.n	100066c8 <HAL_IPCC_NotifyCPU+0x7c>
    }
  }
  else
  {
    err = HAL_ERROR;
100066c4:	2301      	movs	r3, #1
100066c6:	77fb      	strb	r3, [r7, #31]
  }

  return err;
100066c8:	7ffb      	ldrb	r3, [r7, #31]
}
100066ca:	4618      	mov	r0, r3
100066cc:	3720      	adds	r7, #32
100066ce:	46bd      	mov	sp, r7
100066d0:	bd80      	pop	{r7, pc}
100066d2:	bf00      	nop
100066d4:	4c001010 	.word	0x4c001010

100066d8 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
100066d8:	b580      	push	{r7, lr}
100066da:	b088      	sub	sp, #32
100066dc:	af00      	add	r7, sp, #0
100066de:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
100066e0:	2300      	movs	r3, #0
100066e2:	61bb      	str	r3, [r7, #24]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100066e4:	4b20      	ldr	r3, [pc, #128]	@ (10006768 <HAL_IPCC_RX_IRQHandler+0x90>)
100066e6:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C1;
100066e8:	4b20      	ldr	r3, [pc, #128]	@ (1000676c <HAL_IPCC_RX_IRQHandler+0x94>)
100066ea:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
#endif

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
100066ec:	697b      	ldr	r3, [r7, #20]
100066ee:	685b      	ldr	r3, [r3, #4]
100066f0:	43db      	mvns	r3, r3
100066f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
100066f6:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
100066f8:	693b      	ldr	r3, [r7, #16]
100066fa:	68db      	ldr	r3, [r3, #12]
100066fc:	69fa      	ldr	r2, [r7, #28]
100066fe:	4013      	ands	r3, r2
10006700:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10006702:	e029      	b.n	10006758 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10006704:	69bb      	ldr	r3, [r7, #24]
10006706:	f003 030f 	and.w	r3, r3, #15
1000670a:	2201      	movs	r2, #1
1000670c:	fa02 f303 	lsl.w	r3, r2, r3
10006710:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
10006712:	69fa      	ldr	r2, [r7, #28]
10006714:	68fb      	ldr	r3, [r7, #12]
10006716:	4013      	ands	r3, r2
10006718:	2b00      	cmp	r3, #0
1000671a:	d01a      	beq.n	10006752 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
1000671c:	697b      	ldr	r3, [r7, #20]
1000671e:	685a      	ldr	r2, [r3, #4]
10006720:	68fb      	ldr	r3, [r7, #12]
10006722:	431a      	orrs	r2, r3
10006724:	697b      	ldr	r3, [r7, #20]
10006726:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10006728:	687a      	ldr	r2, [r7, #4]
1000672a:	69bb      	ldr	r3, [r7, #24]
1000672c:	009b      	lsls	r3, r3, #2
1000672e:	4413      	add	r3, r2
10006730:	685b      	ldr	r3, [r3, #4]
10006732:	2b00      	cmp	r3, #0
10006734:	d008      	beq.n	10006748 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10006736:	687a      	ldr	r2, [r7, #4]
10006738:	69bb      	ldr	r3, [r7, #24]
1000673a:	009b      	lsls	r3, r3, #2
1000673c:	4413      	add	r3, r2
1000673e:	685b      	ldr	r3, [r3, #4]
10006740:	2201      	movs	r2, #1
10006742:	69b9      	ldr	r1, [r7, #24]
10006744:	6878      	ldr	r0, [r7, #4]
10006746:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
10006748:	68fb      	ldr	r3, [r7, #12]
1000674a:	43db      	mvns	r3, r3
1000674c:	69fa      	ldr	r2, [r7, #28]
1000674e:	4013      	ands	r3, r2
10006750:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
10006752:	69bb      	ldr	r3, [r7, #24]
10006754:	3301      	adds	r3, #1
10006756:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10006758:	69fb      	ldr	r3, [r7, #28]
1000675a:	2b00      	cmp	r3, #0
1000675c:	d1d2      	bne.n	10006704 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
1000675e:	bf00      	nop
10006760:	bf00      	nop
10006762:	3720      	adds	r7, #32
10006764:	46bd      	mov	sp, r7
10006766:	bd80      	pop	{r7, pc}
10006768:	4c001010 	.word	0x4c001010
1000676c:	4c001000 	.word	0x4c001000

10006770 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10006770:	b480      	push	{r7}
10006772:	b085      	sub	sp, #20
10006774:	af00      	add	r7, sp, #0
10006776:	60f8      	str	r0, [r7, #12]
10006778:	60b9      	str	r1, [r7, #8]
1000677a:	4613      	mov	r3, r2
1000677c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
1000677e:	bf00      	nop
10006780:	3714      	adds	r7, #20
10006782:	46bd      	mov	sp, r7
10006784:	f85d 7b04 	ldr.w	r7, [sp], #4
10006788:	4770      	bx	lr

1000678a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
1000678a:	b480      	push	{r7}
1000678c:	b085      	sub	sp, #20
1000678e:	af00      	add	r7, sp, #0
10006790:	60f8      	str	r0, [r7, #12]
10006792:	60b9      	str	r1, [r7, #8]
10006794:	4613      	mov	r3, r2
10006796:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
10006798:	bf00      	nop
1000679a:	3714      	adds	r7, #20
1000679c:	46bd      	mov	sp, r7
1000679e:	f85d 7b04 	ldr.w	r7, [sp], #4
100067a2:	4770      	bx	lr

100067a4 <IPCC_UnmaskInterrupt>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param  ChannelDir Channel direction
  */
void IPCC_UnmaskInterrupt(uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100067a4:	b480      	push	{r7}
100067a6:	b085      	sub	sp, #20
100067a8:	af00      	add	r7, sp, #0
100067aa:	6078      	str	r0, [r7, #4]
100067ac:	460b      	mov	r3, r1
100067ae:	70fb      	strb	r3, [r7, #3]
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
100067b0:	4b12      	ldr	r3, [pc, #72]	@ (100067fc <IPCC_UnmaskInterrupt+0x58>)
100067b2:	60fb      	str	r3, [r7, #12]
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100067b4:	78fb      	ldrb	r3, [r7, #3]
100067b6:	2b00      	cmp	r3, #0
100067b8:	d10d      	bne.n	100067d6 <IPCC_UnmaskInterrupt+0x32>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100067ba:	68fb      	ldr	r3, [r7, #12]
100067bc:	685a      	ldr	r2, [r3, #4]
100067be:	687b      	ldr	r3, [r7, #4]
100067c0:	f003 030f 	and.w	r3, r3, #15
100067c4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
100067c8:	fa01 f303 	lsl.w	r3, r1, r3
100067cc:	43db      	mvns	r3, r3
100067ce:	401a      	ands	r2, r3
100067d0:	68fb      	ldr	r3, [r7, #12]
100067d2:	605a      	str	r2, [r3, #4]
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
  }
}
100067d4:	e00b      	b.n	100067ee <IPCC_UnmaskInterrupt+0x4a>
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100067d6:	68fb      	ldr	r3, [r7, #12]
100067d8:	685a      	ldr	r2, [r3, #4]
100067da:	687b      	ldr	r3, [r7, #4]
100067dc:	f003 030f 	and.w	r3, r3, #15
100067e0:	2101      	movs	r1, #1
100067e2:	fa01 f303 	lsl.w	r3, r1, r3
100067e6:	43db      	mvns	r3, r3
100067e8:	401a      	ands	r2, r3
100067ea:	68fb      	ldr	r3, [r7, #12]
100067ec:	605a      	str	r2, [r3, #4]
}
100067ee:	bf00      	nop
100067f0:	3714      	adds	r7, #20
100067f2:	46bd      	mov	sp, r7
100067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
100067f8:	4770      	bx	lr
100067fa:	bf00      	nop
100067fc:	4c001010 	.word	0x4c001010

10006800 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
10006800:	b480      	push	{r7}
10006802:	b085      	sub	sp, #20
10006804:	af00      	add	r7, sp, #0
10006806:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10006808:	2300      	movs	r3, #0
1000680a:	60fb      	str	r3, [r7, #12]
1000680c:	e00f      	b.n	1000682e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
1000680e:	687a      	ldr	r2, [r7, #4]
10006810:	68fb      	ldr	r3, [r7, #12]
10006812:	009b      	lsls	r3, r3, #2
10006814:	4413      	add	r3, r2
10006816:	4a0b      	ldr	r2, [pc, #44]	@ (10006844 <IPCC_SetDefaultCallbacks+0x44>)
10006818:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
1000681a:	687a      	ldr	r2, [r7, #4]
1000681c:	68fb      	ldr	r3, [r7, #12]
1000681e:	3306      	adds	r3, #6
10006820:	009b      	lsls	r3, r3, #2
10006822:	4413      	add	r3, r2
10006824:	4a08      	ldr	r2, [pc, #32]	@ (10006848 <IPCC_SetDefaultCallbacks+0x48>)
10006826:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10006828:	68fb      	ldr	r3, [r7, #12]
1000682a:	3301      	adds	r3, #1
1000682c:	60fb      	str	r3, [r7, #12]
1000682e:	68fb      	ldr	r3, [r7, #12]
10006830:	2b05      	cmp	r3, #5
10006832:	d9ec      	bls.n	1000680e <IPCC_SetDefaultCallbacks+0xe>
  }
}
10006834:	bf00      	nop
10006836:	bf00      	nop
10006838:	3714      	adds	r7, #20
1000683a:	46bd      	mov	sp, r7
1000683c:	f85d 7b04 	ldr.w	r7, [sp], #4
10006840:	4770      	bx	lr
10006842:	bf00      	nop
10006844:	10006771 	.word	0x10006771
10006848:	1000678b 	.word	0x1000678b

1000684c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
1000684c:	b480      	push	{r7}
1000684e:	b083      	sub	sp, #12
10006850:	af00      	add	r7, sp, #0
10006852:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10006854:	687b      	ldr	r3, [r7, #4]
10006856:	2200      	movs	r2, #0
10006858:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
1000685a:	687b      	ldr	r3, [r7, #4]
1000685c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
10006860:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
10006862:	687b      	ldr	r3, [r7, #4]
10006864:	223f      	movs	r2, #63	@ 0x3f
10006866:	609a      	str	r2, [r3, #8]
}
10006868:	bf00      	nop
1000686a:	370c      	adds	r7, #12
1000686c:	46bd      	mov	sp, r7
1000686e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006872:	4770      	bx	lr

10006874 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10006874:	b480      	push	{r7}
10006876:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10006878:	4b05      	ldr	r3, [pc, #20]	@ (10006890 <HAL_PWR_EnableBkUpAccess+0x1c>)
1000687a:	681b      	ldr	r3, [r3, #0]
1000687c:	4a04      	ldr	r2, [pc, #16]	@ (10006890 <HAL_PWR_EnableBkUpAccess+0x1c>)
1000687e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10006882:	6013      	str	r3, [r2, #0]
}
10006884:	bf00      	nop
10006886:	46bd      	mov	sp, r7
10006888:	f85d 7b04 	ldr.w	r7, [sp], #4
1000688c:	4770      	bx	lr
1000688e:	bf00      	nop
10006890:	50001000 	.word	0x50001000

10006894 <HAL_RCC_DeInit>:
  *            - LSI, LSE and RTC clock
  *            - HSECSS and LSECSS
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
10006894:	b580      	push	{r7, lr}
10006896:	b082      	sub	sp, #8
10006898:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set HSION bit to enable HSI oscillator */
  SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSION);
1000689a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000689e:	68db      	ldr	r3, [r3, #12]
100068a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100068a4:	f043 0301 	orr.w	r3, r3, #1
100068a8:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100068aa:	f7fd fd89 	bl	100043c0 <HAL_GetTick>
100068ae:	6078      	str	r0, [r7, #4]

  /* Wait till HSI is ready */
  while ((RCC->OCRDYR & RCC_OCRDYR_HSIRDY) == 0U)
100068b0:	e008      	b.n	100068c4 <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100068b2:	f7fd fd85 	bl	100043c0 <HAL_GetTick>
100068b6:	4602      	mov	r2, r0
100068b8:	687b      	ldr	r3, [r7, #4]
100068ba:	1ad3      	subs	r3, r2, r3
100068bc:	2b64      	cmp	r3, #100	@ 0x64
100068be:	d901      	bls.n	100068c4 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
100068c0:	2303      	movs	r3, #3
100068c2:	e215      	b.n	10006cf0 <HAL_RCC_DeInit+0x45c>
  while ((RCC->OCRDYR & RCC_OCRDYR_HSIRDY) == 0U)
100068c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100068c8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100068cc:	f003 0301 	and.w	r3, r3, #1
100068d0:	2b00      	cmp	r3, #0
100068d2:	d0ee      	beq.n	100068b2 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Reset MCO1 Configuration Register */
  CLEAR_REG(RCC->MCO1CFGR);
100068d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100068d8:	2200      	movs	r2, #0
100068da:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  /* Reset MCO2 Configuration Register */
  CLEAR_REG(RCC->MCO2CFGR);
100068de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100068e2:	2200      	movs	r2, #0
100068e4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  /* Reset MPU Clock Selection Register */
  MODIFY_REG(RCC->MPCKSELR, (RCC_MPCKSELR_MPUSRC), 0U);
100068e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100068ec:	6a1b      	ldr	r3, [r3, #32]
100068ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100068f2:	f023 0303 	bic.w	r3, r3, #3
100068f6:	6213      	str	r3, [r2, #32]

  /* Reset AXI Sub-System Clock Selection Register */
  MODIFY_REG(RCC->ASSCKSELR, (RCC_ASSCKSELR_AXISSRC), 0U);
100068f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100068fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100068fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006902:	f023 0307 	bic.w	r3, r3, #7
10006906:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Reset MCU Sub-System Clock Selection Register */
  MODIFY_REG(RCC->MSSCKSELR, (RCC_MSSCKSELR_MCUSSRC), 0U);
10006908:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000690c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000690e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006912:	f023 0303 	bic.w	r3, r3, #3
10006916:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Reset RCC MPU Clock Divider Register */
  MODIFY_REG(RCC->MPCKDIVR, (RCC_MPCKDIVR_MPUDIV), RCC_MPCKDIVR_MPUDIV_0);
10006918:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000691e:	f023 0307 	bic.w	r3, r3, #7
10006922:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006926:	f043 0301 	orr.w	r3, r3, #1
1000692a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset RCC AXI Clock Divider Register */
  MODIFY_REG(RCC->AXIDIVR, (RCC_AXIDIVR_AXIDIV), 0U);
1000692c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10006932:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006936:	f023 0307 	bic.w	r3, r3, #7
1000693a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Reset RCC APB4 Clock Divider Register */
  MODIFY_REG(RCC->APB4DIVR, (RCC_APB4DIVR_APB4DIV), 0U);
1000693c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10006942:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006946:	f023 0307 	bic.w	r3, r3, #7
1000694a:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset RCC APB5 Clock Divider Register */
  MODIFY_REG(RCC->APB5DIVR, (RCC_APB5DIVR_APB5DIV), 0U);
1000694c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10006952:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006956:	f023 0307 	bic.w	r3, r3, #7
1000695a:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Reset RCC MCU Clock Divider Register */
  MODIFY_REG(RCC->MCUDIVR, (RCC_MCUDIVR_MCUDIV), 0U);
1000695c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006960:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10006964:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006968:	f023 030f 	bic.w	r3, r3, #15
1000696c:	f8c2 3830 	str.w	r3, [r2, #2096]	@ 0x830

  /* Reset RCC APB1 Clock Divider Register */
  MODIFY_REG(RCC->APB1DIVR, (RCC_APB1DIVR_APB1DIV), 0U);
10006970:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006974:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
10006978:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000697c:	f023 0307 	bic.w	r3, r3, #7
10006980:	f8c2 3834 	str.w	r3, [r2, #2100]	@ 0x834

  /* Reset RCC APB2 Clock Divider Register */
  MODIFY_REG(RCC->APB2DIVR, (RCC_APB2DIVR_APB2DIV), 0U);
10006984:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006988:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
1000698c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006990:	f023 0307 	bic.w	r3, r3, #7
10006994:	f8c2 3838 	str.w	r3, [r2, #2104]	@ 0x838

  /* Reset RCC APB3 Clock Divider Register */
  MODIFY_REG(RCC->APB3DIVR, (RCC_APB3DIVR_APB3DIV), 0U);
10006998:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000699c:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
100069a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100069a4:	f023 0307 	bic.w	r3, r3, #7
100069a8:	f8c2 383c 	str.w	r3, [r2, #2108]	@ 0x83c

  /* Disable PLL1 outputs */
  CLEAR_BIT(RCC->PLL1CR, RCC_PLL1CR_DIVPEN | RCC_PLL1CR_DIVQEN |
100069ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100069b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100069b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100069b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100069bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
            RCC_PLL1CR_DIVREN);

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100069c0:	f7fd fcfe 	bl	100043c0 <HAL_GetTick>
100069c4:	6078      	str	r0, [r7, #4]

  /* Disable PLL1 */
  CLEAR_BIT(RCC->PLL1CR, RCC_PLL1CR_PLLON);
100069c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100069ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100069ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100069d2:	f023 0301 	bic.w	r3, r3, #1
100069d6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Wait till PLL is disabled */
  while ((RCC->PLL1CR & RCC_PLL1CR_PLL1RDY) != 0U)
100069da:	e008      	b.n	100069ee <HAL_RCC_DeInit+0x15a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100069dc:	f7fd fcf0 	bl	100043c0 <HAL_GetTick>
100069e0:	4602      	mov	r2, r0
100069e2:	687b      	ldr	r3, [r7, #4]
100069e4:	1ad3      	subs	r3, r2, r3
100069e6:	2b64      	cmp	r3, #100	@ 0x64
100069e8:	d901      	bls.n	100069ee <HAL_RCC_DeInit+0x15a>
    {
      return HAL_TIMEOUT;
100069ea:	2303      	movs	r3, #3
100069ec:	e180      	b.n	10006cf0 <HAL_RCC_DeInit+0x45c>
  while ((RCC->PLL1CR & RCC_PLL1CR_PLL1RDY) != 0U)
100069ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100069f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100069f6:	f003 0302 	and.w	r3, r3, #2
100069fa:	2b00      	cmp	r3, #0
100069fc:	d1ee      	bne.n	100069dc <HAL_RCC_DeInit+0x148>
    }
  }

  /* Clear remaining SSCG_CTRL bit */
  CLEAR_BIT(RCC->PLL1CR, RCC_PLL1CR_SSCG_CTRL);
100069fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10006a06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006a0a:	f023 0304 	bic.w	r3, r3, #4
10006a0e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Disable PLL2 outputs */
  CLEAR_BIT(RCC->PLL2CR, RCC_PLL2CR_DIVPEN | RCC_PLL2CR_DIVQEN |
10006a12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10006a1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10006a22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
            RCC_PLL2CR_DIVREN);

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10006a26:	f7fd fccb 	bl	100043c0 <HAL_GetTick>
10006a2a:	6078      	str	r0, [r7, #4]

  /* Disable PLL2 */
  CLEAR_BIT(RCC->PLL2CR, RCC_PLL2CR_PLLON);
10006a2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10006a34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006a38:	f023 0301 	bic.w	r3, r3, #1
10006a3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Wait till PLL is disabled */
  while ((RCC->PLL2CR & RCC_PLL2CR_PLL2RDY) != 0U)
10006a40:	e008      	b.n	10006a54 <HAL_RCC_DeInit+0x1c0>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10006a42:	f7fd fcbd 	bl	100043c0 <HAL_GetTick>
10006a46:	4602      	mov	r2, r0
10006a48:	687b      	ldr	r3, [r7, #4]
10006a4a:	1ad3      	subs	r3, r2, r3
10006a4c:	2b64      	cmp	r3, #100	@ 0x64
10006a4e:	d901      	bls.n	10006a54 <HAL_RCC_DeInit+0x1c0>
    {
      return HAL_TIMEOUT;
10006a50:	2303      	movs	r3, #3
10006a52:	e14d      	b.n	10006cf0 <HAL_RCC_DeInit+0x45c>
  while ((RCC->PLL2CR & RCC_PLL2CR_PLL2RDY) != 0U)
10006a54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10006a5c:	f003 0302 	and.w	r3, r3, #2
10006a60:	2b00      	cmp	r3, #0
10006a62:	d1ee      	bne.n	10006a42 <HAL_RCC_DeInit+0x1ae>
    }
  }

  /* Clear remaining SSCG_CTRL bit */
  CLEAR_BIT(RCC->PLL2CR, RCC_PLL2CR_SSCG_CTRL);
10006a64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10006a6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006a70:	f023 0304 	bic.w	r3, r3, #4
10006a74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Disable PLL3 outputs */
  CLEAR_BIT(RCC->PLL3CR, RCC_PLL3CR_DIVPEN | RCC_PLL3CR_DIVQEN |
10006a78:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006a7c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006a80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10006a88:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
            RCC_PLL3CR_DIVREN);

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10006a8c:	f7fd fc98 	bl	100043c0 <HAL_GetTick>
10006a90:	6078      	str	r0, [r7, #4]

  /* Disable PLL3 */
  CLEAR_BIT(RCC->PLL3CR, RCC_PLL3CR_PLLON);
10006a92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006a96:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006a9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006a9e:	f023 0301 	bic.w	r3, r3, #1
10006aa2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

  /* Wait till PLL is disabled */
  while ((RCC->PLL3CR & RCC_PLL3CR_PLL3RDY) != 0U)
10006aa6:	e008      	b.n	10006aba <HAL_RCC_DeInit+0x226>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10006aa8:	f7fd fc8a 	bl	100043c0 <HAL_GetTick>
10006aac:	4602      	mov	r2, r0
10006aae:	687b      	ldr	r3, [r7, #4]
10006ab0:	1ad3      	subs	r3, r2, r3
10006ab2:	2b64      	cmp	r3, #100	@ 0x64
10006ab4:	d901      	bls.n	10006aba <HAL_RCC_DeInit+0x226>
    {
      return HAL_TIMEOUT;
10006ab6:	2303      	movs	r3, #3
10006ab8:	e11a      	b.n	10006cf0 <HAL_RCC_DeInit+0x45c>
  while ((RCC->PLL3CR & RCC_PLL3CR_PLL3RDY) != 0U)
10006aba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006abe:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006ac2:	f003 0302 	and.w	r3, r3, #2
10006ac6:	2b00      	cmp	r3, #0
10006ac8:	d1ee      	bne.n	10006aa8 <HAL_RCC_DeInit+0x214>
    }
  }

  /* Clear remaining SSCG_CTRL bit */
  CLEAR_BIT(RCC->PLL3CR, RCC_PLL3CR_SSCG_CTRL);
10006aca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006ace:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006ad2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006ad6:	f023 0304 	bic.w	r3, r3, #4
10006ada:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

  /* Disable PLL4 outputs */
  CLEAR_BIT(RCC->PLL4CR, RCC_PLL4CR_DIVPEN | RCC_PLL4CR_DIVQEN |
10006ade:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006ae2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006ae6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10006aee:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
            RCC_PLL4CR_DIVREN);

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10006af2:	f7fd fc65 	bl	100043c0 <HAL_GetTick>
10006af6:	6078      	str	r0, [r7, #4]

  /* Disable PLL4 */
  CLEAR_BIT(RCC->PLL4CR, RCC_PLL4CR_PLLON);
10006af8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006afc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006b00:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006b04:	f023 0301 	bic.w	r3, r3, #1
10006b08:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

  /* Wait till PLL is disabled */
  while ((RCC->PLL4CR & RCC_PLL4CR_PLL4RDY) != 0U)
10006b0c:	e008      	b.n	10006b20 <HAL_RCC_DeInit+0x28c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10006b0e:	f7fd fc57 	bl	100043c0 <HAL_GetTick>
10006b12:	4602      	mov	r2, r0
10006b14:	687b      	ldr	r3, [r7, #4]
10006b16:	1ad3      	subs	r3, r2, r3
10006b18:	2b64      	cmp	r3, #100	@ 0x64
10006b1a:	d901      	bls.n	10006b20 <HAL_RCC_DeInit+0x28c>
    {
      return HAL_TIMEOUT;
10006b1c:	2303      	movs	r3, #3
10006b1e:	e0e7      	b.n	10006cf0 <HAL_RCC_DeInit+0x45c>
  while ((RCC->PLL4CR & RCC_PLL4CR_PLL4RDY) != 0U)
10006b20:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006b24:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006b28:	f003 0302 	and.w	r3, r3, #2
10006b2c:	2b00      	cmp	r3, #0
10006b2e:	d1ee      	bne.n	10006b0e <HAL_RCC_DeInit+0x27a>
    }
  }

  /* Clear remaining SSCG_CTRL bit */
  CLEAR_BIT(RCC->PLL4CR, RCC_PLL4CR_SSCG_CTRL);
10006b30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006b34:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006b38:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006b3c:	f023 0304 	bic.w	r3, r3, #4
10006b40:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

  /* Reset PLL 1 and 2 Ref. Clock Selection Register */
  MODIFY_REG(RCC->RCK12SELR, (RCC_RCK12SELR_PLL12SRC), 0U);
10006b44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006b4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006b4e:	f023 0303 	bic.w	r3, r3, #3
10006b52:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Reset RCC PLL 3 Ref. Clock Selection Register */
  MODIFY_REG(RCC->RCK3SELR, (RCC_RCK3SELR_PLL3SRC), 0U);
10006b54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006b58:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10006b5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006b60:	f023 0303 	bic.w	r3, r3, #3
10006b64:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820

  /* Reset PLL4 Ref. Clock Selection Register */
  MODIFY_REG(RCC->RCK4SELR, (RCC_RCK4SELR_PLL4SRC), 0U);
10006b68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006b6c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10006b70:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006b74:	f023 0303 	bic.w	r3, r3, #3
10006b78:	f8c2 3824 	str.w	r3, [r2, #2084]	@ 0x824

  /* Reset RCC PLL1 Configuration Register 1 */
  WRITE_REG(RCC->PLL1CFGR1, 0x00010031U);
10006b7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006b80:	4a5d      	ldr	r2, [pc, #372]	@ (10006cf8 <HAL_RCC_DeInit+0x464>)
10006b82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset RCC PLL1 Configuration Register 2 */
  WRITE_REG(RCC->PLL1CFGR2, 0x00010100U);
10006b86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006b8a:	4a5c      	ldr	r2, [pc, #368]	@ (10006cfc <HAL_RCC_DeInit+0x468>)
10006b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Reset RCC PLL1 Fractional Register */
  CLEAR_REG(RCC->PLL1FRACR);
10006b90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006b94:	2200      	movs	r2, #0
10006b96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Reset RCC PLL1 Clock Spreading Generator Register */
  CLEAR_REG(RCC->PLL1CSGR);
10006b9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006b9e:	2200      	movs	r2, #0
10006ba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Reset RCC PLL2 Configuration Register 1 */
  WRITE_REG(RCC->PLL2CFGR1, 0x00010063U);
10006ba4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006ba8:	4a55      	ldr	r2, [pc, #340]	@ (10006d00 <HAL_RCC_DeInit+0x46c>)
10006baa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Reset RCC PLL2 Configuration Register 2 */
  WRITE_REG(RCC->PLL2CFGR2, 0x00010101U);
10006bae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006bb2:	4a54      	ldr	r2, [pc, #336]	@ (10006d04 <HAL_RCC_DeInit+0x470>)
10006bb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Reset RCC PLL2 Fractional Register */
  CLEAR_REG(RCC->PLL2FRACR);
10006bb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006bbc:	2200      	movs	r2, #0
10006bbe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Reset RCC PLL2 Clock Spreading Generator Register */
  CLEAR_REG(RCC->PLL2CSGR);
10006bc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006bc6:	2200      	movs	r2, #0
10006bc8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Reset RCC PLL3 Configuration Register 1 */
  WRITE_REG(RCC->PLL3CFGR1, 0x00010031U);
10006bcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006bd0:	4a49      	ldr	r2, [pc, #292]	@ (10006cf8 <HAL_RCC_DeInit+0x464>)
10006bd2:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884

  /* Reset RCC PLL3 Configuration Register 2 */
  WRITE_REG(RCC->PLL3CFGR2, 0x00010101U);
10006bd6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006bda:	4a4a      	ldr	r2, [pc, #296]	@ (10006d04 <HAL_RCC_DeInit+0x470>)
10006bdc:	f8c3 2888 	str.w	r2, [r3, #2184]	@ 0x888

  /* Reset RCC PLL3 Fractional Register */
  CLEAR_REG(RCC->PLL3FRACR);
10006be0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006be4:	2200      	movs	r2, #0
10006be6:	f8c3 288c 	str.w	r2, [r3, #2188]	@ 0x88c

  /* Reset RCC PLL3 Clock Spreading Generator Register */
  CLEAR_REG(RCC->PLL3CSGR);
10006bea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006bee:	2200      	movs	r2, #0
10006bf0:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890

  /* Reset RCC PLL4 Configuration Register 1 */
  WRITE_REG(RCC->PLL4CFGR1, 0x00010031U);
10006bf4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006bf8:	4a3f      	ldr	r2, [pc, #252]	@ (10006cf8 <HAL_RCC_DeInit+0x464>)
10006bfa:	f8c3 2898 	str.w	r2, [r3, #2200]	@ 0x898

  /* Reset RCC PLL4 Configuration Register 2 */
  WRITE_REG(RCC->PLL4CFGR2, 0x00000000U);
10006bfe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c02:	2200      	movs	r2, #0
10006c04:	f8c3 289c 	str.w	r2, [r3, #2204]	@ 0x89c

  /* Reset RCC PLL4 Fractional Register */
  CLEAR_REG(RCC->PLL4FRACR);
10006c08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c0c:	2200      	movs	r2, #0
10006c0e:	f8c3 28a0 	str.w	r2, [r3, #2208]	@ 0x8a0

  /* Reset RCC PLL4 Clock Spreading Generator Register */
  CLEAR_REG(RCC->PLL4CSGR);
10006c12:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c16:	2200      	movs	r2, #0
10006c18:	f8c3 28a4 	str.w	r2, [r3, #2212]	@ 0x8a4

  /* Reset HSIDIV once PLLs are off */
  CLEAR_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV);
10006c1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c20:	699b      	ldr	r3, [r3, #24]
10006c22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006c26:	f023 0303 	bic.w	r3, r3, #3
10006c2a:	6193      	str	r3, [r2, #24]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10006c2c:	f7fd fbc8 	bl	100043c0 <HAL_GetTick>
10006c30:	6078      	str	r0, [r7, #4]

  /* Wait till HSIDIV is ready */
  while ((RCC->OCRDYR & RCC_OCRDYR_HSIDIVRDY) == 0U)
10006c32:	e008      	b.n	10006c46 <HAL_RCC_DeInit+0x3b2>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10006c34:	f7fd fbc4 	bl	100043c0 <HAL_GetTick>
10006c38:	4602      	mov	r2, r0
10006c3a:	687b      	ldr	r3, [r7, #4]
10006c3c:	1ad3      	subs	r3, r2, r3
10006c3e:	2b64      	cmp	r3, #100	@ 0x64
10006c40:	d901      	bls.n	10006c46 <HAL_RCC_DeInit+0x3b2>
    {
      return HAL_TIMEOUT;
10006c42:	2303      	movs	r3, #3
10006c44:	e054      	b.n	10006cf0 <HAL_RCC_DeInit+0x45c>
  while ((RCC->OCRDYR & RCC_OCRDYR_HSIDIVRDY) == 0U)
10006c46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c4a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10006c4e:	f003 0304 	and.w	r3, r3, #4
10006c52:	2b00      	cmp	r3, #0
10006c54:	d0ee      	beq.n	10006c34 <HAL_RCC_DeInit+0x3a0>
    }
  }

  /* Reset HSITRIM value */
  CLEAR_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM);
10006c56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c5a:	699b      	ldr	r3, [r3, #24]
10006c5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006c60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
10006c64:	6193      	str	r3, [r2, #24]

  /* Reset the Oscillator Enable Control registers */
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSIKERON | RCC_OCENCLRR_CSION |
10006c66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c6a:	f240 72b2 	movw	r2, #1970	@ 0x7b2
10006c6e:	611a      	str	r2, [r3, #16]
            RCC_OCENCLRR_CSIKERON | RCC_OCENCLRR_DIGBYP | RCC_OCENCLRR_HSEON |
            RCC_OCENCLRR_HSEKERON | RCC_OCENCLRR_HSEBYP);

  /* Clear LSION bit */
  CLEAR_BIT(RCC->RDLSICR, RCC_RDLSICR_LSION);
10006c70:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c74:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10006c78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006c7c:	f023 0301 	bic.w	r3, r3, #1
10006c80:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

  /* Reset CSITRIM value */
  CLEAR_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM);
10006c84:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c88:	69db      	ldr	r3, [r3, #28]
10006c8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006c8e:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
10006c92:	61d3      	str	r3, [r2, #28]
                             RCC_MP_RSTSCLRR_BORRSTF | RCC_MP_RSTSCLRR_PORRSTF));
#endif

#ifdef CORE_CM4
  /* Reset RCC Clock Source Interrupt Enable Register */
  CLEAR_BIT(RCC->MC_CIER, (RCC_MC_CIER_LSIRDYIE | RCC_MC_CIER_LSERDYIE |
10006c94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006c98:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	@ 0xc14
10006c9c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10006ca0:	4b19      	ldr	r3, [pc, #100]	@ (10006d08 <HAL_RCC_DeInit+0x474>)
10006ca2:	4013      	ands	r3, r2
10006ca4:	f8c1 3c14 	str.w	r3, [r1, #3092]	@ 0xc14
                           RCC_MC_CIER_HSIRDYIE | RCC_MC_CIER_HSERDYIE | RCC_MC_CIER_CSIRDYIE |
                           RCC_MC_CIER_PLL1DYIE | RCC_MC_CIER_PLL2DYIE | RCC_MC_CIER_PLL3DYIE |
                           RCC_MC_CIER_PLL4DYIE | RCC_MC_CIER_LSECSSIE | RCC_MC_CIER_WKUPIE));

  /* Clear all RCC MCU interrupt flags */
  SET_BIT(RCC->MC_CIFR, (RCC_MC_CIFR_LSIRDYF | RCC_MC_CIFR_LSERDYF |
10006ca8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006cac:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	@ 0xc18
10006cb0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10006cb4:	4b15      	ldr	r3, [pc, #84]	@ (10006d0c <HAL_RCC_DeInit+0x478>)
10006cb6:	4313      	orrs	r3, r2
10006cb8:	f8c1 3c18 	str.w	r3, [r1, #3096]	@ 0xc18
                         RCC_MC_CIFR_HSIRDYF | RCC_MC_CIFR_HSERDYF | RCC_MC_CIFR_CSIRDYF |
                         RCC_MC_CIFR_PLL1DYF | RCC_MC_CIFR_PLL2DYF | RCC_MC_CIFR_PLL3DYF |
                         RCC_MC_CIFR_PLL4DYF | RCC_MC_CIFR_LSECSSF | RCC_MC_CIFR_WKUPF));

  /* Clear all RCC MCU Reset Flags */
  SET_BIT(RCC->MC_RSTSCLRR, RCC_MC_RSTSCLRR_WWDG1RSTF |
10006cbc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006cc0:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	@ 0xc00
10006cc4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10006cc8:	ea6f 23d3 	mvn.w	r3, r3, lsr #11
10006ccc:	ea6f 23c3 	mvn.w	r3, r3, lsl #11
10006cd0:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
          RCC_MC_RSTSCLRR_HCSSRSTF | RCC_MC_RSTSCLRR_PADRSTF |
          RCC_MC_RSTSCLRR_BORRSTF | RCC_MC_RSTSCLRR_PORRSTF);
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
10006cd4:	4b0e      	ldr	r3, [pc, #56]	@ (10006d10 <HAL_RCC_DeInit+0x47c>)
10006cd6:	4a0f      	ldr	r2, [pc, #60]	@ (10006d14 <HAL_RCC_DeInit+0x480>)
10006cd8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
10006cda:	4b0f      	ldr	r3, [pc, #60]	@ (10006d18 <HAL_RCC_DeInit+0x484>)
10006cdc:	681b      	ldr	r3, [r3, #0]
10006cde:	4618      	mov	r0, r3
10006ce0:	f7fd fb24 	bl	1000432c <HAL_InitTick>
10006ce4:	4603      	mov	r3, r0
10006ce6:	2b00      	cmp	r3, #0
10006ce8:	d001      	beq.n	10006cee <HAL_RCC_DeInit+0x45a>
  {
    return HAL_ERROR;
10006cea:	2301      	movs	r3, #1
10006cec:	e000      	b.n	10006cf0 <HAL_RCC_DeInit+0x45c>
  }

  return HAL_OK;
10006cee:	2300      	movs	r3, #0
}
10006cf0:	4618      	mov	r0, r3
10006cf2:	3708      	adds	r7, #8
10006cf4:	46bd      	mov	sp, r7
10006cf6:	bd80      	pop	{r7, pc}
10006cf8:	00010031 	.word	0x00010031
10006cfc:	00010100 	.word	0x00010100
10006d00:	00010063 	.word	0x00010063
10006d04:	00010101 	.word	0x00010101
10006d08:	ffeef0e0 	.word	0xffeef0e0
10006d0c:	00110f1f 	.word	0x00110f1f
10006d10:	1002009c 	.word	0x1002009c
10006d14:	03d09000 	.word	0x03d09000
10006d18:	100200a0 	.word	0x100200a0

10006d1c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10006d1c:	b580      	push	{r7, lr}
10006d1e:	b084      	sub	sp, #16
10006d20:	af00      	add	r7, sp, #0
10006d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10006d24:	2300      	movs	r3, #0
10006d26:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10006d28:	687b      	ldr	r3, [r7, #4]
10006d2a:	2b00      	cmp	r3, #0
10006d2c:	d101      	bne.n	10006d32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10006d2e:	2301      	movs	r3, #1
10006d30:	e320      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10006d32:	687b      	ldr	r3, [r7, #4]
10006d34:	681b      	ldr	r3, [r3, #0]
10006d36:	f003 0301 	and.w	r3, r3, #1
10006d3a:	2b00      	cmp	r3, #0
10006d3c:	f000 8081 	beq.w	10006e42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10006d40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006d44:	6a1b      	ldr	r3, [r3, #32]
10006d46:	f003 0303 	and.w	r3, r3, #3
10006d4a:	2b01      	cmp	r3, #1
10006d4c:	d107      	bne.n	10006d5e <HAL_RCC_OscConfig+0x42>
10006d4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006d52:	6a1b      	ldr	r3, [r3, #32]
10006d54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10006d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10006d5c:	d054      	beq.n	10006e08 <HAL_RCC_OscConfig+0xec>
10006d5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006d64:	f003 0307 	and.w	r3, r3, #7
10006d68:	2b01      	cmp	r3, #1
10006d6a:	d107      	bne.n	10006d7c <HAL_RCC_OscConfig+0x60>
10006d6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006d72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10006d76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10006d7a:	d045      	beq.n	10006e08 <HAL_RCC_OscConfig+0xec>
10006d7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10006d82:	f003 0303 	and.w	r3, r3, #3
10006d86:	2b01      	cmp	r3, #1
10006d88:	d107      	bne.n	10006d9a <HAL_RCC_OscConfig+0x7e>
10006d8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10006d90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10006d94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10006d98:	d036      	beq.n	10006e08 <HAL_RCC_OscConfig+0xec>
10006d9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006da0:	f003 0303 	and.w	r3, r3, #3
10006da4:	2b01      	cmp	r3, #1
10006da6:	d10f      	bne.n	10006dc8 <HAL_RCC_OscConfig+0xac>
10006da8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10006db0:	f003 0302 	and.w	r3, r3, #2
10006db4:	2b02      	cmp	r3, #2
10006db6:	d027      	beq.n	10006e08 <HAL_RCC_OscConfig+0xec>
10006db8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10006dc0:	f003 0302 	and.w	r3, r3, #2
10006dc4:	2b02      	cmp	r3, #2
10006dc6:	d01f      	beq.n	10006e08 <HAL_RCC_OscConfig+0xec>
10006dc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006dcc:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10006dd0:	f003 0303 	and.w	r3, r3, #3
10006dd4:	2b01      	cmp	r3, #1
10006dd6:	d107      	bne.n	10006de8 <HAL_RCC_OscConfig+0xcc>
10006dd8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006ddc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006de0:	f003 0302 	and.w	r3, r3, #2
10006de4:	2b02      	cmp	r3, #2
10006de6:	d00f      	beq.n	10006e08 <HAL_RCC_OscConfig+0xec>
10006de8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006dec:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10006df0:	f003 0303 	and.w	r3, r3, #3
10006df4:	2b01      	cmp	r3, #1
10006df6:	d117      	bne.n	10006e28 <HAL_RCC_OscConfig+0x10c>
10006df8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006dfc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006e00:	f003 0302 	and.w	r3, r3, #2
10006e04:	2b02      	cmp	r3, #2
10006e06:	d10f      	bne.n	10006e28 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10006e08:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006e0c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10006e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10006e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10006e18:	d112      	bne.n	10006e40 <HAL_RCC_OscConfig+0x124>
10006e1a:	687b      	ldr	r3, [r7, #4]
10006e1c:	685b      	ldr	r3, [r3, #4]
10006e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10006e22:	d00d      	beq.n	10006e40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10006e24:	2301      	movs	r3, #1
10006e26:	e2a5      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10006e28:	687b      	ldr	r3, [r7, #4]
10006e2a:	685b      	ldr	r3, [r3, #4]
10006e2c:	4618      	mov	r0, r3
10006e2e:	f000 faa7 	bl	10007380 <HAL_RCC_HSEConfig>
10006e32:	4603      	mov	r3, r0
10006e34:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10006e36:	7bfb      	ldrb	r3, [r7, #15]
10006e38:	2b00      	cmp	r3, #0
10006e3a:	d002      	beq.n	10006e42 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10006e3c:	7bfb      	ldrb	r3, [r7, #15]
10006e3e:	e299      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10006e40:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10006e42:	687b      	ldr	r3, [r7, #4]
10006e44:	681b      	ldr	r3, [r3, #0]
10006e46:	f003 0302 	and.w	r3, r3, #2
10006e4a:	2b00      	cmp	r3, #0
10006e4c:	f000 814e 	beq.w	100070ec <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10006e50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006e54:	6a1b      	ldr	r3, [r3, #32]
10006e56:	f003 0303 	and.w	r3, r3, #3
10006e5a:	2b00      	cmp	r3, #0
10006e5c:	d107      	bne.n	10006e6e <HAL_RCC_OscConfig+0x152>
10006e5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006e62:	6a1b      	ldr	r3, [r3, #32]
10006e64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10006e68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10006e6c:	d055      	beq.n	10006f1a <HAL_RCC_OscConfig+0x1fe>
10006e6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006e74:	f003 0307 	and.w	r3, r3, #7
10006e78:	2b00      	cmp	r3, #0
10006e7a:	d107      	bne.n	10006e8c <HAL_RCC_OscConfig+0x170>
10006e7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10006e82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10006e86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10006e8a:	d046      	beq.n	10006f1a <HAL_RCC_OscConfig+0x1fe>
10006e8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10006e92:	f003 0303 	and.w	r3, r3, #3
10006e96:	2b00      	cmp	r3, #0
10006e98:	d107      	bne.n	10006eaa <HAL_RCC_OscConfig+0x18e>
10006e9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10006ea0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10006ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10006ea8:	d037      	beq.n	10006f1a <HAL_RCC_OscConfig+0x1fe>
10006eaa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006eb0:	f003 0303 	and.w	r3, r3, #3
10006eb4:	2b00      	cmp	r3, #0
10006eb6:	d10f      	bne.n	10006ed8 <HAL_RCC_OscConfig+0x1bc>
10006eb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10006ec0:	f003 0302 	and.w	r3, r3, #2
10006ec4:	2b02      	cmp	r3, #2
10006ec6:	d028      	beq.n	10006f1a <HAL_RCC_OscConfig+0x1fe>
10006ec8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10006ed0:	f003 0302 	and.w	r3, r3, #2
10006ed4:	2b02      	cmp	r3, #2
10006ed6:	d020      	beq.n	10006f1a <HAL_RCC_OscConfig+0x1fe>
10006ed8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006edc:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10006ee0:	f003 0303 	and.w	r3, r3, #3
10006ee4:	2b00      	cmp	r3, #0
10006ee6:	d107      	bne.n	10006ef8 <HAL_RCC_OscConfig+0x1dc>
10006ee8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006eec:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006ef0:	f003 0302 	and.w	r3, r3, #2
10006ef4:	2b02      	cmp	r3, #2
10006ef6:	d010      	beq.n	10006f1a <HAL_RCC_OscConfig+0x1fe>
10006ef8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006efc:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10006f00:	f003 0303 	and.w	r3, r3, #3
10006f04:	2b00      	cmp	r3, #0
10006f06:	f040 8088 	bne.w	1000701a <HAL_RCC_OscConfig+0x2fe>
10006f0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006f0e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006f12:	f003 0302 	and.w	r3, r3, #2
10006f16:	2b02      	cmp	r3, #2
10006f18:	d17f      	bne.n	1000701a <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10006f1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006f1e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10006f22:	f003 0301 	and.w	r3, r3, #1
10006f26:	2b01      	cmp	r3, #1
10006f28:	d105      	bne.n	10006f36 <HAL_RCC_OscConfig+0x21a>
10006f2a:	687b      	ldr	r3, [r7, #4]
10006f2c:	68db      	ldr	r3, [r3, #12]
10006f2e:	2b01      	cmp	r3, #1
10006f30:	d001      	beq.n	10006f36 <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10006f32:	2301      	movs	r3, #1
10006f34:	e21e      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10006f36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006f3a:	699b      	ldr	r3, [r3, #24]
10006f3c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
10006f40:	687b      	ldr	r3, [r7, #4]
10006f42:	691b      	ldr	r3, [r3, #16]
10006f44:	021b      	lsls	r3, r3, #8
10006f46:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10006f4a:	4313      	orrs	r3, r2
10006f4c:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10006f4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10006f54:	f003 0303 	and.w	r3, r3, #3
10006f58:	2b00      	cmp	r3, #0
10006f5a:	d10f      	bne.n	10006f7c <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10006f5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10006f64:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10006f68:	2b02      	cmp	r3, #2
10006f6a:	d047      	beq.n	10006ffc <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10006f6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10006f74:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10006f78:	2b02      	cmp	r3, #2
10006f7a:	d03f      	beq.n	10006ffc <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10006f7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006f80:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10006f84:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10006f88:	2b00      	cmp	r3, #0
10006f8a:	d107      	bne.n	10006f9c <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10006f8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006f90:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10006f94:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10006f98:	2b02      	cmp	r3, #2
10006f9a:	d02f      	beq.n	10006ffc <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10006f9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006fa0:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10006fa4:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10006fa8:	2b00      	cmp	r3, #0
10006faa:	d107      	bne.n	10006fbc <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10006fac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006fb0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10006fb4:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10006fb8:	2b02      	cmp	r3, #2
10006fba:	d01f      	beq.n	10006ffc <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10006fbc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006fc0:	699b      	ldr	r3, [r3, #24]
10006fc2:	f023 0203 	bic.w	r2, r3, #3
10006fc6:	687b      	ldr	r3, [r7, #4]
10006fc8:	695b      	ldr	r3, [r3, #20]
10006fca:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10006fce:	4313      	orrs	r3, r2
10006fd0:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10006fd2:	f7fd f9f5 	bl	100043c0 <HAL_GetTick>
10006fd6:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10006fd8:	e008      	b.n	10006fec <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10006fda:	f7fd f9f1 	bl	100043c0 <HAL_GetTick>
10006fde:	4602      	mov	r2, r0
10006fe0:	68bb      	ldr	r3, [r7, #8]
10006fe2:	1ad3      	subs	r3, r2, r3
10006fe4:	2b64      	cmp	r3, #100	@ 0x64
10006fe6:	d901      	bls.n	10006fec <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10006fe8:	2303      	movs	r3, #3
10006fea:	e1c3      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10006fec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10006ff0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10006ff4:	f003 0304 	and.w	r3, r3, #4
10006ff8:	2b04      	cmp	r3, #4
10006ffa:	d1ee      	bne.n	10006fda <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10006ffc:	f001 f809 	bl	10008012 <HAL_RCC_GetSystemCoreClockFreq>
10007000:	4603      	mov	r3, r0
10007002:	4ab3      	ldr	r2, [pc, #716]	@ (100072d0 <HAL_RCC_OscConfig+0x5b4>)
10007004:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10007006:	4bb3      	ldr	r3, [pc, #716]	@ (100072d4 <HAL_RCC_OscConfig+0x5b8>)
10007008:	681b      	ldr	r3, [r3, #0]
1000700a:	4618      	mov	r0, r3
1000700c:	f7fd f98e 	bl	1000432c <HAL_InitTick>
10007010:	4603      	mov	r3, r0
10007012:	2b00      	cmp	r3, #0
10007014:	d069      	beq.n	100070ea <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10007016:	2301      	movs	r3, #1
10007018:	e1ac      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
1000701a:	687b      	ldr	r3, [r7, #4]
1000701c:	68db      	ldr	r3, [r3, #12]
1000701e:	2b00      	cmp	r3, #0
10007020:	d049      	beq.n	100070b6 <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10007022:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007026:	68db      	ldr	r3, [r3, #12]
10007028:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000702c:	f043 0301 	orr.w	r3, r3, #1
10007030:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10007032:	f7fd f9c5 	bl	100043c0 <HAL_GetTick>
10007036:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10007038:	e008      	b.n	1000704c <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000703a:	f7fd f9c1 	bl	100043c0 <HAL_GetTick>
1000703e:	4602      	mov	r2, r0
10007040:	68bb      	ldr	r3, [r7, #8]
10007042:	1ad3      	subs	r3, r2, r3
10007044:	2b64      	cmp	r3, #100	@ 0x64
10007046:	d901      	bls.n	1000704c <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10007048:	2303      	movs	r3, #3
1000704a:	e193      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000704c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007050:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007054:	f003 0301 	and.w	r3, r3, #1
10007058:	2b01      	cmp	r3, #1
1000705a:	d1ee      	bne.n	1000703a <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
1000705c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007060:	699b      	ldr	r3, [r3, #24]
10007062:	f023 0203 	bic.w	r2, r3, #3
10007066:	687b      	ldr	r3, [r7, #4]
10007068:	695b      	ldr	r3, [r3, #20]
1000706a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000706e:	4313      	orrs	r3, r2
10007070:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10007072:	f7fd f9a5 	bl	100043c0 <HAL_GetTick>
10007076:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10007078:	e008      	b.n	1000708c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000707a:	f7fd f9a1 	bl	100043c0 <HAL_GetTick>
1000707e:	4602      	mov	r2, r0
10007080:	68bb      	ldr	r3, [r7, #8]
10007082:	1ad3      	subs	r3, r2, r3
10007084:	2b64      	cmp	r3, #100	@ 0x64
10007086:	d901      	bls.n	1000708c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10007088:	2303      	movs	r3, #3
1000708a:	e173      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000708c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007090:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007094:	f003 0304 	and.w	r3, r3, #4
10007098:	2b04      	cmp	r3, #4
1000709a:	d1ee      	bne.n	1000707a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
1000709c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100070a0:	699b      	ldr	r3, [r3, #24]
100070a2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
100070a6:	687b      	ldr	r3, [r7, #4]
100070a8:	691b      	ldr	r3, [r3, #16]
100070aa:	021b      	lsls	r3, r3, #8
100070ac:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100070b0:	4313      	orrs	r3, r2
100070b2:	618b      	str	r3, [r1, #24]
100070b4:	e01a      	b.n	100070ec <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
100070b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100070ba:	2201      	movs	r2, #1
100070bc:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100070be:	f7fd f97f 	bl	100043c0 <HAL_GetTick>
100070c2:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100070c4:	e008      	b.n	100070d8 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100070c6:	f7fd f97b 	bl	100043c0 <HAL_GetTick>
100070ca:	4602      	mov	r2, r0
100070cc:	68bb      	ldr	r3, [r7, #8]
100070ce:	1ad3      	subs	r3, r2, r3
100070d0:	2b64      	cmp	r3, #100	@ 0x64
100070d2:	d901      	bls.n	100070d8 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
100070d4:	2303      	movs	r3, #3
100070d6:	e14d      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100070d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100070dc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100070e0:	f003 0301 	and.w	r3, r3, #1
100070e4:	2b01      	cmp	r3, #1
100070e6:	d0ee      	beq.n	100070c6 <HAL_RCC_OscConfig+0x3aa>
100070e8:	e000      	b.n	100070ec <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100070ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
100070ec:	687b      	ldr	r3, [r7, #4]
100070ee:	681b      	ldr	r3, [r3, #0]
100070f0:	f003 0310 	and.w	r3, r3, #16
100070f4:	2b00      	cmp	r3, #0
100070f6:	f000 8091 	beq.w	1000721c <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
100070fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100070fe:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10007102:	f003 0303 	and.w	r3, r3, #3
10007106:	2b02      	cmp	r3, #2
10007108:	d107      	bne.n	1000711a <HAL_RCC_OscConfig+0x3fe>
1000710a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000710e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10007112:	f003 0302 	and.w	r3, r3, #2
10007116:	2b02      	cmp	r3, #2
10007118:	d01e      	beq.n	10007158 <HAL_RCC_OscConfig+0x43c>
1000711a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000711e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10007120:	f003 0303 	and.w	r3, r3, #3
10007124:	2b02      	cmp	r3, #2
10007126:	d107      	bne.n	10007138 <HAL_RCC_OscConfig+0x41c>
10007128:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000712c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1000712e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007132:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007136:	d00f      	beq.n	10007158 <HAL_RCC_OscConfig+0x43c>
10007138:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000713c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10007140:	f003 0303 	and.w	r3, r3, #3
10007144:	2b02      	cmp	r3, #2
10007146:	d122      	bne.n	1000718e <HAL_RCC_OscConfig+0x472>
10007148:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000714c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10007150:	f003 0302 	and.w	r3, r3, #2
10007154:	2b02      	cmp	r3, #2
10007156:	d11a      	bne.n	1000718e <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10007158:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000715c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007160:	f003 0310 	and.w	r3, r3, #16
10007164:	2b10      	cmp	r3, #16
10007166:	d105      	bne.n	10007174 <HAL_RCC_OscConfig+0x458>
10007168:	687b      	ldr	r3, [r7, #4]
1000716a:	69db      	ldr	r3, [r3, #28]
1000716c:	2b10      	cmp	r3, #16
1000716e:	d001      	beq.n	10007174 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10007170:	2301      	movs	r3, #1
10007172:	e0ff      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10007174:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007178:	69db      	ldr	r3, [r3, #28]
1000717a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
1000717e:	687b      	ldr	r3, [r7, #4]
10007180:	6a1b      	ldr	r3, [r3, #32]
10007182:	021b      	lsls	r3, r3, #8
10007184:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007188:	4313      	orrs	r3, r2
1000718a:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
1000718c:	e046      	b.n	1000721c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
1000718e:	687b      	ldr	r3, [r7, #4]
10007190:	69db      	ldr	r3, [r3, #28]
10007192:	2b00      	cmp	r3, #0
10007194:	d029      	beq.n	100071ea <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10007196:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000719a:	68db      	ldr	r3, [r3, #12]
1000719c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100071a0:	f043 0310 	orr.w	r3, r3, #16
100071a4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100071a6:	f7fd f90b 	bl	100043c0 <HAL_GetTick>
100071aa:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100071ac:	e008      	b.n	100071c0 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100071ae:	f7fd f907 	bl	100043c0 <HAL_GetTick>
100071b2:	4602      	mov	r2, r0
100071b4:	68bb      	ldr	r3, [r7, #8]
100071b6:	1ad3      	subs	r3, r2, r3
100071b8:	2b64      	cmp	r3, #100	@ 0x64
100071ba:	d901      	bls.n	100071c0 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
100071bc:	2303      	movs	r3, #3
100071be:	e0d9      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100071c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100071c4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100071c8:	f003 0310 	and.w	r3, r3, #16
100071cc:	2b10      	cmp	r3, #16
100071ce:	d1ee      	bne.n	100071ae <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
100071d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100071d4:	69db      	ldr	r3, [r3, #28]
100071d6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
100071da:	687b      	ldr	r3, [r7, #4]
100071dc:	6a1b      	ldr	r3, [r3, #32]
100071de:	021b      	lsls	r3, r3, #8
100071e0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100071e4:	4313      	orrs	r3, r2
100071e6:	61cb      	str	r3, [r1, #28]
100071e8:	e018      	b.n	1000721c <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
100071ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100071ee:	2210      	movs	r2, #16
100071f0:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100071f2:	f7fd f8e5 	bl	100043c0 <HAL_GetTick>
100071f6:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100071f8:	e008      	b.n	1000720c <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100071fa:	f7fd f8e1 	bl	100043c0 <HAL_GetTick>
100071fe:	4602      	mov	r2, r0
10007200:	68bb      	ldr	r3, [r7, #8]
10007202:	1ad3      	subs	r3, r2, r3
10007204:	2b64      	cmp	r3, #100	@ 0x64
10007206:	d901      	bls.n	1000720c <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10007208:	2303      	movs	r3, #3
1000720a:	e0b3      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
1000720c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007210:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007214:	f003 0310 	and.w	r3, r3, #16
10007218:	2b10      	cmp	r3, #16
1000721a:	d0ee      	beq.n	100071fa <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1000721c:	687b      	ldr	r3, [r7, #4]
1000721e:	681b      	ldr	r3, [r3, #0]
10007220:	f003 0308 	and.w	r3, r3, #8
10007224:	2b00      	cmp	r3, #0
10007226:	d042      	beq.n	100072ae <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10007228:	687b      	ldr	r3, [r7, #4]
1000722a:	699b      	ldr	r3, [r3, #24]
1000722c:	2b00      	cmp	r3, #0
1000722e:	d01f      	beq.n	10007270 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10007230:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007234:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10007238:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000723c:	f043 0301 	orr.w	r3, r3, #1
10007240:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10007244:	f7fd f8bc 	bl	100043c0 <HAL_GetTick>
10007248:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000724a:	e008      	b.n	1000725e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1000724c:	f7fd f8b8 	bl	100043c0 <HAL_GetTick>
10007250:	4602      	mov	r2, r0
10007252:	68bb      	ldr	r3, [r7, #8]
10007254:	1ad3      	subs	r3, r2, r3
10007256:	2b64      	cmp	r3, #100	@ 0x64
10007258:	d901      	bls.n	1000725e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
1000725a:	2303      	movs	r3, #3
1000725c:	e08a      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000725e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007262:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10007266:	f003 0302 	and.w	r3, r3, #2
1000726a:	2b02      	cmp	r3, #2
1000726c:	d1ee      	bne.n	1000724c <HAL_RCC_OscConfig+0x530>
1000726e:	e01e      	b.n	100072ae <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10007270:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007274:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
10007278:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000727c:	f023 0301 	bic.w	r3, r3, #1
10007280:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10007284:	f7fd f89c 	bl	100043c0 <HAL_GetTick>
10007288:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000728a:	e008      	b.n	1000729e <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1000728c:	f7fd f898 	bl	100043c0 <HAL_GetTick>
10007290:	4602      	mov	r2, r0
10007292:	68bb      	ldr	r3, [r7, #8]
10007294:	1ad3      	subs	r3, r2, r3
10007296:	2b64      	cmp	r3, #100	@ 0x64
10007298:	d901      	bls.n	1000729e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
1000729a:	2303      	movs	r3, #3
1000729c:	e06a      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000729e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100072a2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
100072a6:	f003 0302 	and.w	r3, r3, #2
100072aa:	2b02      	cmp	r3, #2
100072ac:	d0ee      	beq.n	1000728c <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
100072ae:	687b      	ldr	r3, [r7, #4]
100072b0:	681b      	ldr	r3, [r3, #0]
100072b2:	f003 0304 	and.w	r3, r3, #4
100072b6:	2b00      	cmp	r3, #0
100072b8:	d02b      	beq.n	10007312 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100072ba:	4b07      	ldr	r3, [pc, #28]	@ (100072d8 <HAL_RCC_OscConfig+0x5bc>)
100072bc:	681b      	ldr	r3, [r3, #0]
100072be:	4a06      	ldr	r2, [pc, #24]	@ (100072d8 <HAL_RCC_OscConfig+0x5bc>)
100072c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
100072c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100072c6:	f7fd f87b 	bl	100043c0 <HAL_GetTick>
100072ca:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100072cc:	e00f      	b.n	100072ee <HAL_RCC_OscConfig+0x5d2>
100072ce:	bf00      	nop
100072d0:	1002009c 	.word	0x1002009c
100072d4:	100200a0 	.word	0x100200a0
100072d8:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100072dc:	f7fd f870 	bl	100043c0 <HAL_GetTick>
100072e0:	4602      	mov	r2, r0
100072e2:	68bb      	ldr	r3, [r7, #8]
100072e4:	1ad3      	subs	r3, r2, r3
100072e6:	2b64      	cmp	r3, #100	@ 0x64
100072e8:	d901      	bls.n	100072ee <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
100072ea:	2303      	movs	r3, #3
100072ec:	e042      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100072ee:	4b23      	ldr	r3, [pc, #140]	@ (1000737c <HAL_RCC_OscConfig+0x660>)
100072f0:	681b      	ldr	r3, [r3, #0]
100072f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100072f6:	2b00      	cmp	r3, #0
100072f8:	d0f0      	beq.n	100072dc <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
100072fa:	687b      	ldr	r3, [r7, #4]
100072fc:	689b      	ldr	r3, [r3, #8]
100072fe:	4618      	mov	r0, r3
10007300:	f000 f8a9 	bl	10007456 <HAL_RCC_LSEConfig>
10007304:	4603      	mov	r3, r0
10007306:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10007308:	7bfb      	ldrb	r3, [r7, #15]
1000730a:	2b00      	cmp	r3, #0
1000730c:	d001      	beq.n	10007312 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
1000730e:	7bfb      	ldrb	r3, [r7, #15]
10007310:	e030      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10007312:	687b      	ldr	r3, [r7, #4]
10007314:	3324      	adds	r3, #36	@ 0x24
10007316:	4618      	mov	r0, r3
10007318:	f000 f91a 	bl	10007550 <RCC_PLL1_Config>
1000731c:	4603      	mov	r3, r0
1000731e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10007320:	7bfb      	ldrb	r3, [r7, #15]
10007322:	2b00      	cmp	r3, #0
10007324:	d001      	beq.n	1000732a <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10007326:	7bfb      	ldrb	r3, [r7, #15]
10007328:	e024      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
1000732a:	687b      	ldr	r3, [r7, #4]
1000732c:	3360      	adds	r3, #96	@ 0x60
1000732e:	4618      	mov	r0, r3
10007330:	f000 feb0 	bl	10008094 <RCCEx_PLL2_Config>
10007334:	4603      	mov	r3, r0
10007336:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10007338:	7bfb      	ldrb	r3, [r7, #15]
1000733a:	2b00      	cmp	r3, #0
1000733c:	d001      	beq.n	10007342 <HAL_RCC_OscConfig+0x626>
  {
    return result;
1000733e:	7bfb      	ldrb	r3, [r7, #15]
10007340:	e018      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10007342:	687b      	ldr	r3, [r7, #4]
10007344:	339c      	adds	r3, #156	@ 0x9c
10007346:	4618      	mov	r0, r3
10007348:	f001 f826 	bl	10008398 <RCCEx_PLL3_Config>
1000734c:	4603      	mov	r3, r0
1000734e:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10007350:	7bfb      	ldrb	r3, [r7, #15]
10007352:	2b00      	cmp	r3, #0
10007354:	d001      	beq.n	1000735a <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10007356:	7bfb      	ldrb	r3, [r7, #15]
10007358:	e00c      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000735a:	687b      	ldr	r3, [r7, #4]
1000735c:	33d8      	adds	r3, #216	@ 0xd8
1000735e:	4618      	mov	r0, r3
10007360:	f001 f984 	bl	1000866c <RCCEx_PLL4_Config>
10007364:	4603      	mov	r3, r0
10007366:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10007368:	7bfb      	ldrb	r3, [r7, #15]
1000736a:	2b00      	cmp	r3, #0
1000736c:	d001      	beq.n	10007372 <HAL_RCC_OscConfig+0x656>
  {
    return result;
1000736e:	7bfb      	ldrb	r3, [r7, #15]
10007370:	e000      	b.n	10007374 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10007372:	2300      	movs	r3, #0
}
10007374:	4618      	mov	r0, r3
10007376:	3710      	adds	r7, #16
10007378:	46bd      	mov	sp, r7
1000737a:	bd80      	pop	{r7, pc}
1000737c:	50001000 	.word	0x50001000

10007380 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10007380:	b580      	push	{r7, lr}
10007382:	b084      	sub	sp, #16
10007384:	af00      	add	r7, sp, #0
10007386:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10007388:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000738c:	f44f 7280 	mov.w	r2, #256	@ 0x100
10007390:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10007392:	f7fd f815 	bl	100043c0 <HAL_GetTick>
10007396:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10007398:	e008      	b.n	100073ac <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000739a:	f7fd f811 	bl	100043c0 <HAL_GetTick>
1000739e:	4602      	mov	r2, r0
100073a0:	68fb      	ldr	r3, [r7, #12]
100073a2:	1ad3      	subs	r3, r2, r3
100073a4:	2b64      	cmp	r3, #100	@ 0x64
100073a6:	d901      	bls.n	100073ac <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
100073a8:	2303      	movs	r3, #3
100073aa:	e050      	b.n	1000744e <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100073ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100073b0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
100073b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
100073b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
100073bc:	d0ed      	beq.n	1000739a <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
100073be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100073c2:	f44f 6290 	mov.w	r2, #1152	@ 0x480
100073c6:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
100073c8:	687b      	ldr	r3, [r7, #4]
100073ca:	2b00      	cmp	r3, #0
100073cc:	d03e      	beq.n	1000744c <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
100073ce:	687b      	ldr	r3, [r7, #4]
100073d0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
100073d4:	d108      	bne.n	100073e8 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100073d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100073da:	68db      	ldr	r3, [r3, #12]
100073dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100073e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
100073e4:	60d3      	str	r3, [r2, #12]
100073e6:	e013      	b.n	10007410 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
100073e8:	687b      	ldr	r3, [r7, #4]
100073ea:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
100073ee:	d10f      	bne.n	10007410 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
100073f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100073f4:	68db      	ldr	r3, [r3, #12]
100073f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100073fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
100073fe:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10007400:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007404:	68db      	ldr	r3, [r3, #12]
10007406:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000740a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
1000740e:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10007410:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007414:	68db      	ldr	r3, [r3, #12]
10007416:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000741a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1000741e:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007420:	f7fc ffce 	bl	100043c0 <HAL_GetTick>
10007424:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10007426:	e008      	b.n	1000743a <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10007428:	f7fc ffca 	bl	100043c0 <HAL_GetTick>
1000742c:	4602      	mov	r2, r0
1000742e:	68fb      	ldr	r3, [r7, #12]
10007430:	1ad3      	subs	r3, r2, r3
10007432:	2b64      	cmp	r3, #100	@ 0x64
10007434:	d901      	bls.n	1000743a <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10007436:	2303      	movs	r3, #3
10007438:	e009      	b.n	1000744e <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000743a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000743e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10007446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
1000744a:	d1ed      	bne.n	10007428 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
1000744c:	2300      	movs	r3, #0
}
1000744e:	4618      	mov	r0, r3
10007450:	3710      	adds	r7, #16
10007452:	46bd      	mov	sp, r7
10007454:	bd80      	pop	{r7, pc}

10007456 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10007456:	b580      	push	{r7, lr}
10007458:	b084      	sub	sp, #16
1000745a:	af00      	add	r7, sp, #0
1000745c:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
1000745e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007462:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10007466:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000746a:	f023 0301 	bic.w	r3, r3, #1
1000746e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10007472:	f7fc ffa5 	bl	100043c0 <HAL_GetTick>
10007476:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10007478:	e00a      	b.n	10007490 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000747a:	f7fc ffa1 	bl	100043c0 <HAL_GetTick>
1000747e:	4602      	mov	r2, r0
10007480:	68fb      	ldr	r3, [r7, #12]
10007482:	1ad3      	subs	r3, r2, r3
10007484:	f241 3288 	movw	r2, #5000	@ 0x1388
10007488:	4293      	cmp	r3, r2
1000748a:	d901      	bls.n	10007490 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
1000748c:	2303      	movs	r3, #3
1000748e:	e05b      	b.n	10007548 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10007490:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007494:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
10007498:	f003 0304 	and.w	r3, r3, #4
1000749c:	2b04      	cmp	r3, #4
1000749e:	d0ec      	beq.n	1000747a <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
100074a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100074a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100074a8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100074ac:	f023 030a 	bic.w	r3, r3, #10
100074b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
100074b4:	687b      	ldr	r3, [r7, #4]
100074b6:	2b00      	cmp	r3, #0
100074b8:	d045      	beq.n	10007546 <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
100074ba:	687b      	ldr	r3, [r7, #4]
100074bc:	2b03      	cmp	r3, #3
100074be:	d10a      	bne.n	100074d6 <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100074c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100074c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100074c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100074cc:	f043 0302 	orr.w	r3, r3, #2
100074d0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
100074d4:	e016      	b.n	10007504 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
100074d6:	687b      	ldr	r3, [r7, #4]
100074d8:	2b0b      	cmp	r3, #11
100074da:	d113      	bne.n	10007504 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
100074dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100074e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100074e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100074e8:	f043 0308 	orr.w	r3, r3, #8
100074ec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100074f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100074f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
100074f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100074fc:	f043 0302 	orr.w	r3, r3, #2
10007500:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10007504:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007508:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000750c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007510:	f043 0301 	orr.w	r3, r3, #1
10007514:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007518:	f7fc ff52 	bl	100043c0 <HAL_GetTick>
1000751c:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000751e:	e00a      	b.n	10007536 <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10007520:	f7fc ff4e 	bl	100043c0 <HAL_GetTick>
10007524:	4602      	mov	r2, r0
10007526:	68fb      	ldr	r3, [r7, #12]
10007528:	1ad3      	subs	r3, r2, r3
1000752a:	f241 3288 	movw	r2, #5000	@ 0x1388
1000752e:	4293      	cmp	r3, r2
10007530:	d901      	bls.n	10007536 <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10007532:	2303      	movs	r3, #3
10007534:	e008      	b.n	10007548 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10007536:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000753a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000753e:	f003 0304 	and.w	r3, r3, #4
10007542:	2b04      	cmp	r3, #4
10007544:	d1ec      	bne.n	10007520 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10007546:	2300      	movs	r3, #0
}
10007548:	4618      	mov	r0, r3
1000754a:	3710      	adds	r7, #16
1000754c:	46bd      	mov	sp, r7
1000754e:	bd80      	pop	{r7, pc}

10007550 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10007550:	b580      	push	{r7, lr}
10007552:	b084      	sub	sp, #16
10007554:	af00      	add	r7, sp, #0
10007556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10007558:	687b      	ldr	r3, [r7, #4]
1000755a:	681b      	ldr	r3, [r3, #0]
1000755c:	2b00      	cmp	r3, #0
1000755e:	f000 8174 	beq.w	1000784a <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10007562:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007566:	6a1b      	ldr	r3, [r3, #32]
10007568:	f003 0303 	and.w	r3, r3, #3
1000756c:	2b02      	cmp	r3, #2
1000756e:	d108      	bne.n	10007582 <RCC_PLL1_Config+0x32>
10007570:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007574:	6a1b      	ldr	r3, [r3, #32]
10007576:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000757a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000757e:	f000 8162 	beq.w	10007846 <RCC_PLL1_Config+0x2f6>
10007582:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007586:	6a1b      	ldr	r3, [r3, #32]
10007588:	f003 0303 	and.w	r3, r3, #3
1000758c:	2b03      	cmp	r3, #3
1000758e:	d108      	bne.n	100075a2 <RCC_PLL1_Config+0x52>
10007590:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007594:	6a1b      	ldr	r3, [r3, #32]
10007596:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000759a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000759e:	f000 8152 	beq.w	10007846 <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
100075a2:	687b      	ldr	r3, [r7, #4]
100075a4:	681b      	ldr	r3, [r3, #0]
100075a6:	2b02      	cmp	r3, #2
100075a8:	f040 8123 	bne.w	100077f2 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100075ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100075b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100075b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100075b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100075bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
100075c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100075c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100075c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100075cc:	f023 0301 	bic.w	r3, r3, #1
100075d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100075d4:	f7fc fef4 	bl	100043c0 <HAL_GetTick>
100075d8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100075da:	e008      	b.n	100075ee <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100075dc:	f7fc fef0 	bl	100043c0 <HAL_GetTick>
100075e0:	4602      	mov	r2, r0
100075e2:	68fb      	ldr	r3, [r7, #12]
100075e4:	1ad3      	subs	r3, r2, r3
100075e6:	2b64      	cmp	r3, #100	@ 0x64
100075e8:	d901      	bls.n	100075ee <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
100075ea:	2303      	movs	r3, #3
100075ec:	e12e      	b.n	1000784c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100075ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100075f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100075f6:	f003 0302 	and.w	r3, r3, #2
100075fa:	2b02      	cmp	r3, #2
100075fc:	d0ee      	beq.n	100075dc <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100075fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007604:	f003 0307 	and.w	r3, r3, #7
10007608:	2b02      	cmp	r3, #2
1000760a:	d112      	bne.n	10007632 <RCC_PLL1_Config+0xe2>
1000760c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007612:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007616:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000761a:	d10a      	bne.n	10007632 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000761c:	687b      	ldr	r3, [r7, #4]
1000761e:	685a      	ldr	r2, [r3, #4]
10007620:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007626:	f003 0303 	and.w	r3, r3, #3
1000762a:	429a      	cmp	r2, r3
1000762c:	d00c      	beq.n	10007648 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
1000762e:	2301      	movs	r3, #1
10007630:	e10c      	b.n	1000784c <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10007632:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007638:	f023 0203 	bic.w	r2, r3, #3
1000763c:	687b      	ldr	r3, [r7, #4]
1000763e:	685b      	ldr	r3, [r3, #4]
10007640:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007644:	4313      	orrs	r3, r2
10007646:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10007648:	e008      	b.n	1000765c <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000764a:	f7fc feb9 	bl	100043c0 <HAL_GetTick>
1000764e:	4602      	mov	r2, r0
10007650:	68fb      	ldr	r3, [r7, #12]
10007652:	1ad3      	subs	r3, r2, r3
10007654:	2b64      	cmp	r3, #100	@ 0x64
10007656:	d901      	bls.n	1000765c <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10007658:	2303      	movs	r3, #3
1000765a:	e0f7      	b.n	1000784c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
1000765c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10007662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000766a:	d1ee      	bne.n	1000764a <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
1000766c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007670:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
10007674:	4b77      	ldr	r3, [pc, #476]	@ (10007854 <RCC_PLL1_Config+0x304>)
10007676:	4013      	ands	r3, r2
10007678:	687a      	ldr	r2, [r7, #4]
1000767a:	68d2      	ldr	r2, [r2, #12]
1000767c:	1e51      	subs	r1, r2, #1
1000767e:	687a      	ldr	r2, [r7, #4]
10007680:	6892      	ldr	r2, [r2, #8]
10007682:	3a01      	subs	r2, #1
10007684:	0412      	lsls	r2, r2, #16
10007686:	430a      	orrs	r2, r1
10007688:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000768c:	4313      	orrs	r3, r2
1000768e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
10007692:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
1000769a:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
1000769e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100076a2:	687a      	ldr	r2, [r7, #4]
100076a4:	6912      	ldr	r2, [r2, #16]
100076a6:	1e51      	subs	r1, r2, #1
100076a8:	687a      	ldr	r2, [r7, #4]
100076aa:	6952      	ldr	r2, [r2, #20]
100076ac:	3a01      	subs	r2, #1
100076ae:	0212      	lsls	r2, r2, #8
100076b0:	4311      	orrs	r1, r2
100076b2:	687a      	ldr	r2, [r7, #4]
100076b4:	6992      	ldr	r2, [r2, #24]
100076b6:	3a01      	subs	r2, #1
100076b8:	0412      	lsls	r2, r2, #16
100076ba:	430a      	orrs	r2, r1
100076bc:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100076c0:	4313      	orrs	r3, r2
100076c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
100076c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100076ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100076ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100076d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
100076d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
100076da:	687b      	ldr	r3, [r7, #4]
100076dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100076de:	2b02      	cmp	r3, #2
100076e0:	d003      	beq.n	100076ea <RCC_PLL1_Config+0x19a>
100076e2:	687b      	ldr	r3, [r7, #4]
100076e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100076e6:	2b00      	cmp	r3, #0
100076e8:	d10c      	bne.n	10007704 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
100076ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100076ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
100076f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100076f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100076fa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100076fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
10007702:	e00f      	b.n	10007724 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10007704:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
1000770c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10007710:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10007714:	687a      	ldr	r2, [r7, #4]
10007716:	6a12      	ldr	r2, [r2, #32]
10007718:	00d2      	lsls	r2, r2, #3
1000771a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000771e:	4313      	orrs	r3, r2
10007720:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10007724:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007728:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
1000772c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10007734:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10007738:	687b      	ldr	r3, [r7, #4]
1000773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000773c:	2b02      	cmp	r3, #2
1000773e:	d124      	bne.n	1000778a <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10007740:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
10007748:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
1000774c:	687b      	ldr	r3, [r7, #4]
1000774e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10007750:	687b      	ldr	r3, [r7, #4]
10007752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10007754:	4319      	orrs	r1, r3
10007756:	687b      	ldr	r3, [r7, #4]
10007758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000775a:	4319      	orrs	r1, r3
1000775c:	687b      	ldr	r3, [r7, #4]
1000775e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10007760:	4319      	orrs	r1, r3
10007762:	687b      	ldr	r3, [r7, #4]
10007764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10007766:	041b      	lsls	r3, r3, #16
10007768:	430b      	orrs	r3, r1
1000776a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000776e:	4313      	orrs	r3, r2
10007770:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10007774:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000777c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007780:	f043 0304 	orr.w	r3, r3, #4
10007784:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
10007788:	e009      	b.n	1000779e <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
1000778a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000778e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10007792:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007796:	f023 0304 	bic.w	r3, r3, #4
1000779a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
1000779e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100077a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100077a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100077aa:	f043 0301 	orr.w	r3, r3, #1
100077ae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100077b2:	f7fc fe05 	bl	100043c0 <HAL_GetTick>
100077b6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100077b8:	e008      	b.n	100077cc <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100077ba:	f7fc fe01 	bl	100043c0 <HAL_GetTick>
100077be:	4602      	mov	r2, r0
100077c0:	68fb      	ldr	r3, [r7, #12]
100077c2:	1ad3      	subs	r3, r2, r3
100077c4:	2b64      	cmp	r3, #100	@ 0x64
100077c6:	d901      	bls.n	100077cc <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
100077c8:	2303      	movs	r3, #3
100077ca:	e03f      	b.n	1000784c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100077cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100077d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100077d4:	f003 0302 	and.w	r3, r3, #2
100077d8:	2b02      	cmp	r3, #2
100077da:	d1ee      	bne.n	100077ba <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100077dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100077e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100077e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100077e8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100077ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
100077f0:	e02b      	b.n	1000784a <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100077f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100077f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
100077fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100077fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10007802:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10007806:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000780a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000780e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10007812:	f023 0301 	bic.w	r3, r3, #1
10007816:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000781a:	f7fc fdd1 	bl	100043c0 <HAL_GetTick>
1000781e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10007820:	e008      	b.n	10007834 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10007822:	f7fc fdcd 	bl	100043c0 <HAL_GetTick>
10007826:	4602      	mov	r2, r0
10007828:	68fb      	ldr	r3, [r7, #12]
1000782a:	1ad3      	subs	r3, r2, r3
1000782c:	2b64      	cmp	r3, #100	@ 0x64
1000782e:	d901      	bls.n	10007834 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10007830:	2303      	movs	r3, #3
10007832:	e00b      	b.n	1000784c <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10007834:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000783c:	f003 0302 	and.w	r3, r3, #2
10007840:	2b02      	cmp	r3, #2
10007842:	d0ee      	beq.n	10007822 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10007844:	e001      	b.n	1000784a <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10007846:	2301      	movs	r3, #1
10007848:	e000      	b.n	1000784c <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
1000784a:	2300      	movs	r3, #0

}
1000784c:	4618      	mov	r0, r3
1000784e:	3710      	adds	r7, #16
10007850:	46bd      	mov	sp, r7
10007852:	bd80      	pop	{r7, pc}
10007854:	ffc0fe00 	.word	0xffc0fe00

10007858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
10007858:	b580      	push	{r7, lr}
1000785a:	b084      	sub	sp, #16
1000785c:	af00      	add	r7, sp, #0
1000785e:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10007860:	2300      	movs	r3, #0
10007862:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10007864:	687b      	ldr	r3, [r7, #4]
10007866:	2b00      	cmp	r3, #0
10007868:	d101      	bne.n	1000786e <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
1000786a:	2301      	movs	r3, #1
1000786c:	e102      	b.n	10007a74 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
1000786e:	687b      	ldr	r3, [r7, #4]
10007870:	681b      	ldr	r3, [r3, #0]
10007872:	f003 0301 	and.w	r3, r3, #1
10007876:	2b00      	cmp	r3, #0
10007878:	d00b      	beq.n	10007892 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
1000787a:	687b      	ldr	r3, [r7, #4]
1000787c:	3304      	adds	r3, #4
1000787e:	4618      	mov	r0, r3
10007880:	f000 f8fc 	bl	10007a7c <RCC_MPUConfig>
10007884:	4603      	mov	r3, r0
10007886:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10007888:	7bfb      	ldrb	r3, [r7, #15]
1000788a:	2b00      	cmp	r3, #0
1000788c:	d001      	beq.n	10007892 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
1000788e:	7bfb      	ldrb	r3, [r7, #15]
10007890:	e0f0      	b.n	10007a74 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10007892:	687b      	ldr	r3, [r7, #4]
10007894:	681b      	ldr	r3, [r3, #0]
10007896:	f003 0302 	and.w	r3, r3, #2
1000789a:	2b00      	cmp	r3, #0
1000789c:	d00b      	beq.n	100078b6 <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
1000789e:	687b      	ldr	r3, [r7, #4]
100078a0:	330c      	adds	r3, #12
100078a2:	4618      	mov	r0, r3
100078a4:	f000 f960 	bl	10007b68 <RCC_AXISSConfig>
100078a8:	4603      	mov	r3, r0
100078aa:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100078ac:	7bfb      	ldrb	r3, [r7, #15]
100078ae:	2b00      	cmp	r3, #0
100078b0:	d001      	beq.n	100078b6 <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
100078b2:	7bfb      	ldrb	r3, [r7, #15]
100078b4:	e0de      	b.n	10007a74 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
100078b6:	687b      	ldr	r3, [r7, #4]
100078b8:	681b      	ldr	r3, [r3, #0]
100078ba:	f003 0304 	and.w	r3, r3, #4
100078be:	2b00      	cmp	r3, #0
100078c0:	d00b      	beq.n	100078da <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
100078c2:	687b      	ldr	r3, [r7, #4]
100078c4:	3314      	adds	r3, #20
100078c6:	4618      	mov	r0, r3
100078c8:	f000 f9e6 	bl	10007c98 <RCC_MCUConfig>
100078cc:	4603      	mov	r3, r0
100078ce:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100078d0:	7bfb      	ldrb	r3, [r7, #15]
100078d2:	2b00      	cmp	r3, #0
100078d4:	d001      	beq.n	100078da <HAL_RCC_ClockConfig+0x82>
    {
      return status;
100078d6:	7bfb      	ldrb	r3, [r7, #15]
100078d8:	e0cc      	b.n	10007a74 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
100078da:	687b      	ldr	r3, [r7, #4]
100078dc:	681b      	ldr	r3, [r3, #0]
100078de:	f003 0308 	and.w	r3, r3, #8
100078e2:	2b00      	cmp	r3, #0
100078e4:	d020      	beq.n	10007928 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
100078e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100078ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100078ec:	f023 0207 	bic.w	r2, r3, #7
100078f0:	687b      	ldr	r3, [r7, #4]
100078f2:	69db      	ldr	r3, [r3, #28]
100078f4:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100078f8:	4313      	orrs	r3, r2
100078fa:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100078fc:	f7fc fd60 	bl	100043c0 <HAL_GetTick>
10007900:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10007902:	e009      	b.n	10007918 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007904:	f7fc fd5c 	bl	100043c0 <HAL_GetTick>
10007908:	4602      	mov	r2, r0
1000790a:	68bb      	ldr	r3, [r7, #8]
1000790c:	1ad3      	subs	r3, r2, r3
1000790e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007912:	d901      	bls.n	10007918 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10007914:	2303      	movs	r3, #3
10007916:	e0ad      	b.n	10007a74 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10007918:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000791c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1000791e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007922:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007926:	d1ed      	bne.n	10007904 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10007928:	687b      	ldr	r3, [r7, #4]
1000792a:	681b      	ldr	r3, [r3, #0]
1000792c:	f003 0310 	and.w	r3, r3, #16
10007930:	2b00      	cmp	r3, #0
10007932:	d020      	beq.n	10007976 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10007934:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
1000793a:	f023 0207 	bic.w	r2, r3, #7
1000793e:	687b      	ldr	r3, [r7, #4]
10007940:	6a1b      	ldr	r3, [r3, #32]
10007942:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007946:	4313      	orrs	r3, r2
10007948:	640b      	str	r3, [r1, #64]	@ 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000794a:	f7fc fd39 	bl	100043c0 <HAL_GetTick>
1000794e:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10007950:	e009      	b.n	10007966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007952:	f7fc fd35 	bl	100043c0 <HAL_GetTick>
10007956:	4602      	mov	r2, r0
10007958:	68bb      	ldr	r3, [r7, #8]
1000795a:	1ad3      	subs	r3, r2, r3
1000795c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007960:	d901      	bls.n	10007966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10007962:	2303      	movs	r3, #3
10007964:	e086      	b.n	10007a74 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10007966:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000796a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
1000796c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007970:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007974:	d1ed      	bne.n	10007952 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
10007976:	687b      	ldr	r3, [r7, #4]
10007978:	681b      	ldr	r3, [r3, #0]
1000797a:	f003 0320 	and.w	r3, r3, #32
1000797e:	2b00      	cmp	r3, #0
10007980:	d023      	beq.n	100079ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10007982:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007986:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
1000798a:	f023 0207 	bic.w	r2, r3, #7
1000798e:	687b      	ldr	r3, [r7, #4]
10007990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007992:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007996:	4313      	orrs	r3, r2
10007998:	f8c1 3834 	str.w	r3, [r1, #2100]	@ 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000799c:	f7fc fd10 	bl	100043c0 <HAL_GetTick>
100079a0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100079a2:	e009      	b.n	100079b8 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100079a4:	f7fc fd0c 	bl	100043c0 <HAL_GetTick>
100079a8:	4602      	mov	r2, r0
100079aa:	68bb      	ldr	r3, [r7, #8]
100079ac:	1ad3      	subs	r3, r2, r3
100079ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
100079b2:	d901      	bls.n	100079b8 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
100079b4:	2303      	movs	r3, #3
100079b6:	e05d      	b.n	10007a74 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100079b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100079bc:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
100079c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100079c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100079c8:	d1ec      	bne.n	100079a4 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
100079ca:	687b      	ldr	r3, [r7, #4]
100079cc:	681b      	ldr	r3, [r3, #0]
100079ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
100079d2:	2b00      	cmp	r3, #0
100079d4:	d023      	beq.n	10007a1e <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
100079d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100079da:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
100079de:	f023 0207 	bic.w	r2, r3, #7
100079e2:	687b      	ldr	r3, [r7, #4]
100079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100079e6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100079ea:	4313      	orrs	r3, r2
100079ec:	f8c1 3838 	str.w	r3, [r1, #2104]	@ 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100079f0:	f7fc fce6 	bl	100043c0 <HAL_GetTick>
100079f4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100079f6:	e009      	b.n	10007a0c <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100079f8:	f7fc fce2 	bl	100043c0 <HAL_GetTick>
100079fc:	4602      	mov	r2, r0
100079fe:	68bb      	ldr	r3, [r7, #8]
10007a00:	1ad3      	subs	r3, r2, r3
10007a02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007a06:	d901      	bls.n	10007a0c <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10007a08:	2303      	movs	r3, #3
10007a0a:	e033      	b.n	10007a74 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10007a0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007a10:	f8d3 3838 	ldr.w	r3, [r3, #2104]	@ 0x838
10007a14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007a18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007a1c:	d1ec      	bne.n	100079f8 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10007a1e:	687b      	ldr	r3, [r7, #4]
10007a20:	681b      	ldr	r3, [r3, #0]
10007a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
10007a26:	2b00      	cmp	r3, #0
10007a28:	d023      	beq.n	10007a72 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
10007a2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007a2e:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10007a32:	f023 0207 	bic.w	r2, r3, #7
10007a36:	687b      	ldr	r3, [r7, #4]
10007a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10007a3a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007a3e:	4313      	orrs	r3, r2
10007a40:	f8c1 383c 	str.w	r3, [r1, #2108]	@ 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007a44:	f7fc fcbc 	bl	100043c0 <HAL_GetTick>
10007a48:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10007a4a:	e009      	b.n	10007a60 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007a4c:	f7fc fcb8 	bl	100043c0 <HAL_GetTick>
10007a50:	4602      	mov	r2, r0
10007a52:	68bb      	ldr	r3, [r7, #8]
10007a54:	1ad3      	subs	r3, r2, r3
10007a56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007a5a:	d901      	bls.n	10007a60 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10007a5c:	2303      	movs	r3, #3
10007a5e:	e009      	b.n	10007a74 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10007a60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007a64:	f8d3 383c 	ldr.w	r3, [r3, #2108]	@ 0x83c
10007a68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007a70:	d1ec      	bne.n	10007a4c <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10007a72:	2300      	movs	r3, #0
}
10007a74:	4618      	mov	r0, r3
10007a76:	3710      	adds	r7, #16
10007a78:	46bd      	mov	sp, r7
10007a7a:	bd80      	pop	{r7, pc}

10007a7c <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10007a7c:	b580      	push	{r7, lr}
10007a7e:	b084      	sub	sp, #16
10007a80:	af00      	add	r7, sp, #0
10007a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10007a84:	687b      	ldr	r3, [r7, #4]
10007a86:	681b      	ldr	r3, [r3, #0]
10007a88:	2b03      	cmp	r3, #3
10007a8a:	d840      	bhi.n	10007b0e <RCC_MPUConfig+0x92>
10007a8c:	a201      	add	r2, pc, #4	@ (adr r2, 10007a94 <RCC_MPUConfig+0x18>)
10007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007a92:	bf00      	nop
10007a94:	10007aa5 	.word	0x10007aa5
10007a98:	10007ab9 	.word	0x10007ab9
10007a9c:	10007acf 	.word	0x10007acf
10007aa0:	10007ae3 	.word	0x10007ae3
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10007aa4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007aa8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007aac:	f003 0301 	and.w	r3, r3, #1
10007ab0:	2b01      	cmp	r3, #1
10007ab2:	d02e      	beq.n	10007b12 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10007ab4:	2301      	movs	r3, #1
10007ab6:	e053      	b.n	10007b60 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10007ab8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007abc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10007ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10007ac8:	d025      	beq.n	10007b16 <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10007aca:	2301      	movs	r3, #1
10007acc:	e048      	b.n	10007b60 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10007ace:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10007ad6:	f003 0302 	and.w	r3, r3, #2
10007ada:	2b02      	cmp	r3, #2
10007adc:	d01d      	beq.n	10007b1a <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10007ade:	2301      	movs	r3, #1
10007ae0:	e03e      	b.n	10007b60 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10007ae2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10007aea:	f003 0302 	and.w	r3, r3, #2
10007aee:	2b02      	cmp	r3, #2
10007af0:	d001      	beq.n	10007af6 <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10007af2:	2301      	movs	r3, #1
10007af4:	e034      	b.n	10007b60 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10007af6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10007afc:	f023 0207 	bic.w	r2, r3, #7
10007b00:	687b      	ldr	r3, [r7, #4]
10007b02:	685b      	ldr	r3, [r3, #4]
10007b04:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007b08:	4313      	orrs	r3, r2
10007b0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

      break;
10007b0c:	e006      	b.n	10007b1c <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10007b0e:	2301      	movs	r3, #1
10007b10:	e026      	b.n	10007b60 <RCC_MPUConfig+0xe4>
      break;
10007b12:	bf00      	nop
10007b14:	e002      	b.n	10007b1c <RCC_MPUConfig+0xa0>
      break;
10007b16:	bf00      	nop
10007b18:	e000      	b.n	10007b1c <RCC_MPUConfig+0xa0>
      break;
10007b1a:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10007b1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007b20:	6a1b      	ldr	r3, [r3, #32]
10007b22:	f023 0203 	bic.w	r2, r3, #3
10007b26:	687b      	ldr	r3, [r7, #4]
10007b28:	681b      	ldr	r3, [r3, #0]
10007b2a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007b2e:	4313      	orrs	r3, r2
10007b30:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10007b32:	f7fc fc45 	bl	100043c0 <HAL_GetTick>
10007b36:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10007b38:	e009      	b.n	10007b4e <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007b3a:	f7fc fc41 	bl	100043c0 <HAL_GetTick>
10007b3e:	4602      	mov	r2, r0
10007b40:	68fb      	ldr	r3, [r7, #12]
10007b42:	1ad3      	subs	r3, r2, r3
10007b44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007b48:	d901      	bls.n	10007b4e <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10007b4a:	2303      	movs	r3, #3
10007b4c:	e008      	b.n	10007b60 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10007b4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007b52:	6a1b      	ldr	r3, [r3, #32]
10007b54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007b5c:	d1ed      	bne.n	10007b3a <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10007b5e:	2300      	movs	r3, #0
}
10007b60:	4618      	mov	r0, r3
10007b62:	3710      	adds	r7, #16
10007b64:	46bd      	mov	sp, r7
10007b66:	bd80      	pop	{r7, pc}

10007b68 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10007b68:	b580      	push	{r7, lr}
10007b6a:	b084      	sub	sp, #16
10007b6c:	af00      	add	r7, sp, #0
10007b6e:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10007b70:	687b      	ldr	r3, [r7, #4]
10007b72:	681b      	ldr	r3, [r3, #0]
10007b74:	2b02      	cmp	r3, #2
10007b76:	d01b      	beq.n	10007bb0 <RCC_AXISSConfig+0x48>
10007b78:	2b02      	cmp	r3, #2
10007b7a:	d823      	bhi.n	10007bc4 <RCC_AXISSConfig+0x5c>
10007b7c:	2b00      	cmp	r3, #0
10007b7e:	d002      	beq.n	10007b86 <RCC_AXISSConfig+0x1e>
10007b80:	2b01      	cmp	r3, #1
10007b82:	d00a      	beq.n	10007b9a <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10007b84:	e01e      	b.n	10007bc4 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10007b86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007b8a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007b8e:	f003 0301 	and.w	r3, r3, #1
10007b92:	2b01      	cmp	r3, #1
10007b94:	d018      	beq.n	10007bc8 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10007b96:	2301      	movs	r3, #1
10007b98:	e079      	b.n	10007c8e <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10007b9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007b9e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10007ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10007baa:	d00f      	beq.n	10007bcc <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10007bac:	2301      	movs	r3, #1
10007bae:	e06e      	b.n	10007c8e <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10007bb0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10007bb8:	f003 0302 	and.w	r3, r3, #2
10007bbc:	2b02      	cmp	r3, #2
10007bbe:	d007      	beq.n	10007bd0 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10007bc0:	2301      	movs	r3, #1
10007bc2:	e064      	b.n	10007c8e <RCC_AXISSConfig+0x126>
      break;
10007bc4:	bf00      	nop
10007bc6:	e004      	b.n	10007bd2 <RCC_AXISSConfig+0x6a>
      break;
10007bc8:	bf00      	nop
10007bca:	e002      	b.n	10007bd2 <RCC_AXISSConfig+0x6a>
      break;
10007bcc:	bf00      	nop
10007bce:	e000      	b.n	10007bd2 <RCC_AXISSConfig+0x6a>
      break;
10007bd0:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10007bd2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007bd8:	f023 0207 	bic.w	r2, r3, #7
10007bdc:	687b      	ldr	r3, [r7, #4]
10007bde:	681b      	ldr	r3, [r3, #0]
10007be0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007be4:	4313      	orrs	r3, r2
10007be6:	624b      	str	r3, [r1, #36]	@ 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10007be8:	687b      	ldr	r3, [r7, #4]
10007bea:	681b      	ldr	r3, [r3, #0]
10007bec:	2b03      	cmp	r3, #3
10007bee:	d016      	beq.n	10007c1e <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007bf0:	f7fc fbe6 	bl	100043c0 <HAL_GetTick>
10007bf4:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10007bf6:	e009      	b.n	10007c0c <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007bf8:	f7fc fbe2 	bl	100043c0 <HAL_GetTick>
10007bfc:	4602      	mov	r2, r0
10007bfe:	68fb      	ldr	r3, [r7, #12]
10007c00:	1ad3      	subs	r3, r2, r3
10007c02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007c06:	d901      	bls.n	10007c0c <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10007c08:	2303      	movs	r3, #3
10007c0a:	e040      	b.n	10007c8e <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10007c0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007c12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007c16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007c1a:	d1ed      	bne.n	10007bf8 <RCC_AXISSConfig+0x90>
10007c1c:	e015      	b.n	10007c4a <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10007c1e:	f7fc fbcf 	bl	100043c0 <HAL_GetTick>
10007c22:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10007c24:	e009      	b.n	10007c3a <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007c26:	f7fc fbcb 	bl	100043c0 <HAL_GetTick>
10007c2a:	4602      	mov	r2, r0
10007c2c:	68fb      	ldr	r3, [r7, #12]
10007c2e:	1ad3      	subs	r3, r2, r3
10007c30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007c34:	d901      	bls.n	10007c3a <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10007c36:	2303      	movs	r3, #3
10007c38:	e029      	b.n	10007c8e <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10007c3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10007c40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007c48:	d0ed      	beq.n	10007c26 <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10007c4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10007c50:	f023 0207 	bic.w	r2, r3, #7
10007c54:	687b      	ldr	r3, [r7, #4]
10007c56:	685b      	ldr	r3, [r3, #4]
10007c58:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007c5c:	4313      	orrs	r3, r2
10007c5e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10007c60:	f7fc fbae 	bl	100043c0 <HAL_GetTick>
10007c64:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10007c66:	e009      	b.n	10007c7c <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007c68:	f7fc fbaa 	bl	100043c0 <HAL_GetTick>
10007c6c:	4602      	mov	r2, r0
10007c6e:	68fb      	ldr	r3, [r7, #12]
10007c70:	1ad3      	subs	r3, r2, r3
10007c72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007c76:	d901      	bls.n	10007c7c <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10007c78:	2303      	movs	r3, #3
10007c7a:	e008      	b.n	10007c8e <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10007c7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10007c82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007c86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007c8a:	d1ed      	bne.n	10007c68 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10007c8c:	2300      	movs	r3, #0
}
10007c8e:	4618      	mov	r0, r3
10007c90:	3710      	adds	r7, #16
10007c92:	46bd      	mov	sp, r7
10007c94:	bd80      	pop	{r7, pc}
	...

10007c98 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10007c98:	b580      	push	{r7, lr}
10007c9a:	b084      	sub	sp, #16
10007c9c:	af00      	add	r7, sp, #0
10007c9e:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10007ca0:	687b      	ldr	r3, [r7, #4]
10007ca2:	681b      	ldr	r3, [r3, #0]
10007ca4:	2b03      	cmp	r3, #3
10007ca6:	d834      	bhi.n	10007d12 <RCC_MCUConfig+0x7a>
10007ca8:	a201      	add	r2, pc, #4	@ (adr r2, 10007cb0 <RCC_MCUConfig+0x18>)
10007caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007cae:	bf00      	nop
10007cb0:	10007cc1 	.word	0x10007cc1
10007cb4:	10007cd5 	.word	0x10007cd5
10007cb8:	10007ceb 	.word	0x10007ceb
10007cbc:	10007cff 	.word	0x10007cff
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10007cc0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007cc4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007cc8:	f003 0301 	and.w	r3, r3, #1
10007ccc:	2b01      	cmp	r3, #1
10007cce:	d022      	beq.n	10007d16 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10007cd0:	2301      	movs	r3, #1
10007cd2:	e081      	b.n	10007dd8 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10007cd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007cd8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10007ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
10007ce4:	d019      	beq.n	10007d1a <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10007ce6:	2301      	movs	r3, #1
10007ce8:	e076      	b.n	10007dd8 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10007cea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007cee:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007cf2:	f003 0310 	and.w	r3, r3, #16
10007cf6:	2b10      	cmp	r3, #16
10007cf8:	d011      	beq.n	10007d1e <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10007cfa:	2301      	movs	r3, #1
10007cfc:	e06c      	b.n	10007dd8 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10007cfe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007d02:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10007d06:	f003 0302 	and.w	r3, r3, #2
10007d0a:	2b02      	cmp	r3, #2
10007d0c:	d009      	beq.n	10007d22 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10007d0e:	2301      	movs	r3, #1
10007d10:	e062      	b.n	10007dd8 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10007d12:	bf00      	nop
10007d14:	e006      	b.n	10007d24 <RCC_MCUConfig+0x8c>
      break;
10007d16:	bf00      	nop
10007d18:	e004      	b.n	10007d24 <RCC_MCUConfig+0x8c>
      break;
10007d1a:	bf00      	nop
10007d1c:	e002      	b.n	10007d24 <RCC_MCUConfig+0x8c>
      break;
10007d1e:	bf00      	nop
10007d20:	e000      	b.n	10007d24 <RCC_MCUConfig+0x8c>
      break;
10007d22:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10007d24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10007d2a:	f023 0203 	bic.w	r2, r3, #3
10007d2e:	687b      	ldr	r3, [r7, #4]
10007d30:	681b      	ldr	r3, [r3, #0]
10007d32:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007d36:	4313      	orrs	r3, r2
10007d38:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10007d3a:	f7fc fb41 	bl	100043c0 <HAL_GetTick>
10007d3e:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10007d40:	e009      	b.n	10007d56 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007d42:	f7fc fb3d 	bl	100043c0 <HAL_GetTick>
10007d46:	4602      	mov	r2, r0
10007d48:	68fb      	ldr	r3, [r7, #12]
10007d4a:	1ad3      	subs	r3, r2, r3
10007d4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007d50:	d901      	bls.n	10007d56 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10007d52:	2303      	movs	r3, #3
10007d54:	e040      	b.n	10007dd8 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10007d56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10007d5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007d60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007d64:	d1ed      	bne.n	10007d42 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10007d66:	f000 f954 	bl	10008012 <HAL_RCC_GetSystemCoreClockFreq>
10007d6a:	4603      	mov	r3, r0
10007d6c:	4a1c      	ldr	r2, [pc, #112]	@ (10007de0 <RCC_MCUConfig+0x148>)
10007d6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10007d70:	4b1c      	ldr	r3, [pc, #112]	@ (10007de4 <RCC_MCUConfig+0x14c>)
10007d72:	681b      	ldr	r3, [r3, #0]
10007d74:	4618      	mov	r0, r3
10007d76:	f7fc fad9 	bl	1000432c <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10007d7a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007d7e:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10007d82:	f023 020f 	bic.w	r2, r3, #15
10007d86:	687b      	ldr	r3, [r7, #4]
10007d88:	685b      	ldr	r3, [r3, #4]
10007d8a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10007d8e:	4313      	orrs	r3, r2
10007d90:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10007d94:	f7fc fb14 	bl	100043c0 <HAL_GetTick>
10007d98:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10007d9a:	e009      	b.n	10007db0 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10007d9c:	f7fc fb10 	bl	100043c0 <HAL_GetTick>
10007da0:	4602      	mov	r2, r0
10007da2:	68fb      	ldr	r3, [r7, #12]
10007da4:	1ad3      	subs	r3, r2, r3
10007da6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
10007daa:	d901      	bls.n	10007db0 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10007dac:	2303      	movs	r3, #3
10007dae:	e013      	b.n	10007dd8 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10007db0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007db4:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10007db8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10007dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10007dc0:	d1ec      	bne.n	10007d9c <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10007dc2:	f000 f926 	bl	10008012 <HAL_RCC_GetSystemCoreClockFreq>
10007dc6:	4603      	mov	r3, r0
10007dc8:	4a05      	ldr	r2, [pc, #20]	@ (10007de0 <RCC_MCUConfig+0x148>)
10007dca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10007dcc:	4b05      	ldr	r3, [pc, #20]	@ (10007de4 <RCC_MCUConfig+0x14c>)
10007dce:	681b      	ldr	r3, [r3, #0]
10007dd0:	4618      	mov	r0, r3
10007dd2:	f7fc faab 	bl	1000432c <HAL_InitTick>
#endif

  return HAL_OK;
10007dd6:	2300      	movs	r3, #0
}
10007dd8:	4618      	mov	r0, r3
10007dda:	3710      	adds	r7, #16
10007ddc:	46bd      	mov	sp, r7
10007dde:	bd80      	pop	{r7, pc}
10007de0:	1002009c 	.word	0x1002009c
10007de4:	100200a0 	.word	0x100200a0

10007de8 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10007de8:	b480      	push	{r7}
10007dea:	b089      	sub	sp, #36	@ 0x24
10007dec:	af00      	add	r7, sp, #0
10007dee:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10007df0:	2300      	movs	r3, #0
10007df2:	61bb      	str	r3, [r7, #24]
10007df4:	2301      	movs	r3, #1
10007df6:	617b      	str	r3, [r7, #20]
10007df8:	2300      	movs	r3, #0
10007dfa:	613b      	str	r3, [r7, #16]
10007dfc:	2300      	movs	r3, #0
10007dfe:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10007e00:	f04f 0300 	mov.w	r3, #0
10007e04:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10007e06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007e0a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
10007e0e:	f003 0303 	and.w	r3, r3, #3
10007e12:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10007e14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007e18:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10007e1c:	0c1b      	lsrs	r3, r3, #16
10007e1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10007e22:	3301      	adds	r3, #1
10007e24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10007e26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007e2a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10007e2e:	0c1b      	lsrs	r3, r3, #16
10007e30:	f003 0301 	and.w	r3, r3, #1
10007e34:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10007e36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007e3a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10007e3e:	08db      	lsrs	r3, r3, #3
10007e40:	f3c3 030c 	ubfx	r3, r3, #0, #13
10007e44:	693a      	ldr	r2, [r7, #16]
10007e46:	fb02 f303 	mul.w	r3, r2, r3
10007e4a:	ee07 3a90 	vmov	s15, r3
10007e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10007e52:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10007e56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007e5a:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
10007e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
10007e62:	3301      	adds	r3, #1
10007e64:	ee07 3a90 	vmov	s15, r3
10007e68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10007e6c:	edd7 6a02 	vldr	s13, [r7, #8]
10007e70:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 10007fcc <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10007e74:	eec6 7a86 	vdiv.f32	s15, s13, s12
10007e78:	ee77 7a27 	vadd.f32	s15, s14, s15
10007e7c:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10007e80:	69bb      	ldr	r3, [r7, #24]
10007e82:	2b03      	cmp	r3, #3
10007e84:	d85b      	bhi.n	10007f3e <HAL_RCC_GetPLL3ClockFreq+0x156>
10007e86:	a201      	add	r2, pc, #4	@ (adr r2, 10007e8c <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007e8c:	10007e9d 	.word	0x10007e9d
10007e90:	10007efb 	.word	0x10007efb
10007e94:	10007f19 	.word	0x10007f19
10007e98:	10007f37 	.word	0x10007f37
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10007e9c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007ea0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
10007ea4:	f003 0304 	and.w	r3, r3, #4
10007ea8:	2b04      	cmp	r3, #4
10007eaa:	d117      	bne.n	10007edc <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10007eac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007eb0:	699b      	ldr	r3, [r3, #24]
10007eb2:	f003 0303 	and.w	r3, r3, #3
10007eb6:	4a46      	ldr	r2, [pc, #280]	@ (10007fd0 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10007eb8:	fa22 f303 	lsr.w	r3, r2, r3
10007ebc:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10007ebe:	68fa      	ldr	r2, [r7, #12]
10007ec0:	697b      	ldr	r3, [r7, #20]
10007ec2:	fbb2 f3f3 	udiv	r3, r2, r3
10007ec6:	ee07 3a90 	vmov	s15, r3
10007eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
10007ece:	ed97 7a07 	vldr	s14, [r7, #28]
10007ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
10007ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10007eda:	e030      	b.n	10007f3e <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10007edc:	4a3c      	ldr	r2, [pc, #240]	@ (10007fd0 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10007ede:	697b      	ldr	r3, [r7, #20]
10007ee0:	fbb2 f3f3 	udiv	r3, r2, r3
10007ee4:	ee07 3a90 	vmov	s15, r3
10007ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
10007eec:	ed97 7a07 	vldr	s14, [r7, #28]
10007ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
10007ef4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10007ef8:	e021      	b.n	10007f3e <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10007efa:	4a36      	ldr	r2, [pc, #216]	@ (10007fd4 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10007efc:	697b      	ldr	r3, [r7, #20]
10007efe:	fbb2 f3f3 	udiv	r3, r2, r3
10007f02:	ee07 3a90 	vmov	s15, r3
10007f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
10007f0a:	ed97 7a07 	vldr	s14, [r7, #28]
10007f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
10007f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10007f16:	e012      	b.n	10007f3e <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10007f18:	4a2f      	ldr	r2, [pc, #188]	@ (10007fd8 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10007f1a:	697b      	ldr	r3, [r7, #20]
10007f1c:	fbb2 f3f3 	udiv	r3, r2, r3
10007f20:	ee07 3a90 	vmov	s15, r3
10007f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
10007f28:	ed97 7a07 	vldr	s14, [r7, #28]
10007f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
10007f30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10007f34:	e003      	b.n	10007f3e <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10007f36:	f04f 0300 	mov.w	r3, #0
10007f3a:	61fb      	str	r3, [r7, #28]
      break;
10007f3c:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10007f3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007f42:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10007f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10007f4a:	3301      	adds	r3, #1
10007f4c:	ee07 3a90 	vmov	s15, r3
10007f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10007f54:	edd7 6a07 	vldr	s13, [r7, #28]
10007f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
10007f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10007f60:	ee17 2a90 	vmov	r2, s15
10007f64:	687b      	ldr	r3, [r7, #4]
10007f66:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10007f68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007f6c:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10007f70:	0a1b      	lsrs	r3, r3, #8
10007f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10007f76:	3301      	adds	r3, #1
10007f78:	ee07 3a90 	vmov	s15, r3
10007f7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10007f80:	edd7 6a07 	vldr	s13, [r7, #28]
10007f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
10007f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10007f8c:	ee17 2a90 	vmov	r2, s15
10007f90:	687b      	ldr	r3, [r7, #4]
10007f92:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10007f94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007f98:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
10007f9c:	0c1b      	lsrs	r3, r3, #16
10007f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10007fa2:	3301      	adds	r3, #1
10007fa4:	ee07 3a90 	vmov	s15, r3
10007fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10007fac:	edd7 6a07 	vldr	s13, [r7, #28]
10007fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
10007fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10007fb8:	ee17 2a90 	vmov	r2, s15
10007fbc:	687b      	ldr	r3, [r7, #4]
10007fbe:	609a      	str	r2, [r3, #8]
}
10007fc0:	bf00      	nop
10007fc2:	3724      	adds	r7, #36	@ 0x24
10007fc4:	46bd      	mov	sp, r7
10007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
10007fca:	4770      	bx	lr
10007fcc:	46000000 	.word	0x46000000
10007fd0:	03d09000 	.word	0x03d09000
10007fd4:	016e3600 	.word	0x016e3600
10007fd8:	003d0900 	.word	0x003d0900

10007fdc <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10007fdc:	b580      	push	{r7, lr}
10007fde:	b082      	sub	sp, #8
10007fe0:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10007fe2:	2300      	movs	r3, #0
10007fe4:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10007fe6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10007fea:	f8d3 3830 	ldr.w	r3, [r3, #2096]	@ 0x830
10007fee:	f003 030f 	and.w	r3, r3, #15
10007ff2:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10007ff4:	687b      	ldr	r3, [r7, #4]
10007ff6:	2b09      	cmp	r3, #9
10007ff8:	d901      	bls.n	10007ffe <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10007ffa:	2309      	movs	r3, #9
10007ffc:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10007ffe:	f000 f80f 	bl	10008020 <HAL_RCC_GetMCUSSFreq>
10008002:	4602      	mov	r2, r0
10008004:	687b      	ldr	r3, [r7, #4]
10008006:	fa22 f303 	lsr.w	r3, r2, r3
}
1000800a:	4618      	mov	r0, r3
1000800c:	3708      	adds	r7, #8
1000800e:	46bd      	mov	sp, r7
10008010:	bd80      	pop	{r7, pc}

10008012 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10008012:	b580      	push	{r7, lr}
10008014:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10008016:	f7ff ffe1 	bl	10007fdc <HAL_RCC_GetMCUFreq>
1000801a:	4603      	mov	r3, r0
#endif
}
1000801c:	4618      	mov	r0, r3
1000801e:	bd80      	pop	{r7, pc}

10008020 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10008020:	b580      	push	{r7, lr}
10008022:	b084      	sub	sp, #16
10008024:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10008026:	2300      	movs	r3, #0
10008028:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
1000802a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000802e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10008030:	f003 0303 	and.w	r3, r3, #3
10008034:	2b03      	cmp	r3, #3
10008036:	d822      	bhi.n	1000807e <HAL_RCC_GetMCUSSFreq+0x5e>
10008038:	a201      	add	r2, pc, #4	@ (adr r2, 10008040 <HAL_RCC_GetMCUSSFreq+0x20>)
1000803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000803e:	bf00      	nop
10008040:	1000805f 	.word	0x1000805f
10008044:	10008073 	.word	0x10008073
10008048:	10008079 	.word	0x10008079
1000804c:	10008051 	.word	0x10008051
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10008050:	463b      	mov	r3, r7
10008052:	4618      	mov	r0, r3
10008054:	f7ff fec8 	bl	10007de8 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10008058:	683b      	ldr	r3, [r7, #0]
1000805a:	60fb      	str	r3, [r7, #12]
      break;
1000805c:	e00f      	b.n	1000807e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000805e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008062:	699b      	ldr	r3, [r3, #24]
10008064:	f003 0303 	and.w	r3, r3, #3
10008068:	4a07      	ldr	r2, [pc, #28]	@ (10008088 <HAL_RCC_GetMCUSSFreq+0x68>)
1000806a:	fa22 f303 	lsr.w	r3, r2, r3
1000806e:	60fb      	str	r3, [r7, #12]

      break;
10008070:	e005      	b.n	1000807e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10008072:	4b06      	ldr	r3, [pc, #24]	@ (1000808c <HAL_RCC_GetMCUSSFreq+0x6c>)
10008074:	60fb      	str	r3, [r7, #12]
      break;
10008076:	e002      	b.n	1000807e <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10008078:	4b05      	ldr	r3, [pc, #20]	@ (10008090 <HAL_RCC_GetMCUSSFreq+0x70>)
1000807a:	60fb      	str	r3, [r7, #12]
      break;
1000807c:	bf00      	nop
  }

  return mcussfreq;
1000807e:	68fb      	ldr	r3, [r7, #12]
}
10008080:	4618      	mov	r0, r3
10008082:	3710      	adds	r7, #16
10008084:	46bd      	mov	sp, r7
10008086:	bd80      	pop	{r7, pc}
10008088:	03d09000 	.word	0x03d09000
1000808c:	016e3600 	.word	0x016e3600
10008090:	003d0900 	.word	0x003d0900

10008094 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10008094:	b580      	push	{r7, lr}
10008096:	b084      	sub	sp, #16
10008098:	af00      	add	r7, sp, #0
1000809a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
1000809c:	687b      	ldr	r3, [r7, #4]
1000809e:	681b      	ldr	r3, [r3, #0]
100080a0:	2b00      	cmp	r3, #0
100080a2:	f000 8171 	beq.w	10008388 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
100080a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100080aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100080ac:	f003 0307 	and.w	r3, r3, #7
100080b0:	2b02      	cmp	r3, #2
100080b2:	d108      	bne.n	100080c6 <RCCEx_PLL2_Config+0x32>
100080b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100080b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100080ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100080be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100080c2:	f000 815f 	beq.w	10008384 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
100080c6:	687b      	ldr	r3, [r7, #4]
100080c8:	681b      	ldr	r3, [r3, #0]
100080ca:	2b02      	cmp	r3, #2
100080cc:	f040 8130 	bne.w	10008330 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100080d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100080d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100080d6:	f003 0303 	and.w	r3, r3, #3
100080da:	2b00      	cmp	r3, #0
100080dc:	d008      	beq.n	100080f0 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
100080de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100080e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100080e4:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100080e8:	2b01      	cmp	r3, #1
100080ea:	d001      	beq.n	100080f0 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100080ec:	2301      	movs	r3, #1
100080ee:	e14c      	b.n	1000838a <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100080f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100080f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100080f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100080fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10008100:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10008104:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000810c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008110:	f023 0301 	bic.w	r3, r3, #1
10008114:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10008118:	f7fc f952 	bl	100043c0 <HAL_GetTick>
1000811c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000811e:	e008      	b.n	10008132 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10008120:	f7fc f94e 	bl	100043c0 <HAL_GetTick>
10008124:	4602      	mov	r2, r0
10008126:	68fb      	ldr	r3, [r7, #12]
10008128:	1ad3      	subs	r3, r2, r3
1000812a:	2b64      	cmp	r3, #100	@ 0x64
1000812c:	d901      	bls.n	10008132 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000812e:	2303      	movs	r3, #3
10008130:	e12b      	b.n	1000838a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10008132:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000813a:	f003 0302 	and.w	r3, r3, #2
1000813e:	2b02      	cmp	r3, #2
10008140:	d0ee      	beq.n	10008120 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10008142:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008146:	6a1b      	ldr	r3, [r3, #32]
10008148:	f003 0303 	and.w	r3, r3, #3
1000814c:	2b02      	cmp	r3, #2
1000814e:	d107      	bne.n	10008160 <RCCEx_PLL2_Config+0xcc>
10008150:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008154:	6a1b      	ldr	r3, [r3, #32]
10008156:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000815a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000815e:	d00e      	beq.n	1000817e <RCCEx_PLL2_Config+0xea>
10008160:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008164:	6a1b      	ldr	r3, [r3, #32]
10008166:	f003 0303 	and.w	r3, r3, #3
1000816a:	2b03      	cmp	r3, #3
1000816c:	d112      	bne.n	10008194 <RCCEx_PLL2_Config+0x100>
1000816e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008172:	6a1b      	ldr	r3, [r3, #32]
10008174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10008178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000817c:	d10a      	bne.n	10008194 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000817e:	687b      	ldr	r3, [r7, #4]
10008180:	685a      	ldr	r2, [r3, #4]
10008182:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10008188:	f003 0303 	and.w	r3, r3, #3
1000818c:	429a      	cmp	r2, r3
1000818e:	d00c      	beq.n	100081aa <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10008190:	2301      	movs	r3, #1
10008192:	e0fa      	b.n	1000838a <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10008194:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000819a:	f023 0203 	bic.w	r2, r3, #3
1000819e:	687b      	ldr	r3, [r7, #4]
100081a0:	685b      	ldr	r3, [r3, #4]
100081a2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100081a6:	4313      	orrs	r3, r2
100081a8:	628b      	str	r3, [r1, #40]	@ 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
100081aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100081ae:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
100081b2:	4b78      	ldr	r3, [pc, #480]	@ (10008394 <RCCEx_PLL2_Config+0x300>)
100081b4:	4013      	ands	r3, r2
100081b6:	687a      	ldr	r2, [r7, #4]
100081b8:	68d2      	ldr	r2, [r2, #12]
100081ba:	1e51      	subs	r1, r2, #1
100081bc:	687a      	ldr	r2, [r7, #4]
100081be:	6892      	ldr	r2, [r2, #8]
100081c0:	3a01      	subs	r2, #1
100081c2:	0412      	lsls	r2, r2, #16
100081c4:	430a      	orrs	r2, r1
100081c6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100081ca:	4313      	orrs	r3, r2
100081cc:	f8c1 3098 	str.w	r3, [r1, #152]	@ 0x98
100081d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100081d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
100081d8:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100081dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100081e0:	687a      	ldr	r2, [r7, #4]
100081e2:	6912      	ldr	r2, [r2, #16]
100081e4:	1e51      	subs	r1, r2, #1
100081e6:	687a      	ldr	r2, [r7, #4]
100081e8:	6952      	ldr	r2, [r2, #20]
100081ea:	3a01      	subs	r2, #1
100081ec:	0212      	lsls	r2, r2, #8
100081ee:	4311      	orrs	r1, r2
100081f0:	687a      	ldr	r2, [r7, #4]
100081f2:	6992      	ldr	r2, [r2, #24]
100081f4:	3a01      	subs	r2, #1
100081f6:	0412      	lsls	r2, r2, #16
100081f8:	430a      	orrs	r2, r1
100081fa:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100081fe:	4313      	orrs	r3, r2
10008200:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10008204:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000820c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
10008214:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10008218:	687b      	ldr	r3, [r7, #4]
1000821a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000821c:	2b02      	cmp	r3, #2
1000821e:	d003      	beq.n	10008228 <RCCEx_PLL2_Config+0x194>
10008220:	687b      	ldr	r3, [r7, #4]
10008222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10008224:	2b00      	cmp	r3, #0
10008226:	d10c      	bne.n	10008242 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10008228:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000822c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
10008230:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008234:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10008238:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
1000823c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
10008240:	e00f      	b.n	10008262 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10008242:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008246:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000824a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000824e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10008252:	687a      	ldr	r2, [r7, #4]
10008254:	6a12      	ldr	r2, [r2, #32]
10008256:	00d2      	lsls	r2, r2, #3
10008258:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000825c:	4313      	orrs	r3, r2
1000825e:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10008262:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
1000826a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000826e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10008272:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10008276:	687b      	ldr	r3, [r7, #4]
10008278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000827a:	2b02      	cmp	r3, #2
1000827c:	d124      	bne.n	100082c8 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
1000827e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008282:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
10008286:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
1000828a:	687b      	ldr	r3, [r7, #4]
1000828c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
1000828e:	687b      	ldr	r3, [r7, #4]
10008290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10008292:	4319      	orrs	r1, r3
10008294:	687b      	ldr	r3, [r7, #4]
10008296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10008298:	4319      	orrs	r1, r3
1000829a:	687b      	ldr	r3, [r7, #4]
1000829c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000829e:	4319      	orrs	r1, r3
100082a0:	687b      	ldr	r3, [r7, #4]
100082a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100082a4:	041b      	lsls	r3, r3, #16
100082a6:	430b      	orrs	r3, r1
100082a8:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100082ac:	4313      	orrs	r3, r2
100082ae:	f8c1 30a4 	str.w	r3, [r1, #164]	@ 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
100082b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100082b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100082ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100082be:	f043 0304 	orr.w	r3, r3, #4
100082c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
100082c6:	e009      	b.n	100082dc <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
100082c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100082cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100082d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100082d4:	f023 0304 	bic.w	r3, r3, #4
100082d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
100082dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100082e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
100082e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100082e8:	f043 0301 	orr.w	r3, r3, #1
100082ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100082f0:	f7fc f866 	bl	100043c0 <HAL_GetTick>
100082f4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100082f6:	e008      	b.n	1000830a <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100082f8:	f7fc f862 	bl	100043c0 <HAL_GetTick>
100082fc:	4602      	mov	r2, r0
100082fe:	68fb      	ldr	r3, [r7, #12]
10008300:	1ad3      	subs	r3, r2, r3
10008302:	2b64      	cmp	r3, #100	@ 0x64
10008304:	d901      	bls.n	1000830a <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10008306:	2303      	movs	r3, #3
10008308:	e03f      	b.n	1000838a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000830a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000830e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10008312:	f003 0302 	and.w	r3, r3, #2
10008316:	2b02      	cmp	r3, #2
10008318:	d1ee      	bne.n	100082f8 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000831a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000831e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10008322:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008326:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
1000832a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
1000832e:	e02b      	b.n	10008388 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10008330:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
10008338:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000833c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10008340:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10008344:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000834c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008350:	f023 0301 	bic.w	r3, r3, #1
10008354:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10008358:	f7fc f832 	bl	100043c0 <HAL_GetTick>
1000835c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000835e:	e008      	b.n	10008372 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10008360:	f7fc f82e 	bl	100043c0 <HAL_GetTick>
10008364:	4602      	mov	r2, r0
10008366:	68fb      	ldr	r3, [r7, #12]
10008368:	1ad3      	subs	r3, r2, r3
1000836a:	2b64      	cmp	r3, #100	@ 0x64
1000836c:	d901      	bls.n	10008372 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
1000836e:	2303      	movs	r3, #3
10008370:	e00b      	b.n	1000838a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10008372:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
1000837a:	f003 0302 	and.w	r3, r3, #2
1000837e:	2b02      	cmp	r3, #2
10008380:	d0ee      	beq.n	10008360 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10008382:	e001      	b.n	10008388 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10008384:	2301      	movs	r3, #1
10008386:	e000      	b.n	1000838a <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10008388:	2300      	movs	r3, #0

}
1000838a:	4618      	mov	r0, r3
1000838c:	3710      	adds	r7, #16
1000838e:	46bd      	mov	sp, r7
10008390:	bd80      	pop	{r7, pc}
10008392:	bf00      	nop
10008394:	ffc0fe00 	.word	0xffc0fe00

10008398 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10008398:	b580      	push	{r7, lr}
1000839a:	b084      	sub	sp, #16
1000839c:	af00      	add	r7, sp, #0
1000839e:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100083a0:	687b      	ldr	r3, [r7, #4]
100083a2:	681b      	ldr	r3, [r3, #0]
100083a4:	2b00      	cmp	r3, #0
100083a6:	f000 815a 	beq.w	1000865e <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100083aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100083ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100083b0:	f003 0303 	and.w	r3, r3, #3
100083b4:	2b03      	cmp	r3, #3
100083b6:	d108      	bne.n	100083ca <RCCEx_PLL3_Config+0x32>
100083b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100083bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100083be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
100083c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
100083c6:	f000 8148 	beq.w	1000865a <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
100083ca:	687b      	ldr	r3, [r7, #4]
100083cc:	681b      	ldr	r3, [r3, #0]
100083ce:	2b02      	cmp	r3, #2
100083d0:	f040 8119 	bne.w	10008606 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100083d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100083d8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100083dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100083e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100083e4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100083e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100083ec:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100083f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100083f4:	f023 0301 	bic.w	r3, r3, #1
100083f8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100083fc:	f7fb ffe0 	bl	100043c0 <HAL_GetTick>
10008400:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10008402:	e008      	b.n	10008416 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10008404:	f7fb ffdc 	bl	100043c0 <HAL_GetTick>
10008408:	4602      	mov	r2, r0
1000840a:	68fb      	ldr	r3, [r7, #12]
1000840c:	1ad3      	subs	r3, r2, r3
1000840e:	2b64      	cmp	r3, #100	@ 0x64
10008410:	d901      	bls.n	10008416 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10008412:	2303      	movs	r3, #3
10008414:	e124      	b.n	10008660 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10008416:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000841a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000841e:	f003 0302 	and.w	r3, r3, #2
10008422:	2b02      	cmp	r3, #2
10008424:	d0ee      	beq.n	10008404 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10008426:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000842a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000842e:	f023 0203 	bic.w	r2, r3, #3
10008432:	687b      	ldr	r3, [r7, #4]
10008434:	685b      	ldr	r3, [r3, #4]
10008436:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000843a:	4313      	orrs	r3, r2
1000843c:	f8c1 3820 	str.w	r3, [r1, #2080]	@ 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10008440:	e008      	b.n	10008454 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10008442:	f7fb ffbd 	bl	100043c0 <HAL_GetTick>
10008446:	4602      	mov	r2, r0
10008448:	68fb      	ldr	r3, [r7, #12]
1000844a:	1ad3      	subs	r3, r2, r3
1000844c:	2b64      	cmp	r3, #100	@ 0x64
1000844e:	d901      	bls.n	10008454 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10008450:	2303      	movs	r3, #3
10008452:	e105      	b.n	10008660 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10008454:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008458:	f8d3 3820 	ldr.w	r3, [r3, #2080]	@ 0x820
1000845c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10008460:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10008464:	d1ed      	bne.n	10008442 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10008466:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000846a:	f8d3 3884 	ldr.w	r3, [r3, #2180]	@ 0x884
1000846e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10008472:	687b      	ldr	r3, [r7, #4]
10008474:	69db      	ldr	r3, [r3, #28]
10008476:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000847a:	4313      	orrs	r3, r2
1000847c:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10008480:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008484:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
10008488:	4b77      	ldr	r3, [pc, #476]	@ (10008668 <RCCEx_PLL3_Config+0x2d0>)
1000848a:	4013      	ands	r3, r2
1000848c:	687a      	ldr	r2, [r7, #4]
1000848e:	68d2      	ldr	r2, [r2, #12]
10008490:	1e51      	subs	r1, r2, #1
10008492:	687a      	ldr	r2, [r7, #4]
10008494:	6892      	ldr	r2, [r2, #8]
10008496:	3a01      	subs	r2, #1
10008498:	0412      	lsls	r2, r2, #16
1000849a:	430a      	orrs	r2, r1
1000849c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100084a0:	4313      	orrs	r3, r2
100084a2:	f8c1 3884 	str.w	r3, [r1, #2180]	@ 0x884
100084a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100084aa:	f8d3 3888 	ldr.w	r3, [r3, #2184]	@ 0x888
100084ae:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
100084b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
100084b6:	687a      	ldr	r2, [r7, #4]
100084b8:	6912      	ldr	r2, [r2, #16]
100084ba:	1e51      	subs	r1, r2, #1
100084bc:	687a      	ldr	r2, [r7, #4]
100084be:	6952      	ldr	r2, [r2, #20]
100084c0:	3a01      	subs	r2, #1
100084c2:	0212      	lsls	r2, r2, #8
100084c4:	4311      	orrs	r1, r2
100084c6:	687a      	ldr	r2, [r7, #4]
100084c8:	6992      	ldr	r2, [r2, #24]
100084ca:	3a01      	subs	r2, #1
100084cc:	0412      	lsls	r2, r2, #16
100084ce:	430a      	orrs	r2, r1
100084d0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100084d4:	4313      	orrs	r3, r2
100084d6:	f8c1 3888 	str.w	r3, [r1, #2184]	@ 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100084da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100084de:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
100084e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100084e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
100084ea:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100084ee:	687b      	ldr	r3, [r7, #4]
100084f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100084f2:	2b02      	cmp	r3, #2
100084f4:	d003      	beq.n	100084fe <RCCEx_PLL3_Config+0x166>
100084f6:	687b      	ldr	r3, [r7, #4]
100084f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100084fa:	2b00      	cmp	r3, #0
100084fc:	d10c      	bne.n	10008518 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
100084fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008502:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10008506:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000850a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
1000850e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10008512:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c
10008516:	e00f      	b.n	10008538 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10008518:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000851c:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10008520:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
10008524:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
10008528:	687a      	ldr	r2, [r7, #4]
1000852a:	6a12      	ldr	r2, [r2, #32]
1000852c:	00d2      	lsls	r2, r2, #3
1000852e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10008532:	4313      	orrs	r3, r2
10008534:	f8c1 388c 	str.w	r3, [r1, #2188]	@ 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10008538:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000853c:	f8d3 388c 	ldr.w	r3, [r3, #2188]	@ 0x88c
10008540:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
10008548:	f8c2 388c 	str.w	r3, [r2, #2188]	@ 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000854c:	687b      	ldr	r3, [r7, #4]
1000854e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10008550:	2b02      	cmp	r3, #2
10008552:	d124      	bne.n	1000859e <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10008554:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008558:	f8d3 3890 	ldr.w	r3, [r3, #2192]	@ 0x890
1000855c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10008560:	687b      	ldr	r3, [r7, #4]
10008562:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10008564:	687b      	ldr	r3, [r7, #4]
10008566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10008568:	4319      	orrs	r1, r3
1000856a:	687b      	ldr	r3, [r7, #4]
1000856c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000856e:	4319      	orrs	r1, r3
10008570:	687b      	ldr	r3, [r7, #4]
10008572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10008574:	4319      	orrs	r1, r3
10008576:	687b      	ldr	r3, [r7, #4]
10008578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000857a:	041b      	lsls	r3, r3, #16
1000857c:	430b      	orrs	r3, r1
1000857e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10008582:	4313      	orrs	r3, r2
10008584:	f8c1 3890 	str.w	r3, [r1, #2192]	@ 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10008588:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000858c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008590:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008594:	f043 0304 	orr.w	r3, r3, #4
10008598:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
1000859c:	e009      	b.n	100085b2 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
1000859e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100085a2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100085a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100085aa:	f023 0304 	bic.w	r3, r3, #4
100085ae:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
100085b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100085b6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100085ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100085be:	f043 0301 	orr.w	r3, r3, #1
100085c2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100085c6:	f7fb fefb 	bl	100043c0 <HAL_GetTick>
100085ca:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100085cc:	e008      	b.n	100085e0 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100085ce:	f7fb fef7 	bl	100043c0 <HAL_GetTick>
100085d2:	4602      	mov	r2, r0
100085d4:	68fb      	ldr	r3, [r7, #12]
100085d6:	1ad3      	subs	r3, r2, r3
100085d8:	2b64      	cmp	r3, #100	@ 0x64
100085da:	d901      	bls.n	100085e0 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
100085dc:	2303      	movs	r3, #3
100085de:	e03f      	b.n	10008660 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100085e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100085e4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100085e8:	f003 0302 	and.w	r3, r3, #2
100085ec:	2b02      	cmp	r3, #2
100085ee:	d1ee      	bne.n	100085ce <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100085f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100085f4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100085f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100085fc:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
10008600:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10008604:	e02b      	b.n	1000865e <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10008606:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000860a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000860e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10008616:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
1000861a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000861e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008622:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008626:	f023 0301 	bic.w	r3, r3, #1
1000862a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000862e:	f7fb fec7 	bl	100043c0 <HAL_GetTick>
10008632:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10008634:	e008      	b.n	10008648 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10008636:	f7fb fec3 	bl	100043c0 <HAL_GetTick>
1000863a:	4602      	mov	r2, r0
1000863c:	68fb      	ldr	r3, [r7, #12]
1000863e:	1ad3      	subs	r3, r2, r3
10008640:	2b64      	cmp	r3, #100	@ 0x64
10008642:	d901      	bls.n	10008648 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10008644:	2303      	movs	r3, #3
10008646:	e00b      	b.n	10008660 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10008648:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000864c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008650:	f003 0302 	and.w	r3, r3, #2
10008654:	2b02      	cmp	r3, #2
10008656:	d0ee      	beq.n	10008636 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10008658:	e001      	b.n	1000865e <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000865a:	2301      	movs	r3, #1
1000865c:	e000      	b.n	10008660 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
1000865e:	2300      	movs	r3, #0
}
10008660:	4618      	mov	r0, r3
10008662:	3710      	adds	r7, #16
10008664:	46bd      	mov	sp, r7
10008666:	bd80      	pop	{r7, pc}
10008668:	ffc0fe00 	.word	0xffc0fe00

1000866c <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
1000866c:	b580      	push	{r7, lr}
1000866e:	b084      	sub	sp, #16
10008670:	af00      	add	r7, sp, #0
10008672:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10008674:	687b      	ldr	r3, [r7, #4]
10008676:	681b      	ldr	r3, [r3, #0]
10008678:	2b00      	cmp	r3, #0
1000867a:	f000 8147 	beq.w	1000890c <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
1000867e:	687b      	ldr	r3, [r7, #4]
10008680:	681b      	ldr	r3, [r3, #0]
10008682:	2b02      	cmp	r3, #2
10008684:	f040 8119 	bne.w	100088ba <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10008688:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000868c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10008690:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
10008698:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
1000869c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100086a0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100086a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100086a8:	f023 0301 	bic.w	r3, r3, #1
100086ac:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100086b0:	f7fb fe86 	bl	100043c0 <HAL_GetTick>
100086b4:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100086b6:	e008      	b.n	100086ca <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100086b8:	f7fb fe82 	bl	100043c0 <HAL_GetTick>
100086bc:	4602      	mov	r2, r0
100086be:	68fb      	ldr	r3, [r7, #12]
100086c0:	1ad3      	subs	r3, r2, r3
100086c2:	2b64      	cmp	r3, #100	@ 0x64
100086c4:	d901      	bls.n	100086ca <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
100086c6:	2303      	movs	r3, #3
100086c8:	e121      	b.n	1000890e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100086ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100086ce:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100086d2:	f003 0302 	and.w	r3, r3, #2
100086d6:	2b02      	cmp	r3, #2
100086d8:	d0ee      	beq.n	100086b8 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
100086da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100086de:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
100086e2:	f023 0203 	bic.w	r2, r3, #3
100086e6:	687b      	ldr	r3, [r7, #4]
100086e8:	685b      	ldr	r3, [r3, #4]
100086ea:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100086ee:	4313      	orrs	r3, r2
100086f0:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
100086f4:	e008      	b.n	10008708 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100086f6:	f7fb fe63 	bl	100043c0 <HAL_GetTick>
100086fa:	4602      	mov	r2, r0
100086fc:	68fb      	ldr	r3, [r7, #12]
100086fe:	1ad3      	subs	r3, r2, r3
10008700:	2b64      	cmp	r3, #100	@ 0x64
10008702:	d901      	bls.n	10008708 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10008704:	2303      	movs	r3, #3
10008706:	e102      	b.n	1000890e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10008708:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000870c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	@ 0x824
10008710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
10008714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
10008718:	d1ed      	bne.n	100086f6 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
1000871a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000871e:	f8d3 3898 	ldr.w	r3, [r3, #2200]	@ 0x898
10008722:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
10008726:	687b      	ldr	r3, [r7, #4]
10008728:	69db      	ldr	r3, [r3, #28]
1000872a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000872e:	4313      	orrs	r3, r2
10008730:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10008734:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008738:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
1000873c:	4b76      	ldr	r3, [pc, #472]	@ (10008918 <RCCEx_PLL4_Config+0x2ac>)
1000873e:	4013      	ands	r3, r2
10008740:	687a      	ldr	r2, [r7, #4]
10008742:	68d2      	ldr	r2, [r2, #12]
10008744:	1e51      	subs	r1, r2, #1
10008746:	687a      	ldr	r2, [r7, #4]
10008748:	6892      	ldr	r2, [r2, #8]
1000874a:	3a01      	subs	r2, #1
1000874c:	0412      	lsls	r2, r2, #16
1000874e:	430a      	orrs	r2, r1
10008750:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10008754:	4313      	orrs	r3, r2
10008756:	f8c1 3898 	str.w	r3, [r1, #2200]	@ 0x898
1000875a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000875e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	@ 0x89c
10008762:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
10008766:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
1000876a:	687a      	ldr	r2, [r7, #4]
1000876c:	6912      	ldr	r2, [r2, #16]
1000876e:	1e51      	subs	r1, r2, #1
10008770:	687a      	ldr	r2, [r7, #4]
10008772:	6952      	ldr	r2, [r2, #20]
10008774:	3a01      	subs	r2, #1
10008776:	0212      	lsls	r2, r2, #8
10008778:	4311      	orrs	r1, r2
1000877a:	687a      	ldr	r2, [r7, #4]
1000877c:	6992      	ldr	r2, [r2, #24]
1000877e:	3a01      	subs	r2, #1
10008780:	0412      	lsls	r2, r2, #16
10008782:	430a      	orrs	r2, r1
10008784:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10008788:	4313      	orrs	r3, r2
1000878a:	f8c1 389c 	str.w	r3, [r1, #2204]	@ 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
1000878e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008792:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
10008796:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000879a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
1000879e:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
100087a2:	687b      	ldr	r3, [r7, #4]
100087a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100087a6:	2b02      	cmp	r3, #2
100087a8:	d003      	beq.n	100087b2 <RCCEx_PLL4_Config+0x146>
100087aa:	687b      	ldr	r3, [r7, #4]
100087ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100087ae:	2b00      	cmp	r3, #0
100087b0:	d10c      	bne.n	100087cc <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
100087b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100087b6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
100087ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100087be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100087c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100087c6:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
100087ca:	e00f      	b.n	100087ec <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
100087cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100087d0:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
100087d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
100087d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
100087dc:	687a      	ldr	r2, [r7, #4]
100087de:	6a12      	ldr	r2, [r2, #32]
100087e0:	00d2      	lsls	r2, r2, #3
100087e2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
100087e6:	4313      	orrs	r3, r2
100087e8:	f8c1 38a0 	str.w	r3, [r1, #2208]	@ 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
100087ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100087f0:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	@ 0x8a0
100087f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100087f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
100087fc:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10008800:	687b      	ldr	r3, [r7, #4]
10008802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10008804:	2b02      	cmp	r3, #2
10008806:	d124      	bne.n	10008852 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10008808:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000880c:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	@ 0x8a4
10008810:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
10008814:	687b      	ldr	r3, [r7, #4]
10008816:	6a99      	ldr	r1, [r3, #40]	@ 0x28
10008818:	687b      	ldr	r3, [r7, #4]
1000881a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000881c:	4319      	orrs	r1, r3
1000881e:	687b      	ldr	r3, [r7, #4]
10008820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10008822:	4319      	orrs	r1, r3
10008824:	687b      	ldr	r3, [r7, #4]
10008826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10008828:	4319      	orrs	r1, r3
1000882a:	687b      	ldr	r3, [r7, #4]
1000882c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1000882e:	041b      	lsls	r3, r3, #16
10008830:	430b      	orrs	r3, r1
10008832:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
10008836:	4313      	orrs	r3, r2
10008838:	f8c1 38a4 	str.w	r3, [r1, #2212]	@ 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
1000883c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008840:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10008844:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008848:	f043 0304 	orr.w	r3, r3, #4
1000884c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
10008850:	e009      	b.n	10008866 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10008852:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008856:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000885a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000885e:	f023 0304 	bic.w	r3, r3, #4
10008862:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10008866:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000886a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000886e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008872:	f043 0301 	orr.w	r3, r3, #1
10008876:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000887a:	f7fb fda1 	bl	100043c0 <HAL_GetTick>
1000887e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10008880:	e008      	b.n	10008894 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10008882:	f7fb fd9d 	bl	100043c0 <HAL_GetTick>
10008886:	4602      	mov	r2, r0
10008888:	68fb      	ldr	r3, [r7, #12]
1000888a:	1ad3      	subs	r3, r2, r3
1000888c:	2b64      	cmp	r3, #100	@ 0x64
1000888e:	d901      	bls.n	10008894 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10008890:	2303      	movs	r3, #3
10008892:	e03c      	b.n	1000890e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10008894:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008898:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000889c:	f003 0302 	and.w	r3, r3, #2
100088a0:	2b02      	cmp	r3, #2
100088a2:	d1ee      	bne.n	10008882 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100088a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100088a8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100088ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100088b0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
100088b4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
100088b8:	e028      	b.n	1000890c <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100088ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100088be:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100088c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100088c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
100088ca:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
100088ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100088d2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100088d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100088da:	f023 0301 	bic.w	r3, r3, #1
100088de:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100088e2:	f7fb fd6d 	bl	100043c0 <HAL_GetTick>
100088e6:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100088e8:	e008      	b.n	100088fc <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100088ea:	f7fb fd69 	bl	100043c0 <HAL_GetTick>
100088ee:	4602      	mov	r2, r0
100088f0:	68fb      	ldr	r3, [r7, #12]
100088f2:	1ad3      	subs	r3, r2, r3
100088f4:	2b64      	cmp	r3, #100	@ 0x64
100088f6:	d901      	bls.n	100088fc <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
100088f8:	2303      	movs	r3, #3
100088fa:	e008      	b.n	1000890e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100088fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008900:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10008904:	f003 0302 	and.w	r3, r3, #2
10008908:	2b02      	cmp	r3, #2
1000890a:	d0ee      	beq.n	100088ea <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
1000890c:	2300      	movs	r3, #0
}
1000890e:	4618      	mov	r0, r3
10008910:	3710      	adds	r7, #16
10008912:	46bd      	mov	sp, r7
10008914:	bd80      	pop	{r7, pc}
10008916:	bf00      	nop
10008918:	ffc0fe00 	.word	0xffc0fe00

1000891c <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
1000891c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10008920:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
10008924:	af00      	add	r7, sp, #0
10008926:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000892a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000892e:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10008930:	2300      	movs	r3, #0
10008932:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
10008936:	2300      	movs	r3, #0
10008938:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
1000893c:	2300      	movs	r3, #0
1000893e:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10008942:	2300      	movs	r3, #0
10008944:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10008948:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000894c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008950:	681b      	ldr	r3, [r3, #0]
10008952:	e9d3 2300 	ldrd	r2, r3, [r3]
10008956:	f402 0400 	and.w	r4, r2, #8388608	@ 0x800000
1000895a:	2500      	movs	r5, #0
1000895c:	ea54 0305 	orrs.w	r3, r4, r5
10008960:	d011      	beq.n	10008986 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10008962:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008966:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
1000896a:	f023 0103 	bic.w	r1, r3, #3
1000896e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008972:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008976:	681b      	ldr	r3, [r3, #0]
10008978:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
1000897c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008980:	430b      	orrs	r3, r1
10008982:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10008986:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000898a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000898e:	681b      	ldr	r3, [r3, #0]
10008990:	e9d3 2300 	ldrd	r2, r3, [r3]
10008994:	f002 0810 	and.w	r8, r2, #16
10008998:	f04f 0900 	mov.w	r9, #0
1000899c:	ea58 0309 	orrs.w	r3, r8, r9
100089a0:	d038      	beq.n	10008a14 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
100089a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100089a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100089aa:	681b      	ldr	r3, [r3, #0]
100089ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
100089b0:	2b01      	cmp	r3, #1
100089b2:	d11d      	bne.n	100089f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100089b4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100089b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100089bc:	681b      	ldr	r3, [r3, #0]
100089be:	3380      	adds	r3, #128	@ 0x80
100089c0:	4618      	mov	r0, r3
100089c2:	f7ff fe53 	bl	1000866c <RCCEx_PLL4_Config>
100089c6:	4603      	mov	r3, r0
100089c8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100089cc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100089d0:	2b00      	cmp	r3, #0
100089d2:	d003      	beq.n	100089dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
100089d4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100089d8:	f001 be2a 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100089dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100089e0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100089e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100089e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100089ec:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
100089f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100089f4:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
100089f8:	f023 0107 	bic.w	r1, r3, #7
100089fc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008a00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008a04:	681b      	ldr	r3, [r3, #0]
10008a06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
10008a0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008a0e:	430b      	orrs	r3, r1
10008a10:	f8c2 38c0 	str.w	r3, [r2, #2240]	@ 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10008a14:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008a18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008a1c:	681b      	ldr	r3, [r3, #0]
10008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
10008a22:	f002 0a20 	and.w	sl, r2, #32
10008a26:	f04f 0b00 	mov.w	fp, #0
10008a2a:	ea5a 030b 	orrs.w	r3, sl, fp
10008a2e:	d038      	beq.n	10008aa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10008a30:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008a34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008a38:	681b      	ldr	r3, [r3, #0]
10008a3a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10008a3e:	2b01      	cmp	r3, #1
10008a40:	d11d      	bne.n	10008a7e <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10008a42:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008a46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008a4a:	681b      	ldr	r3, [r3, #0]
10008a4c:	3380      	adds	r3, #128	@ 0x80
10008a4e:	4618      	mov	r0, r3
10008a50:	f7ff fe0c 	bl	1000866c <RCCEx_PLL4_Config>
10008a54:	4603      	mov	r3, r0
10008a56:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10008a5a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008a5e:	2b00      	cmp	r3, #0
10008a60:	d003      	beq.n	10008a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10008a62:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008a66:	f001 bde3 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10008a6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008a6e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10008a72:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10008a7a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10008a7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008a82:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	@ 0x8c4
10008a86:	f023 0107 	bic.w	r1, r3, #7
10008a8a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008a8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008a92:	681b      	ldr	r3, [r3, #0]
10008a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10008a98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008a9c:	430b      	orrs	r3, r1
10008a9e:	f8c2 38c4 	str.w	r3, [r2, #2244]	@ 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10008aa2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008aa6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008aaa:	681b      	ldr	r3, [r3, #0]
10008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
10008ab0:	2100      	movs	r1, #0
10008ab2:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
10008ab6:	f003 0320 	and.w	r3, r3, #32
10008aba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
10008abe:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
10008ac2:	460b      	mov	r3, r1
10008ac4:	4313      	orrs	r3, r2
10008ac6:	d038      	beq.n	10008b3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10008ac8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008acc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008ad0:	681b      	ldr	r3, [r3, #0]
10008ad2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10008ad6:	2b01      	cmp	r3, #1
10008ad8:	d11d      	bne.n	10008b16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10008ada:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008ade:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008ae2:	681b      	ldr	r3, [r3, #0]
10008ae4:	3344      	adds	r3, #68	@ 0x44
10008ae6:	4618      	mov	r0, r3
10008ae8:	f7ff fc56 	bl	10008398 <RCCEx_PLL3_Config>
10008aec:	4603      	mov	r3, r0
10008aee:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10008af2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008af6:	2b00      	cmp	r3, #0
10008af8:	d003      	beq.n	10008b02 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10008afa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008afe:	f001 bd97 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10008b02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008b06:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008b0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008b0e:	f043 0320 	orr.w	r3, r3, #32
10008b12:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10008b16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008b1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
10008b1e:	f023 0107 	bic.w	r1, r3, #7
10008b22:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008b26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008b2a:	681b      	ldr	r3, [r3, #0]
10008b2c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
10008b30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008b34:	430b      	orrs	r3, r1
10008b36:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10008b3a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008b3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008b42:	681b      	ldr	r3, [r3, #0]
10008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
10008b48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
10008b4c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
10008b50:	2300      	movs	r3, #0
10008b52:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
10008b56:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
10008b5a:	460b      	mov	r3, r1
10008b5c:	4313      	orrs	r3, r2
10008b5e:	d07e      	beq.n	10008c5e <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10008b60:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008b64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008b68:	681b      	ldr	r3, [r3, #0]
10008b6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10008b6e:	2b04      	cmp	r3, #4
10008b70:	d044      	beq.n	10008bfc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10008b72:	2b04      	cmp	r3, #4
10008b74:	d861      	bhi.n	10008c3a <HAL_RCCEx_PeriphCLKConfig+0x31e>
10008b76:	2b00      	cmp	r3, #0
10008b78:	d002      	beq.n	10008b80 <HAL_RCCEx_PeriphCLKConfig+0x264>
10008b7a:	2b01      	cmp	r3, #1
10008b7c:	d01f      	beq.n	10008bbe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10008b7e:	e05c      	b.n	10008c3a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10008b80:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008b84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008b88:	681b      	ldr	r3, [r3, #0]
10008b8a:	3380      	adds	r3, #128	@ 0x80
10008b8c:	4618      	mov	r0, r3
10008b8e:	f7ff fd6d 	bl	1000866c <RCCEx_PLL4_Config>
10008b92:	4603      	mov	r3, r0
10008b94:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008b98:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008b9c:	2b00      	cmp	r3, #0
10008b9e:	d003      	beq.n	10008ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10008ba0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008ba4:	f001 bd44 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10008ba8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008bac:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10008bb0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008bb4:	f043 0320 	orr.w	r3, r3, #32
10008bb8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10008bbc:	e03d      	b.n	10008c3a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10008bbe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008bc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008bc6:	681b      	ldr	r3, [r3, #0]
10008bc8:	3344      	adds	r3, #68	@ 0x44
10008bca:	4618      	mov	r0, r3
10008bcc:	f7ff fbe4 	bl	10008398 <RCCEx_PLL3_Config>
10008bd0:	4603      	mov	r3, r0
10008bd2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008bd6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008bda:	2b00      	cmp	r3, #0
10008bdc:	d003      	beq.n	10008be6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10008bde:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008be2:	f001 bd25 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10008be6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008bea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008bee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008bf2:	f043 0320 	orr.w	r3, r3, #32
10008bf6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10008bfa:	e01e      	b.n	10008c3a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10008bfc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008c00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008c04:	681b      	ldr	r3, [r3, #0]
10008c06:	3344      	adds	r3, #68	@ 0x44
10008c08:	4618      	mov	r0, r3
10008c0a:	f7ff fbc5 	bl	10008398 <RCCEx_PLL3_Config>
10008c0e:	4603      	mov	r3, r0
10008c10:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008c14:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008c18:	2b00      	cmp	r3, #0
10008c1a:	d003      	beq.n	10008c24 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
10008c1c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008c20:	f001 bd06 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10008c24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008c28:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008c2c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008c30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10008c34:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10008c38:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10008c3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008c3e:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	@ 0x8c8
10008c42:	f023 0107 	bic.w	r1, r3, #7
10008c46:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008c4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008c4e:	681b      	ldr	r3, [r3, #0]
10008c50:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
10008c54:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008c58:	430b      	orrs	r3, r1
10008c5a:	f8c2 38c8 	str.w	r3, [r2, #2248]	@ 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10008c5e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008c62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008c66:	681b      	ldr	r3, [r3, #0]
10008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
10008c6c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
10008c70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
10008c74:	2300      	movs	r3, #0
10008c76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
10008c7a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
10008c7e:	460b      	mov	r3, r1
10008c80:	4313      	orrs	r3, r2
10008c82:	d07e      	beq.n	10008d82 <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10008c84:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008c88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008c8c:	681b      	ldr	r3, [r3, #0]
10008c8e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10008c92:	2b05      	cmp	r3, #5
10008c94:	d044      	beq.n	10008d20 <HAL_RCCEx_PeriphCLKConfig+0x404>
10008c96:	2b05      	cmp	r3, #5
10008c98:	d861      	bhi.n	10008d5e <HAL_RCCEx_PeriphCLKConfig+0x442>
10008c9a:	2b00      	cmp	r3, #0
10008c9c:	d002      	beq.n	10008ca4 <HAL_RCCEx_PeriphCLKConfig+0x388>
10008c9e:	2b01      	cmp	r3, #1
10008ca0:	d01f      	beq.n	10008ce2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
10008ca2:	e05c      	b.n	10008d5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10008ca4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008ca8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008cac:	681b      	ldr	r3, [r3, #0]
10008cae:	3380      	adds	r3, #128	@ 0x80
10008cb0:	4618      	mov	r0, r3
10008cb2:	f7ff fcdb 	bl	1000866c <RCCEx_PLL4_Config>
10008cb6:	4603      	mov	r3, r0
10008cb8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008cbc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008cc0:	2b00      	cmp	r3, #0
10008cc2:	d003      	beq.n	10008ccc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
10008cc4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008cc8:	f001 bcb2 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10008ccc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008cd0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10008cd4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008cd8:	f043 0320 	orr.w	r3, r3, #32
10008cdc:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10008ce0:	e03d      	b.n	10008d5e <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10008ce2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008ce6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008cea:	681b      	ldr	r3, [r3, #0]
10008cec:	3344      	adds	r3, #68	@ 0x44
10008cee:	4618      	mov	r0, r3
10008cf0:	f7ff fb52 	bl	10008398 <RCCEx_PLL3_Config>
10008cf4:	4603      	mov	r3, r0
10008cf6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008cfa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008cfe:	2b00      	cmp	r3, #0
10008d00:	d003      	beq.n	10008d0a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
10008d02:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008d06:	f001 bc93 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10008d0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008d0e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008d12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008d16:	f043 0320 	orr.w	r3, r3, #32
10008d1a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10008d1e:	e01e      	b.n	10008d5e <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10008d20:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008d24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008d28:	681b      	ldr	r3, [r3, #0]
10008d2a:	3344      	adds	r3, #68	@ 0x44
10008d2c:	4618      	mov	r0, r3
10008d2e:	f7ff fb33 	bl	10008398 <RCCEx_PLL3_Config>
10008d32:	4603      	mov	r3, r0
10008d34:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008d38:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008d3c:	2b00      	cmp	r3, #0
10008d3e:	d003      	beq.n	10008d48 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
10008d40:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008d44:	f001 bc74 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10008d48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008d4c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008d50:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10008d58:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10008d5c:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
10008d5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008d62:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	@ 0x8cc
10008d66:	f023 0107 	bic.w	r1, r3, #7
10008d6a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008d6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008d72:	681b      	ldr	r3, [r3, #0]
10008d74:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10008d78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008d7c:	430b      	orrs	r3, r1
10008d7e:	f8c2 38cc 	str.w	r3, [r2, #2252]	@ 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
10008d82:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008d86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008d8a:	681b      	ldr	r3, [r3, #0]
10008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
10008d90:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
10008d94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
10008d98:	2300      	movs	r3, #0
10008d9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
10008d9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
10008da2:	460b      	mov	r3, r1
10008da4:	4313      	orrs	r3, r2
10008da6:	d07e      	beq.n	10008ea6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10008da8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008dac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008db0:	681b      	ldr	r3, [r3, #0]
10008db2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10008db6:	2b04      	cmp	r3, #4
10008db8:	d044      	beq.n	10008e44 <HAL_RCCEx_PeriphCLKConfig+0x528>
10008dba:	2b04      	cmp	r3, #4
10008dbc:	d861      	bhi.n	10008e82 <HAL_RCCEx_PeriphCLKConfig+0x566>
10008dbe:	2b00      	cmp	r3, #0
10008dc0:	d002      	beq.n	10008dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
10008dc2:	2b01      	cmp	r3, #1
10008dc4:	d01f      	beq.n	10008e06 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
10008dc6:	e05c      	b.n	10008e82 <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10008dc8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008dcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008dd0:	681b      	ldr	r3, [r3, #0]
10008dd2:	3380      	adds	r3, #128	@ 0x80
10008dd4:	4618      	mov	r0, r3
10008dd6:	f7ff fc49 	bl	1000866c <RCCEx_PLL4_Config>
10008dda:	4603      	mov	r3, r0
10008ddc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008de0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008de4:	2b00      	cmp	r3, #0
10008de6:	d003      	beq.n	10008df0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
10008de8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008dec:	f001 bc20 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10008df0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008df4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10008df8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008dfc:	f043 0320 	orr.w	r3, r3, #32
10008e00:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10008e04:	e03d      	b.n	10008e82 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10008e06:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008e0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008e0e:	681b      	ldr	r3, [r3, #0]
10008e10:	3344      	adds	r3, #68	@ 0x44
10008e12:	4618      	mov	r0, r3
10008e14:	f7ff fac0 	bl	10008398 <RCCEx_PLL3_Config>
10008e18:	4603      	mov	r3, r0
10008e1a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008e1e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008e22:	2b00      	cmp	r3, #0
10008e24:	d003      	beq.n	10008e2e <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10008e26:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008e2a:	f001 bc01 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10008e2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008e32:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008e36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008e3a:	f043 0320 	orr.w	r3, r3, #32
10008e3e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10008e42:	e01e      	b.n	10008e82 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10008e44:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008e48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008e4c:	681b      	ldr	r3, [r3, #0]
10008e4e:	3344      	adds	r3, #68	@ 0x44
10008e50:	4618      	mov	r0, r3
10008e52:	f7ff faa1 	bl	10008398 <RCCEx_PLL3_Config>
10008e56:	4603      	mov	r3, r0
10008e58:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008e5c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008e60:	2b00      	cmp	r3, #0
10008e62:	d003      	beq.n	10008e6c <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10008e64:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008e68:	f001 bbe2 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10008e6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008e70:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008e74:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10008e7c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10008e80:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
10008e82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008e86:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	@ 0x8d0
10008e8a:	f023 0107 	bic.w	r1, r3, #7
10008e8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008e92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008e96:	681b      	ldr	r3, [r3, #0]
10008e98:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
10008e9c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008ea0:	430b      	orrs	r3, r1
10008ea2:	f8c2 38d0 	str.w	r3, [r2, #2256]	@ 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
10008ea6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008eaa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008eae:	681b      	ldr	r3, [r3, #0]
10008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
10008eb4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
10008eb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
10008ebc:	2300      	movs	r3, #0
10008ebe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
10008ec2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
10008ec6:	460b      	mov	r3, r1
10008ec8:	4313      	orrs	r3, r2
10008eca:	d07e      	beq.n	10008fca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10008ecc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008ed0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008ed4:	681b      	ldr	r3, [r3, #0]
10008ed6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10008eda:	2b04      	cmp	r3, #4
10008edc:	d044      	beq.n	10008f68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
10008ede:	2b04      	cmp	r3, #4
10008ee0:	d861      	bhi.n	10008fa6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
10008ee2:	2b00      	cmp	r3, #0
10008ee4:	d002      	beq.n	10008eec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
10008ee6:	2b01      	cmp	r3, #1
10008ee8:	d01f      	beq.n	10008f2a <HAL_RCCEx_PeriphCLKConfig+0x60e>
10008eea:	e05c      	b.n	10008fa6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10008eec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008ef0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008ef4:	681b      	ldr	r3, [r3, #0]
10008ef6:	3380      	adds	r3, #128	@ 0x80
10008ef8:	4618      	mov	r0, r3
10008efa:	f7ff fbb7 	bl	1000866c <RCCEx_PLL4_Config>
10008efe:	4603      	mov	r3, r0
10008f00:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008f04:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008f08:	2b00      	cmp	r3, #0
10008f0a:	d003      	beq.n	10008f14 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
10008f0c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008f10:	f001 bb8e 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10008f14:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008f18:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10008f1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008f20:	f043 0320 	orr.w	r3, r3, #32
10008f24:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10008f28:	e03d      	b.n	10008fa6 <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10008f2a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008f2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008f32:	681b      	ldr	r3, [r3, #0]
10008f34:	3344      	adds	r3, #68	@ 0x44
10008f36:	4618      	mov	r0, r3
10008f38:	f7ff fa2e 	bl	10008398 <RCCEx_PLL3_Config>
10008f3c:	4603      	mov	r3, r0
10008f3e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008f42:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008f46:	2b00      	cmp	r3, #0
10008f48:	d003      	beq.n	10008f52 <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
10008f4a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008f4e:	f001 bb6f 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10008f52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008f56:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008f5a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008f5e:	f043 0320 	orr.w	r3, r3, #32
10008f62:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10008f66:	e01e      	b.n	10008fa6 <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10008f68:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008f6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008f70:	681b      	ldr	r3, [r3, #0]
10008f72:	3344      	adds	r3, #68	@ 0x44
10008f74:	4618      	mov	r0, r3
10008f76:	f7ff fa0f 	bl	10008398 <RCCEx_PLL3_Config>
10008f7a:	4603      	mov	r3, r0
10008f7c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10008f80:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008f84:	2b00      	cmp	r3, #0
10008f86:	d003      	beq.n	10008f90 <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10008f88:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10008f8c:	f001 bb50 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10008f90:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008f94:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10008f98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10008fa0:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10008fa4:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
10008fa6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10008faa:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	@ 0x8d4
10008fae:	f023 0107 	bic.w	r1, r3, #7
10008fb2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008fb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008fba:	681b      	ldr	r3, [r3, #0]
10008fbc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10008fc0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10008fc4:	430b      	orrs	r3, r1
10008fc6:	f8c2 38d4 	str.w	r3, [r2, #2260]	@ 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10008fca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008fce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008fd2:	681b      	ldr	r3, [r3, #0]
10008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
10008fd8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
10008fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
10008fe0:	2300      	movs	r3, #0
10008fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
10008fe6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
10008fea:	460b      	mov	r3, r1
10008fec:	4313      	orrs	r3, r2
10008fee:	d07e      	beq.n	100090ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
10008ff0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10008ff4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10008ff8:	681b      	ldr	r3, [r3, #0]
10008ffa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
10008ffe:	2b04      	cmp	r3, #4
10009000:	d044      	beq.n	1000908c <HAL_RCCEx_PeriphCLKConfig+0x770>
10009002:	2b04      	cmp	r3, #4
10009004:	d861      	bhi.n	100090ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
10009006:	2b00      	cmp	r3, #0
10009008:	d002      	beq.n	10009010 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
1000900a:	2b01      	cmp	r3, #1
1000900c:	d01f      	beq.n	1000904e <HAL_RCCEx_PeriphCLKConfig+0x732>
1000900e:	e05c      	b.n	100090ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009010:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009014:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009018:	681b      	ldr	r3, [r3, #0]
1000901a:	3380      	adds	r3, #128	@ 0x80
1000901c:	4618      	mov	r0, r3
1000901e:	f7ff fb25 	bl	1000866c <RCCEx_PLL4_Config>
10009022:	4603      	mov	r3, r0
10009024:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009028:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000902c:	2b00      	cmp	r3, #0
1000902e:	d003      	beq.n	10009038 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
10009030:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009034:	f001 bafc 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10009038:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000903c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009040:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009044:	f043 0310 	orr.w	r3, r3, #16
10009048:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000904c:	e03d      	b.n	100090ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000904e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009052:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009056:	681b      	ldr	r3, [r3, #0]
10009058:	3344      	adds	r3, #68	@ 0x44
1000905a:	4618      	mov	r0, r3
1000905c:	f7ff f99c 	bl	10008398 <RCCEx_PLL3_Config>
10009060:	4603      	mov	r3, r0
10009062:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009066:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000906a:	2b00      	cmp	r3, #0
1000906c:	d003      	beq.n	10009076 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
1000906e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009072:	f001 badd 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10009076:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000907a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000907e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009082:	f043 0320 	orr.w	r3, r3, #32
10009086:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000908a:	e01e      	b.n	100090ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000908c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009090:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009094:	681b      	ldr	r3, [r3, #0]
10009096:	3344      	adds	r3, #68	@ 0x44
10009098:	4618      	mov	r0, r3
1000909a:	f7ff f97d 	bl	10008398 <RCCEx_PLL3_Config>
1000909e:	4603      	mov	r3, r0
100090a0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100090a4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100090a8:	2b00      	cmp	r3, #0
100090aa:	d003      	beq.n	100090b4 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
100090ac:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100090b0:	f001 babe 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100090b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100090b8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100090bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100090c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100090c4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100090c8:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
100090ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100090ce:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	@ 0x8d8
100090d2:	f023 0107 	bic.w	r1, r3, #7
100090d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100090da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100090de:	681b      	ldr	r3, [r3, #0]
100090e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
100090e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100090e8:	430b      	orrs	r3, r1
100090ea:	f8c2 38d8 	str.w	r3, [r2, #2264]	@ 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
100090ee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100090f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100090f6:	681b      	ldr	r3, [r3, #0]
100090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
100090fc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
10009100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
10009104:	2300      	movs	r3, #0
10009106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
1000910a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
1000910e:	460b      	mov	r3, r1
10009110:	4313      	orrs	r3, r2
10009112:	d07e      	beq.n	10009212 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10009114:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009118:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000911c:	681b      	ldr	r3, [r3, #0]
1000911e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
10009122:	2b04      	cmp	r3, #4
10009124:	d044      	beq.n	100091b0 <HAL_RCCEx_PeriphCLKConfig+0x894>
10009126:	2b04      	cmp	r3, #4
10009128:	d861      	bhi.n	100091ee <HAL_RCCEx_PeriphCLKConfig+0x8d2>
1000912a:	2b00      	cmp	r3, #0
1000912c:	d002      	beq.n	10009134 <HAL_RCCEx_PeriphCLKConfig+0x818>
1000912e:	2b01      	cmp	r3, #1
10009130:	d01f      	beq.n	10009172 <HAL_RCCEx_PeriphCLKConfig+0x856>
10009132:	e05c      	b.n	100091ee <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009134:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009138:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000913c:	681b      	ldr	r3, [r3, #0]
1000913e:	3380      	adds	r3, #128	@ 0x80
10009140:	4618      	mov	r0, r3
10009142:	f7ff fa93 	bl	1000866c <RCCEx_PLL4_Config>
10009146:	4603      	mov	r3, r0
10009148:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000914c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009150:	2b00      	cmp	r3, #0
10009152:	d003      	beq.n	1000915c <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10009154:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009158:	f001 ba6a 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000915c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009160:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009164:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009168:	f043 0310 	orr.w	r3, r3, #16
1000916c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10009170:	e03d      	b.n	100091ee <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10009172:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009176:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000917a:	681b      	ldr	r3, [r3, #0]
1000917c:	3344      	adds	r3, #68	@ 0x44
1000917e:	4618      	mov	r0, r3
10009180:	f7ff f90a 	bl	10008398 <RCCEx_PLL3_Config>
10009184:	4603      	mov	r3, r0
10009186:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000918a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000918e:	2b00      	cmp	r3, #0
10009190:	d003      	beq.n	1000919a <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
10009192:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009196:	f001 ba4b 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000919a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000919e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100091a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100091a6:	f043 0320 	orr.w	r3, r3, #32
100091aa:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100091ae:	e01e      	b.n	100091ee <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100091b0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100091b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100091b8:	681b      	ldr	r3, [r3, #0]
100091ba:	3344      	adds	r3, #68	@ 0x44
100091bc:	4618      	mov	r0, r3
100091be:	f7ff f8eb 	bl	10008398 <RCCEx_PLL3_Config>
100091c2:	4603      	mov	r3, r0
100091c4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100091c8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100091cc:	2b00      	cmp	r3, #0
100091ce:	d003      	beq.n	100091d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
100091d0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100091d4:	f001 ba2c 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100091d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100091dc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100091e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100091e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100091e8:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100091ec:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
100091ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100091f2:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	@ 0x8dc
100091f6:	f023 0107 	bic.w	r1, r3, #7
100091fa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100091fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009202:	681b      	ldr	r3, [r3, #0]
10009204:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
10009208:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000920c:	430b      	orrs	r3, r1
1000920e:	f8c2 38dc 	str.w	r3, [r2, #2268]	@ 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
10009212:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009216:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000921a:	681b      	ldr	r3, [r3, #0]
1000921c:	e9d3 2300 	ldrd	r2, r3, [r3]
10009220:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
10009224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
10009228:	2300      	movs	r3, #0
1000922a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
1000922e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
10009232:	460b      	mov	r3, r1
10009234:	4313      	orrs	r3, r2
10009236:	d038      	beq.n	100092aa <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10009238:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000923c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009240:	681b      	ldr	r3, [r3, #0]
10009242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
10009246:	2b01      	cmp	r3, #1
10009248:	d11d      	bne.n	10009286 <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000924a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000924e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009252:	681b      	ldr	r3, [r3, #0]
10009254:	3380      	adds	r3, #128	@ 0x80
10009256:	4618      	mov	r0, r3
10009258:	f7ff fa08 	bl	1000866c <RCCEx_PLL4_Config>
1000925c:	4603      	mov	r3, r0
1000925e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10009262:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009266:	2b00      	cmp	r3, #0
10009268:	d003      	beq.n	10009272 <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
1000926a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000926e:	f001 b9df 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10009272:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009276:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000927a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000927e:	f043 0320 	orr.w	r3, r3, #32
10009282:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10009286:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000928a:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	@ 0x8e0
1000928e:	f023 0107 	bic.w	r1, r3, #7
10009292:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009296:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000929a:	681b      	ldr	r3, [r3, #0]
1000929c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
100092a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100092a4:	430b      	orrs	r3, r1
100092a6:	f8c2 38e0 	str.w	r3, [r2, #2272]	@ 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
100092aa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100092ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100092b2:	681b      	ldr	r3, [r3, #0]
100092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
100092b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
100092bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
100092c0:	2300      	movs	r3, #0
100092c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
100092c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
100092ca:	460b      	mov	r3, r1
100092cc:	4313      	orrs	r3, r2
100092ce:	d05b      	beq.n	10009388 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
100092d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100092d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100092d8:	681b      	ldr	r3, [r3, #0]
100092da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
100092de:	2b01      	cmp	r3, #1
100092e0:	d002      	beq.n	100092e8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
100092e2:	2b05      	cmp	r3, #5
100092e4:	d01f      	beq.n	10009326 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
100092e6:	e03d      	b.n	10009364 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100092e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100092ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100092f0:	681b      	ldr	r3, [r3, #0]
100092f2:	3380      	adds	r3, #128	@ 0x80
100092f4:	4618      	mov	r0, r3
100092f6:	f7ff f9b9 	bl	1000866c <RCCEx_PLL4_Config>
100092fa:	4603      	mov	r3, r0
100092fc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009300:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009304:	2b00      	cmp	r3, #0
10009306:	d003      	beq.n	10009310 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
10009308:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000930c:	f001 b990 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10009310:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009314:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009318:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000931c:	f043 0320 	orr.w	r3, r3, #32
10009320:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10009324:	e01e      	b.n	10009364 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10009326:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000932a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000932e:	681b      	ldr	r3, [r3, #0]
10009330:	3344      	adds	r3, #68	@ 0x44
10009332:	4618      	mov	r0, r3
10009334:	f7ff f830 	bl	10008398 <RCCEx_PLL3_Config>
10009338:	4603      	mov	r3, r0
1000933a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000933e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009342:	2b00      	cmp	r3, #0
10009344:	d003      	beq.n	1000934e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10009346:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000934a:	f001 b971 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000934e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009352:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10009356:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000935a:	f043 0320 	orr.w	r3, r3, #32
1000935e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10009362:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10009364:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009368:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
1000936c:	f023 0107 	bic.w	r1, r3, #7
10009370:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009374:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009378:	681b      	ldr	r3, [r3, #0]
1000937a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
1000937e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009382:	430b      	orrs	r3, r1
10009384:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10009388:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000938c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009390:	681b      	ldr	r3, [r3, #0]
10009392:	e9d3 2300 	ldrd	r2, r3, [r3]
10009396:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
1000939a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
1000939e:	2300      	movs	r3, #0
100093a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
100093a4:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
100093a8:	460b      	mov	r3, r1
100093aa:	4313      	orrs	r3, r2
100093ac:	d038      	beq.n	10009420 <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
100093ae:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100093b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100093b6:	681b      	ldr	r3, [r3, #0]
100093b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
100093bc:	2b01      	cmp	r3, #1
100093be:	d11d      	bne.n	100093fc <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100093c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100093c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100093c8:	681b      	ldr	r3, [r3, #0]
100093ca:	3380      	adds	r3, #128	@ 0x80
100093cc:	4618      	mov	r0, r3
100093ce:	f7ff f94d 	bl	1000866c <RCCEx_PLL4_Config>
100093d2:	4603      	mov	r3, r0
100093d4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100093d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100093dc:	2b00      	cmp	r3, #0
100093de:	d003      	beq.n	100093e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
100093e0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100093e4:	f001 b924 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100093e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100093ec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100093f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100093f4:	f043 0320 	orr.w	r3, r3, #32
100093f8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
100093fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009400:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	@ 0x8e4
10009404:	f023 0107 	bic.w	r1, r3, #7
10009408:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000940c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009410:	681b      	ldr	r3, [r3, #0]
10009412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
10009416:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000941a:	430b      	orrs	r3, r1
1000941c:	f8c2 38e4 	str.w	r3, [r2, #2276]	@ 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
10009420:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009424:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009428:	681b      	ldr	r3, [r3, #0]
1000942a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000942e:	f002 0302 	and.w	r3, r2, #2
10009432:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
10009436:	2300      	movs	r3, #0
10009438:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
1000943c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
10009440:	460b      	mov	r3, r1
10009442:	4313      	orrs	r3, r2
10009444:	d038      	beq.n	100094b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10009446:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000944a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000944e:	681b      	ldr	r3, [r3, #0]
10009450:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
10009454:	2b01      	cmp	r3, #1
10009456:	d11d      	bne.n	10009494 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009458:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000945c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009460:	681b      	ldr	r3, [r3, #0]
10009462:	3380      	adds	r3, #128	@ 0x80
10009464:	4618      	mov	r0, r3
10009466:	f7ff f901 	bl	1000866c <RCCEx_PLL4_Config>
1000946a:	4603      	mov	r3, r0
1000946c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10009470:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009474:	2b00      	cmp	r3, #0
10009476:	d003      	beq.n	10009480 <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10009478:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000947c:	f001 b8d8 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10009480:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009484:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009488:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000948c:	f043 0320 	orr.w	r3, r3, #32
10009490:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
10009494:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009498:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	@ 0x8e8
1000949c:	f023 0107 	bic.w	r1, r3, #7
100094a0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100094a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100094a8:	681b      	ldr	r3, [r3, #0]
100094aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
100094ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100094b2:	430b      	orrs	r3, r1
100094b4:	f8c2 38e8 	str.w	r3, [r2, #2280]	@ 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
100094b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100094bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100094c0:	681b      	ldr	r3, [r3, #0]
100094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
100094c6:	f002 0304 	and.w	r3, r2, #4
100094ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
100094ce:	2300      	movs	r3, #0
100094d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
100094d4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
100094d8:	460b      	mov	r3, r1
100094da:	4313      	orrs	r3, r2
100094dc:	d038      	beq.n	10009550 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
100094de:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100094e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100094e6:	681b      	ldr	r3, [r3, #0]
100094e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
100094ec:	2b01      	cmp	r3, #1
100094ee:	d11d      	bne.n	1000952c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100094f0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100094f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100094f8:	681b      	ldr	r3, [r3, #0]
100094fa:	3380      	adds	r3, #128	@ 0x80
100094fc:	4618      	mov	r0, r3
100094fe:	f7ff f8b5 	bl	1000866c <RCCEx_PLL4_Config>
10009502:	4603      	mov	r3, r0
10009504:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10009508:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000950c:	2b00      	cmp	r3, #0
1000950e:	d003      	beq.n	10009518 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
10009510:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009514:	f001 b88c 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10009518:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000951c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009520:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009524:	f043 0320 	orr.w	r3, r3, #32
10009528:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
1000952c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009530:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
10009534:	f023 0107 	bic.w	r1, r3, #7
10009538:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000953c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009540:	681b      	ldr	r3, [r3, #0]
10009542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
10009546:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000954a:	430b      	orrs	r3, r1
1000954c:	f8c2 38ec 	str.w	r3, [r2, #2284]	@ 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10009550:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009554:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009558:	681b      	ldr	r3, [r3, #0]
1000955a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000955e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
10009562:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
10009566:	2300      	movs	r3, #0
10009568:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
1000956c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
10009570:	460b      	mov	r3, r1
10009572:	4313      	orrs	r3, r2
10009574:	d038      	beq.n	100095e8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10009576:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000957a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000957e:	681b      	ldr	r3, [r3, #0]
10009580:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
10009584:	2b01      	cmp	r3, #1
10009586:	d11d      	bne.n	100095c4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009588:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000958c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009590:	681b      	ldr	r3, [r3, #0]
10009592:	3380      	adds	r3, #128	@ 0x80
10009594:	4618      	mov	r0, r3
10009596:	f7ff f869 	bl	1000866c <RCCEx_PLL4_Config>
1000959a:	4603      	mov	r3, r0
1000959c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
100095a0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100095a4:	2b00      	cmp	r3, #0
100095a6:	d003      	beq.n	100095b0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
100095a8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100095ac:	f001 b840 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100095b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100095b4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100095b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100095bc:	f043 0320 	orr.w	r3, r3, #32
100095c0:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
100095c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100095c8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
100095cc:	f023 0107 	bic.w	r1, r3, #7
100095d0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100095d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100095d8:	681b      	ldr	r3, [r3, #0]
100095da:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
100095de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100095e2:	430b      	orrs	r3, r1
100095e4:	f8c2 38f0 	str.w	r3, [r2, #2288]	@ 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
100095e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100095ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100095f0:	681b      	ldr	r3, [r3, #0]
100095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
100095f6:	f002 0301 	and.w	r3, r2, #1
100095fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
100095fe:	2300      	movs	r3, #0
10009600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
10009604:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
10009608:	460b      	mov	r3, r1
1000960a:	4313      	orrs	r3, r2
1000960c:	d05b      	beq.n	100096c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
1000960e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009612:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009616:	681b      	ldr	r3, [r3, #0]
10009618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
1000961c:	2b01      	cmp	r3, #1
1000961e:	d002      	beq.n	10009626 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
10009620:	2b04      	cmp	r3, #4
10009622:	d01f      	beq.n	10009664 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10009624:	e03d      	b.n	100096a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10009626:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000962a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000962e:	681b      	ldr	r3, [r3, #0]
10009630:	3344      	adds	r3, #68	@ 0x44
10009632:	4618      	mov	r0, r3
10009634:	f7fe feb0 	bl	10008398 <RCCEx_PLL3_Config>
10009638:	4603      	mov	r3, r0
1000963a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000963e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009642:	2b00      	cmp	r3, #0
10009644:	d003      	beq.n	1000964e <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10009646:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000964a:	f000 bff1 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000964e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009652:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10009656:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000965a:	f043 0320 	orr.w	r3, r3, #32
1000965e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10009662:	e01e      	b.n	100096a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009664:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009668:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000966c:	681b      	ldr	r3, [r3, #0]
1000966e:	3380      	adds	r3, #128	@ 0x80
10009670:	4618      	mov	r0, r3
10009672:	f7fe fffb 	bl	1000866c <RCCEx_PLL4_Config>
10009676:	4603      	mov	r3, r0
10009678:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000967c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009680:	2b00      	cmp	r3, #0
10009682:	d003      	beq.n	1000968c <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
10009684:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009688:	f000 bfd2 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000968c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009690:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009694:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009698:	f043 0320 	orr.w	r3, r3, #32
1000969c:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100096a0:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
100096a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100096a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
100096aa:	f023 0107 	bic.w	r1, r3, #7
100096ae:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100096b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100096b6:	681b      	ldr	r3, [r3, #0]
100096b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
100096bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100096c0:	430b      	orrs	r3, r1
100096c2:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
100096c6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100096ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100096ce:	681b      	ldr	r3, [r3, #0]
100096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
100096d4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
100096d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
100096dc:	2300      	movs	r3, #0
100096de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
100096e2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
100096e6:	460b      	mov	r3, r1
100096e8:	4313      	orrs	r3, r2
100096ea:	d05b      	beq.n	100097a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
100096ec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100096f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100096f4:	681b      	ldr	r3, [r3, #0]
100096f6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
100096fa:	2b01      	cmp	r3, #1
100096fc:	d002      	beq.n	10009704 <HAL_RCCEx_PeriphCLKConfig+0xde8>
100096fe:	2b02      	cmp	r3, #2
10009700:	d01f      	beq.n	10009742 <HAL_RCCEx_PeriphCLKConfig+0xe26>
10009702:	e03d      	b.n	10009780 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10009704:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009708:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000970c:	681b      	ldr	r3, [r3, #0]
1000970e:	3344      	adds	r3, #68	@ 0x44
10009710:	4618      	mov	r0, r3
10009712:	f7fe fe41 	bl	10008398 <RCCEx_PLL3_Config>
10009716:	4603      	mov	r3, r0
10009718:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000971c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009720:	2b00      	cmp	r3, #0
10009722:	d003      	beq.n	1000972c <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10009724:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009728:	f000 bf82 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000972c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009730:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10009734:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000973c:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10009740:	e01e      	b.n	10009780 <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009742:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009746:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000974a:	681b      	ldr	r3, [r3, #0]
1000974c:	3380      	adds	r3, #128	@ 0x80
1000974e:	4618      	mov	r0, r3
10009750:	f7fe ff8c 	bl	1000866c <RCCEx_PLL4_Config>
10009754:	4603      	mov	r3, r0
10009756:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000975a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000975e:	2b00      	cmp	r3, #0
10009760:	d003      	beq.n	1000976a <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
10009762:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009766:	f000 bf63 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000976a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000976e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009772:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009776:	f043 0310 	orr.w	r3, r3, #16
1000977a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000977e:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10009780:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009784:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
10009788:	f023 0107 	bic.w	r1, r3, #7
1000978c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009790:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009794:	681b      	ldr	r3, [r3, #0]
10009796:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
1000979a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000979e:	430b      	orrs	r3, r1
100097a0:	f8c2 38f4 	str.w	r3, [r2, #2292]	@ 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
100097a4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100097a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100097ac:	681b      	ldr	r3, [r3, #0]
100097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
100097b2:	2100      	movs	r1, #0
100097b4:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
100097b8:	f003 0301 	and.w	r3, r3, #1
100097bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
100097c0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
100097c4:	460b      	mov	r3, r1
100097c6:	4313      	orrs	r3, r2
100097c8:	d05b      	beq.n	10009882 <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
100097ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100097ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100097d2:	681b      	ldr	r3, [r3, #0]
100097d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
100097d8:	2b01      	cmp	r3, #1
100097da:	d002      	beq.n	100097e2 <HAL_RCCEx_PeriphCLKConfig+0xec6>
100097dc:	2b02      	cmp	r3, #2
100097de:	d01f      	beq.n	10009820 <HAL_RCCEx_PeriphCLKConfig+0xf04>
100097e0:	e03d      	b.n	1000985e <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100097e2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100097e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100097ea:	681b      	ldr	r3, [r3, #0]
100097ec:	3344      	adds	r3, #68	@ 0x44
100097ee:	4618      	mov	r0, r3
100097f0:	f7fe fdd2 	bl	10008398 <RCCEx_PLL3_Config>
100097f4:	4603      	mov	r3, r0
100097f6:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100097fa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100097fe:	2b00      	cmp	r3, #0
10009800:	d003      	beq.n	1000980a <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
10009802:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009806:	f000 bf13 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000980a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000980e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10009812:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000981a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000981e:	e01e      	b.n	1000985e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009820:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009824:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009828:	681b      	ldr	r3, [r3, #0]
1000982a:	3380      	adds	r3, #128	@ 0x80
1000982c:	4618      	mov	r0, r3
1000982e:	f7fe ff1d 	bl	1000866c <RCCEx_PLL4_Config>
10009832:	4603      	mov	r3, r0
10009834:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009838:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000983c:	2b00      	cmp	r3, #0
1000983e:	d003      	beq.n	10009848 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10009840:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009844:	f000 bef4 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10009848:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000984c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009850:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009854:	f043 0310 	orr.w	r3, r3, #16
10009858:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000985c:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
1000985e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009862:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
10009866:	f023 0107 	bic.w	r1, r3, #7
1000986a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000986e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009872:	681b      	ldr	r3, [r3, #0]
10009874:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
10009878:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000987c:	430b      	orrs	r3, r1
1000987e:	f8c2 38f8 	str.w	r3, [r2, #2296]	@ 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10009882:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009886:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000988a:	681b      	ldr	r3, [r3, #0]
1000988c:	e9d3 2300 	ldrd	r2, r3, [r3]
10009890:	2100      	movs	r1, #0
10009892:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
10009896:	f003 0302 	and.w	r3, r3, #2
1000989a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
1000989e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
100098a2:	460b      	mov	r3, r1
100098a4:	4313      	orrs	r3, r2
100098a6:	d05b      	beq.n	10009960 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
100098a8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100098ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100098b0:	681b      	ldr	r3, [r3, #0]
100098b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
100098b6:	2b00      	cmp	r3, #0
100098b8:	d002      	beq.n	100098c0 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
100098ba:	2b01      	cmp	r3, #1
100098bc:	d01f      	beq.n	100098fe <HAL_RCCEx_PeriphCLKConfig+0xfe2>
100098be:	e03d      	b.n	1000993c <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100098c0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100098c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100098c8:	681b      	ldr	r3, [r3, #0]
100098ca:	3380      	adds	r3, #128	@ 0x80
100098cc:	4618      	mov	r0, r3
100098ce:	f7fe fecd 	bl	1000866c <RCCEx_PLL4_Config>
100098d2:	4603      	mov	r3, r0
100098d4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100098d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100098dc:	2b00      	cmp	r3, #0
100098de:	d003      	beq.n	100098e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
100098e0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100098e4:	f000 bea4 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100098e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100098ec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
100098f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100098f4:	f043 0310 	orr.w	r3, r3, #16
100098f8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
100098fc:	e01e      	b.n	1000993c <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100098fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009902:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009906:	681b      	ldr	r3, [r3, #0]
10009908:	3344      	adds	r3, #68	@ 0x44
1000990a:	4618      	mov	r0, r3
1000990c:	f7fe fd44 	bl	10008398 <RCCEx_PLL3_Config>
10009910:	4603      	mov	r3, r0
10009912:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009916:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000991a:	2b00      	cmp	r3, #0
1000991c:	d003      	beq.n	10009926 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
1000991e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009922:	f000 be85 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10009926:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000992a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000992e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009932:	f043 0320 	orr.w	r3, r3, #32
10009936:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000993a:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
1000993c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009940:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
10009944:	f023 0103 	bic.w	r1, r3, #3
10009948:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000994c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009950:	681b      	ldr	r3, [r3, #0]
10009952:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10009956:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000995a:	430b      	orrs	r3, r1
1000995c:	f8c2 38fc 	str.w	r3, [r2, #2300]	@ 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10009960:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009964:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009968:	681b      	ldr	r3, [r3, #0]
1000996a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000996e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
10009972:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
10009976:	2300      	movs	r3, #0
10009978:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
1000997c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
10009980:	460b      	mov	r3, r1
10009982:	4313      	orrs	r3, r2
10009984:	d05b      	beq.n	10009a3e <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10009986:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000998a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000998e:	681b      	ldr	r3, [r3, #0]
10009990:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10009994:	2b01      	cmp	r3, #1
10009996:	d002      	beq.n	1000999e <HAL_RCCEx_PeriphCLKConfig+0x1082>
10009998:	2b02      	cmp	r3, #2
1000999a:	d01f      	beq.n	100099dc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
1000999c:	e03d      	b.n	10009a1a <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000999e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100099a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100099a6:	681b      	ldr	r3, [r3, #0]
100099a8:	3344      	adds	r3, #68	@ 0x44
100099aa:	4618      	mov	r0, r3
100099ac:	f7fe fcf4 	bl	10008398 <RCCEx_PLL3_Config>
100099b0:	4603      	mov	r3, r0
100099b2:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100099b6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100099ba:	2b00      	cmp	r3, #0
100099bc:	d003      	beq.n	100099c6 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
100099be:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100099c2:	f000 be35 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100099c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
100099ca:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
100099ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
100099d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100099d6:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
100099da:	e01e      	b.n	10009a1a <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100099dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
100099e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
100099e4:	681b      	ldr	r3, [r3, #0]
100099e6:	3380      	adds	r3, #128	@ 0x80
100099e8:	4618      	mov	r0, r3
100099ea:	f7fe fe3f 	bl	1000866c <RCCEx_PLL4_Config>
100099ee:	4603      	mov	r3, r0
100099f0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
100099f4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
100099f8:	2b00      	cmp	r3, #0
100099fa:	d003      	beq.n	10009a04 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
100099fc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009a00:	f000 be16 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10009a04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009a08:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009a0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009a10:	f043 0310 	orr.w	r3, r3, #16
10009a14:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10009a18:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10009a1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009a1e:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
10009a22:	f023 0103 	bic.w	r1, r3, #3
10009a26:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009a2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009a2e:	681b      	ldr	r3, [r3, #0]
10009a30:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
10009a34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009a38:	430b      	orrs	r3, r1
10009a3a:	f8c2 3900 	str.w	r3, [r2, #2304]	@ 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10009a3e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009a42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009a46:	681b      	ldr	r3, [r3, #0]
10009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
10009a4c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
10009a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
10009a54:	2300      	movs	r3, #0
10009a56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
10009a5a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
10009a5e:	460b      	mov	r3, r1
10009a60:	4313      	orrs	r3, r2
10009a62:	d05b      	beq.n	10009b1c <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10009a64:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009a68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009a6c:	681b      	ldr	r3, [r3, #0]
10009a6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10009a72:	2b01      	cmp	r3, #1
10009a74:	d002      	beq.n	10009a7c <HAL_RCCEx_PeriphCLKConfig+0x1160>
10009a76:	2b02      	cmp	r3, #2
10009a78:	d01f      	beq.n	10009aba <HAL_RCCEx_PeriphCLKConfig+0x119e>
10009a7a:	e03d      	b.n	10009af8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10009a7c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009a80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009a84:	681b      	ldr	r3, [r3, #0]
10009a86:	3344      	adds	r3, #68	@ 0x44
10009a88:	4618      	mov	r0, r3
10009a8a:	f7fe fc85 	bl	10008398 <RCCEx_PLL3_Config>
10009a8e:	4603      	mov	r3, r0
10009a90:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009a94:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009a98:	2b00      	cmp	r3, #0
10009a9a:	d003      	beq.n	10009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10009a9c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009aa0:	f000 bdc6 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10009aa4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009aa8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10009aac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009ab4:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10009ab8:	e01e      	b.n	10009af8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009aba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009abe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009ac2:	681b      	ldr	r3, [r3, #0]
10009ac4:	3380      	adds	r3, #128	@ 0x80
10009ac6:	4618      	mov	r0, r3
10009ac8:	f7fe fdd0 	bl	1000866c <RCCEx_PLL4_Config>
10009acc:	4603      	mov	r3, r0
10009ace:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009ad2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009ad6:	2b00      	cmp	r3, #0
10009ad8:	d003      	beq.n	10009ae2 <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10009ada:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009ade:	f000 bda7 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10009ae2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009ae6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009aea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009aee:	f043 0310 	orr.w	r3, r3, #16
10009af2:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10009af6:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10009af8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009afc:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
10009b00:	f023 0103 	bic.w	r1, r3, #3
10009b04:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009b08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009b0c:	681b      	ldr	r3, [r3, #0]
10009b0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10009b12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009b16:	430b      	orrs	r3, r1
10009b18:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10009b1c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009b20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009b24:	681b      	ldr	r3, [r3, #0]
10009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
10009b2a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
10009b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
10009b30:	2300      	movs	r3, #0
10009b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
10009b34:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
10009b38:	460b      	mov	r3, r1
10009b3a:	4313      	orrs	r3, r2
10009b3c:	d07e      	beq.n	10009c3c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10009b3e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009b42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009b46:	681b      	ldr	r3, [r3, #0]
10009b48:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10009b4c:	2b03      	cmp	r3, #3
10009b4e:	d044      	beq.n	10009bda <HAL_RCCEx_PeriphCLKConfig+0x12be>
10009b50:	2b03      	cmp	r3, #3
10009b52:	d861      	bhi.n	10009c18 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10009b54:	2b01      	cmp	r3, #1
10009b56:	d002      	beq.n	10009b5e <HAL_RCCEx_PeriphCLKConfig+0x1242>
10009b58:	2b02      	cmp	r3, #2
10009b5a:	d01f      	beq.n	10009b9c <HAL_RCCEx_PeriphCLKConfig+0x1280>
10009b5c:	e05c      	b.n	10009c18 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10009b5e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009b62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009b66:	681b      	ldr	r3, [r3, #0]
10009b68:	3344      	adds	r3, #68	@ 0x44
10009b6a:	4618      	mov	r0, r3
10009b6c:	f7fe fc14 	bl	10008398 <RCCEx_PLL3_Config>
10009b70:	4603      	mov	r3, r0
10009b72:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009b76:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009b7a:	2b00      	cmp	r3, #0
10009b7c:	d003      	beq.n	10009b86 <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10009b7e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009b82:	f000 bd55 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10009b86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009b8a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10009b8e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009b92:	f043 0320 	orr.w	r3, r3, #32
10009b96:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10009b9a:	e03d      	b.n	10009c18 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009b9c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009ba0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009ba4:	681b      	ldr	r3, [r3, #0]
10009ba6:	3380      	adds	r3, #128	@ 0x80
10009ba8:	4618      	mov	r0, r3
10009baa:	f7fe fd5f 	bl	1000866c <RCCEx_PLL4_Config>
10009bae:	4603      	mov	r3, r0
10009bb0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009bb4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009bb8:	2b00      	cmp	r3, #0
10009bba:	d003      	beq.n	10009bc4 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10009bbc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009bc0:	f000 bd36 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10009bc4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009bc8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009bcc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009bd0:	f043 0320 	orr.w	r3, r3, #32
10009bd4:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10009bd8:	e01e      	b.n	10009c18 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009bda:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009bde:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009be2:	681b      	ldr	r3, [r3, #0]
10009be4:	3380      	adds	r3, #128	@ 0x80
10009be6:	4618      	mov	r0, r3
10009be8:	f7fe fd40 	bl	1000866c <RCCEx_PLL4_Config>
10009bec:	4603      	mov	r3, r0
10009bee:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009bf2:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009bf6:	2b00      	cmp	r3, #0
10009bf8:	d003      	beq.n	10009c02 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
10009bfa:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009bfe:	f000 bd17 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10009c02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009c06:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009c0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009c12:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10009c16:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10009c18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009c1c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
10009c20:	f023 0103 	bic.w	r1, r3, #3
10009c24:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009c28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009c2c:	681b      	ldr	r3, [r3, #0]
10009c2e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
10009c32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009c36:	430b      	orrs	r3, r1
10009c38:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10009c3c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009c40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009c44:	681b      	ldr	r3, [r3, #0]
10009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
10009c4a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
10009c4e:	673b      	str	r3, [r7, #112]	@ 0x70
10009c50:	2300      	movs	r3, #0
10009c52:	677b      	str	r3, [r7, #116]	@ 0x74
10009c54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
10009c58:	460b      	mov	r3, r1
10009c5a:	4313      	orrs	r3, r2
10009c5c:	d05b      	beq.n	10009d16 <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10009c5e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009c62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009c66:	681b      	ldr	r3, [r3, #0]
10009c68:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10009c6c:	2b00      	cmp	r3, #0
10009c6e:	d002      	beq.n	10009c76 <HAL_RCCEx_PeriphCLKConfig+0x135a>
10009c70:	2b01      	cmp	r3, #1
10009c72:	d01f      	beq.n	10009cb4 <HAL_RCCEx_PeriphCLKConfig+0x1398>
10009c74:	e03d      	b.n	10009cf2 <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009c76:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009c7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009c7e:	681b      	ldr	r3, [r3, #0]
10009c80:	3380      	adds	r3, #128	@ 0x80
10009c82:	4618      	mov	r0, r3
10009c84:	f7fe fcf2 	bl	1000866c <RCCEx_PLL4_Config>
10009c88:	4603      	mov	r3, r0
10009c8a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009c8e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009c92:	2b00      	cmp	r3, #0
10009c94:	d003      	beq.n	10009c9e <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
10009c96:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009c9a:	f000 bcc9 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10009c9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009ca2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009ca6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009caa:	f043 0310 	orr.w	r3, r3, #16
10009cae:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
10009cb2:	e01e      	b.n	10009cf2 <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10009cb4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009cb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009cbc:	681b      	ldr	r3, [r3, #0]
10009cbe:	3344      	adds	r3, #68	@ 0x44
10009cc0:	4618      	mov	r0, r3
10009cc2:	f7fe fb69 	bl	10008398 <RCCEx_PLL3_Config>
10009cc6:	4603      	mov	r3, r0
10009cc8:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
10009ccc:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009cd0:	2b00      	cmp	r3, #0
10009cd2:	d003      	beq.n	10009cdc <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
10009cd4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009cd8:	f000 bcaa 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10009cdc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009ce0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
10009ce4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009ce8:	f043 0320 	orr.w	r3, r3, #32
10009cec:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
10009cf0:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10009cf2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009cf6:	f8d3 3914 	ldr.w	r3, [r3, #2324]	@ 0x914
10009cfa:	f023 0103 	bic.w	r1, r3, #3
10009cfe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009d02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009d06:	681b      	ldr	r3, [r3, #0]
10009d08:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
10009d0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009d10:	430b      	orrs	r3, r1
10009d12:	f8c2 3914 	str.w	r3, [r2, #2324]	@ 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10009d16:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009d1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009d1e:	681b      	ldr	r3, [r3, #0]
10009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
10009d24:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
10009d28:	66bb      	str	r3, [r7, #104]	@ 0x68
10009d2a:	2300      	movs	r3, #0
10009d2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
10009d2e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
10009d32:	460b      	mov	r3, r1
10009d34:	4313      	orrs	r3, r2
10009d36:	d011      	beq.n	10009d5c <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10009d38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009d3c:	f8d3 3918 	ldr.w	r3, [r3, #2328]	@ 0x918
10009d40:	f023 0103 	bic.w	r1, r3, #3
10009d44:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009d48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009d4c:	681b      	ldr	r3, [r3, #0]
10009d4e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
10009d52:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009d56:	430b      	orrs	r3, r1
10009d58:	f8c2 3918 	str.w	r3, [r2, #2328]	@ 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10009d5c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009d60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009d64:	681b      	ldr	r3, [r3, #0]
10009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
10009d6a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
10009d6e:	663b      	str	r3, [r7, #96]	@ 0x60
10009d70:	2300      	movs	r3, #0
10009d72:	667b      	str	r3, [r7, #100]	@ 0x64
10009d74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
10009d78:	460b      	mov	r3, r1
10009d7a:	4313      	orrs	r3, r2
10009d7c:	d038      	beq.n	10009df0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10009d7e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009d82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009d86:	681b      	ldr	r3, [r3, #0]
10009d88:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10009d8c:	2b01      	cmp	r3, #1
10009d8e:	d11d      	bne.n	10009dcc <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009d90:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009d94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009d98:	681b      	ldr	r3, [r3, #0]
10009d9a:	3380      	adds	r3, #128	@ 0x80
10009d9c:	4618      	mov	r0, r3
10009d9e:	f7fe fc65 	bl	1000866c <RCCEx_PLL4_Config>
10009da2:	4603      	mov	r3, r0
10009da4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10009da8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009dac:	2b00      	cmp	r3, #0
10009dae:	d003      	beq.n	10009db8 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
10009db0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009db4:	f000 bc3c 	b.w	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10009db8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009dbc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009dc0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009dc8:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10009dcc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009dd0:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10009dd4:	f023 0103 	bic.w	r1, r3, #3
10009dd8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009ddc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009de0:	681b      	ldr	r3, [r3, #0]
10009de2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
10009de6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009dea:	430b      	orrs	r3, r1
10009dec:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10009df0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009df4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009df8:	681b      	ldr	r3, [r3, #0]
10009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
10009dfe:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
10009e02:	65bb      	str	r3, [r7, #88]	@ 0x58
10009e04:	2300      	movs	r3, #0
10009e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
10009e08:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
10009e0c:	460b      	mov	r3, r1
10009e0e:	4313      	orrs	r3, r2
10009e10:	d037      	beq.n	10009e82 <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10009e12:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009e16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009e1a:	681b      	ldr	r3, [r3, #0]
10009e1c:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
10009e20:	2b00      	cmp	r3, #0
10009e22:	d11c      	bne.n	10009e5e <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009e24:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009e28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009e2c:	681b      	ldr	r3, [r3, #0]
10009e2e:	3380      	adds	r3, #128	@ 0x80
10009e30:	4618      	mov	r0, r3
10009e32:	f7fe fc1b 	bl	1000866c <RCCEx_PLL4_Config>
10009e36:	4603      	mov	r3, r0
10009e38:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10009e3c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009e40:	2b00      	cmp	r3, #0
10009e42:	d002      	beq.n	10009e4a <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10009e44:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009e48:	e3f2      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10009e4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009e4e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009e52:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009e5a:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
10009e5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009e62:	f8d3 391c 	ldr.w	r3, [r3, #2332]	@ 0x91c
10009e66:	f023 0110 	bic.w	r1, r3, #16
10009e6a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009e6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009e72:	681b      	ldr	r3, [r3, #0]
10009e74:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
10009e78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009e7c:	430b      	orrs	r3, r1
10009e7e:	f8c2 391c 	str.w	r3, [r2, #2332]	@ 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10009e82:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009e86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009e8a:	681b      	ldr	r3, [r3, #0]
10009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
10009e90:	2100      	movs	r1, #0
10009e92:	6539      	str	r1, [r7, #80]	@ 0x50
10009e94:	f003 0304 	and.w	r3, r3, #4
10009e98:	657b      	str	r3, [r7, #84]	@ 0x54
10009e9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
10009e9e:	460b      	mov	r3, r1
10009ea0:	4313      	orrs	r3, r2
10009ea2:	d037      	beq.n	10009f14 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10009ea4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009ea8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009eac:	681b      	ldr	r3, [r3, #0]
10009eae:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
10009eb2:	2b01      	cmp	r3, #1
10009eb4:	d11c      	bne.n	10009ef0 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009eb6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009eba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009ebe:	681b      	ldr	r3, [r3, #0]
10009ec0:	3380      	adds	r3, #128	@ 0x80
10009ec2:	4618      	mov	r0, r3
10009ec4:	f7fe fbd2 	bl	1000866c <RCCEx_PLL4_Config>
10009ec8:	4603      	mov	r3, r0
10009eca:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10009ece:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009ed2:	2b00      	cmp	r3, #0
10009ed4:	d002      	beq.n	10009edc <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
10009ed6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009eda:	e3a9      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10009edc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009ee0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009ee4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009ee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009eec:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10009ef0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009ef4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
10009ef8:	f023 0103 	bic.w	r1, r3, #3
10009efc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009f00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009f04:	681b      	ldr	r3, [r3, #0]
10009f06:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
10009f0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009f0e:	430b      	orrs	r3, r1
10009f10:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10009f14:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009f18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009f1c:	681b      	ldr	r3, [r3, #0]
10009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
10009f22:	2100      	movs	r1, #0
10009f24:	64b9      	str	r1, [r7, #72]	@ 0x48
10009f26:	f003 0308 	and.w	r3, r3, #8
10009f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
10009f2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
10009f30:	460b      	mov	r3, r1
10009f32:	4313      	orrs	r3, r2
10009f34:	d037      	beq.n	10009fa6 <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10009f36:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009f3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009f3e:	681b      	ldr	r3, [r3, #0]
10009f40:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10009f44:	2b01      	cmp	r3, #1
10009f46:	d11c      	bne.n	10009f82 <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10009f48:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009f4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009f50:	681b      	ldr	r3, [r3, #0]
10009f52:	3380      	adds	r3, #128	@ 0x80
10009f54:	4618      	mov	r0, r3
10009f56:	f7fe fb89 	bl	1000866c <RCCEx_PLL4_Config>
10009f5a:	4603      	mov	r3, r0
10009f5c:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
10009f60:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009f64:	2b00      	cmp	r3, #0
10009f66:	d002      	beq.n	10009f6e <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10009f68:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
10009f6c:	e360      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10009f6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009f72:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
10009f76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10009f7e:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
10009f82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009f86:	f8d3 3920 	ldr.w	r3, [r3, #2336]	@ 0x920
10009f8a:	f023 0103 	bic.w	r1, r3, #3
10009f8e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009f92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009f96:	681b      	ldr	r3, [r3, #0]
10009f98:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
10009f9c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009fa0:	430b      	orrs	r3, r1
10009fa2:	f8c2 3920 	str.w	r3, [r2, #2336]	@ 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
10009fa6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009faa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009fae:	681b      	ldr	r3, [r3, #0]
10009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
10009fb4:	2100      	movs	r1, #0
10009fb6:	6439      	str	r1, [r7, #64]	@ 0x40
10009fb8:	f003 0310 	and.w	r3, r3, #16
10009fbc:	647b      	str	r3, [r7, #68]	@ 0x44
10009fbe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
10009fc2:	460b      	mov	r3, r1
10009fc4:	4313      	orrs	r3, r2
10009fc6:	d011      	beq.n	10009fec <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
10009fc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
10009fcc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
10009fd0:	f023 0103 	bic.w	r1, r3, #3
10009fd4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009fd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009fdc:	681b      	ldr	r3, [r3, #0]
10009fde:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
10009fe2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
10009fe6:	430b      	orrs	r3, r1
10009fe8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
10009fec:	f507 7312 	add.w	r3, r7, #584	@ 0x248
10009ff0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
10009ff4:	681b      	ldr	r3, [r3, #0]
10009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
10009ffa:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
10009ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
1000a000:	2300      	movs	r3, #0
1000a002:	63fb      	str	r3, [r7, #60]	@ 0x3c
1000a004:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
1000a008:	460b      	mov	r3, r1
1000a00a:	4313      	orrs	r3, r2
1000a00c:	d037      	beq.n	1000a07e <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
1000a00e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a012:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a016:	681b      	ldr	r3, [r3, #0]
1000a018:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
1000a01c:	2b01      	cmp	r3, #1
1000a01e:	d11c      	bne.n	1000a05a <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000a020:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a024:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a028:	681b      	ldr	r3, [r3, #0]
1000a02a:	3380      	adds	r3, #128	@ 0x80
1000a02c:	4618      	mov	r0, r3
1000a02e:	f7fe fb1d 	bl	1000866c <RCCEx_PLL4_Config>
1000a032:	4603      	mov	r3, r0
1000a034:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000a038:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a03c:	2b00      	cmp	r3, #0
1000a03e:	d002      	beq.n	1000a046 <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
1000a040:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a044:	e2f4      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000a046:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a04a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000a04e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a052:	f043 0310 	orr.w	r3, r3, #16
1000a056:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
1000a05a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a05e:	f8d3 3924 	ldr.w	r3, [r3, #2340]	@ 0x924
1000a062:	f023 0101 	bic.w	r1, r3, #1
1000a066:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a06a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a06e:	681b      	ldr	r3, [r3, #0]
1000a070:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
1000a074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a078:	430b      	orrs	r3, r1
1000a07a:	f8c2 3924 	str.w	r3, [r2, #2340]	@ 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
1000a07e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a082:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a086:	681b      	ldr	r3, [r3, #0]
1000a088:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a08c:	f002 0308 	and.w	r3, r2, #8
1000a090:	633b      	str	r3, [r7, #48]	@ 0x30
1000a092:	2300      	movs	r3, #0
1000a094:	637b      	str	r3, [r7, #52]	@ 0x34
1000a096:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
1000a09a:	460b      	mov	r3, r1
1000a09c:	4313      	orrs	r3, r2
1000a09e:	d059      	beq.n	1000a154 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
1000a0a0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a0a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a0a8:	681b      	ldr	r3, [r3, #0]
1000a0aa:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000a0ae:	2b00      	cmp	r3, #0
1000a0b0:	d002      	beq.n	1000a0b8 <HAL_RCCEx_PeriphCLKConfig+0x179c>
1000a0b2:	2b02      	cmp	r3, #2
1000a0b4:	d01e      	beq.n	1000a0f4 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
1000a0b6:	e03b      	b.n	1000a130 <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000a0b8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a0bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a0c0:	681b      	ldr	r3, [r3, #0]
1000a0c2:	3380      	adds	r3, #128	@ 0x80
1000a0c4:	4618      	mov	r0, r3
1000a0c6:	f7fe fad1 	bl	1000866c <RCCEx_PLL4_Config>
1000a0ca:	4603      	mov	r3, r0
1000a0cc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000a0d0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a0d4:	2b00      	cmp	r3, #0
1000a0d6:	d002      	beq.n	1000a0de <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
1000a0d8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a0dc:	e2a8      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000a0de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a0e2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000a0e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a0ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000a0ee:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
        break;
1000a0f2:	e01d      	b.n	1000a130 <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000a0f4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a0f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a0fc:	681b      	ldr	r3, [r3, #0]
1000a0fe:	3344      	adds	r3, #68	@ 0x44
1000a100:	4618      	mov	r0, r3
1000a102:	f7fe f949 	bl	10008398 <RCCEx_PLL3_Config>
1000a106:	4603      	mov	r3, r0
1000a108:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000a10c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a110:	2b00      	cmp	r3, #0
1000a112:	d002      	beq.n	1000a11a <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
1000a114:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a118:	e28a      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000a11a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a11e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000a122:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a126:	f043 0320 	orr.w	r3, r3, #32
1000a12a:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000a12e:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
1000a130:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a134:	f8d3 3928 	ldr.w	r3, [r3, #2344]	@ 0x928
1000a138:	f023 0103 	bic.w	r1, r3, #3
1000a13c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a140:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a144:	681b      	ldr	r3, [r3, #0]
1000a146:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
1000a14a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a14e:	430b      	orrs	r3, r1
1000a150:	f8c2 3928 	str.w	r3, [r2, #2344]	@ 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
1000a154:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a158:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a15c:	681b      	ldr	r3, [r3, #0]
1000a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a162:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
1000a166:	62bb      	str	r3, [r7, #40]	@ 0x28
1000a168:	2300      	movs	r3, #0
1000a16a:	62fb      	str	r3, [r7, #44]	@ 0x2c
1000a16c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
1000a170:	460b      	mov	r3, r1
1000a172:	4313      	orrs	r3, r2
1000a174:	d058      	beq.n	1000a228 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
1000a176:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a17a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a17e:	681b      	ldr	r3, [r3, #0]
1000a180:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000a184:	2b01      	cmp	r3, #1
1000a186:	d01f      	beq.n	1000a1c8 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
1000a188:	2b02      	cmp	r3, #2
1000a18a:	d13b      	bne.n	1000a204 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000a18c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a190:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a194:	681b      	ldr	r3, [r3, #0]
1000a196:	3344      	adds	r3, #68	@ 0x44
1000a198:	4618      	mov	r0, r3
1000a19a:	f7fe f8fd 	bl	10008398 <RCCEx_PLL3_Config>
1000a19e:	4603      	mov	r3, r0
1000a1a0:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000a1a4:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a1a8:	2b00      	cmp	r3, #0
1000a1aa:	d002      	beq.n	1000a1b2 <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
1000a1ac:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a1b0:	e23e      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000a1b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a1b6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000a1ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a1be:	f043 0320 	orr.w	r3, r3, #32
1000a1c2:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000a1c6:	e01d      	b.n	1000a204 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000a1c8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a1cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a1d0:	681b      	ldr	r3, [r3, #0]
1000a1d2:	3380      	adds	r3, #128	@ 0x80
1000a1d4:	4618      	mov	r0, r3
1000a1d6:	f7fe fa49 	bl	1000866c <RCCEx_PLL4_Config>
1000a1da:	4603      	mov	r3, r0
1000a1dc:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000a1e0:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a1e4:	2b00      	cmp	r3, #0
1000a1e6:	d002      	beq.n	1000a1ee <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
1000a1e8:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a1ec:	e220      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000a1ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a1f2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000a1f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a1fa:	f043 0310 	orr.w	r3, r3, #16
1000a1fe:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000a202:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
1000a204:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a208:	f8d3 392c 	ldr.w	r3, [r3, #2348]	@ 0x92c
1000a20c:	f023 0207 	bic.w	r2, r3, #7
1000a210:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a214:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a218:	681b      	ldr	r3, [r3, #0]
1000a21a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000a21e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000a222:	4313      	orrs	r3, r2
1000a224:	f8c1 392c 	str.w	r3, [r1, #2348]	@ 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
1000a228:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a22c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a230:	681b      	ldr	r3, [r3, #0]
1000a232:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a236:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
1000a23a:	623b      	str	r3, [r7, #32]
1000a23c:	2300      	movs	r3, #0
1000a23e:	627b      	str	r3, [r7, #36]	@ 0x24
1000a240:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
1000a244:	460b      	mov	r3, r1
1000a246:	4313      	orrs	r3, r2
1000a248:	d037      	beq.n	1000a2ba <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
1000a24a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a24e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a252:	681b      	ldr	r3, [r3, #0]
1000a254:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
1000a258:	2b01      	cmp	r3, #1
1000a25a:	d11c      	bne.n	1000a296 <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000a25c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a260:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a264:	681b      	ldr	r3, [r3, #0]
1000a266:	3380      	adds	r3, #128	@ 0x80
1000a268:	4618      	mov	r0, r3
1000a26a:	f7fe f9ff 	bl	1000866c <RCCEx_PLL4_Config>
1000a26e:	4603      	mov	r3, r0
1000a270:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
      if (status != HAL_OK)
1000a274:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a278:	2b00      	cmp	r3, #0
1000a27a:	d002      	beq.n	1000a282 <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
1000a27c:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a280:	e1d6      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000a282:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a286:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000a28a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a28e:	f043 0320 	orr.w	r3, r3, #32
1000a292:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
1000a296:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a29a:	f8d3 3930 	ldr.w	r3, [r3, #2352]	@ 0x930
1000a29e:	f023 0207 	bic.w	r2, r3, #7
1000a2a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a2a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a2aa:	681b      	ldr	r3, [r3, #0]
1000a2ac:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
1000a2b0:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000a2b4:	4313      	orrs	r3, r2
1000a2b6:	f8c1 3930 	str.w	r3, [r1, #2352]	@ 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
1000a2ba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a2be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a2c2:	681b      	ldr	r3, [r3, #0]
1000a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a2c8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
1000a2cc:	61bb      	str	r3, [r7, #24]
1000a2ce:	2300      	movs	r3, #0
1000a2d0:	61fb      	str	r3, [r7, #28]
1000a2d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
1000a2d6:	460b      	mov	r3, r1
1000a2d8:	4313      	orrs	r3, r2
1000a2da:	d058      	beq.n	1000a38e <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
1000a2dc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a2e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a2e4:	681b      	ldr	r3, [r3, #0]
1000a2e6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
1000a2ea:	2b01      	cmp	r3, #1
1000a2ec:	d01f      	beq.n	1000a32e <HAL_RCCEx_PeriphCLKConfig+0x1a12>
1000a2ee:	2b02      	cmp	r3, #2
1000a2f0:	d13b      	bne.n	1000a36a <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000a2f2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a2f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a2fa:	681b      	ldr	r3, [r3, #0]
1000a2fc:	3344      	adds	r3, #68	@ 0x44
1000a2fe:	4618      	mov	r0, r3
1000a300:	f7fe f84a 	bl	10008398 <RCCEx_PLL3_Config>
1000a304:	4603      	mov	r3, r0
1000a306:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000a30a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a30e:	2b00      	cmp	r3, #0
1000a310:	d002      	beq.n	1000a318 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
1000a312:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a316:	e18b      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000a318:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a31c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	@ 0x880
1000a320:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a324:	f043 0320 	orr.w	r3, r3, #32
1000a328:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880

        break;
1000a32c:	e01d      	b.n	1000a36a <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000a32e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a332:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a336:	681b      	ldr	r3, [r3, #0]
1000a338:	3380      	adds	r3, #128	@ 0x80
1000a33a:	4618      	mov	r0, r3
1000a33c:	f7fe f996 	bl	1000866c <RCCEx_PLL4_Config>
1000a340:	4603      	mov	r3, r0
1000a342:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
        if (status != HAL_OK)
1000a346:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a34a:	2b00      	cmp	r3, #0
1000a34c:	d002      	beq.n	1000a354 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
1000a34e:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
1000a352:	e16d      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000a354:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a358:	f8d3 3894 	ldr.w	r3, [r3, #2196]	@ 0x894
1000a35c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a360:	f043 0310 	orr.w	r3, r3, #16
1000a364:	f8c2 3894 	str.w	r3, [r2, #2196]	@ 0x894

        break;
1000a368:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
1000a36a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a36e:	f8d3 3934 	ldr.w	r3, [r3, #2356]	@ 0x934
1000a372:	f023 0207 	bic.w	r2, r3, #7
1000a376:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a37a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a37e:	681b      	ldr	r3, [r3, #0]
1000a380:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
1000a384:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000a388:	4313      	orrs	r3, r2
1000a38a:	f8c1 3934 	str.w	r3, [r1, #2356]	@ 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
1000a38e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a392:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a396:	681b      	ldr	r3, [r3, #0]
1000a398:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a39c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
1000a3a0:	613b      	str	r3, [r7, #16]
1000a3a2:	2300      	movs	r3, #0
1000a3a4:	617b      	str	r3, [r7, #20]
1000a3a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
1000a3aa:	460b      	mov	r3, r1
1000a3ac:	4313      	orrs	r3, r2
1000a3ae:	f000 80c6 	beq.w	1000a53e <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000a3b2:	4ba2      	ldr	r3, [pc, #648]	@ (1000a63c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
1000a3b4:	681b      	ldr	r3, [r3, #0]
1000a3b6:	4aa1      	ldr	r2, [pc, #644]	@ (1000a63c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
1000a3b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1000a3bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000a3be:	f7f9 ffff 	bl	100043c0 <HAL_GetTick>
1000a3c2:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000a3c6:	e00a      	b.n	1000a3de <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
1000a3c8:	f7f9 fffa 	bl	100043c0 <HAL_GetTick>
1000a3cc:	4602      	mov	r2, r0
1000a3ce:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
1000a3d2:	1ad3      	subs	r3, r2, r3
1000a3d4:	2b64      	cmp	r3, #100	@ 0x64
1000a3d6:	d902      	bls.n	1000a3de <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
1000a3d8:	2303      	movs	r3, #3
1000a3da:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000a3de:	4b97      	ldr	r3, [pc, #604]	@ (1000a63c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
1000a3e0:	681b      	ldr	r3, [r3, #0]
1000a3e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000a3e6:	2b00      	cmp	r3, #0
1000a3e8:	d0ee      	beq.n	1000a3c8 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
1000a3ea:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
1000a3ee:	2b00      	cmp	r3, #0
1000a3f0:	f040 80a2 	bne.w	1000a538 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
1000a3f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a3f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
1000a3fc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a400:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a404:	681b      	ldr	r3, [r3, #0]
1000a406:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
1000a40a:	4053      	eors	r3, r2
1000a40c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
1000a410:	2b00      	cmp	r3, #0
1000a412:	f000 8086 	beq.w	1000a522 <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
1000a416:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a41a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000a41e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
1000a422:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
1000a426:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a42a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000a42e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
1000a436:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
1000a43a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a43e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000a442:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a446:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
1000a44a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
1000a44e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a452:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000a456:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
1000a45a:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
1000a45e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
1000a462:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000a466:	4313      	orrs	r3, r2
1000a468:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
1000a46c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a470:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000a474:	2204      	movs	r2, #4
1000a476:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
1000a478:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
1000a47c:	f003 020b 	and.w	r2, r3, #11
1000a480:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a484:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000a488:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
1000a48a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a48e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000a492:	2200      	movs	r2, #0
1000a494:	625a      	str	r2, [r3, #36]	@ 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
1000a496:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a49a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000a49e:	2200      	movs	r2, #0
1000a4a0:	661a      	str	r2, [r3, #96]	@ 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
1000a4a2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a4a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000a4aa:	2200      	movs	r2, #0
1000a4ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
1000a4b0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a4b4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
1000a4b8:	2200      	movs	r2, #0
1000a4ba:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
1000a4be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
1000a4c2:	4618      	mov	r0, r3
1000a4c4:	f7fc fc2a 	bl	10006d1c <HAL_RCC_OscConfig>
1000a4c8:	4603      	mov	r3, r0
1000a4ca:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
        if (ret != HAL_OK)
1000a4ce:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
1000a4d2:	2b00      	cmp	r3, #0
1000a4d4:	d002      	beq.n	1000a4dc <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
1000a4d6:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
1000a4da:	e0a9      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
1000a4dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a4e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000a4e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
1000a4e8:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a4ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a4f0:	681b      	ldr	r3, [r3, #0]
1000a4f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
1000a4f6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000a4fa:	4313      	orrs	r3, r2
1000a4fc:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
1000a500:	4b4f      	ldr	r3, [pc, #316]	@ (1000a640 <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
1000a502:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
1000a506:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a50a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
1000a50e:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
1000a512:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
1000a516:	400b      	ands	r3, r1
1000a518:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000a51c:	4313      	orrs	r3, r2
1000a51e:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
1000a522:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a526:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
1000a52a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
1000a52e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
1000a532:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
1000a536:	e002      	b.n	1000a53e <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
1000a538:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
1000a53c:	e078      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
1000a53e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a542:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a546:	681b      	ldr	r3, [r3, #0]
1000a548:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a54c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
1000a550:	60bb      	str	r3, [r7, #8]
1000a552:	2300      	movs	r3, #0
1000a554:	60fb      	str	r3, [r7, #12]
1000a556:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
1000a55a:	460b      	mov	r3, r1
1000a55c:	4313      	orrs	r3, r2
1000a55e:	d02a      	beq.n	1000a5b6 <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
1000a560:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a564:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
1000a568:	f023 0201 	bic.w	r2, r3, #1
1000a56c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a570:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a574:	681b      	ldr	r3, [r3, #0]
1000a576:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
1000a57a:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000a57e:	4313      	orrs	r3, r2
1000a580:	f8c1 3828 	str.w	r3, [r1, #2088]	@ 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000a584:	f7f9 ff1c 	bl	100043c0 <HAL_GetTick>
1000a588:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000a58c:	e00a      	b.n	1000a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000a58e:	f7f9 ff17 	bl	100043c0 <HAL_GetTick>
1000a592:	4602      	mov	r2, r0
1000a594:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
1000a598:	1ad3      	subs	r3, r2, r3
1000a59a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000a59e:	d901      	bls.n	1000a5a4 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
1000a5a0:	2303      	movs	r3, #3
1000a5a2:	e045      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000a5a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a5a8:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
1000a5ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000a5b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000a5b4:	d1eb      	bne.n	1000a58e <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
1000a5b6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a5ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a5be:	681b      	ldr	r3, [r3, #0]
1000a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a5c4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
1000a5c8:	603b      	str	r3, [r7, #0]
1000a5ca:	2300      	movs	r3, #0
1000a5cc:	607b      	str	r3, [r7, #4]
1000a5ce:	e9d7 1200 	ldrd	r1, r2, [r7]
1000a5d2:	460b      	mov	r3, r1
1000a5d4:	4313      	orrs	r3, r2
1000a5d6:	d02a      	beq.n	1000a62e <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
1000a5d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a5dc:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
1000a5e0:	f023 0201 	bic.w	r2, r3, #1
1000a5e4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
1000a5e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
1000a5ec:	681b      	ldr	r3, [r3, #0]
1000a5ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
1000a5f2:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
1000a5f6:	4313      	orrs	r3, r2
1000a5f8:	f8c1 382c 	str.w	r3, [r1, #2092]	@ 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000a5fc:	f7f9 fee0 	bl	100043c0 <HAL_GetTick>
1000a600:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
1000a604:	e00a      	b.n	1000a61c <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000a606:	f7f9 fedb 	bl	100043c0 <HAL_GetTick>
1000a60a:	4602      	mov	r2, r0
1000a60c:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
1000a610:	1ad3      	subs	r3, r2, r3
1000a612:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
1000a616:	d901      	bls.n	1000a61c <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
1000a618:	2303      	movs	r3, #3
1000a61a:	e009      	b.n	1000a630 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
1000a61c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
1000a620:	f8d3 382c 	ldr.w	r3, [r3, #2092]	@ 0x82c
1000a624:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
1000a628:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
1000a62c:	d1eb      	bne.n	1000a606 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
1000a62e:	2300      	movs	r3, #0
}
1000a630:	4618      	mov	r0, r3
1000a632:	f507 7712 	add.w	r7, r7, #584	@ 0x248
1000a636:	46bd      	mov	sp, r7
1000a638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
1000a63c:	50001000 	.word	0x50001000
1000a640:	7fecfdc0 	.word	0x7fecfdc0

1000a644 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
1000a644:	b480      	push	{r7}
1000a646:	b083      	sub	sp, #12
1000a648:	af00      	add	r7, sp, #0
1000a64a:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000a64c:	687b      	ldr	r3, [r7, #4]
1000a64e:	687a      	ldr	r2, [r7, #4]
1000a650:	605a      	str	r2, [r3, #4]
	list->next = list;
1000a652:	687b      	ldr	r3, [r7, #4]
1000a654:	687a      	ldr	r2, [r7, #4]
1000a656:	601a      	str	r2, [r3, #0]
}
1000a658:	bf00      	nop
1000a65a:	370c      	adds	r7, #12
1000a65c:	46bd      	mov	sp, r7
1000a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a662:	4770      	bx	lr

1000a664 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
1000a664:	b480      	push	{r7}
1000a666:	b083      	sub	sp, #12
1000a668:	af00      	add	r7, sp, #0
1000a66a:	6078      	str	r0, [r7, #4]
1000a66c:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000a66e:	687b      	ldr	r3, [r7, #4]
1000a670:	685a      	ldr	r2, [r3, #4]
1000a672:	683b      	ldr	r3, [r7, #0]
1000a674:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000a676:	683b      	ldr	r3, [r7, #0]
1000a678:	687a      	ldr	r2, [r7, #4]
1000a67a:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000a67c:	683b      	ldr	r3, [r7, #0]
1000a67e:	681b      	ldr	r3, [r3, #0]
1000a680:	683a      	ldr	r2, [r7, #0]
1000a682:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000a684:	683b      	ldr	r3, [r7, #0]
1000a686:	685b      	ldr	r3, [r3, #4]
1000a688:	683a      	ldr	r2, [r7, #0]
1000a68a:	601a      	str	r2, [r3, #0]
}
1000a68c:	bf00      	nop
1000a68e:	370c      	adds	r7, #12
1000a690:	46bd      	mov	sp, r7
1000a692:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a696:	4770      	bx	lr

1000a698 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
1000a698:	b580      	push	{r7, lr}
1000a69a:	b082      	sub	sp, #8
1000a69c:	af00      	add	r7, sp, #0
1000a69e:	6078      	str	r0, [r7, #4]
1000a6a0:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000a6a2:	6839      	ldr	r1, [r7, #0]
1000a6a4:	6878      	ldr	r0, [r7, #4]
1000a6a6:	f7ff ffdd 	bl	1000a664 <metal_list_add_before>
}
1000a6aa:	bf00      	nop
1000a6ac:	3708      	adds	r7, #8
1000a6ae:	46bd      	mov	sp, r7
1000a6b0:	bd80      	pop	{r7, pc}

1000a6b2 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
1000a6b2:	b580      	push	{r7, lr}
1000a6b4:	b082      	sub	sp, #8
1000a6b6:	af00      	add	r7, sp, #0
1000a6b8:	6078      	str	r0, [r7, #4]
1000a6ba:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
1000a6bc:	6839      	ldr	r1, [r7, #0]
1000a6be:	6878      	ldr	r0, [r7, #4]
1000a6c0:	f000 fbc2 	bl	1000ae48 <metal_machine_cache_flush>
}
1000a6c4:	bf00      	nop
1000a6c6:	3708      	adds	r7, #8
1000a6c8:	46bd      	mov	sp, r7
1000a6ca:	bd80      	pop	{r7, pc}

1000a6cc <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
1000a6cc:	b580      	push	{r7, lr}
1000a6ce:	b082      	sub	sp, #8
1000a6d0:	af00      	add	r7, sp, #0
1000a6d2:	6078      	str	r0, [r7, #4]
1000a6d4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
1000a6d6:	6839      	ldr	r1, [r7, #0]
1000a6d8:	6878      	ldr	r0, [r7, #4]
1000a6da:	f000 fbc0 	bl	1000ae5e <metal_machine_cache_invalidate>
}
1000a6de:	bf00      	nop
1000a6e0:	3708      	adds	r7, #8
1000a6e2:	46bd      	mov	sp, r7
1000a6e4:	bd80      	pop	{r7, pc}

1000a6e6 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
1000a6e6:	b580      	push	{r7, lr}
1000a6e8:	b082      	sub	sp, #8
1000a6ea:	af00      	add	r7, sp, #0
1000a6ec:	6078      	str	r0, [r7, #4]
1000a6ee:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
1000a6f0:	6839      	ldr	r1, [r7, #0]
1000a6f2:	6878      	ldr	r0, [r7, #4]
1000a6f4:	f7ff ffdd 	bl	1000a6b2 <__metal_cache_flush>
}
1000a6f8:	bf00      	nop
1000a6fa:	3708      	adds	r7, #8
1000a6fc:	46bd      	mov	sp, r7
1000a6fe:	bd80      	pop	{r7, pc}

1000a700 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
1000a700:	b580      	push	{r7, lr}
1000a702:	b082      	sub	sp, #8
1000a704:	af00      	add	r7, sp, #0
1000a706:	6078      	str	r0, [r7, #4]
1000a708:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
1000a70a:	6839      	ldr	r1, [r7, #0]
1000a70c:	6878      	ldr	r0, [r7, #4]
1000a70e:	f7ff ffdd 	bl	1000a6cc <__metal_cache_invalidate>
}
1000a712:	bf00      	nop
1000a714:	3708      	adds	r7, #8
1000a716:	46bd      	mov	sp, r7
1000a718:	bd80      	pop	{r7, pc}
	...

1000a71c <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
1000a71c:	b580      	push	{r7, lr}
1000a71e:	b082      	sub	sp, #8
1000a720:	af00      	add	r7, sp, #0
1000a722:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
1000a724:	687b      	ldr	r3, [r7, #4]
1000a726:	2b00      	cmp	r3, #0
1000a728:	d008      	beq.n	1000a73c <metal_bus_register+0x20>
1000a72a:	687b      	ldr	r3, [r7, #4]
1000a72c:	681b      	ldr	r3, [r3, #0]
1000a72e:	2b00      	cmp	r3, #0
1000a730:	d004      	beq.n	1000a73c <metal_bus_register+0x20>
1000a732:	687b      	ldr	r3, [r7, #4]
1000a734:	681b      	ldr	r3, [r3, #0]
1000a736:	781b      	ldrb	r3, [r3, #0]
1000a738:	2b00      	cmp	r3, #0
1000a73a:	d102      	bne.n	1000a742 <metal_bus_register+0x26>
		return -EINVAL;
1000a73c:	f06f 0315 	mvn.w	r3, #21
1000a740:	e026      	b.n	1000a790 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
1000a742:	687b      	ldr	r3, [r7, #4]
1000a744:	681b      	ldr	r3, [r3, #0]
1000a746:	2100      	movs	r1, #0
1000a748:	4618      	mov	r0, r3
1000a74a:	f000 f82b 	bl	1000a7a4 <metal_bus_find>
1000a74e:	4603      	mov	r3, r0
1000a750:	2b00      	cmp	r3, #0
1000a752:	d102      	bne.n	1000a75a <metal_bus_register+0x3e>
		return -EEXIST;
1000a754:	f06f 0310 	mvn.w	r3, #16
1000a758:	e01a      	b.n	1000a790 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
1000a75a:	687b      	ldr	r3, [r7, #4]
1000a75c:	331c      	adds	r3, #28
1000a75e:	4618      	mov	r0, r3
1000a760:	f7ff ff70 	bl	1000a644 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
1000a764:	687b      	ldr	r3, [r7, #4]
1000a766:	3324      	adds	r3, #36	@ 0x24
1000a768:	4619      	mov	r1, r3
1000a76a:	480b      	ldr	r0, [pc, #44]	@ (1000a798 <metal_bus_register+0x7c>)
1000a76c:	f7ff ff94 	bl	1000a698 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
1000a770:	4b0a      	ldr	r3, [pc, #40]	@ (1000a79c <metal_bus_register+0x80>)
1000a772:	781b      	ldrb	r3, [r3, #0]
1000a774:	2b06      	cmp	r3, #6
1000a776:	d90a      	bls.n	1000a78e <metal_bus_register+0x72>
1000a778:	4b08      	ldr	r3, [pc, #32]	@ (1000a79c <metal_bus_register+0x80>)
1000a77a:	685b      	ldr	r3, [r3, #4]
1000a77c:	2b00      	cmp	r3, #0
1000a77e:	d006      	beq.n	1000a78e <metal_bus_register+0x72>
1000a780:	4b06      	ldr	r3, [pc, #24]	@ (1000a79c <metal_bus_register+0x80>)
1000a782:	685b      	ldr	r3, [r3, #4]
1000a784:	687a      	ldr	r2, [r7, #4]
1000a786:	6812      	ldr	r2, [r2, #0]
1000a788:	4905      	ldr	r1, [pc, #20]	@ (1000a7a0 <metal_bus_register+0x84>)
1000a78a:	2007      	movs	r0, #7
1000a78c:	4798      	blx	r3
	return 0;
1000a78e:	2300      	movs	r3, #0
}
1000a790:	4618      	mov	r0, r3
1000a792:	3708      	adds	r7, #8
1000a794:	46bd      	mov	sp, r7
1000a796:	bd80      	pop	{r7, pc}
1000a798:	100216a0 	.word	0x100216a0
1000a79c:	10021698 	.word	0x10021698
1000a7a0:	100116fc 	.word	0x100116fc

1000a7a4 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
1000a7a4:	b580      	push	{r7, lr}
1000a7a6:	b084      	sub	sp, #16
1000a7a8:	af00      	add	r7, sp, #0
1000a7aa:	6078      	str	r0, [r7, #4]
1000a7ac:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
1000a7ae:	4b12      	ldr	r3, [pc, #72]	@ (1000a7f8 <metal_bus_find+0x54>)
1000a7b0:	689b      	ldr	r3, [r3, #8]
1000a7b2:	60fb      	str	r3, [r7, #12]
1000a7b4:	e016      	b.n	1000a7e4 <metal_bus_find+0x40>
		bus = metal_container_of(node, struct metal_bus, node);
1000a7b6:	68fb      	ldr	r3, [r7, #12]
1000a7b8:	3b24      	subs	r3, #36	@ 0x24
1000a7ba:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) == 0 && result) {
1000a7bc:	68bb      	ldr	r3, [r7, #8]
1000a7be:	681b      	ldr	r3, [r3, #0]
1000a7c0:	6879      	ldr	r1, [r7, #4]
1000a7c2:	4618      	mov	r0, r3
1000a7c4:	f7f5 fc3c 	bl	10000040 <strcmp>
1000a7c8:	4603      	mov	r3, r0
1000a7ca:	2b00      	cmp	r3, #0
1000a7cc:	d107      	bne.n	1000a7de <metal_bus_find+0x3a>
1000a7ce:	683b      	ldr	r3, [r7, #0]
1000a7d0:	2b00      	cmp	r3, #0
1000a7d2:	d004      	beq.n	1000a7de <metal_bus_find+0x3a>
			*result = bus;
1000a7d4:	683b      	ldr	r3, [r7, #0]
1000a7d6:	68ba      	ldr	r2, [r7, #8]
1000a7d8:	601a      	str	r2, [r3, #0]
			return 0;
1000a7da:	2300      	movs	r3, #0
1000a7dc:	e008      	b.n	1000a7f0 <metal_bus_find+0x4c>
	metal_list_for_each(&_metal.common.bus_list, node) {
1000a7de:	68fb      	ldr	r3, [r7, #12]
1000a7e0:	681b      	ldr	r3, [r3, #0]
1000a7e2:	60fb      	str	r3, [r7, #12]
1000a7e4:	68fb      	ldr	r3, [r7, #12]
1000a7e6:	4a05      	ldr	r2, [pc, #20]	@ (1000a7fc <metal_bus_find+0x58>)
1000a7e8:	4293      	cmp	r3, r2
1000a7ea:	d1e4      	bne.n	1000a7b6 <metal_bus_find+0x12>
		}
	}
	return -ENOENT;
1000a7ec:	f06f 0301 	mvn.w	r3, #1
}
1000a7f0:	4618      	mov	r0, r3
1000a7f2:	3710      	adds	r7, #16
1000a7f4:	46bd      	mov	sp, r7
1000a7f6:	bd80      	pop	{r7, pc}
1000a7f8:	10021698 	.word	0x10021698
1000a7fc:	100216a0 	.word	0x100216a0

1000a800 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
1000a800:	b580      	push	{r7, lr}
1000a802:	b086      	sub	sp, #24
1000a804:	af00      	add	r7, sp, #0
1000a806:	60f8      	str	r0, [r7, #12]
1000a808:	60b9      	str	r1, [r7, #8]
1000a80a:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
1000a80c:	68fb      	ldr	r3, [r7, #12]
1000a80e:	2b00      	cmp	r3, #0
1000a810:	d00d      	beq.n	1000a82e <metal_device_open+0x2e>
1000a812:	68fb      	ldr	r3, [r7, #12]
1000a814:	781b      	ldrb	r3, [r3, #0]
1000a816:	2b00      	cmp	r3, #0
1000a818:	d009      	beq.n	1000a82e <metal_device_open+0x2e>
1000a81a:	68bb      	ldr	r3, [r7, #8]
1000a81c:	2b00      	cmp	r3, #0
1000a81e:	d006      	beq.n	1000a82e <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
1000a820:	68bb      	ldr	r3, [r7, #8]
1000a822:	781b      	ldrb	r3, [r3, #0]
1000a824:	2b00      	cmp	r3, #0
1000a826:	d002      	beq.n	1000a82e <metal_device_open+0x2e>
1000a828:	687b      	ldr	r3, [r7, #4]
1000a82a:	2b00      	cmp	r3, #0
1000a82c:	d102      	bne.n	1000a834 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
1000a82e:	f06f 0315 	mvn.w	r3, #21
1000a832:	e01f      	b.n	1000a874 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
1000a834:	f107 0310 	add.w	r3, r7, #16
1000a838:	4619      	mov	r1, r3
1000a83a:	68f8      	ldr	r0, [r7, #12]
1000a83c:	f7ff ffb2 	bl	1000a7a4 <metal_bus_find>
1000a840:	6178      	str	r0, [r7, #20]
	if (error)
1000a842:	697b      	ldr	r3, [r7, #20]
1000a844:	2b00      	cmp	r3, #0
1000a846:	d001      	beq.n	1000a84c <metal_device_open+0x4c>
		return error;
1000a848:	697b      	ldr	r3, [r7, #20]
1000a84a:	e013      	b.n	1000a874 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
1000a84c:	693b      	ldr	r3, [r7, #16]
1000a84e:	689b      	ldr	r3, [r3, #8]
1000a850:	2b00      	cmp	r3, #0
1000a852:	d102      	bne.n	1000a85a <metal_device_open+0x5a>
		return -ENODEV;
1000a854:	f06f 0312 	mvn.w	r3, #18
1000a858:	e00c      	b.n	1000a874 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
1000a85a:	693b      	ldr	r3, [r7, #16]
1000a85c:	689b      	ldr	r3, [r3, #8]
1000a85e:	6938      	ldr	r0, [r7, #16]
1000a860:	687a      	ldr	r2, [r7, #4]
1000a862:	68b9      	ldr	r1, [r7, #8]
1000a864:	4798      	blx	r3
1000a866:	6178      	str	r0, [r7, #20]
	if (error)
1000a868:	697b      	ldr	r3, [r7, #20]
1000a86a:	2b00      	cmp	r3, #0
1000a86c:	d001      	beq.n	1000a872 <metal_device_open+0x72>
		return error;
1000a86e:	697b      	ldr	r3, [r7, #20]
1000a870:	e000      	b.n	1000a874 <metal_device_open+0x74>

	return 0;
1000a872:	2300      	movs	r3, #0
}
1000a874:	4618      	mov	r0, r3
1000a876:	3718      	adds	r7, #24
1000a878:	46bd      	mov	sp, r7
1000a87a:	bd80      	pop	{r7, pc}

1000a87c <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
1000a87c:	b580      	push	{r7, lr}
1000a87e:	b082      	sub	sp, #8
1000a880:	af00      	add	r7, sp, #0
1000a882:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
1000a884:	687b      	ldr	r3, [r7, #4]
1000a886:	681b      	ldr	r3, [r3, #0]
1000a888:	2b00      	cmp	r3, #0
1000a88a:	d008      	beq.n	1000a89e <metal_register_generic_device+0x22>
1000a88c:	687b      	ldr	r3, [r7, #4]
1000a88e:	681b      	ldr	r3, [r3, #0]
1000a890:	781b      	ldrb	r3, [r3, #0]
1000a892:	2b00      	cmp	r3, #0
1000a894:	d003      	beq.n	1000a89e <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
1000a896:	687b      	ldr	r3, [r7, #4]
1000a898:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
1000a89a:	2b02      	cmp	r3, #2
1000a89c:	d902      	bls.n	1000a8a4 <metal_register_generic_device+0x28>
		return -EINVAL;
1000a89e:	f06f 0315 	mvn.w	r3, #21
1000a8a2:	e009      	b.n	1000a8b8 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
1000a8a4:	687b      	ldr	r3, [r7, #4]
1000a8a6:	4a06      	ldr	r2, [pc, #24]	@ (1000a8c0 <metal_register_generic_device+0x44>)
1000a8a8:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
1000a8aa:	687b      	ldr	r3, [r7, #4]
1000a8ac:	337c      	adds	r3, #124	@ 0x7c
1000a8ae:	4619      	mov	r1, r3
1000a8b0:	4804      	ldr	r0, [pc, #16]	@ (1000a8c4 <metal_register_generic_device+0x48>)
1000a8b2:	f7ff fef1 	bl	1000a698 <metal_list_add_tail>
			    &device->node);
	return 0;
1000a8b6:	2300      	movs	r3, #0
}
1000a8b8:	4618      	mov	r0, r3
1000a8ba:	3708      	adds	r7, #8
1000a8bc:	46bd      	mov	sp, r7
1000a8be:	bd80      	pop	{r7, pc}
1000a8c0:	100200a8 	.word	0x100200a8
1000a8c4:	100216b0 	.word	0x100216b0

1000a8c8 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
1000a8c8:	b580      	push	{r7, lr}
1000a8ca:	b086      	sub	sp, #24
1000a8cc:	af00      	add	r7, sp, #0
1000a8ce:	60f8      	str	r0, [r7, #12]
1000a8d0:	60b9      	str	r1, [r7, #8]
1000a8d2:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000a8d4:	4b12      	ldr	r3, [pc, #72]	@ (1000a920 <metal_generic_dev_open+0x58>)
1000a8d6:	699b      	ldr	r3, [r3, #24]
1000a8d8:	617b      	str	r3, [r7, #20]
1000a8da:	e016      	b.n	1000a90a <metal_generic_dev_open+0x42>
		dev = metal_container_of(node, struct metal_device, node);
1000a8dc:	697b      	ldr	r3, [r7, #20]
1000a8de:	3b7c      	subs	r3, #124	@ 0x7c
1000a8e0:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) == 0) {
1000a8e2:	693b      	ldr	r3, [r7, #16]
1000a8e4:	681b      	ldr	r3, [r3, #0]
1000a8e6:	68b9      	ldr	r1, [r7, #8]
1000a8e8:	4618      	mov	r0, r3
1000a8ea:	f7f5 fba9 	bl	10000040 <strcmp>
1000a8ee:	4603      	mov	r3, r0
1000a8f0:	2b00      	cmp	r3, #0
1000a8f2:	d107      	bne.n	1000a904 <metal_generic_dev_open+0x3c>
			*device = dev;
1000a8f4:	687b      	ldr	r3, [r7, #4]
1000a8f6:	693a      	ldr	r2, [r7, #16]
1000a8f8:	601a      	str	r2, [r3, #0]
			return metal_generic_dev_sys_open(dev);
1000a8fa:	6938      	ldr	r0, [r7, #16]
1000a8fc:	f000 fa31 	bl	1000ad62 <metal_generic_dev_sys_open>
1000a900:	4603      	mov	r3, r0
1000a902:	e008      	b.n	1000a916 <metal_generic_dev_open+0x4e>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
1000a904:	697b      	ldr	r3, [r7, #20]
1000a906:	681b      	ldr	r3, [r3, #0]
1000a908:	617b      	str	r3, [r7, #20]
1000a90a:	697b      	ldr	r3, [r7, #20]
1000a90c:	4a05      	ldr	r2, [pc, #20]	@ (1000a924 <metal_generic_dev_open+0x5c>)
1000a90e:	4293      	cmp	r3, r2
1000a910:	d1e4      	bne.n	1000a8dc <metal_generic_dev_open+0x14>
		}
	}

	return -ENODEV;
1000a912:	f06f 0312 	mvn.w	r3, #18
}
1000a916:	4618      	mov	r0, r3
1000a918:	3718      	adds	r7, #24
1000a91a:	46bd      	mov	sp, r7
1000a91c:	bd80      	pop	{r7, pc}
1000a91e:	bf00      	nop
1000a920:	10021698 	.word	0x10021698
1000a924:	100216b0 	.word	0x100216b0

1000a928 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
1000a928:	b580      	push	{r7, lr}
1000a92a:	b086      	sub	sp, #24
1000a92c:	af00      	add	r7, sp, #0
1000a92e:	60f8      	str	r0, [r7, #12]
1000a930:	60b9      	str	r1, [r7, #8]
1000a932:	607a      	str	r2, [r7, #4]
1000a934:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
1000a936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000a938:	683b      	ldr	r3, [r7, #0]
1000a93a:	429a      	cmp	r2, r3
1000a93c:	d009      	beq.n	1000a952 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
1000a93e:	6a3a      	ldr	r2, [r7, #32]
1000a940:	4613      	mov	r3, r2
1000a942:	005b      	lsls	r3, r3, #1
1000a944:	4413      	add	r3, r2
1000a946:	009b      	lsls	r3, r3, #2
1000a948:	461a      	mov	r2, r3
1000a94a:	6839      	ldr	r1, [r7, #0]
1000a94c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
1000a94e:	f003 fada 	bl	1000df06 <memcpy>
	for (i = 0; i < nents_in; i++) {
1000a952:	2300      	movs	r3, #0
1000a954:	617b      	str	r3, [r7, #20]
1000a956:	e02f      	b.n	1000a9b8 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
1000a958:	687b      	ldr	r3, [r7, #4]
1000a95a:	2b02      	cmp	r3, #2
1000a95c:	d114      	bne.n	1000a988 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
1000a95e:	697a      	ldr	r2, [r7, #20]
1000a960:	4613      	mov	r3, r2
1000a962:	005b      	lsls	r3, r3, #1
1000a964:	4413      	add	r3, r2
1000a966:	009b      	lsls	r3, r3, #2
1000a968:	461a      	mov	r2, r3
1000a96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000a96c:	4413      	add	r3, r2
1000a96e:	6818      	ldr	r0, [r3, #0]
1000a970:	697a      	ldr	r2, [r7, #20]
1000a972:	4613      	mov	r3, r2
1000a974:	005b      	lsls	r3, r3, #1
1000a976:	4413      	add	r3, r2
1000a978:	009b      	lsls	r3, r3, #2
1000a97a:	461a      	mov	r2, r3
1000a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000a97e:	4413      	add	r3, r2
1000a980:	689b      	ldr	r3, [r3, #8]
1000a982:	4619      	mov	r1, r3
1000a984:	f7ff feaf 	bl	1000a6e6 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
1000a988:	697a      	ldr	r2, [r7, #20]
1000a98a:	4613      	mov	r3, r2
1000a98c:	005b      	lsls	r3, r3, #1
1000a98e:	4413      	add	r3, r2
1000a990:	009b      	lsls	r3, r3, #2
1000a992:	461a      	mov	r2, r3
1000a994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000a996:	4413      	add	r3, r2
1000a998:	6818      	ldr	r0, [r3, #0]
1000a99a:	697a      	ldr	r2, [r7, #20]
1000a99c:	4613      	mov	r3, r2
1000a99e:	005b      	lsls	r3, r3, #1
1000a9a0:	4413      	add	r3, r2
1000a9a2:	009b      	lsls	r3, r3, #2
1000a9a4:	461a      	mov	r2, r3
1000a9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000a9a8:	4413      	add	r3, r2
1000a9aa:	689b      	ldr	r3, [r3, #8]
1000a9ac:	4619      	mov	r1, r3
1000a9ae:	f7ff fea7 	bl	1000a700 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
1000a9b2:	697b      	ldr	r3, [r7, #20]
1000a9b4:	3301      	adds	r3, #1
1000a9b6:	617b      	str	r3, [r7, #20]
1000a9b8:	697a      	ldr	r2, [r7, #20]
1000a9ba:	6a3b      	ldr	r3, [r7, #32]
1000a9bc:	429a      	cmp	r2, r3
1000a9be:	dbcb      	blt.n	1000a958 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
1000a9c0:	6a3b      	ldr	r3, [r7, #32]
}
1000a9c2:	4618      	mov	r0, r3
1000a9c4:	3718      	adds	r7, #24
1000a9c6:	46bd      	mov	sp, r7
1000a9c8:	bd80      	pop	{r7, pc}

1000a9ca <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
1000a9ca:	b580      	push	{r7, lr}
1000a9cc:	b086      	sub	sp, #24
1000a9ce:	af00      	add	r7, sp, #0
1000a9d0:	60f8      	str	r0, [r7, #12]
1000a9d2:	60b9      	str	r1, [r7, #8]
1000a9d4:	607a      	str	r2, [r7, #4]
1000a9d6:	603b      	str	r3, [r7, #0]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
1000a9d8:	2300      	movs	r3, #0
1000a9da:	617b      	str	r3, [r7, #20]
1000a9dc:	e017      	b.n	1000aa0e <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
1000a9de:	697a      	ldr	r2, [r7, #20]
1000a9e0:	4613      	mov	r3, r2
1000a9e2:	005b      	lsls	r3, r3, #1
1000a9e4:	4413      	add	r3, r2
1000a9e6:	009b      	lsls	r3, r3, #2
1000a9e8:	461a      	mov	r2, r3
1000a9ea:	683b      	ldr	r3, [r7, #0]
1000a9ec:	4413      	add	r3, r2
1000a9ee:	6818      	ldr	r0, [r3, #0]
1000a9f0:	697a      	ldr	r2, [r7, #20]
1000a9f2:	4613      	mov	r3, r2
1000a9f4:	005b      	lsls	r3, r3, #1
1000a9f6:	4413      	add	r3, r2
1000a9f8:	009b      	lsls	r3, r3, #2
1000a9fa:	461a      	mov	r2, r3
1000a9fc:	683b      	ldr	r3, [r7, #0]
1000a9fe:	4413      	add	r3, r2
1000aa00:	689b      	ldr	r3, [r3, #8]
1000aa02:	4619      	mov	r1, r3
1000aa04:	f7ff fe7c 	bl	1000a700 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
1000aa08:	697b      	ldr	r3, [r7, #20]
1000aa0a:	3301      	adds	r3, #1
1000aa0c:	617b      	str	r3, [r7, #20]
1000aa0e:	697a      	ldr	r2, [r7, #20]
1000aa10:	6a3b      	ldr	r3, [r7, #32]
1000aa12:	429a      	cmp	r2, r3
1000aa14:	dbe3      	blt.n	1000a9de <metal_generic_dev_dma_unmap+0x14>
	}
}
1000aa16:	bf00      	nop
1000aa18:	bf00      	nop
1000aa1a:	3718      	adds	r7, #24
1000aa1c:	46bd      	mov	sp, r7
1000aa1e:	bd80      	pop	{r7, pc}

1000aa20 <metal_list_init>:
{
1000aa20:	b480      	push	{r7}
1000aa22:	b083      	sub	sp, #12
1000aa24:	af00      	add	r7, sp, #0
1000aa26:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000aa28:	687b      	ldr	r3, [r7, #4]
1000aa2a:	687a      	ldr	r2, [r7, #4]
1000aa2c:	605a      	str	r2, [r3, #4]
	list->next = list;
1000aa2e:	687b      	ldr	r3, [r7, #4]
1000aa30:	687a      	ldr	r2, [r7, #4]
1000aa32:	601a      	str	r2, [r3, #0]
}
1000aa34:	bf00      	nop
1000aa36:	370c      	adds	r7, #12
1000aa38:	46bd      	mov	sp, r7
1000aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aa3e:	4770      	bx	lr

1000aa40 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
1000aa40:	b580      	push	{r7, lr}
1000aa42:	b084      	sub	sp, #16
1000aa44:	af00      	add	r7, sp, #0
1000aa46:	6078      	str	r0, [r7, #4]
	int error = 0;
1000aa48:	2300      	movs	r3, #0
1000aa4a:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
1000aa4c:	2220      	movs	r2, #32
1000aa4e:	2100      	movs	r1, #0
1000aa50:	4810      	ldr	r0, [pc, #64]	@ (1000aa94 <metal_init+0x54>)
1000aa52:	f003 f9a4 	bl	1000dd9e <memset>

	_metal.common.log_handler   = params->log_handler;
1000aa56:	687b      	ldr	r3, [r7, #4]
1000aa58:	681b      	ldr	r3, [r3, #0]
1000aa5a:	4a0e      	ldr	r2, [pc, #56]	@ (1000aa94 <metal_init+0x54>)
1000aa5c:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
1000aa5e:	687b      	ldr	r3, [r7, #4]
1000aa60:	791a      	ldrb	r2, [r3, #4]
1000aa62:	4b0c      	ldr	r3, [pc, #48]	@ (1000aa94 <metal_init+0x54>)
1000aa64:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
1000aa66:	480c      	ldr	r0, [pc, #48]	@ (1000aa98 <metal_init+0x58>)
1000aa68:	f7ff ffda 	bl	1000aa20 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
1000aa6c:	480b      	ldr	r0, [pc, #44]	@ (1000aa9c <metal_init+0x5c>)
1000aa6e:	f7ff ffd7 	bl	1000aa20 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
1000aa72:	480b      	ldr	r0, [pc, #44]	@ (1000aaa0 <metal_init+0x60>)
1000aa74:	f7ff ffd4 	bl	1000aa20 <metal_list_init>

	error = metal_sys_init(params);
1000aa78:	6878      	ldr	r0, [r7, #4]
1000aa7a:	f000 f999 	bl	1000adb0 <metal_sys_init>
1000aa7e:	60f8      	str	r0, [r7, #12]
	if (error)
1000aa80:	68fb      	ldr	r3, [r7, #12]
1000aa82:	2b00      	cmp	r3, #0
1000aa84:	d001      	beq.n	1000aa8a <metal_init+0x4a>
		return error;
1000aa86:	68fb      	ldr	r3, [r7, #12]
1000aa88:	e000      	b.n	1000aa8c <metal_init+0x4c>

	return error;
1000aa8a:	68fb      	ldr	r3, [r7, #12]
}
1000aa8c:	4618      	mov	r0, r3
1000aa8e:	3710      	adds	r7, #16
1000aa90:	46bd      	mov	sp, r7
1000aa92:	bd80      	pop	{r7, pc}
1000aa94:	10021698 	.word	0x10021698
1000aa98:	100216a0 	.word	0x100216a0
1000aa9c:	100216a8 	.word	0x100216a8
1000aaa0:	100216b0 	.word	0x100216b0

1000aaa4 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
1000aaa4:	b480      	push	{r7}
1000aaa6:	b083      	sub	sp, #12
1000aaa8:	af00      	add	r7, sp, #0
1000aaaa:	6078      	str	r0, [r7, #4]
1000aaac:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000aaae:	687b      	ldr	r3, [r7, #4]
1000aab0:	681b      	ldr	r3, [r3, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
1000aab2:	f1b3 3fff 	cmp.w	r3, #4294967295
1000aab6:	d00a      	beq.n	1000aace <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000aab8:	687b      	ldr	r3, [r7, #4]
1000aaba:	689b      	ldr	r3, [r3, #8]
1000aabc:	683a      	ldr	r2, [r7, #0]
1000aabe:	429a      	cmp	r2, r3
1000aac0:	d205      	bcs.n	1000aace <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000aac2:	687b      	ldr	r3, [r7, #4]
1000aac4:	681b      	ldr	r3, [r3, #0]
1000aac6:	461a      	mov	r2, r3
1000aac8:	683b      	ldr	r3, [r7, #0]
1000aaca:	4413      	add	r3, r2
		: NULL);
1000aacc:	e000      	b.n	1000aad0 <metal_io_virt+0x2c>
1000aace:	2300      	movs	r3, #0
}
1000aad0:	4618      	mov	r0, r3
1000aad2:	370c      	adds	r7, #12
1000aad4:	46bd      	mov	sp, r7
1000aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aada:	4770      	bx	lr

1000aadc <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
1000aadc:	b5b0      	push	{r4, r5, r7, lr}
1000aade:	b08c      	sub	sp, #48	@ 0x30
1000aae0:	af00      	add	r7, sp, #0
1000aae2:	60f8      	str	r0, [r7, #12]
1000aae4:	60b9      	str	r1, [r7, #8]
1000aae6:	607a      	str	r2, [r7, #4]
1000aae8:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {
1000aaea:	f107 0310 	add.w	r3, r7, #16
1000aaee:	2220      	movs	r2, #32
1000aaf0:	2100      	movs	r1, #0
1000aaf2:	4618      	mov	r0, r3
1000aaf4:	f003 f953 	bl	1000dd9e <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
1000aaf8:	68fb      	ldr	r3, [r7, #12]
1000aafa:	68ba      	ldr	r2, [r7, #8]
1000aafc:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
1000aafe:	68fb      	ldr	r3, [r7, #12]
1000ab00:	687a      	ldr	r2, [r7, #4]
1000ab02:	605a      	str	r2, [r3, #4]
	io->size = size;
1000ab04:	68fb      	ldr	r3, [r7, #12]
1000ab06:	683a      	ldr	r2, [r7, #0]
1000ab08:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
1000ab0a:	68fb      	ldr	r3, [r7, #12]
1000ab0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1000ab0e:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
1000ab10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000ab12:	2b1f      	cmp	r3, #31
1000ab14:	d904      	bls.n	1000ab20 <metal_io_init+0x44>
		/* avoid overflow */
		io->page_mask = -1UL;
1000ab16:	68fb      	ldr	r3, [r7, #12]
1000ab18:	f04f 32ff 	mov.w	r2, #4294967295
1000ab1c:	611a      	str	r2, [r3, #16]
1000ab1e:	e006      	b.n	1000ab2e <metal_io_init+0x52>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
1000ab20:	2201      	movs	r2, #1
1000ab22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000ab24:	fa02 f303 	lsl.w	r3, r2, r3
1000ab28:	1e5a      	subs	r2, r3, #1
1000ab2a:	68fb      	ldr	r3, [r7, #12]
1000ab2c:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
1000ab2e:	68fb      	ldr	r3, [r7, #12]
1000ab30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1000ab32:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
1000ab34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1000ab36:	2b00      	cmp	r3, #0
1000ab38:	d00b      	beq.n	1000ab52 <metal_io_init+0x76>
1000ab3a:	68fb      	ldr	r3, [r7, #12]
1000ab3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1000ab3e:	f103 0418 	add.w	r4, r3, #24
1000ab42:	4615      	mov	r5, r2
1000ab44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000ab46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000ab48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000ab4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1000ab50:	e00a      	b.n	1000ab68 <metal_io_init+0x8c>
1000ab52:	68fb      	ldr	r3, [r7, #12]
1000ab54:	f103 0418 	add.w	r4, r3, #24
1000ab58:	f107 0510 	add.w	r5, r7, #16
1000ab5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1000ab5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1000ab60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1000ab64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
1000ab68:	68f8      	ldr	r0, [r7, #12]
1000ab6a:	f000 f92f 	bl	1000adcc <metal_sys_io_mem_map>
}
1000ab6e:	bf00      	nop
1000ab70:	3730      	adds	r7, #48	@ 0x30
1000ab72:	46bd      	mov	sp, r7
1000ab74:	bdb0      	pop	{r4, r5, r7, pc}

1000ab76 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
1000ab76:	b590      	push	{r4, r7, lr}
1000ab78:	b08b      	sub	sp, #44	@ 0x2c
1000ab7a:	af02      	add	r7, sp, #8
1000ab7c:	60f8      	str	r0, [r7, #12]
1000ab7e:	60b9      	str	r1, [r7, #8]
1000ab80:	607a      	str	r2, [r7, #4]
1000ab82:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000ab84:	68b9      	ldr	r1, [r7, #8]
1000ab86:	68f8      	ldr	r0, [r7, #12]
1000ab88:	f7ff ff8c 	bl	1000aaa4 <metal_io_virt>
1000ab8c:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
1000ab8e:	687b      	ldr	r3, [r7, #4]
1000ab90:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000ab92:	69fb      	ldr	r3, [r7, #28]
1000ab94:	2b00      	cmp	r3, #0
1000ab96:	d102      	bne.n	1000ab9e <metal_io_block_read+0x28>
		return -ERANGE;
1000ab98:	f06f 0321 	mvn.w	r3, #33	@ 0x21
1000ab9c:	e05c      	b.n	1000ac58 <metal_io_block_read+0xe2>
	if ((offset + len) > io->size)
1000ab9e:	683a      	ldr	r2, [r7, #0]
1000aba0:	68bb      	ldr	r3, [r7, #8]
1000aba2:	441a      	add	r2, r3
1000aba4:	68fb      	ldr	r3, [r7, #12]
1000aba6:	689b      	ldr	r3, [r3, #8]
1000aba8:	429a      	cmp	r2, r3
1000abaa:	d904      	bls.n	1000abb6 <metal_io_block_read+0x40>
		len = io->size - offset;
1000abac:	68fb      	ldr	r3, [r7, #12]
1000abae:	689a      	ldr	r2, [r3, #8]
1000abb0:	68bb      	ldr	r3, [r7, #8]
1000abb2:	1ad3      	subs	r3, r2, r3
1000abb4:	603b      	str	r3, [r7, #0]
	retlen = len;
1000abb6:	683b      	ldr	r3, [r7, #0]
1000abb8:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
1000abba:	68fb      	ldr	r3, [r7, #12]
1000abbc:	6a1b      	ldr	r3, [r3, #32]
1000abbe:	2b00      	cmp	r3, #0
1000abc0:	d00a      	beq.n	1000abd8 <metal_io_block_read+0x62>
		retlen = (*io->ops.block_read)(
1000abc2:	68fb      	ldr	r3, [r7, #12]
1000abc4:	6a1c      	ldr	r4, [r3, #32]
1000abc6:	683b      	ldr	r3, [r7, #0]
1000abc8:	9300      	str	r3, [sp, #0]
1000abca:	2305      	movs	r3, #5
1000abcc:	687a      	ldr	r2, [r7, #4]
1000abce:	68b9      	ldr	r1, [r7, #8]
1000abd0:	68f8      	ldr	r0, [r7, #12]
1000abd2:	47a0      	blx	r4
1000abd4:	6178      	str	r0, [r7, #20]
1000abd6:	e03e      	b.n	1000ac56 <metal_io_block_read+0xe0>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
1000abd8:	f3bf 8f5b 	dmb	ish
		while ( len && (
1000abdc:	e00c      	b.n	1000abf8 <metal_io_block_read+0x82>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000abde:	69fb      	ldr	r3, [r7, #28]
1000abe0:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000abe2:	69bb      	ldr	r3, [r7, #24]
1000abe4:	701a      	strb	r2, [r3, #0]
			dest++;
1000abe6:	69bb      	ldr	r3, [r7, #24]
1000abe8:	3301      	adds	r3, #1
1000abea:	61bb      	str	r3, [r7, #24]
			ptr++;
1000abec:	69fb      	ldr	r3, [r7, #28]
1000abee:	3301      	adds	r3, #1
1000abf0:	61fb      	str	r3, [r7, #28]
			len--;
1000abf2:	683b      	ldr	r3, [r7, #0]
1000abf4:	3b01      	subs	r3, #1
1000abf6:	603b      	str	r3, [r7, #0]
		while ( len && (
1000abf8:	683b      	ldr	r3, [r7, #0]
1000abfa:	2b00      	cmp	r3, #0
1000abfc:	d017      	beq.n	1000ac2e <metal_io_block_read+0xb8>
			((uintptr_t)dest % sizeof(int)) ||
1000abfe:	69bb      	ldr	r3, [r7, #24]
1000ac00:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000ac04:	2b00      	cmp	r3, #0
1000ac06:	d1ea      	bne.n	1000abde <metal_io_block_read+0x68>
			((uintptr_t)ptr % sizeof(int)))) {
1000ac08:	69fb      	ldr	r3, [r7, #28]
1000ac0a:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
1000ac0e:	2b00      	cmp	r3, #0
1000ac10:	d1e5      	bne.n	1000abde <metal_io_block_read+0x68>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000ac12:	e00c      	b.n	1000ac2e <metal_io_block_read+0xb8>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
1000ac14:	69fb      	ldr	r3, [r7, #28]
1000ac16:	681a      	ldr	r2, [r3, #0]
1000ac18:	69bb      	ldr	r3, [r7, #24]
1000ac1a:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000ac1c:	69bb      	ldr	r3, [r7, #24]
1000ac1e:	3304      	adds	r3, #4
1000ac20:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
1000ac22:	69fb      	ldr	r3, [r7, #28]
1000ac24:	3304      	adds	r3, #4
1000ac26:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
1000ac28:	683b      	ldr	r3, [r7, #0]
1000ac2a:	3b04      	subs	r3, #4
1000ac2c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
1000ac2e:	683b      	ldr	r3, [r7, #0]
1000ac30:	2b03      	cmp	r3, #3
1000ac32:	dcef      	bgt.n	1000ac14 <metal_io_block_read+0x9e>
		for (; len != 0; dest++, ptr++, len--)
1000ac34:	e00c      	b.n	1000ac50 <metal_io_block_read+0xda>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
1000ac36:	69fb      	ldr	r3, [r7, #28]
1000ac38:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
1000ac3a:	69bb      	ldr	r3, [r7, #24]
1000ac3c:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
1000ac3e:	69bb      	ldr	r3, [r7, #24]
1000ac40:	3301      	adds	r3, #1
1000ac42:	61bb      	str	r3, [r7, #24]
1000ac44:	69fb      	ldr	r3, [r7, #28]
1000ac46:	3301      	adds	r3, #1
1000ac48:	61fb      	str	r3, [r7, #28]
1000ac4a:	683b      	ldr	r3, [r7, #0]
1000ac4c:	3b01      	subs	r3, #1
1000ac4e:	603b      	str	r3, [r7, #0]
1000ac50:	683b      	ldr	r3, [r7, #0]
1000ac52:	2b00      	cmp	r3, #0
1000ac54:	d1ef      	bne.n	1000ac36 <metal_io_block_read+0xc0>
	}
	return retlen;
1000ac56:	697b      	ldr	r3, [r7, #20]
}
1000ac58:	4618      	mov	r0, r3
1000ac5a:	3724      	adds	r7, #36	@ 0x24
1000ac5c:	46bd      	mov	sp, r7
1000ac5e:	bd90      	pop	{r4, r7, pc}

1000ac60 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
1000ac60:	b590      	push	{r4, r7, lr}
1000ac62:	b08b      	sub	sp, #44	@ 0x2c
1000ac64:	af02      	add	r7, sp, #8
1000ac66:	60f8      	str	r0, [r7, #12]
1000ac68:	60b9      	str	r1, [r7, #8]
1000ac6a:	607a      	str	r2, [r7, #4]
1000ac6c:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
1000ac6e:	68b9      	ldr	r1, [r7, #8]
1000ac70:	68f8      	ldr	r0, [r7, #12]
1000ac72:	f7ff ff17 	bl	1000aaa4 <metal_io_virt>
1000ac76:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
1000ac78:	687b      	ldr	r3, [r7, #4]
1000ac7a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (!ptr)
1000ac7c:	69fb      	ldr	r3, [r7, #28]
1000ac7e:	2b00      	cmp	r3, #0
1000ac80:	d102      	bne.n	1000ac88 <metal_io_block_write+0x28>
		return -ERANGE;
1000ac82:	f06f 0321 	mvn.w	r3, #33	@ 0x21
1000ac86:	e05b      	b.n	1000ad40 <metal_io_block_write+0xe0>
	if ((offset + len) > io->size)
1000ac88:	683a      	ldr	r2, [r7, #0]
1000ac8a:	68bb      	ldr	r3, [r7, #8]
1000ac8c:	441a      	add	r2, r3
1000ac8e:	68fb      	ldr	r3, [r7, #12]
1000ac90:	689b      	ldr	r3, [r3, #8]
1000ac92:	429a      	cmp	r2, r3
1000ac94:	d904      	bls.n	1000aca0 <metal_io_block_write+0x40>
		len = io->size - offset;
1000ac96:	68fb      	ldr	r3, [r7, #12]
1000ac98:	689a      	ldr	r2, [r3, #8]
1000ac9a:	68bb      	ldr	r3, [r7, #8]
1000ac9c:	1ad3      	subs	r3, r2, r3
1000ac9e:	603b      	str	r3, [r7, #0]
	retlen = len;
1000aca0:	683b      	ldr	r3, [r7, #0]
1000aca2:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
1000aca4:	68fb      	ldr	r3, [r7, #12]
1000aca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000aca8:	2b00      	cmp	r3, #0
1000acaa:	d017      	beq.n	1000acdc <metal_io_block_write+0x7c>
		retlen = (*io->ops.block_write)(
1000acac:	68fb      	ldr	r3, [r7, #12]
1000acae:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
1000acb0:	683b      	ldr	r3, [r7, #0]
1000acb2:	9300      	str	r3, [sp, #0]
1000acb4:	2305      	movs	r3, #5
1000acb6:	687a      	ldr	r2, [r7, #4]
1000acb8:	68b9      	ldr	r1, [r7, #8]
1000acba:	68f8      	ldr	r0, [r7, #12]
1000acbc:	47a0      	blx	r4
1000acbe:	6178      	str	r0, [r7, #20]
1000acc0:	e03d      	b.n	1000ad3e <metal_io_block_write+0xde>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000acc2:	69bb      	ldr	r3, [r7, #24]
1000acc4:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000acc6:	69fb      	ldr	r3, [r7, #28]
1000acc8:	701a      	strb	r2, [r3, #0]
			ptr++;
1000acca:	69fb      	ldr	r3, [r7, #28]
1000accc:	3301      	adds	r3, #1
1000acce:	61fb      	str	r3, [r7, #28]
			source++;
1000acd0:	69bb      	ldr	r3, [r7, #24]
1000acd2:	3301      	adds	r3, #1
1000acd4:	61bb      	str	r3, [r7, #24]
			len--;
1000acd6:	683b      	ldr	r3, [r7, #0]
1000acd8:	3b01      	subs	r3, #1
1000acda:	603b      	str	r3, [r7, #0]
		while ( len && (
1000acdc:	683b      	ldr	r3, [r7, #0]
1000acde:	2b00      	cmp	r3, #0
1000ace0:	d017      	beq.n	1000ad12 <metal_io_block_write+0xb2>
			((uintptr_t)ptr % sizeof(int)) ||
1000ace2:	69fb      	ldr	r3, [r7, #28]
1000ace4:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
1000ace8:	2b00      	cmp	r3, #0
1000acea:	d1ea      	bne.n	1000acc2 <metal_io_block_write+0x62>
			((uintptr_t)source % sizeof(int)))) {
1000acec:	69bb      	ldr	r3, [r7, #24]
1000acee:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
1000acf2:	2b00      	cmp	r3, #0
1000acf4:	d1e5      	bne.n	1000acc2 <metal_io_block_write+0x62>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000acf6:	e00c      	b.n	1000ad12 <metal_io_block_write+0xb2>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
1000acf8:	69bb      	ldr	r3, [r7, #24]
1000acfa:	681a      	ldr	r2, [r3, #0]
1000acfc:	69fb      	ldr	r3, [r7, #28]
1000acfe:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000ad00:	69fb      	ldr	r3, [r7, #28]
1000ad02:	3304      	adds	r3, #4
1000ad04:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
1000ad06:	69bb      	ldr	r3, [r7, #24]
1000ad08:	3304      	adds	r3, #4
1000ad0a:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
1000ad0c:	683b      	ldr	r3, [r7, #0]
1000ad0e:	3b04      	subs	r3, #4
1000ad10:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
1000ad12:	683b      	ldr	r3, [r7, #0]
1000ad14:	2b03      	cmp	r3, #3
1000ad16:	dcef      	bgt.n	1000acf8 <metal_io_block_write+0x98>
		for (; len != 0; ptr++, source++, len--)
1000ad18:	e00c      	b.n	1000ad34 <metal_io_block_write+0xd4>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
1000ad1a:	69bb      	ldr	r3, [r7, #24]
1000ad1c:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
1000ad1e:	69fb      	ldr	r3, [r7, #28]
1000ad20:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
1000ad22:	69fb      	ldr	r3, [r7, #28]
1000ad24:	3301      	adds	r3, #1
1000ad26:	61fb      	str	r3, [r7, #28]
1000ad28:	69bb      	ldr	r3, [r7, #24]
1000ad2a:	3301      	adds	r3, #1
1000ad2c:	61bb      	str	r3, [r7, #24]
1000ad2e:	683b      	ldr	r3, [r7, #0]
1000ad30:	3b01      	subs	r3, #1
1000ad32:	603b      	str	r3, [r7, #0]
1000ad34:	683b      	ldr	r3, [r7, #0]
1000ad36:	2b00      	cmp	r3, #0
1000ad38:	d1ef      	bne.n	1000ad1a <metal_io_block_write+0xba>
		atomic_thread_fence(memory_order_seq_cst);
1000ad3a:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
1000ad3e:	697b      	ldr	r3, [r7, #20]
}
1000ad40:	4618      	mov	r0, r3
1000ad42:	3724      	adds	r7, #36	@ 0x24
1000ad44:	46bd      	mov	sp, r7
1000ad46:	bd90      	pop	{r4, r7, pc}

1000ad48 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
1000ad48:	b40e      	push	{r1, r2, r3}
1000ad4a:	b480      	push	{r7}
1000ad4c:	b082      	sub	sp, #8
1000ad4e:	af00      	add	r7, sp, #0
1000ad50:	4603      	mov	r3, r0
1000ad52:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
1000ad54:	bf00      	nop
1000ad56:	3708      	adds	r7, #8
1000ad58:	46bd      	mov	sp, r7
1000ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ad5e:	b003      	add	sp, #12
1000ad60:	4770      	bx	lr

1000ad62 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
1000ad62:	b580      	push	{r7, lr}
1000ad64:	b084      	sub	sp, #16
1000ad66:	af00      	add	r7, sp, #0
1000ad68:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
1000ad6a:	2300      	movs	r3, #0
1000ad6c:	60fb      	str	r3, [r7, #12]
1000ad6e:	e013      	b.n	1000ad98 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
1000ad70:	68fa      	ldr	r2, [r7, #12]
1000ad72:	4613      	mov	r3, r2
1000ad74:	00db      	lsls	r3, r3, #3
1000ad76:	1a9b      	subs	r3, r3, r2
1000ad78:	00db      	lsls	r3, r3, #3
1000ad7a:	3308      	adds	r3, #8
1000ad7c:	687a      	ldr	r2, [r7, #4]
1000ad7e:	4413      	add	r3, r2
1000ad80:	3304      	adds	r3, #4
1000ad82:	60bb      	str	r3, [r7, #8]
		if (!io->size)
1000ad84:	68bb      	ldr	r3, [r7, #8]
1000ad86:	689b      	ldr	r3, [r3, #8]
1000ad88:	2b00      	cmp	r3, #0
1000ad8a:	d00b      	beq.n	1000ada4 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
1000ad8c:	68b8      	ldr	r0, [r7, #8]
1000ad8e:	f000 f81d 	bl	1000adcc <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
1000ad92:	68fb      	ldr	r3, [r7, #12]
1000ad94:	3301      	adds	r3, #1
1000ad96:	60fb      	str	r3, [r7, #12]
1000ad98:	687b      	ldr	r3, [r7, #4]
1000ad9a:	689b      	ldr	r3, [r3, #8]
1000ad9c:	68fa      	ldr	r2, [r7, #12]
1000ad9e:	429a      	cmp	r2, r3
1000ada0:	d3e6      	bcc.n	1000ad70 <metal_generic_dev_sys_open+0xe>
1000ada2:	e000      	b.n	1000ada6 <metal_generic_dev_sys_open+0x44>
			break;
1000ada4:	bf00      	nop
	}

	return 0;
1000ada6:	2300      	movs	r3, #0
}
1000ada8:	4618      	mov	r0, r3
1000adaa:	3710      	adds	r7, #16
1000adac:	46bd      	mov	sp, r7
1000adae:	bd80      	pop	{r7, pc}

1000adb0 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
1000adb0:	b580      	push	{r7, lr}
1000adb2:	b082      	sub	sp, #8
1000adb4:	af00      	add	r7, sp, #0
1000adb6:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
1000adb8:	4803      	ldr	r0, [pc, #12]	@ (1000adc8 <metal_sys_init+0x18>)
1000adba:	f7ff fcaf 	bl	1000a71c <metal_bus_register>
	return 0;
1000adbe:	2300      	movs	r3, #0
}
1000adc0:	4618      	mov	r0, r3
1000adc2:	3708      	adds	r7, #8
1000adc4:	46bd      	mov	sp, r7
1000adc6:	bd80      	pop	{r7, pc}
1000adc8:	100200a8 	.word	0x100200a8

1000adcc <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
1000adcc:	b580      	push	{r7, lr}
1000adce:	b086      	sub	sp, #24
1000add0:	af00      	add	r7, sp, #0
1000add2:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
1000add4:	687b      	ldr	r3, [r7, #4]
1000add6:	681b      	ldr	r3, [r3, #0]
1000add8:	60fb      	str	r3, [r7, #12]
	psize = (size_t)io->size;
1000adda:	687b      	ldr	r3, [r7, #4]
1000addc:	689b      	ldr	r3, [r3, #8]
1000adde:	613b      	str	r3, [r7, #16]
	if (psize) {
1000ade0:	693b      	ldr	r3, [r7, #16]
1000ade2:	2b00      	cmp	r3, #0
1000ade4:	d02c      	beq.n	1000ae40 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
1000ade6:	687b      	ldr	r3, [r7, #4]
1000ade8:	68db      	ldr	r3, [r3, #12]
1000adea:	693a      	ldr	r2, [r7, #16]
1000adec:	fa22 f303 	lsr.w	r3, r2, r3
1000adf0:	2b00      	cmp	r3, #0
1000adf2:	d005      	beq.n	1000ae00 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
1000adf4:	687b      	ldr	r3, [r7, #4]
1000adf6:	68db      	ldr	r3, [r3, #12]
1000adf8:	2201      	movs	r2, #1
1000adfa:	fa02 f303 	lsl.w	r3, r2, r3
1000adfe:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000ae00:	2300      	movs	r3, #0
1000ae02:	617b      	str	r3, [r7, #20]
1000ae04:	e013      	b.n	1000ae2e <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
1000ae06:	687b      	ldr	r3, [r7, #4]
1000ae08:	685a      	ldr	r2, [r3, #4]
1000ae0a:	697b      	ldr	r3, [r7, #20]
1000ae0c:	009b      	lsls	r3, r3, #2
1000ae0e:	4413      	add	r3, r2
1000ae10:	6819      	ldr	r1, [r3, #0]
1000ae12:	687b      	ldr	r3, [r7, #4]
1000ae14:	695b      	ldr	r3, [r3, #20]
1000ae16:	693a      	ldr	r2, [r7, #16]
1000ae18:	68f8      	ldr	r0, [r7, #12]
1000ae1a:	f000 f82b 	bl	1000ae74 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
1000ae1e:	693b      	ldr	r3, [r7, #16]
1000ae20:	009b      	lsls	r3, r3, #2
1000ae22:	68fa      	ldr	r2, [r7, #12]
1000ae24:	4413      	add	r3, r2
1000ae26:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
1000ae28:	697b      	ldr	r3, [r7, #20]
1000ae2a:	3301      	adds	r3, #1
1000ae2c:	617b      	str	r3, [r7, #20]
1000ae2e:	687b      	ldr	r3, [r7, #4]
1000ae30:	689a      	ldr	r2, [r3, #8]
1000ae32:	687b      	ldr	r3, [r7, #4]
1000ae34:	68db      	ldr	r3, [r3, #12]
1000ae36:	fa22 f303 	lsr.w	r3, r2, r3
1000ae3a:	697a      	ldr	r2, [r7, #20]
1000ae3c:	429a      	cmp	r2, r3
1000ae3e:	d9e2      	bls.n	1000ae06 <metal_sys_io_mem_map+0x3a>
		}
	}
}
1000ae40:	bf00      	nop
1000ae42:	3718      	adds	r7, #24
1000ae44:	46bd      	mov	sp, r7
1000ae46:	bd80      	pop	{r7, pc}

1000ae48 <metal_machine_cache_flush>:

	/* Add implementation here */
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
1000ae48:	b480      	push	{r7}
1000ae4a:	b083      	sub	sp, #12
1000ae4c:	af00      	add	r7, sp, #0
1000ae4e:	6078      	str	r0, [r7, #4]
1000ae50:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000ae52:	bf00      	nop
1000ae54:	370c      	adds	r7, #12
1000ae56:	46bd      	mov	sp, r7
1000ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ae5c:	4770      	bx	lr

1000ae5e <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
1000ae5e:	b480      	push	{r7}
1000ae60:	b083      	sub	sp, #12
1000ae62:	af00      	add	r7, sp, #0
1000ae64:	6078      	str	r0, [r7, #4]
1000ae66:	6039      	str	r1, [r7, #0]
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
1000ae68:	bf00      	nop
1000ae6a:	370c      	adds	r7, #12
1000ae6c:	46bd      	mov	sp, r7
1000ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ae72:	4770      	bx	lr

1000ae74 <metal_machine_io_mem_map>:
	/* Add implementation here */
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
1000ae74:	b480      	push	{r7}
1000ae76:	b085      	sub	sp, #20
1000ae78:	af00      	add	r7, sp, #0
1000ae7a:	60f8      	str	r0, [r7, #12]
1000ae7c:	60b9      	str	r1, [r7, #8]
1000ae7e:	607a      	str	r2, [r7, #4]
1000ae80:	603b      	str	r3, [r7, #0]
	metal_unused(size);
	metal_unused(flags);

	/* Add implementation here */

	return va;
1000ae82:	68fb      	ldr	r3, [r7, #12]
}
1000ae84:	4618      	mov	r0, r3
1000ae86:	3714      	adds	r7, #20
1000ae88:	46bd      	mov	sp, r7
1000ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ae8e:	4770      	bx	lr

1000ae90 <metal_io_virt>:
{
1000ae90:	b480      	push	{r7}
1000ae92:	b083      	sub	sp, #12
1000ae94:	af00      	add	r7, sp, #0
1000ae96:	6078      	str	r0, [r7, #4]
1000ae98:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000ae9a:	687b      	ldr	r3, [r7, #4]
1000ae9c:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000ae9e:	f1b3 3fff 	cmp.w	r3, #4294967295
1000aea2:	d00a      	beq.n	1000aeba <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000aea4:	687b      	ldr	r3, [r7, #4]
1000aea6:	689b      	ldr	r3, [r3, #8]
1000aea8:	683a      	ldr	r2, [r7, #0]
1000aeaa:	429a      	cmp	r2, r3
1000aeac:	d205      	bcs.n	1000aeba <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000aeae:	687b      	ldr	r3, [r7, #4]
1000aeb0:	681b      	ldr	r3, [r3, #0]
1000aeb2:	461a      	mov	r2, r3
1000aeb4:	683b      	ldr	r3, [r7, #0]
1000aeb6:	4413      	add	r3, r2
		: NULL);
1000aeb8:	e000      	b.n	1000aebc <metal_io_virt+0x2c>
1000aeba:	2300      	movs	r3, #0
}
1000aebc:	4618      	mov	r0, r3
1000aebe:	370c      	adds	r7, #12
1000aec0:	46bd      	mov	sp, r7
1000aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aec6:	4770      	bx	lr

1000aec8 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
1000aec8:	b480      	push	{r7}
1000aeca:	b085      	sub	sp, #20
1000aecc:	af00      	add	r7, sp, #0
1000aece:	6078      	str	r0, [r7, #4]
1000aed0:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000aed2:	683b      	ldr	r3, [r7, #0]
1000aed4:	687a      	ldr	r2, [r7, #4]
1000aed6:	6812      	ldr	r2, [r2, #0]
1000aed8:	1a9b      	subs	r3, r3, r2
1000aeda:	60fb      	str	r3, [r7, #12]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000aedc:	687b      	ldr	r3, [r7, #4]
1000aede:	689b      	ldr	r3, [r3, #8]
1000aee0:	68fa      	ldr	r2, [r7, #12]
1000aee2:	429a      	cmp	r2, r3
1000aee4:	d201      	bcs.n	1000aeea <metal_io_virt_to_offset+0x22>
1000aee6:	68fb      	ldr	r3, [r7, #12]
1000aee8:	e001      	b.n	1000aeee <metal_io_virt_to_offset+0x26>
1000aeea:	f04f 33ff 	mov.w	r3, #4294967295
}
1000aeee:	4618      	mov	r0, r3
1000aef0:	3714      	adds	r7, #20
1000aef2:	46bd      	mov	sp, r7
1000aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
1000aef8:	4770      	bx	lr
	...

1000aefc <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
1000aefc:	b5b0      	push	{r4, r5, r7, lr}
1000aefe:	b08c      	sub	sp, #48	@ 0x30
1000af00:	af00      	add	r7, sp, #0
1000af02:	60f8      	str	r0, [r7, #12]
1000af04:	60b9      	str	r1, [r7, #8]
1000af06:	603b      	str	r3, [r7, #0]
1000af08:	4613      	mov	r3, r2
1000af0a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
1000af0c:	68b9      	ldr	r1, [r7, #8]
1000af0e:	68f8      	ldr	r0, [r7, #12]
1000af10:	f7ff ffbe 	bl	1000ae90 <metal_io_virt>
1000af14:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
1000af16:	68fb      	ldr	r3, [r7, #12]
1000af18:	699b      	ldr	r3, [r3, #24]
1000af1a:	2b00      	cmp	r3, #0
1000af1c:	d009      	beq.n	1000af32 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
1000af1e:	68fb      	ldr	r3, [r7, #12]
1000af20:	699c      	ldr	r4, [r3, #24]
1000af22:	79fa      	ldrb	r2, [r7, #7]
1000af24:	683b      	ldr	r3, [r7, #0]
1000af26:	68b9      	ldr	r1, [r7, #8]
1000af28:	68f8      	ldr	r0, [r7, #12]
1000af2a:	47a0      	blx	r4
1000af2c:	4604      	mov	r4, r0
1000af2e:	460d      	mov	r5, r1
1000af30:	e059      	b.n	1000afe6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
1000af32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000af34:	2b00      	cmp	r3, #0
1000af36:	d012      	beq.n	1000af5e <metal_io_read+0x62>
1000af38:	683b      	ldr	r3, [r7, #0]
1000af3a:	2b01      	cmp	r3, #1
1000af3c:	d10f      	bne.n	1000af5e <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
1000af3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000af40:	62bb      	str	r3, [r7, #40]	@ 0x28
1000af42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000af44:	f3bf 8f5b 	dmb	ish
1000af48:	781b      	ldrb	r3, [r3, #0]
1000af4a:	f3bf 8f5b 	dmb	ish
1000af4e:	b2db      	uxtb	r3, r3
1000af50:	76fb      	strb	r3, [r7, #27]
1000af52:	7efb      	ldrb	r3, [r7, #27]
1000af54:	b2db      	uxtb	r3, r3
1000af56:	2200      	movs	r2, #0
1000af58:	461c      	mov	r4, r3
1000af5a:	4615      	mov	r5, r2
1000af5c:	e043      	b.n	1000afe6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
1000af5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000af60:	2b00      	cmp	r3, #0
1000af62:	d012      	beq.n	1000af8a <metal_io_read+0x8e>
1000af64:	683b      	ldr	r3, [r7, #0]
1000af66:	2b02      	cmp	r3, #2
1000af68:	d10f      	bne.n	1000af8a <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
1000af6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000af6c:	627b      	str	r3, [r7, #36]	@ 0x24
1000af6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000af70:	f3bf 8f5b 	dmb	ish
1000af74:	881b      	ldrh	r3, [r3, #0]
1000af76:	f3bf 8f5b 	dmb	ish
1000af7a:	b29b      	uxth	r3, r3
1000af7c:	833b      	strh	r3, [r7, #24]
1000af7e:	8b3b      	ldrh	r3, [r7, #24]
1000af80:	b29b      	uxth	r3, r3
1000af82:	2200      	movs	r2, #0
1000af84:	461c      	mov	r4, r3
1000af86:	4615      	mov	r5, r2
1000af88:	e02d      	b.n	1000afe6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
1000af8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000af8c:	2b00      	cmp	r3, #0
1000af8e:	d010      	beq.n	1000afb2 <metal_io_read+0xb6>
1000af90:	683b      	ldr	r3, [r7, #0]
1000af92:	2b04      	cmp	r3, #4
1000af94:	d10d      	bne.n	1000afb2 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
1000af96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000af98:	623b      	str	r3, [r7, #32]
1000af9a:	6a3b      	ldr	r3, [r7, #32]
1000af9c:	f3bf 8f5b 	dmb	ish
1000afa0:	681b      	ldr	r3, [r3, #0]
1000afa2:	f3bf 8f5b 	dmb	ish
1000afa6:	617b      	str	r3, [r7, #20]
1000afa8:	697b      	ldr	r3, [r7, #20]
1000afaa:	2200      	movs	r2, #0
1000afac:	461c      	mov	r4, r3
1000afae:	4615      	mov	r5, r2
1000afb0:	e019      	b.n	1000afe6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
1000afb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000afb4:	2b00      	cmp	r3, #0
1000afb6:	d010      	beq.n	1000afda <metal_io_read+0xde>
1000afb8:	683b      	ldr	r3, [r7, #0]
1000afba:	2b04      	cmp	r3, #4
1000afbc:	d10d      	bne.n	1000afda <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
1000afbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000afc0:	61fb      	str	r3, [r7, #28]
1000afc2:	69fb      	ldr	r3, [r7, #28]
1000afc4:	f3bf 8f5b 	dmb	ish
1000afc8:	681b      	ldr	r3, [r3, #0]
1000afca:	f3bf 8f5b 	dmb	ish
1000afce:	613b      	str	r3, [r7, #16]
1000afd0:	693b      	ldr	r3, [r7, #16]
1000afd2:	2200      	movs	r2, #0
1000afd4:	461c      	mov	r4, r3
1000afd6:	4615      	mov	r5, r2
1000afd8:	e005      	b.n	1000afe6 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
1000afda:	4b06      	ldr	r3, [pc, #24]	@ (1000aff4 <metal_io_read+0xf8>)
1000afdc:	4a06      	ldr	r2, [pc, #24]	@ (1000aff8 <metal_io_read+0xfc>)
1000afde:	21fe      	movs	r1, #254	@ 0xfe
1000afe0:	4806      	ldr	r0, [pc, #24]	@ (1000affc <metal_io_read+0x100>)
1000afe2:	f001 fe01 	bl	1000cbe8 <__assert_func>
	return 0; /* quiet compiler */
}
1000afe6:	4622      	mov	r2, r4
1000afe8:	462b      	mov	r3, r5
1000afea:	4610      	mov	r0, r2
1000afec:	4619      	mov	r1, r3
1000afee:	3730      	adds	r7, #48	@ 0x30
1000aff0:	46bd      	mov	sp, r7
1000aff2:	bdb0      	pop	{r4, r5, r7, pc}
1000aff4:	100117c8 	.word	0x100117c8
1000aff8:	100121a8 	.word	0x100121a8
1000affc:	100117cc 	.word	0x100117cc

1000b000 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
1000b000:	b580      	push	{r7, lr}
1000b002:	b082      	sub	sp, #8
1000b004:	af00      	add	r7, sp, #0
1000b006:	6078      	str	r0, [r7, #4]
	return malloc(size);
1000b008:	6878      	ldr	r0, [r7, #4]
1000b00a:	f001 fe0b 	bl	1000cc24 <malloc>
1000b00e:	4603      	mov	r3, r0
}
1000b010:	4618      	mov	r0, r3
1000b012:	3708      	adds	r7, #8
1000b014:	46bd      	mov	sp, r7
1000b016:	bd80      	pop	{r7, pc}

1000b018 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
1000b018:	b580      	push	{r7, lr}
1000b01a:	b082      	sub	sp, #8
1000b01c:	af00      	add	r7, sp, #0
1000b01e:	6078      	str	r0, [r7, #4]
	free(ptr);
1000b020:	6878      	ldr	r0, [r7, #4]
1000b022:	f001 fe07 	bl	1000cc34 <free>
}
1000b026:	bf00      	nop
1000b028:	3708      	adds	r7, #8
1000b02a:	46bd      	mov	sp, r7
1000b02c:	bd80      	pop	{r7, pc}

1000b02e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
1000b02e:	b580      	push	{r7, lr}
1000b030:	b084      	sub	sp, #16
1000b032:	af00      	add	r7, sp, #0
1000b034:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
1000b036:	687b      	ldr	r3, [r7, #4]
1000b038:	00db      	lsls	r3, r3, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
1000b03a:	3334      	adds	r3, #52	@ 0x34
1000b03c:	60fb      	str	r3, [r7, #12]

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
1000b03e:	68f8      	ldr	r0, [r7, #12]
1000b040:	f7ff ffde 	bl	1000b000 <metal_allocate_memory>
1000b044:	60b8      	str	r0, [r7, #8]
	if (vqs) {
1000b046:	68bb      	ldr	r3, [r7, #8]
1000b048:	2b00      	cmp	r3, #0
1000b04a:	d004      	beq.n	1000b056 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
1000b04c:	68fa      	ldr	r2, [r7, #12]
1000b04e:	2100      	movs	r1, #0
1000b050:	68b8      	ldr	r0, [r7, #8]
1000b052:	f002 fea4 	bl	1000dd9e <memset>
	}

	return vqs;
1000b056:	68bb      	ldr	r3, [r7, #8]
}
1000b058:	4618      	mov	r0, r3
1000b05a:	3710      	adds	r7, #16
1000b05c:	46bd      	mov	sp, r7
1000b05e:	bd80      	pop	{r7, pc}

1000b060 <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
1000b060:	b580      	push	{r7, lr}
1000b062:	b086      	sub	sp, #24
1000b064:	af00      	add	r7, sp, #0
1000b066:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
1000b068:	687b      	ldr	r3, [r7, #4]
1000b06a:	891b      	ldrh	r3, [r3, #8]
1000b06c:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
1000b06e:	687b      	ldr	r3, [r7, #4]
1000b070:	681b      	ldr	r3, [r3, #0]
1000b072:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b074:	693b      	ldr	r3, [r7, #16]
1000b076:	3b10      	subs	r3, #16
1000b078:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id < vdev->vrings_num);
1000b07a:	693b      	ldr	r3, [r7, #16]
1000b07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000b07e:	697a      	ldr	r2, [r7, #20]
1000b080:	429a      	cmp	r2, r3
1000b082:	d305      	bcc.n	1000b090 <rproc_virtio_virtqueue_notify+0x30>
1000b084:	4b0d      	ldr	r3, [pc, #52]	@ (1000b0bc <rproc_virtio_virtqueue_notify+0x5c>)
1000b086:	4a0e      	ldr	r2, [pc, #56]	@ (1000b0c0 <rproc_virtio_virtqueue_notify+0x60>)
1000b088:	211c      	movs	r1, #28
1000b08a:	480e      	ldr	r0, [pc, #56]	@ (1000b0c4 <rproc_virtio_virtqueue_notify+0x64>)
1000b08c:	f001 fdac 	bl	1000cbe8 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
1000b090:	693b      	ldr	r3, [r7, #16]
1000b092:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000b094:	697a      	ldr	r2, [r7, #20]
1000b096:	4613      	mov	r3, r2
1000b098:	005b      	lsls	r3, r3, #1
1000b09a:	4413      	add	r3, r2
1000b09c:	00db      	lsls	r3, r3, #3
1000b09e:	440b      	add	r3, r1
1000b0a0:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
1000b0a2:	68fb      	ldr	r3, [r7, #12]
1000b0a4:	68db      	ldr	r3, [r3, #12]
1000b0a6:	68fa      	ldr	r2, [r7, #12]
1000b0a8:	6810      	ldr	r0, [r2, #0]
1000b0aa:	68ba      	ldr	r2, [r7, #8]
1000b0ac:	6912      	ldr	r2, [r2, #16]
1000b0ae:	4611      	mov	r1, r2
1000b0b0:	4798      	blx	r3
}
1000b0b2:	bf00      	nop
1000b0b4:	3718      	adds	r7, #24
1000b0b6:	46bd      	mov	sp, r7
1000b0b8:	bd80      	pop	{r7, pc}
1000b0ba:	bf00      	nop
1000b0bc:	10011824 	.word	0x10011824
1000b0c0:	10012188 	.word	0x10012188
1000b0c4:	10011840 	.word	0x10011840

1000b0c8 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
1000b0c8:	b580      	push	{r7, lr}
1000b0ca:	b086      	sub	sp, #24
1000b0cc:	af00      	add	r7, sp, #0
1000b0ce:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b0d0:	687b      	ldr	r3, [r7, #4]
1000b0d2:	3b10      	subs	r3, #16
1000b0d4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000b0d6:	697b      	ldr	r3, [r7, #20]
1000b0d8:	685b      	ldr	r3, [r3, #4]
1000b0da:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000b0dc:	697b      	ldr	r3, [r7, #20]
1000b0de:	689b      	ldr	r3, [r3, #8]
1000b0e0:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
1000b0e2:	693b      	ldr	r3, [r7, #16]
1000b0e4:	3318      	adds	r3, #24
1000b0e6:	4619      	mov	r1, r3
1000b0e8:	68f8      	ldr	r0, [r7, #12]
1000b0ea:	f7ff feed 	bl	1000aec8 <metal_io_virt_to_offset>
1000b0ee:	4601      	mov	r1, r0
1000b0f0:	2301      	movs	r3, #1
1000b0f2:	2205      	movs	r2, #5
1000b0f4:	68f8      	ldr	r0, [r7, #12]
1000b0f6:	f7ff ff01 	bl	1000aefc <metal_io_read>
1000b0fa:	4602      	mov	r2, r0
1000b0fc:	460b      	mov	r3, r1
1000b0fe:	4613      	mov	r3, r2
1000b100:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
1000b102:	7afb      	ldrb	r3, [r7, #11]
}
1000b104:	4618      	mov	r0, r3
1000b106:	3718      	adds	r7, #24
1000b108:	46bd      	mov	sp, r7
1000b10a:	bd80      	pop	{r7, pc}

1000b10c <rproc_virtio_get_dfeatures>:
	rpvdev->notify(rpvdev->priv, vdev->notifyid);
}
#endif

static uint32_t rproc_virtio_get_dfeatures(struct virtio_device *vdev)
{
1000b10c:	b580      	push	{r7, lr}
1000b10e:	b086      	sub	sp, #24
1000b110:	af00      	add	r7, sp, #0
1000b112:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b114:	687b      	ldr	r3, [r7, #4]
1000b116:	3b10      	subs	r3, #16
1000b118:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
1000b11a:	697b      	ldr	r3, [r7, #20]
1000b11c:	685b      	ldr	r3, [r3, #4]
1000b11e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
1000b120:	697b      	ldr	r3, [r7, #20]
1000b122:	689b      	ldr	r3, [r3, #8]
1000b124:	60fb      	str	r3, [r7, #12]
	features = metal_io_read32(io,
1000b126:	693b      	ldr	r3, [r7, #16]
1000b128:	330c      	adds	r3, #12
1000b12a:	4619      	mov	r1, r3
1000b12c:	68f8      	ldr	r0, [r7, #12]
1000b12e:	f7ff fecb 	bl	1000aec8 <metal_io_virt_to_offset>
1000b132:	4601      	mov	r1, r0
1000b134:	2304      	movs	r3, #4
1000b136:	2205      	movs	r2, #5
1000b138:	68f8      	ldr	r0, [r7, #12]
1000b13a:	f7ff fedf 	bl	1000aefc <metal_io_read>
1000b13e:	4602      	mov	r2, r0
1000b140:	460b      	mov	r3, r1
1000b142:	4613      	mov	r3, r2
1000b144:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
1000b146:	68bb      	ldr	r3, [r7, #8]
}
1000b148:	4618      	mov	r0, r3
1000b14a:	3718      	adds	r7, #24
1000b14c:	46bd      	mov	sp, r7
1000b14e:	bd80      	pop	{r7, pc}

1000b150 <rproc_virtio_get_features>:

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
1000b150:	b580      	push	{r7, lr}
1000b152:	b088      	sub	sp, #32
1000b154:	af00      	add	r7, sp, #0
1000b156:	6078      	str	r0, [r7, #4]
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t gfeatures;
	uint32_t dfeatures;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b158:	687b      	ldr	r3, [r7, #4]
1000b15a:	3b10      	subs	r3, #16
1000b15c:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000b15e:	69fb      	ldr	r3, [r7, #28]
1000b160:	685b      	ldr	r3, [r3, #4]
1000b162:	61bb      	str	r3, [r7, #24]
	io = rpvdev->vdev_rsc_io;
1000b164:	69fb      	ldr	r3, [r7, #28]
1000b166:	689b      	ldr	r3, [r3, #8]
1000b168:	617b      	str	r3, [r7, #20]
	gfeatures = metal_io_read32(io,
1000b16a:	69bb      	ldr	r3, [r7, #24]
1000b16c:	3310      	adds	r3, #16
1000b16e:	4619      	mov	r1, r3
1000b170:	6978      	ldr	r0, [r7, #20]
1000b172:	f7ff fea9 	bl	1000aec8 <metal_io_virt_to_offset>
1000b176:	4601      	mov	r1, r0
1000b178:	2304      	movs	r3, #4
1000b17a:	2205      	movs	r2, #5
1000b17c:	6978      	ldr	r0, [r7, #20]
1000b17e:	f7ff febd 	bl	1000aefc <metal_io_read>
1000b182:	4602      	mov	r2, r0
1000b184:	460b      	mov	r3, r1
1000b186:	4613      	mov	r3, r2
1000b188:	613b      	str	r3, [r7, #16]
			metal_io_virt_to_offset(io, &vdev_rsc->gfeatures));
	dfeatures = rproc_virtio_get_dfeatures(vdev);
1000b18a:	6878      	ldr	r0, [r7, #4]
1000b18c:	f7ff ffbe 	bl	1000b10c <rproc_virtio_get_dfeatures>
1000b190:	60f8      	str	r0, [r7, #12]

	return dfeatures & gfeatures;
1000b192:	68fa      	ldr	r2, [r7, #12]
1000b194:	693b      	ldr	r3, [r7, #16]
1000b196:	4013      	ands	r3, r2
}
1000b198:	4618      	mov	r0, r3
1000b19a:	3720      	adds	r7, #32
1000b19c:	46bd      	mov	sp, r7
1000b19e:	bd80      	pop	{r7, pc}

1000b1a0 <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
1000b1a0:	b580      	push	{r7, lr}
1000b1a2:	b088      	sub	sp, #32
1000b1a4:	af00      	add	r7, sp, #0
1000b1a6:	60f8      	str	r0, [r7, #12]
1000b1a8:	60b9      	str	r1, [r7, #8]
1000b1aa:	607a      	str	r2, [r7, #4]
1000b1ac:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
1000b1ae:	68fb      	ldr	r3, [r7, #12]
1000b1b0:	3b10      	subs	r3, #16
1000b1b2:	61fb      	str	r3, [r7, #28]
	vdev_rsc = rpvdev->vdev_rsc;
1000b1b4:	69fb      	ldr	r3, [r7, #28]
1000b1b6:	685b      	ldr	r3, [r3, #4]
1000b1b8:	61bb      	str	r3, [r7, #24]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
1000b1ba:	68fb      	ldr	r3, [r7, #12]
1000b1bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1000b1be:	4613      	mov	r3, r2
1000b1c0:	009b      	lsls	r3, r3, #2
1000b1c2:	4413      	add	r3, r2
1000b1c4:	009b      	lsls	r3, r3, #2
1000b1c6:	3318      	adds	r3, #24
1000b1c8:	69ba      	ldr	r2, [r7, #24]
1000b1ca:	4413      	add	r3, r2
1000b1cc:	3304      	adds	r3, #4
1000b1ce:	617b      	str	r3, [r7, #20]
	io = rpvdev->vdev_rsc_io;
1000b1d0:	69fb      	ldr	r3, [r7, #28]
1000b1d2:	689b      	ldr	r3, [r3, #8]
1000b1d4:	613b      	str	r3, [r7, #16]

	if (offset + length <= vdev_rsc->config_len)
1000b1d6:	683a      	ldr	r2, [r7, #0]
1000b1d8:	68bb      	ldr	r3, [r7, #8]
1000b1da:	441a      	add	r2, r3
1000b1dc:	69bb      	ldr	r3, [r7, #24]
1000b1de:	695b      	ldr	r3, [r3, #20]
1000b1e0:	429a      	cmp	r2, r3
1000b1e2:	d80c      	bhi.n	1000b1fe <rproc_virtio_read_config+0x5e>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
1000b1e4:	697a      	ldr	r2, [r7, #20]
1000b1e6:	68bb      	ldr	r3, [r7, #8]
1000b1e8:	4413      	add	r3, r2
		metal_io_block_read(io,
1000b1ea:	4619      	mov	r1, r3
1000b1ec:	6938      	ldr	r0, [r7, #16]
1000b1ee:	f7ff fe6b 	bl	1000aec8 <metal_io_virt_to_offset>
1000b1f2:	4601      	mov	r1, r0
1000b1f4:	683b      	ldr	r3, [r7, #0]
1000b1f6:	687a      	ldr	r2, [r7, #4]
1000b1f8:	6938      	ldr	r0, [r7, #16]
1000b1fa:	f7ff fcbc 	bl	1000ab76 <metal_io_block_read>
				dst, length);
}
1000b1fe:	bf00      	nop
1000b200:	3720      	adds	r7, #32
1000b202:	46bd      	mov	sp, r7
1000b204:	bd80      	pop	{r7, pc}
	...

1000b208 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
1000b208:	b580      	push	{r7, lr}
1000b20a:	b08e      	sub	sp, #56	@ 0x38
1000b20c:	af00      	add	r7, sp, #0
1000b20e:	60f8      	str	r0, [r7, #12]
1000b210:	60b9      	str	r1, [r7, #8]
1000b212:	607a      	str	r2, [r7, #4]
1000b214:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
1000b216:	687b      	ldr	r3, [r7, #4]
1000b218:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
1000b21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000b21c:	7e5b      	ldrb	r3, [r3, #25]
1000b21e:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
1000b220:	2048      	movs	r0, #72	@ 0x48
1000b222:	f7ff feed 	bl	1000b000 <metal_allocate_memory>
1000b226:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
1000b228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000b22a:	2b00      	cmp	r3, #0
1000b22c:	d101      	bne.n	1000b232 <rproc_virtio_create_vdev+0x2a>
		return NULL;
1000b22e:	2300      	movs	r3, #0
1000b230:	e092      	b.n	1000b358 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
1000b232:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000b234:	4613      	mov	r3, r2
1000b236:	005b      	lsls	r3, r3, #1
1000b238:	4413      	add	r3, r2
1000b23a:	00db      	lsls	r3, r3, #3
1000b23c:	4618      	mov	r0, r3
1000b23e:	f7ff fedf 	bl	1000b000 <metal_allocate_memory>
1000b242:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
1000b244:	6a3b      	ldr	r3, [r7, #32]
1000b246:	2b00      	cmp	r3, #0
1000b248:	f000 8081 	beq.w	1000b34e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
1000b24c:	2248      	movs	r2, #72	@ 0x48
1000b24e:	2100      	movs	r1, #0
1000b250:	6a78      	ldr	r0, [r7, #36]	@ 0x24
1000b252:	f002 fda4 	bl	1000dd9e <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
1000b256:	2218      	movs	r2, #24
1000b258:	2100      	movs	r1, #0
1000b25a:	6a38      	ldr	r0, [r7, #32]
1000b25c:	f002 fd9f 	bl	1000dd9e <memset>
	vdev = &rpvdev->vdev;
1000b260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000b262:	3310      	adds	r3, #16
1000b264:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
1000b266:	2300      	movs	r3, #0
1000b268:	637b      	str	r3, [r7, #52]	@ 0x34
1000b26a:	e025      	b.n	1000b2b8 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
1000b26c:	2300      	movs	r3, #0
1000b26e:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
1000b270:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000b272:	4613      	mov	r3, r2
1000b274:	009b      	lsls	r3, r3, #2
1000b276:	4413      	add	r3, r2
1000b278:	009b      	lsls	r3, r3, #2
1000b27a:	3318      	adds	r3, #24
1000b27c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1000b27e:	4413      	add	r3, r2
1000b280:	3304      	adds	r3, #4
1000b282:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
1000b284:	68fb      	ldr	r3, [r7, #12]
1000b286:	2b00      	cmp	r3, #0
1000b288:	d102      	bne.n	1000b290 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
1000b28a:	69bb      	ldr	r3, [r7, #24]
1000b28c:	689b      	ldr	r3, [r3, #8]
1000b28e:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
1000b290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1000b292:	f7ff fecc 	bl	1000b02e <virtqueue_allocate>
1000b296:	6178      	str	r0, [r7, #20]
		if (!vq)
1000b298:	697b      	ldr	r3, [r7, #20]
1000b29a:	2b00      	cmp	r3, #0
1000b29c:	d031      	beq.n	1000b302 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
1000b29e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000b2a0:	4613      	mov	r3, r2
1000b2a2:	005b      	lsls	r3, r3, #1
1000b2a4:	4413      	add	r3, r2
1000b2a6:	00db      	lsls	r3, r3, #3
1000b2a8:	461a      	mov	r2, r3
1000b2aa:	6a3b      	ldr	r3, [r7, #32]
1000b2ac:	4413      	add	r3, r2
1000b2ae:	697a      	ldr	r2, [r7, #20]
1000b2b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
1000b2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000b2b4:	3301      	adds	r3, #1
1000b2b6:	637b      	str	r3, [r7, #52]	@ 0x34
1000b2b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000b2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000b2bc:	429a      	cmp	r2, r3
1000b2be:	d3d5      	bcc.n	1000b26c <rproc_virtio_create_vdev+0x64>
	}

	rpvdev->notify = notify;
1000b2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000b2c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1000b2c4:	60da      	str	r2, [r3, #12]
	rpvdev->priv = priv;
1000b2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000b2c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1000b2ca:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
1000b2cc:	69fb      	ldr	r3, [r7, #28]
1000b2ce:	6a3a      	ldr	r2, [r7, #32]
1000b2d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
1000b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000b2d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1000b2d6:	605a      	str	r2, [r3, #4]
	rpvdev->vdev_rsc_io = rsc_io;
1000b2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000b2da:	683a      	ldr	r2, [r7, #0]
1000b2dc:	609a      	str	r2, [r3, #8]

	vdev->notifyid = notifyid;
1000b2de:	69fb      	ldr	r3, [r7, #28]
1000b2e0:	68ba      	ldr	r2, [r7, #8]
1000b2e2:	601a      	str	r2, [r3, #0]
	vdev->role = role;
1000b2e4:	69fb      	ldr	r3, [r7, #28]
1000b2e6:	68fa      	ldr	r2, [r7, #12]
1000b2e8:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
1000b2ea:	69fb      	ldr	r3, [r7, #28]
1000b2ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1000b2ee:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
1000b2f0:	69fb      	ldr	r3, [r7, #28]
1000b2f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000b2f4:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
1000b2f6:	69fb      	ldr	r3, [r7, #28]
1000b2f8:	4a19      	ldr	r2, [pc, #100]	@ (1000b360 <rproc_virtio_create_vdev+0x158>)
1000b2fa:	621a      	str	r2, [r3, #32]
		/* Assume the master support all slave features */
		rproc_virtio_negotiate_features(vdev, dfeatures);
	}
#endif

	return &rpvdev->vdev;
1000b2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000b2fe:	3310      	adds	r3, #16
1000b300:	e02a      	b.n	1000b358 <rproc_virtio_create_vdev+0x150>
			goto err1;
1000b302:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
1000b304:	2300      	movs	r3, #0
1000b306:	637b      	str	r3, [r7, #52]	@ 0x34
1000b308:	e019      	b.n	1000b33e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
1000b30a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000b30c:	4613      	mov	r3, r2
1000b30e:	005b      	lsls	r3, r3, #1
1000b310:	4413      	add	r3, r2
1000b312:	00db      	lsls	r3, r3, #3
1000b314:	461a      	mov	r2, r3
1000b316:	6a3b      	ldr	r3, [r7, #32]
1000b318:	4413      	add	r3, r2
1000b31a:	681b      	ldr	r3, [r3, #0]
1000b31c:	2b00      	cmp	r3, #0
1000b31e:	d00b      	beq.n	1000b338 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
1000b320:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000b322:	4613      	mov	r3, r2
1000b324:	005b      	lsls	r3, r3, #1
1000b326:	4413      	add	r3, r2
1000b328:	00db      	lsls	r3, r3, #3
1000b32a:	461a      	mov	r2, r3
1000b32c:	6a3b      	ldr	r3, [r7, #32]
1000b32e:	4413      	add	r3, r2
1000b330:	681b      	ldr	r3, [r3, #0]
1000b332:	4618      	mov	r0, r3
1000b334:	f7ff fe70 	bl	1000b018 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
1000b338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000b33a:	3301      	adds	r3, #1
1000b33c:	637b      	str	r3, [r7, #52]	@ 0x34
1000b33e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000b340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000b342:	429a      	cmp	r2, r3
1000b344:	d3e1      	bcc.n	1000b30a <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
1000b346:	6a38      	ldr	r0, [r7, #32]
1000b348:	f7ff fe66 	bl	1000b018 <metal_free_memory>
1000b34c:	e000      	b.n	1000b350 <rproc_virtio_create_vdev+0x148>
		goto err0;
1000b34e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
1000b350:	6a78      	ldr	r0, [r7, #36]	@ 0x24
1000b352:	f7ff fe61 	bl	1000b018 <metal_free_memory>
	return NULL;
1000b356:	2300      	movs	r3, #0
}
1000b358:	4618      	mov	r0, r3
1000b35a:	3738      	adds	r7, #56	@ 0x38
1000b35c:	46bd      	mov	sp, r7
1000b35e:	bd80      	pop	{r7, pc}
1000b360:	10012164 	.word	0x10012164

1000b364 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
1000b364:	b480      	push	{r7}
1000b366:	b087      	sub	sp, #28
1000b368:	af00      	add	r7, sp, #0
1000b36a:	60f8      	str	r0, [r7, #12]
1000b36c:	60b9      	str	r1, [r7, #8]
1000b36e:	607a      	str	r2, [r7, #4]
1000b370:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
1000b372:	68fb      	ldr	r3, [r7, #12]
1000b374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000b376:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
1000b378:	68ba      	ldr	r2, [r7, #8]
1000b37a:	697b      	ldr	r3, [r7, #20]
1000b37c:	429a      	cmp	r2, r3
1000b37e:	d302      	bcc.n	1000b386 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
1000b380:	f06f 0301 	mvn.w	r3, #1
1000b384:	e019      	b.n	1000b3ba <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
1000b386:	68fb      	ldr	r3, [r7, #12]
1000b388:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000b38a:	68ba      	ldr	r2, [r7, #8]
1000b38c:	4613      	mov	r3, r2
1000b38e:	005b      	lsls	r3, r3, #1
1000b390:	4413      	add	r3, r2
1000b392:	00db      	lsls	r3, r3, #3
1000b394:	440b      	add	r3, r1
1000b396:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
1000b398:	693b      	ldr	r3, [r7, #16]
1000b39a:	6a3a      	ldr	r2, [r7, #32]
1000b39c:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
1000b39e:	693b      	ldr	r3, [r7, #16]
1000b3a0:	687a      	ldr	r2, [r7, #4]
1000b3a2:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
1000b3a4:	693b      	ldr	r3, [r7, #16]
1000b3a6:	683a      	ldr	r2, [r7, #0]
1000b3a8:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
1000b3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000b3ac:	b29a      	uxth	r2, r3
1000b3ae:	693b      	ldr	r3, [r7, #16]
1000b3b0:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
1000b3b2:	693b      	ldr	r3, [r7, #16]
1000b3b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000b3b6:	609a      	str	r2, [r3, #8]

	return 0;
1000b3b8:	2300      	movs	r3, #0
}
1000b3ba:	4618      	mov	r0, r3
1000b3bc:	371c      	adds	r7, #28
1000b3be:	46bd      	mov	sp, r7
1000b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b3c4:	4770      	bx	lr

1000b3c6 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
1000b3c6:	b580      	push	{r7, lr}
1000b3c8:	b086      	sub	sp, #24
1000b3ca:	af00      	add	r7, sp, #0
1000b3cc:	6078      	str	r0, [r7, #4]
1000b3ce:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
1000b3d0:	687b      	ldr	r3, [r7, #4]
1000b3d2:	2b00      	cmp	r3, #0
1000b3d4:	d102      	bne.n	1000b3dc <rproc_virtio_notified+0x16>
		return -RPROC_EINVAL;
1000b3d6:	f06f 0301 	mvn.w	r3, #1
1000b3da:	e02c      	b.n	1000b436 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
1000b3dc:	687b      	ldr	r3, [r7, #4]
1000b3de:	681b      	ldr	r3, [r3, #0]
1000b3e0:	683a      	ldr	r2, [r7, #0]
1000b3e2:	429a      	cmp	r2, r3
1000b3e4:	d101      	bne.n	1000b3ea <rproc_virtio_notified+0x24>
		return 0;
1000b3e6:	2300      	movs	r3, #0
1000b3e8:	e025      	b.n	1000b436 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
1000b3ea:	687b      	ldr	r3, [r7, #4]
1000b3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000b3ee:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
1000b3f0:	2300      	movs	r3, #0
1000b3f2:	617b      	str	r3, [r7, #20]
1000b3f4:	e01a      	b.n	1000b42c <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
1000b3f6:	687b      	ldr	r3, [r7, #4]
1000b3f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000b3fa:	697a      	ldr	r2, [r7, #20]
1000b3fc:	4613      	mov	r3, r2
1000b3fe:	005b      	lsls	r3, r3, #1
1000b400:	4413      	add	r3, r2
1000b402:	00db      	lsls	r3, r3, #3
1000b404:	440b      	add	r3, r1
1000b406:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
1000b408:	68fb      	ldr	r3, [r7, #12]
1000b40a:	691b      	ldr	r3, [r3, #16]
1000b40c:	683a      	ldr	r2, [r7, #0]
1000b40e:	429a      	cmp	r2, r3
1000b410:	d003      	beq.n	1000b41a <rproc_virtio_notified+0x54>
1000b412:	683b      	ldr	r3, [r7, #0]
1000b414:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b418:	d105      	bne.n	1000b426 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
1000b41a:	68fb      	ldr	r3, [r7, #12]
1000b41c:	681b      	ldr	r3, [r3, #0]
1000b41e:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
1000b420:	68b8      	ldr	r0, [r7, #8]
1000b422:	f001 fae7 	bl	1000c9f4 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
1000b426:	697b      	ldr	r3, [r7, #20]
1000b428:	3301      	adds	r3, #1
1000b42a:	617b      	str	r3, [r7, #20]
1000b42c:	697a      	ldr	r2, [r7, #20]
1000b42e:	693b      	ldr	r3, [r7, #16]
1000b430:	429a      	cmp	r2, r3
1000b432:	d3e0      	bcc.n	1000b3f6 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
1000b434:	2300      	movs	r3, #0
}
1000b436:	4618      	mov	r0, r3
1000b438:	3718      	adds	r7, #24
1000b43a:	46bd      	mov	sp, r7
1000b43c:	bd80      	pop	{r7, pc}

1000b43e <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
1000b43e:	b580      	push	{r7, lr}
1000b440:	b084      	sub	sp, #16
1000b442:	af00      	add	r7, sp, #0
1000b444:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
1000b446:	687b      	ldr	r3, [r7, #4]
1000b448:	699b      	ldr	r3, [r3, #24]
1000b44a:	2b00      	cmp	r3, #0
1000b44c:	d00a      	beq.n	1000b464 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
1000b44e:	6878      	ldr	r0, [r7, #4]
1000b450:	f7ff fe3a 	bl	1000b0c8 <rproc_virtio_get_status>
1000b454:	4603      	mov	r3, r0
1000b456:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
1000b458:	7bfb      	ldrb	r3, [r7, #15]
1000b45a:	f003 0304 	and.w	r3, r3, #4
1000b45e:	2b00      	cmp	r3, #0
1000b460:	d102      	bne.n	1000b468 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
1000b462:	e7f4      	b.n	1000b44e <rproc_virtio_wait_remote_ready+0x10>
		return;
1000b464:	bf00      	nop
1000b466:	e000      	b.n	1000b46a <rproc_virtio_wait_remote_ready+0x2c>
			return;
1000b468:	bf00      	nop
		metal_cpu_yield();
	}
}
1000b46a:	3710      	adds	r7, #16
1000b46c:	46bd      	mov	sp, r7
1000b46e:	bd80      	pop	{r7, pc}

1000b470 <__metal_mutex_acquire>:
		return 0; /* not acquired */
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
1000b470:	b490      	push	{r4, r7}
1000b472:	b086      	sub	sp, #24
1000b474:	af00      	add	r7, sp, #0
1000b476:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
1000b478:	2300      	movs	r3, #0
1000b47a:	613b      	str	r3, [r7, #16]

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
1000b47c:	bf00      	nop
1000b47e:	687b      	ldr	r3, [r7, #4]
1000b480:	617b      	str	r3, [r7, #20]
1000b482:	2301      	movs	r3, #1
1000b484:	60fb      	str	r3, [r7, #12]
1000b486:	68fb      	ldr	r3, [r7, #12]
1000b488:	461c      	mov	r4, r3
1000b48a:	697a      	ldr	r2, [r7, #20]
1000b48c:	f107 0310 	add.w	r3, r7, #16
1000b490:	6818      	ldr	r0, [r3, #0]
1000b492:	f3bf 8f5b 	dmb	ish
1000b496:	e852 1f00 	ldrex	r1, [r2]
1000b49a:	4281      	cmp	r1, r0
1000b49c:	d103      	bne.n	1000b4a6 <__metal_mutex_acquire+0x36>
1000b49e:	e842 4c00 	strex	ip, r4, [r2]
1000b4a2:	f1bc 0f00 	cmp.w	ip, #0
1000b4a6:	f3bf 8f5b 	dmb	ish
1000b4aa:	bf0c      	ite	eq
1000b4ac:	2201      	moveq	r2, #1
1000b4ae:	2200      	movne	r2, #0
1000b4b0:	2a00      	cmp	r2, #0
1000b4b2:	d100      	bne.n	1000b4b6 <__metal_mutex_acquire+0x46>
1000b4b4:	6019      	str	r1, [r3, #0]
1000b4b6:	4613      	mov	r3, r2
1000b4b8:	f083 0301 	eor.w	r3, r3, #1
1000b4bc:	b2db      	uxtb	r3, r3
1000b4be:	2b00      	cmp	r3, #0
1000b4c0:	d1dd      	bne.n	1000b47e <__metal_mutex_acquire+0xe>
					     METAL_MUTEX_LOCKED)) {
		;
	}
}
1000b4c2:	bf00      	nop
1000b4c4:	bf00      	nop
1000b4c6:	3718      	adds	r7, #24
1000b4c8:	46bd      	mov	sp, r7
1000b4ca:	bc90      	pop	{r4, r7}
1000b4cc:	4770      	bx	lr

1000b4ce <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
1000b4ce:	b480      	push	{r7}
1000b4d0:	b085      	sub	sp, #20
1000b4d2:	af00      	add	r7, sp, #0
1000b4d4:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000b4d6:	687b      	ldr	r3, [r7, #4]
1000b4d8:	60fb      	str	r3, [r7, #12]
1000b4da:	2300      	movs	r3, #0
1000b4dc:	60bb      	str	r3, [r7, #8]
1000b4de:	68bb      	ldr	r3, [r7, #8]
1000b4e0:	461a      	mov	r2, r3
1000b4e2:	68fb      	ldr	r3, [r7, #12]
1000b4e4:	f3bf 8f5b 	dmb	ish
1000b4e8:	601a      	str	r2, [r3, #0]
1000b4ea:	f3bf 8f5b 	dmb	ish
}
1000b4ee:	bf00      	nop
1000b4f0:	3714      	adds	r7, #20
1000b4f2:	46bd      	mov	sp, r7
1000b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b4f8:	4770      	bx	lr

1000b4fa <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
1000b4fa:	b580      	push	{r7, lr}
1000b4fc:	b082      	sub	sp, #8
1000b4fe:	af00      	add	r7, sp, #0
1000b500:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000b502:	6878      	ldr	r0, [r7, #4]
1000b504:	f7ff ffb4 	bl	1000b470 <__metal_mutex_acquire>
}
1000b508:	bf00      	nop
1000b50a:	3708      	adds	r7, #8
1000b50c:	46bd      	mov	sp, r7
1000b50e:	bd80      	pop	{r7, pc}

1000b510 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
1000b510:	b580      	push	{r7, lr}
1000b512:	b082      	sub	sp, #8
1000b514:	af00      	add	r7, sp, #0
1000b516:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
1000b518:	6878      	ldr	r0, [r7, #4]
1000b51a:	f7ff ffd8 	bl	1000b4ce <__metal_mutex_release>
}
1000b51e:	bf00      	nop
1000b520:	3708      	adds	r7, #8
1000b522:	46bd      	mov	sp, r7
1000b524:	bd80      	pop	{r7, pc}

1000b526 <metal_list_add_before>:
{
1000b526:	b480      	push	{r7}
1000b528:	b083      	sub	sp, #12
1000b52a:	af00      	add	r7, sp, #0
1000b52c:	6078      	str	r0, [r7, #4]
1000b52e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
1000b530:	687b      	ldr	r3, [r7, #4]
1000b532:	685a      	ldr	r2, [r3, #4]
1000b534:	683b      	ldr	r3, [r7, #0]
1000b536:	605a      	str	r2, [r3, #4]
	new_node->next = node;
1000b538:	683b      	ldr	r3, [r7, #0]
1000b53a:	687a      	ldr	r2, [r7, #4]
1000b53c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
1000b53e:	683b      	ldr	r3, [r7, #0]
1000b540:	681b      	ldr	r3, [r3, #0]
1000b542:	683a      	ldr	r2, [r7, #0]
1000b544:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
1000b546:	683b      	ldr	r3, [r7, #0]
1000b548:	685b      	ldr	r3, [r3, #4]
1000b54a:	683a      	ldr	r2, [r7, #0]
1000b54c:	601a      	str	r2, [r3, #0]
}
1000b54e:	bf00      	nop
1000b550:	370c      	adds	r7, #12
1000b552:	46bd      	mov	sp, r7
1000b554:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b558:	4770      	bx	lr

1000b55a <metal_list_add_tail>:
{
1000b55a:	b580      	push	{r7, lr}
1000b55c:	b082      	sub	sp, #8
1000b55e:	af00      	add	r7, sp, #0
1000b560:	6078      	str	r0, [r7, #4]
1000b562:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
1000b564:	6839      	ldr	r1, [r7, #0]
1000b566:	6878      	ldr	r0, [r7, #4]
1000b568:	f7ff ffdd 	bl	1000b526 <metal_list_add_before>
}
1000b56c:	bf00      	nop
1000b56e:	3708      	adds	r7, #8
1000b570:	46bd      	mov	sp, r7
1000b572:	bd80      	pop	{r7, pc}

1000b574 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
1000b574:	b480      	push	{r7}
1000b576:	b083      	sub	sp, #12
1000b578:	af00      	add	r7, sp, #0
1000b57a:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
1000b57c:	687b      	ldr	r3, [r7, #4]
1000b57e:	681b      	ldr	r3, [r3, #0]
1000b580:	687a      	ldr	r2, [r7, #4]
1000b582:	6852      	ldr	r2, [r2, #4]
1000b584:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
1000b586:	687b      	ldr	r3, [r7, #4]
1000b588:	685b      	ldr	r3, [r3, #4]
1000b58a:	687a      	ldr	r2, [r7, #4]
1000b58c:	6812      	ldr	r2, [r2, #0]
1000b58e:	601a      	str	r2, [r3, #0]
	node->prev = node;
1000b590:	687b      	ldr	r3, [r7, #4]
1000b592:	687a      	ldr	r2, [r7, #4]
1000b594:	605a      	str	r2, [r3, #4]
	node->next = node;
1000b596:	687b      	ldr	r3, [r7, #4]
1000b598:	687a      	ldr	r2, [r7, #4]
1000b59a:	601a      	str	r2, [r3, #0]
}
1000b59c:	bf00      	nop
1000b59e:	370c      	adds	r7, #12
1000b5a0:	46bd      	mov	sp, r7
1000b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b5a6:	4770      	bx	lr

1000b5a8 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
1000b5a8:	b480      	push	{r7}
1000b5aa:	b083      	sub	sp, #12
1000b5ac:	af00      	add	r7, sp, #0
1000b5ae:	6078      	str	r0, [r7, #4]
1000b5b0:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
1000b5b2:	683b      	ldr	r3, [r7, #0]
1000b5b4:	095b      	lsrs	r3, r3, #5
1000b5b6:	009a      	lsls	r2, r3, #2
1000b5b8:	6879      	ldr	r1, [r7, #4]
1000b5ba:	440a      	add	r2, r1
1000b5bc:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
1000b5be:	683a      	ldr	r2, [r7, #0]
1000b5c0:	f002 021f 	and.w	r2, r2, #31
1000b5c4:	2001      	movs	r0, #1
1000b5c6:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
1000b5ca:	009b      	lsls	r3, r3, #2
1000b5cc:	6878      	ldr	r0, [r7, #4]
1000b5ce:	4403      	add	r3, r0
1000b5d0:	430a      	orrs	r2, r1
1000b5d2:	601a      	str	r2, [r3, #0]
}
1000b5d4:	bf00      	nop
1000b5d6:	370c      	adds	r7, #12
1000b5d8:	46bd      	mov	sp, r7
1000b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b5de:	4770      	bx	lr

1000b5e0 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
1000b5e0:	b480      	push	{r7}
1000b5e2:	b083      	sub	sp, #12
1000b5e4:	af00      	add	r7, sp, #0
1000b5e6:	6078      	str	r0, [r7, #4]
1000b5e8:	6039      	str	r1, [r7, #0]
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
1000b5ea:	683b      	ldr	r3, [r7, #0]
1000b5ec:	095b      	lsrs	r3, r3, #5
1000b5ee:	009b      	lsls	r3, r3, #2
1000b5f0:	687a      	ldr	r2, [r7, #4]
1000b5f2:	4413      	add	r3, r2
1000b5f4:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
1000b5f6:	683b      	ldr	r3, [r7, #0]
1000b5f8:	f003 031f 	and.w	r3, r3, #31
1000b5fc:	fa22 f303 	lsr.w	r3, r2, r3
1000b600:	f003 0301 	and.w	r3, r3, #1
1000b604:	2b00      	cmp	r3, #0
1000b606:	bf14      	ite	ne
1000b608:	2301      	movne	r3, #1
1000b60a:	2300      	moveq	r3, #0
1000b60c:	b2db      	uxtb	r3, r3
}
1000b60e:	4618      	mov	r0, r3
1000b610:	370c      	adds	r7, #12
1000b612:	46bd      	mov	sp, r7
1000b614:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b618:	4770      	bx	lr

1000b61a <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
1000b61a:	b480      	push	{r7}
1000b61c:	b083      	sub	sp, #12
1000b61e:	af00      	add	r7, sp, #0
1000b620:	6078      	str	r0, [r7, #4]
1000b622:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
1000b624:	683b      	ldr	r3, [r7, #0]
1000b626:	095b      	lsrs	r3, r3, #5
1000b628:	009a      	lsls	r2, r3, #2
1000b62a:	6879      	ldr	r1, [r7, #4]
1000b62c:	440a      	add	r2, r1
1000b62e:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
1000b630:	683a      	ldr	r2, [r7, #0]
1000b632:	f002 021f 	and.w	r2, r2, #31
1000b636:	2001      	movs	r0, #1
1000b638:	fa00 f202 	lsl.w	r2, r0, r2
1000b63c:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
1000b63e:	009b      	lsls	r3, r3, #2
1000b640:	6878      	ldr	r0, [r7, #4]
1000b642:	4403      	add	r3, r0
1000b644:	400a      	ands	r2, r1
1000b646:	601a      	str	r2, [r3, #0]
}
1000b648:	bf00      	nop
1000b64a:	370c      	adds	r7, #12
1000b64c:	46bd      	mov	sp, r7
1000b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
1000b652:	4770      	bx	lr

1000b654 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
1000b654:	b580      	push	{r7, lr}
1000b656:	b082      	sub	sp, #8
1000b658:	af00      	add	r7, sp, #0
1000b65a:	6078      	str	r0, [r7, #4]
1000b65c:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
1000b65e:	6839      	ldr	r1, [r7, #0]
1000b660:	6878      	ldr	r0, [r7, #4]
1000b662:	f7ff ffbd 	bl	1000b5e0 <metal_bitmap_is_bit_set>
1000b666:	4603      	mov	r3, r0
1000b668:	2b00      	cmp	r3, #0
1000b66a:	bf0c      	ite	eq
1000b66c:	2301      	moveq	r3, #1
1000b66e:	2300      	movne	r3, #0
1000b670:	b2db      	uxtb	r3, r3
}
1000b672:	4618      	mov	r0, r3
1000b674:	3708      	adds	r7, #8
1000b676:	46bd      	mov	sp, r7
1000b678:	bd80      	pop	{r7, pc}

1000b67a <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
1000b67a:	b580      	push	{r7, lr}
1000b67c:	b086      	sub	sp, #24
1000b67e:	af00      	add	r7, sp, #0
1000b680:	60f8      	str	r0, [r7, #12]
1000b682:	60b9      	str	r1, [r7, #8]
1000b684:	607a      	str	r2, [r7, #4]
	unsigned int bit;

	for (bit = start;
1000b686:	68bb      	ldr	r3, [r7, #8]
1000b688:	617b      	str	r3, [r7, #20]
1000b68a:	e002      	b.n	1000b692 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
1000b68c:	697b      	ldr	r3, [r7, #20]
1000b68e:	3301      	adds	r3, #1
1000b690:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
1000b692:	697a      	ldr	r2, [r7, #20]
1000b694:	687b      	ldr	r3, [r7, #4]
1000b696:	429a      	cmp	r2, r3
1000b698:	d207      	bcs.n	1000b6aa <metal_bitmap_next_clear_bit+0x30>
1000b69a:	697b      	ldr	r3, [r7, #20]
1000b69c:	4619      	mov	r1, r3
1000b69e:	68f8      	ldr	r0, [r7, #12]
1000b6a0:	f7ff ffd8 	bl	1000b654 <metal_bitmap_is_bit_clear>
1000b6a4:	4603      	mov	r3, r0
1000b6a6:	2b00      	cmp	r3, #0
1000b6a8:	d0f0      	beq.n	1000b68c <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
1000b6aa:	697b      	ldr	r3, [r7, #20]
}
1000b6ac:	4618      	mov	r0, r3
1000b6ae:	3718      	adds	r7, #24
1000b6b0:	46bd      	mov	sp, r7
1000b6b2:	bd80      	pop	{r7, pc}

1000b6b4 <rpmsg_initialize_ept>:
static inline void rpmsg_initialize_ept(struct rpmsg_endpoint *ept,
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
1000b6b4:	b580      	push	{r7, lr}
1000b6b6:	b084      	sub	sp, #16
1000b6b8:	af00      	add	r7, sp, #0
1000b6ba:	60f8      	str	r0, [r7, #12]
1000b6bc:	60b9      	str	r1, [r7, #8]
1000b6be:	607a      	str	r2, [r7, #4]
1000b6c0:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000b6c2:	68f8      	ldr	r0, [r7, #12]
1000b6c4:	68bb      	ldr	r3, [r7, #8]
1000b6c6:	2b00      	cmp	r3, #0
1000b6c8:	d001      	beq.n	1000b6ce <rpmsg_initialize_ept+0x1a>
1000b6ca:	68bb      	ldr	r3, [r7, #8]
1000b6cc:	e000      	b.n	1000b6d0 <rpmsg_initialize_ept+0x1c>
1000b6ce:	4b0a      	ldr	r3, [pc, #40]	@ (1000b6f8 <rpmsg_initialize_ept+0x44>)
1000b6d0:	2220      	movs	r2, #32
1000b6d2:	4619      	mov	r1, r3
1000b6d4:	f002 fb7d 	bl	1000ddd2 <strncpy>
	ept->addr = src;
1000b6d8:	68fb      	ldr	r3, [r7, #12]
1000b6da:	687a      	ldr	r2, [r7, #4]
1000b6dc:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
1000b6de:	68fb      	ldr	r3, [r7, #12]
1000b6e0:	683a      	ldr	r2, [r7, #0]
1000b6e2:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
1000b6e4:	68fb      	ldr	r3, [r7, #12]
1000b6e6:	69ba      	ldr	r2, [r7, #24]
1000b6e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
1000b6ea:	68fb      	ldr	r3, [r7, #12]
1000b6ec:	69fa      	ldr	r2, [r7, #28]
1000b6ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
1000b6f0:	bf00      	nop
1000b6f2:	3710      	adds	r7, #16
1000b6f4:	46bd      	mov	sp, r7
1000b6f6:	bd80      	pop	{r7, pc}
1000b6f8:	100118d4 	.word	0x100118d4

1000b6fc <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
1000b6fc:	b580      	push	{r7, lr}
1000b6fe:	b084      	sub	sp, #16
1000b700:	af00      	add	r7, sp, #0
1000b702:	6078      	str	r0, [r7, #4]
1000b704:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
1000b706:	f04f 33ff 	mov.w	r3, #4294967295
1000b70a:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
1000b70c:	683b      	ldr	r3, [r7, #0]
1000b70e:	461a      	mov	r2, r3
1000b710:	2100      	movs	r1, #0
1000b712:	6878      	ldr	r0, [r7, #4]
1000b714:	f7ff ffb1 	bl	1000b67a <metal_bitmap_next_clear_bit>
1000b718:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
1000b71a:	683b      	ldr	r3, [r7, #0]
1000b71c:	68ba      	ldr	r2, [r7, #8]
1000b71e:	429a      	cmp	r2, r3
1000b720:	d208      	bcs.n	1000b734 <rpmsg_get_address+0x38>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
1000b722:	68bb      	ldr	r3, [r7, #8]
1000b724:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
1000b728:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
1000b72a:	68bb      	ldr	r3, [r7, #8]
1000b72c:	4619      	mov	r1, r3
1000b72e:	6878      	ldr	r0, [r7, #4]
1000b730:	f7ff ff3a 	bl	1000b5a8 <metal_bitmap_set_bit>
	}

	return addr;
1000b734:	68fb      	ldr	r3, [r7, #12]
}
1000b736:	4618      	mov	r0, r3
1000b738:	3710      	adds	r7, #16
1000b73a:	46bd      	mov	sp, r7
1000b73c:	bd80      	pop	{r7, pc}

1000b73e <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
1000b73e:	b580      	push	{r7, lr}
1000b740:	b084      	sub	sp, #16
1000b742:	af00      	add	r7, sp, #0
1000b744:	60f8      	str	r0, [r7, #12]
1000b746:	60b9      	str	r1, [r7, #8]
1000b748:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
1000b74a:	687b      	ldr	r3, [r7, #4]
1000b74c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
1000b750:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
1000b752:	687b      	ldr	r3, [r7, #4]
1000b754:	2b00      	cmp	r3, #0
1000b756:	db07      	blt.n	1000b768 <rpmsg_release_address+0x2a>
1000b758:	687a      	ldr	r2, [r7, #4]
1000b75a:	68bb      	ldr	r3, [r7, #8]
1000b75c:	429a      	cmp	r2, r3
1000b75e:	da03      	bge.n	1000b768 <rpmsg_release_address+0x2a>
		metal_bitmap_clear_bit(bitmap, addr);
1000b760:	6879      	ldr	r1, [r7, #4]
1000b762:	68f8      	ldr	r0, [r7, #12]
1000b764:	f7ff ff59 	bl	1000b61a <metal_bitmap_clear_bit>
}
1000b768:	bf00      	nop
1000b76a:	3710      	adds	r7, #16
1000b76c:	46bd      	mov	sp, r7
1000b76e:	bd80      	pop	{r7, pc}

1000b770 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
1000b770:	b580      	push	{r7, lr}
1000b772:	b084      	sub	sp, #16
1000b774:	af00      	add	r7, sp, #0
1000b776:	60f8      	str	r0, [r7, #12]
1000b778:	60b9      	str	r1, [r7, #8]
1000b77a:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
1000b77c:	687b      	ldr	r3, [r7, #4]
1000b77e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
1000b782:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size)
1000b784:	687b      	ldr	r3, [r7, #4]
1000b786:	2b00      	cmp	r3, #0
1000b788:	db09      	blt.n	1000b79e <rpmsg_is_address_set+0x2e>
1000b78a:	687a      	ldr	r2, [r7, #4]
1000b78c:	68bb      	ldr	r3, [r7, #8]
1000b78e:	429a      	cmp	r2, r3
1000b790:	da05      	bge.n	1000b79e <rpmsg_is_address_set+0x2e>
		return metal_bitmap_is_bit_set(bitmap, addr);
1000b792:	6879      	ldr	r1, [r7, #4]
1000b794:	68f8      	ldr	r0, [r7, #12]
1000b796:	f7ff ff23 	bl	1000b5e0 <metal_bitmap_is_bit_set>
1000b79a:	4603      	mov	r3, r0
1000b79c:	e000      	b.n	1000b7a0 <rpmsg_is_address_set+0x30>
	else
		return RPMSG_ERR_PARAM;
1000b79e:	4b02      	ldr	r3, [pc, #8]	@ (1000b7a8 <rpmsg_is_address_set+0x38>)
}
1000b7a0:	4618      	mov	r0, r3
1000b7a2:	3710      	adds	r7, #16
1000b7a4:	46bd      	mov	sp, r7
1000b7a6:	bd80      	pop	{r7, pc}
1000b7a8:	fffff82d 	.word	0xfffff82d

1000b7ac <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
1000b7ac:	b580      	push	{r7, lr}
1000b7ae:	b084      	sub	sp, #16
1000b7b0:	af00      	add	r7, sp, #0
1000b7b2:	60f8      	str	r0, [r7, #12]
1000b7b4:	60b9      	str	r1, [r7, #8]
1000b7b6:	607a      	str	r2, [r7, #4]
	addr -= RPMSG_RESERVED_ADDRESSES;
1000b7b8:	687b      	ldr	r3, [r7, #4]
1000b7ba:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
1000b7be:	607b      	str	r3, [r7, #4]
	if (addr >= 0 && addr < size) {
1000b7c0:	687b      	ldr	r3, [r7, #4]
1000b7c2:	2b00      	cmp	r3, #0
1000b7c4:	db09      	blt.n	1000b7da <rpmsg_set_address+0x2e>
1000b7c6:	687a      	ldr	r2, [r7, #4]
1000b7c8:	68bb      	ldr	r3, [r7, #8]
1000b7ca:	429a      	cmp	r2, r3
1000b7cc:	da05      	bge.n	1000b7da <rpmsg_set_address+0x2e>
		metal_bitmap_set_bit(bitmap, addr);
1000b7ce:	6879      	ldr	r1, [r7, #4]
1000b7d0:	68f8      	ldr	r0, [r7, #12]
1000b7d2:	f7ff fee9 	bl	1000b5a8 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
1000b7d6:	2300      	movs	r3, #0
1000b7d8:	e000      	b.n	1000b7dc <rpmsg_set_address+0x30>
	} else {
		return RPMSG_ERR_PARAM;
1000b7da:	4b02      	ldr	r3, [pc, #8]	@ (1000b7e4 <rpmsg_set_address+0x38>)
	}
}
1000b7dc:	4618      	mov	r0, r3
1000b7de:	3710      	adds	r7, #16
1000b7e0:	46bd      	mov	sp, r7
1000b7e2:	bd80      	pop	{r7, pc}
1000b7e4:	fffff82d 	.word	0xfffff82d

1000b7e8 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
1000b7e8:	b590      	push	{r4, r7, lr}
1000b7ea:	b089      	sub	sp, #36	@ 0x24
1000b7ec:	af02      	add	r7, sp, #8
1000b7ee:	60f8      	str	r0, [r7, #12]
1000b7f0:	60b9      	str	r1, [r7, #8]
1000b7f2:	607a      	str	r2, [r7, #4]
1000b7f4:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
1000b7f6:	68fb      	ldr	r3, [r7, #12]
1000b7f8:	2b00      	cmp	r3, #0
1000b7fa:	d00a      	beq.n	1000b812 <rpmsg_send_offchannel_raw+0x2a>
1000b7fc:	68fb      	ldr	r3, [r7, #12]
1000b7fe:	6a1b      	ldr	r3, [r3, #32]
1000b800:	2b00      	cmp	r3, #0
1000b802:	d006      	beq.n	1000b812 <rpmsg_send_offchannel_raw+0x2a>
1000b804:	683b      	ldr	r3, [r7, #0]
1000b806:	2b00      	cmp	r3, #0
1000b808:	d003      	beq.n	1000b812 <rpmsg_send_offchannel_raw+0x2a>
1000b80a:	687b      	ldr	r3, [r7, #4]
1000b80c:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b810:	d101      	bne.n	1000b816 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
1000b812:	4b0d      	ldr	r3, [pc, #52]	@ (1000b848 <rpmsg_send_offchannel_raw+0x60>)
1000b814:	e014      	b.n	1000b840 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
1000b816:	68fb      	ldr	r3, [r7, #12]
1000b818:	6a1b      	ldr	r3, [r3, #32]
1000b81a:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
1000b81c:	697b      	ldr	r3, [r7, #20]
1000b81e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1000b820:	2b00      	cmp	r3, #0
1000b822:	d00c      	beq.n	1000b83e <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
1000b824:	697b      	ldr	r3, [r7, #20]
1000b826:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
1000b828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000b82a:	9301      	str	r3, [sp, #4]
1000b82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000b82e:	9300      	str	r3, [sp, #0]
1000b830:	683b      	ldr	r3, [r7, #0]
1000b832:	687a      	ldr	r2, [r7, #4]
1000b834:	68b9      	ldr	r1, [r7, #8]
1000b836:	6978      	ldr	r0, [r7, #20]
1000b838:	47a0      	blx	r4
1000b83a:	4603      	mov	r3, r0
1000b83c:	e000      	b.n	1000b840 <rpmsg_send_offchannel_raw+0x58>
						     len, wait);

	return RPMSG_ERR_PARAM;
1000b83e:	4b02      	ldr	r3, [pc, #8]	@ (1000b848 <rpmsg_send_offchannel_raw+0x60>)
}
1000b840:	4618      	mov	r0, r3
1000b842:	371c      	adds	r7, #28
1000b844:	46bd      	mov	sp, r7
1000b846:	bd90      	pop	{r4, r7, pc}
1000b848:	fffff82d 	.word	0xfffff82d

1000b84c <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
1000b84c:	b580      	push	{r7, lr}
1000b84e:	b090      	sub	sp, #64	@ 0x40
1000b850:	af02      	add	r7, sp, #8
1000b852:	6078      	str	r0, [r7, #4]
1000b854:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
1000b856:	683b      	ldr	r3, [r7, #0]
1000b858:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
1000b85a:	687b      	ldr	r3, [r7, #4]
1000b85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000b85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
1000b860:	6879      	ldr	r1, [r7, #4]
1000b862:	f107 030c 	add.w	r3, r7, #12
1000b866:	2220      	movs	r2, #32
1000b868:	4618      	mov	r0, r3
1000b86a:	f002 fab2 	bl	1000ddd2 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
1000b86e:	687b      	ldr	r3, [r7, #4]
1000b870:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1000b872:	f107 030c 	add.w	r3, r7, #12
1000b876:	2201      	movs	r2, #1
1000b878:	9201      	str	r2, [sp, #4]
1000b87a:	2228      	movs	r2, #40	@ 0x28
1000b87c:	9200      	str	r2, [sp, #0]
1000b87e:	2235      	movs	r2, #53	@ 0x35
1000b880:	6878      	ldr	r0, [r7, #4]
1000b882:	f7ff ffb1 	bl	1000b7e8 <rpmsg_send_offchannel_raw>
1000b886:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
1000b888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000b88a:	2b00      	cmp	r3, #0
1000b88c:	da01      	bge.n	1000b892 <rpmsg_send_ns_message+0x46>
		return ret;
1000b88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000b890:	e000      	b.n	1000b894 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
1000b892:	2300      	movs	r3, #0
}
1000b894:	4618      	mov	r0, r3
1000b896:	3738      	adds	r7, #56	@ 0x38
1000b898:	46bd      	mov	sp, r7
1000b89a:	bd80      	pop	{r7, pc}

1000b89c <rpmsg_get_endpoint>:
}

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
1000b89c:	b580      	push	{r7, lr}
1000b89e:	b088      	sub	sp, #32
1000b8a0:	af00      	add	r7, sp, #0
1000b8a2:	60f8      	str	r0, [r7, #12]
1000b8a4:	60b9      	str	r1, [r7, #8]
1000b8a6:	607a      	str	r2, [r7, #4]
1000b8a8:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
1000b8aa:	68fb      	ldr	r3, [r7, #12]
1000b8ac:	681b      	ldr	r3, [r3, #0]
1000b8ae:	61fb      	str	r3, [r7, #28]
1000b8b0:	e04b      	b.n	1000b94a <rpmsg_get_endpoint+0xae>
		int name_match = 0;
1000b8b2:	2300      	movs	r3, #0
1000b8b4:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
1000b8b6:	69fb      	ldr	r3, [r7, #28]
1000b8b8:	3b34      	subs	r3, #52	@ 0x34
1000b8ba:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
1000b8bc:	687b      	ldr	r3, [r7, #4]
1000b8be:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b8c2:	d006      	beq.n	1000b8d2 <rpmsg_get_endpoint+0x36>
1000b8c4:	697b      	ldr	r3, [r7, #20]
1000b8c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000b8c8:	687a      	ldr	r2, [r7, #4]
1000b8ca:	429a      	cmp	r2, r3
1000b8cc:	d101      	bne.n	1000b8d2 <rpmsg_get_endpoint+0x36>
			return ept;
1000b8ce:	697b      	ldr	r3, [r7, #20]
1000b8d0:	e040      	b.n	1000b954 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
1000b8d2:	697b      	ldr	r3, [r7, #20]
1000b8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000b8d6:	687a      	ldr	r2, [r7, #4]
1000b8d8:	429a      	cmp	r2, r3
1000b8da:	d106      	bne.n	1000b8ea <rpmsg_get_endpoint+0x4e>
1000b8dc:	697b      	ldr	r3, [r7, #20]
1000b8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000b8e0:	683a      	ldr	r2, [r7, #0]
1000b8e2:	429a      	cmp	r2, r3
1000b8e4:	d101      	bne.n	1000b8ea <rpmsg_get_endpoint+0x4e>
			return ept;
1000b8e6:	697b      	ldr	r3, [r7, #20]
1000b8e8:	e034      	b.n	1000b954 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
1000b8ea:	68bb      	ldr	r3, [r7, #8]
1000b8ec:	2b00      	cmp	r3, #0
1000b8ee:	d00c      	beq.n	1000b90a <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
1000b8f0:	697b      	ldr	r3, [r7, #20]
1000b8f2:	2220      	movs	r2, #32
1000b8f4:	68b9      	ldr	r1, [r7, #8]
1000b8f6:	4618      	mov	r0, r3
1000b8f8:	f002 fa59 	bl	1000ddae <strncmp>
1000b8fc:	4603      	mov	r3, r0
1000b8fe:	2b00      	cmp	r3, #0
1000b900:	bf0c      	ite	eq
1000b902:	2301      	moveq	r3, #1
1000b904:	2300      	movne	r3, #0
1000b906:	b2db      	uxtb	r3, r3
1000b908:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
1000b90a:	68bb      	ldr	r3, [r7, #8]
1000b90c:	2b00      	cmp	r3, #0
1000b90e:	d018      	beq.n	1000b942 <rpmsg_get_endpoint+0xa6>
1000b910:	69bb      	ldr	r3, [r7, #24]
1000b912:	2b00      	cmp	r3, #0
1000b914:	d015      	beq.n	1000b942 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address */
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
1000b916:	683b      	ldr	r3, [r7, #0]
1000b918:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b91c:	d006      	beq.n	1000b92c <rpmsg_get_endpoint+0x90>
1000b91e:	697b      	ldr	r3, [r7, #20]
1000b920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000b922:	683a      	ldr	r2, [r7, #0]
1000b924:	429a      	cmp	r2, r3
1000b926:	d101      	bne.n	1000b92c <rpmsg_get_endpoint+0x90>
			return ept;
1000b928:	697b      	ldr	r3, [r7, #20]
1000b92a:	e013      	b.n	1000b954 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept */
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
1000b92c:	687b      	ldr	r3, [r7, #4]
1000b92e:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b932:	d107      	bne.n	1000b944 <rpmsg_get_endpoint+0xa8>
1000b934:	697b      	ldr	r3, [r7, #20]
1000b936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000b938:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b93c:	d102      	bne.n	1000b944 <rpmsg_get_endpoint+0xa8>
			return ept;
1000b93e:	697b      	ldr	r3, [r7, #20]
1000b940:	e008      	b.n	1000b954 <rpmsg_get_endpoint+0xb8>
			continue;
1000b942:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
1000b944:	69fb      	ldr	r3, [r7, #28]
1000b946:	681b      	ldr	r3, [r3, #0]
1000b948:	61fb      	str	r3, [r7, #28]
1000b94a:	68fb      	ldr	r3, [r7, #12]
1000b94c:	69fa      	ldr	r2, [r7, #28]
1000b94e:	429a      	cmp	r2, r3
1000b950:	d1af      	bne.n	1000b8b2 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
1000b952:	2300      	movs	r3, #0
}
1000b954:	4618      	mov	r0, r3
1000b956:	3720      	adds	r7, #32
1000b958:	46bd      	mov	sp, r7
1000b95a:	bd80      	pop	{r7, pc}

1000b95c <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
1000b95c:	b580      	push	{r7, lr}
1000b95e:	b084      	sub	sp, #16
1000b960:	af00      	add	r7, sp, #0
1000b962:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev = ept->rdev;
1000b964:	687b      	ldr	r3, [r7, #4]
1000b966:	6a1b      	ldr	r3, [r3, #32]
1000b968:	60fb      	str	r3, [r7, #12]

	metal_mutex_acquire(&rdev->lock);
1000b96a:	68fb      	ldr	r3, [r7, #12]
1000b96c:	3358      	adds	r3, #88	@ 0x58
1000b96e:	4618      	mov	r0, r3
1000b970:	f7ff fdc3 	bl	1000b4fa <metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
1000b974:	687b      	ldr	r3, [r7, #4]
1000b976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000b978:	f1b3 3fff 	cmp.w	r3, #4294967295
1000b97c:	d008      	beq.n	1000b990 <rpmsg_unregister_endpoint+0x34>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
1000b97e:	68fb      	ldr	r3, [r7, #12]
1000b980:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
1000b984:	687b      	ldr	r3, [r7, #4]
1000b986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
1000b988:	461a      	mov	r2, r3
1000b98a:	2180      	movs	r1, #128	@ 0x80
1000b98c:	f7ff fed7 	bl	1000b73e <rpmsg_release_address>
	metal_list_del(&ept->node);
1000b990:	687b      	ldr	r3, [r7, #4]
1000b992:	3334      	adds	r3, #52	@ 0x34
1000b994:	4618      	mov	r0, r3
1000b996:	f7ff fded 	bl	1000b574 <metal_list_del>
	ept->rdev = NULL;
1000b99a:	687b      	ldr	r3, [r7, #4]
1000b99c:	2200      	movs	r2, #0
1000b99e:	621a      	str	r2, [r3, #32]
	metal_mutex_release(&rdev->lock);
1000b9a0:	68fb      	ldr	r3, [r7, #12]
1000b9a2:	3358      	adds	r3, #88	@ 0x58
1000b9a4:	4618      	mov	r0, r3
1000b9a6:	f7ff fdb3 	bl	1000b510 <metal_mutex_release>
}
1000b9aa:	bf00      	nop
1000b9ac:	3710      	adds	r7, #16
1000b9ae:	46bd      	mov	sp, r7
1000b9b0:	bd80      	pop	{r7, pc}

1000b9b2 <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
1000b9b2:	b580      	push	{r7, lr}
1000b9b4:	b082      	sub	sp, #8
1000b9b6:	af00      	add	r7, sp, #0
1000b9b8:	6078      	str	r0, [r7, #4]
1000b9ba:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
1000b9bc:	683b      	ldr	r3, [r7, #0]
1000b9be:	687a      	ldr	r2, [r7, #4]
1000b9c0:	621a      	str	r2, [r3, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
1000b9c2:	687a      	ldr	r2, [r7, #4]
1000b9c4:	683b      	ldr	r3, [r7, #0]
1000b9c6:	3334      	adds	r3, #52	@ 0x34
1000b9c8:	4619      	mov	r1, r3
1000b9ca:	4610      	mov	r0, r2
1000b9cc:	f7ff fdc5 	bl	1000b55a <metal_list_add_tail>
}
1000b9d0:	bf00      	nop
1000b9d2:	3708      	adds	r7, #8
1000b9d4:	46bd      	mov	sp, r7
1000b9d6:	bd80      	pop	{r7, pc}

1000b9d8 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
1000b9d8:	b580      	push	{r7, lr}
1000b9da:	b088      	sub	sp, #32
1000b9dc:	af02      	add	r7, sp, #8
1000b9de:	60f8      	str	r0, [r7, #12]
1000b9e0:	60b9      	str	r1, [r7, #8]
1000b9e2:	607a      	str	r2, [r7, #4]
1000b9e4:	603b      	str	r3, [r7, #0]
	int status = RPMSG_SUCCESS;
1000b9e6:	2300      	movs	r3, #0
1000b9e8:	617b      	str	r3, [r7, #20]
	uint32_t addr = src;
1000b9ea:	683b      	ldr	r3, [r7, #0]
1000b9ec:	613b      	str	r3, [r7, #16]

	if (!ept)
1000b9ee:	68fb      	ldr	r3, [r7, #12]
1000b9f0:	2b00      	cmp	r3, #0
1000b9f2:	d101      	bne.n	1000b9f8 <rpmsg_create_ept+0x20>
		return RPMSG_ERR_PARAM;
1000b9f4:	4b37      	ldr	r3, [pc, #220]	@ (1000bad4 <rpmsg_create_ept+0xfc>)
1000b9f6:	e068      	b.n	1000baca <rpmsg_create_ept+0xf2>

	metal_mutex_acquire(&rdev->lock);
1000b9f8:	68bb      	ldr	r3, [r7, #8]
1000b9fa:	3358      	adds	r3, #88	@ 0x58
1000b9fc:	4618      	mov	r0, r3
1000b9fe:	f7ff fd7c 	bl	1000b4fa <metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
1000ba02:	683b      	ldr	r3, [r7, #0]
1000ba04:	f1b3 3fff 	cmp.w	r3, #4294967295
1000ba08:	d10d      	bne.n	1000ba26 <rpmsg_create_ept+0x4e>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
1000ba0a:	68bb      	ldr	r3, [r7, #8]
1000ba0c:	3348      	adds	r3, #72	@ 0x48
1000ba0e:	2180      	movs	r1, #128	@ 0x80
1000ba10:	4618      	mov	r0, r3
1000ba12:	f7ff fe73 	bl	1000b6fc <rpmsg_get_address>
1000ba16:	6138      	str	r0, [r7, #16]
		if (addr == RPMSG_ADDR_ANY) {
1000ba18:	693b      	ldr	r3, [r7, #16]
1000ba1a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000ba1e:	d11f      	bne.n	1000ba60 <rpmsg_create_ept+0x88>
			status = RPMSG_ERR_ADDR;
1000ba20:	4b2d      	ldr	r3, [pc, #180]	@ (1000bad8 <rpmsg_create_ept+0x100>)
1000ba22:	617b      	str	r3, [r7, #20]
			goto ret_status;
1000ba24:	e04b      	b.n	1000babe <rpmsg_create_ept+0xe6>
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
1000ba26:	683b      	ldr	r3, [r7, #0]
1000ba28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
1000ba2c:	d318      	bcc.n	1000ba60 <rpmsg_create_ept+0x88>
		status = rpmsg_is_address_set(rdev->bitmap,
1000ba2e:	68bb      	ldr	r3, [r7, #8]
1000ba30:	3348      	adds	r3, #72	@ 0x48
1000ba32:	683a      	ldr	r2, [r7, #0]
1000ba34:	2180      	movs	r1, #128	@ 0x80
1000ba36:	4618      	mov	r0, r3
1000ba38:	f7ff fe9a 	bl	1000b770 <rpmsg_is_address_set>
1000ba3c:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
1000ba3e:	697b      	ldr	r3, [r7, #20]
1000ba40:	2b00      	cmp	r3, #0
1000ba42:	d107      	bne.n	1000ba54 <rpmsg_create_ept+0x7c>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
1000ba44:	68bb      	ldr	r3, [r7, #8]
1000ba46:	3348      	adds	r3, #72	@ 0x48
1000ba48:	683a      	ldr	r2, [r7, #0]
1000ba4a:	2180      	movs	r1, #128	@ 0x80
1000ba4c:	4618      	mov	r0, r3
1000ba4e:	f7ff fead 	bl	1000b7ac <rpmsg_set_address>
1000ba52:	e005      	b.n	1000ba60 <rpmsg_create_ept+0x88>
					  src);
		} else if (status > 0) {
1000ba54:	697b      	ldr	r3, [r7, #20]
1000ba56:	2b00      	cmp	r3, #0
1000ba58:	dd30      	ble.n	1000babc <rpmsg_create_ept+0xe4>
			status = RPMSG_ERR_ADDR;
1000ba5a:	4b1f      	ldr	r3, [pc, #124]	@ (1000bad8 <rpmsg_create_ept+0x100>)
1000ba5c:	617b      	str	r3, [r7, #20]
			goto ret_status;
1000ba5e:	e02e      	b.n	1000babe <rpmsg_create_ept+0xe6>
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
1000ba60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000ba62:	9301      	str	r3, [sp, #4]
1000ba64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000ba66:	9300      	str	r3, [sp, #0]
1000ba68:	6a3b      	ldr	r3, [r7, #32]
1000ba6a:	693a      	ldr	r2, [r7, #16]
1000ba6c:	6879      	ldr	r1, [r7, #4]
1000ba6e:	68f8      	ldr	r0, [r7, #12]
1000ba70:	f7ff fe20 	bl	1000b6b4 <rpmsg_initialize_ept>
	rpmsg_register_endpoint(rdev, ept);
1000ba74:	68f9      	ldr	r1, [r7, #12]
1000ba76:	68b8      	ldr	r0, [r7, #8]
1000ba78:	f7ff ff9b 	bl	1000b9b2 <rpmsg_register_endpoint>
	metal_mutex_release(&rdev->lock);
1000ba7c:	68bb      	ldr	r3, [r7, #8]
1000ba7e:	3358      	adds	r3, #88	@ 0x58
1000ba80:	4618      	mov	r0, r3
1000ba82:	f7ff fd45 	bl	1000b510 <metal_mutex_release>

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
1000ba86:	68fb      	ldr	r3, [r7, #12]
1000ba88:	781b      	ldrb	r3, [r3, #0]
1000ba8a:	2b00      	cmp	r3, #0
1000ba8c:	d00e      	beq.n	1000baac <rpmsg_create_ept+0xd4>
1000ba8e:	68bb      	ldr	r3, [r7, #8]
1000ba90:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
1000ba94:	2b00      	cmp	r3, #0
1000ba96:	d009      	beq.n	1000baac <rpmsg_create_ept+0xd4>
	    ept->dest_addr == RPMSG_ADDR_ANY)
1000ba98:	68fb      	ldr	r3, [r7, #12]
1000ba9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
	if (ept->name[0] && rdev->support_ns &&
1000ba9c:	f1b3 3fff 	cmp.w	r3, #4294967295
1000baa0:	d104      	bne.n	1000baac <rpmsg_create_ept+0xd4>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
1000baa2:	2100      	movs	r1, #0
1000baa4:	68f8      	ldr	r0, [r7, #12]
1000baa6:	f7ff fed1 	bl	1000b84c <rpmsg_send_ns_message>
1000baaa:	6178      	str	r0, [r7, #20]

	if (status)
1000baac:	697b      	ldr	r3, [r7, #20]
1000baae:	2b00      	cmp	r3, #0
1000bab0:	d002      	beq.n	1000bab8 <rpmsg_create_ept+0xe0>
		rpmsg_unregister_endpoint(ept);
1000bab2:	68f8      	ldr	r0, [r7, #12]
1000bab4:	f7ff ff52 	bl	1000b95c <rpmsg_unregister_endpoint>
	return status;
1000bab8:	697b      	ldr	r3, [r7, #20]
1000baba:	e006      	b.n	1000baca <rpmsg_create_ept+0xf2>
			goto ret_status;
1000babc:	bf00      	nop

ret_status:
	metal_mutex_release(&rdev->lock);
1000babe:	68bb      	ldr	r3, [r7, #8]
1000bac0:	3358      	adds	r3, #88	@ 0x58
1000bac2:	4618      	mov	r0, r3
1000bac4:	f7ff fd24 	bl	1000b510 <metal_mutex_release>
	return status;
1000bac8:	697b      	ldr	r3, [r7, #20]
}
1000baca:	4618      	mov	r0, r3
1000bacc:	3718      	adds	r7, #24
1000bace:	46bd      	mov	sp, r7
1000bad0:	bd80      	pop	{r7, pc}
1000bad2:	bf00      	nop
1000bad4:	fffff82d 	.word	0xfffff82d
1000bad8:	fffff829 	.word	0xfffff829

1000badc <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
1000badc:	b480      	push	{r7}
1000bade:	b083      	sub	sp, #12
1000bae0:	af00      	add	r7, sp, #0
1000bae2:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
1000bae4:	2300      	movs	r3, #0
}
1000bae6:	4618      	mov	r0, r3
1000bae8:	370c      	adds	r7, #12
1000baea:	46bd      	mov	sp, r7
1000baec:	f85d 7b04 	ldr.w	r7, [sp], #4
1000baf0:	4770      	bx	lr

1000baf2 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
1000baf2:	b580      	push	{r7, lr}
1000baf4:	b082      	sub	sp, #8
1000baf6:	af00      	add	r7, sp, #0
1000baf8:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
1000bafa:	6878      	ldr	r0, [r7, #4]
1000bafc:	f7ff ffee 	bl	1000badc <__metal_sleep_usec>
1000bb00:	4603      	mov	r3, r0
}
1000bb02:	4618      	mov	r0, r3
1000bb04:	3708      	adds	r7, #8
1000bb06:	46bd      	mov	sp, r7
1000bb08:	bd80      	pop	{r7, pc}

1000bb0a <metal_list_init>:
{
1000bb0a:	b480      	push	{r7}
1000bb0c:	b083      	sub	sp, #12
1000bb0e:	af00      	add	r7, sp, #0
1000bb10:	6078      	str	r0, [r7, #4]
	list->prev = list;
1000bb12:	687b      	ldr	r3, [r7, #4]
1000bb14:	687a      	ldr	r2, [r7, #4]
1000bb16:	605a      	str	r2, [r3, #4]
	list->next = list;
1000bb18:	687b      	ldr	r3, [r7, #4]
1000bb1a:	687a      	ldr	r2, [r7, #4]
1000bb1c:	601a      	str	r2, [r3, #0]
}
1000bb1e:	bf00      	nop
1000bb20:	370c      	adds	r7, #12
1000bb22:	46bd      	mov	sp, r7
1000bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bb28:	4770      	bx	lr

1000bb2a <metal_io_virt_to_offset>:
{
1000bb2a:	b480      	push	{r7}
1000bb2c:	b085      	sub	sp, #20
1000bb2e:	af00      	add	r7, sp, #0
1000bb30:	6078      	str	r0, [r7, #4]
1000bb32:	6039      	str	r1, [r7, #0]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
1000bb34:	683b      	ldr	r3, [r7, #0]
1000bb36:	687a      	ldr	r2, [r7, #4]
1000bb38:	6812      	ldr	r2, [r2, #0]
1000bb3a:	1a9b      	subs	r3, r3, r2
1000bb3c:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000bb3e:	687b      	ldr	r3, [r7, #4]
1000bb40:	689b      	ldr	r3, [r3, #8]
1000bb42:	68fa      	ldr	r2, [r7, #12]
1000bb44:	429a      	cmp	r2, r3
1000bb46:	d201      	bcs.n	1000bb4c <metal_io_virt_to_offset+0x22>
1000bb48:	68fb      	ldr	r3, [r7, #12]
1000bb4a:	e001      	b.n	1000bb50 <metal_io_virt_to_offset+0x26>
1000bb4c:	f04f 33ff 	mov.w	r3, #4294967295
}
1000bb50:	4618      	mov	r0, r3
1000bb52:	3714      	adds	r7, #20
1000bb54:	46bd      	mov	sp, r7
1000bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bb5a:	4770      	bx	lr

1000bb5c <__metal_mutex_init>:
{
1000bb5c:	b480      	push	{r7}
1000bb5e:	b085      	sub	sp, #20
1000bb60:	af00      	add	r7, sp, #0
1000bb62:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000bb64:	687b      	ldr	r3, [r7, #4]
1000bb66:	60fb      	str	r3, [r7, #12]
1000bb68:	2300      	movs	r3, #0
1000bb6a:	60bb      	str	r3, [r7, #8]
1000bb6c:	68bb      	ldr	r3, [r7, #8]
1000bb6e:	461a      	mov	r2, r3
1000bb70:	68fb      	ldr	r3, [r7, #12]
1000bb72:	f3bf 8f5b 	dmb	ish
1000bb76:	601a      	str	r2, [r3, #0]
1000bb78:	f3bf 8f5b 	dmb	ish
}
1000bb7c:	bf00      	nop
1000bb7e:	3714      	adds	r7, #20
1000bb80:	46bd      	mov	sp, r7
1000bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bb86:	4770      	bx	lr

1000bb88 <__metal_mutex_acquire>:
{
1000bb88:	b490      	push	{r4, r7}
1000bb8a:	b086      	sub	sp, #24
1000bb8c:	af00      	add	r7, sp, #0
1000bb8e:	6078      	str	r0, [r7, #4]
	int unlocked = METAL_MUTEX_UNLOCKED;
1000bb90:	2300      	movs	r3, #0
1000bb92:	613b      	str	r3, [r7, #16]
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
1000bb94:	bf00      	nop
1000bb96:	687b      	ldr	r3, [r7, #4]
1000bb98:	617b      	str	r3, [r7, #20]
1000bb9a:	2301      	movs	r3, #1
1000bb9c:	60fb      	str	r3, [r7, #12]
1000bb9e:	68fb      	ldr	r3, [r7, #12]
1000bba0:	461c      	mov	r4, r3
1000bba2:	697a      	ldr	r2, [r7, #20]
1000bba4:	f107 0310 	add.w	r3, r7, #16
1000bba8:	6818      	ldr	r0, [r3, #0]
1000bbaa:	f3bf 8f5b 	dmb	ish
1000bbae:	e852 1f00 	ldrex	r1, [r2]
1000bbb2:	4281      	cmp	r1, r0
1000bbb4:	d103      	bne.n	1000bbbe <__metal_mutex_acquire+0x36>
1000bbb6:	e842 4c00 	strex	ip, r4, [r2]
1000bbba:	f1bc 0f00 	cmp.w	ip, #0
1000bbbe:	f3bf 8f5b 	dmb	ish
1000bbc2:	bf0c      	ite	eq
1000bbc4:	2201      	moveq	r2, #1
1000bbc6:	2200      	movne	r2, #0
1000bbc8:	2a00      	cmp	r2, #0
1000bbca:	d100      	bne.n	1000bbce <__metal_mutex_acquire+0x46>
1000bbcc:	6019      	str	r1, [r3, #0]
1000bbce:	4613      	mov	r3, r2
1000bbd0:	f083 0301 	eor.w	r3, r3, #1
1000bbd4:	b2db      	uxtb	r3, r3
1000bbd6:	2b00      	cmp	r3, #0
1000bbd8:	d1dd      	bne.n	1000bb96 <__metal_mutex_acquire+0xe>
}
1000bbda:	bf00      	nop
1000bbdc:	bf00      	nop
1000bbde:	3718      	adds	r7, #24
1000bbe0:	46bd      	mov	sp, r7
1000bbe2:	bc90      	pop	{r4, r7}
1000bbe4:	4770      	bx	lr

1000bbe6 <__metal_mutex_release>:
{
1000bbe6:	b480      	push	{r7}
1000bbe8:	b085      	sub	sp, #20
1000bbea:	af00      	add	r7, sp, #0
1000bbec:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000bbee:	687b      	ldr	r3, [r7, #4]
1000bbf0:	60fb      	str	r3, [r7, #12]
1000bbf2:	2300      	movs	r3, #0
1000bbf4:	60bb      	str	r3, [r7, #8]
1000bbf6:	68bb      	ldr	r3, [r7, #8]
1000bbf8:	461a      	mov	r2, r3
1000bbfa:	68fb      	ldr	r3, [r7, #12]
1000bbfc:	f3bf 8f5b 	dmb	ish
1000bc00:	601a      	str	r2, [r3, #0]
1000bc02:	f3bf 8f5b 	dmb	ish
}
1000bc06:	bf00      	nop
1000bc08:	3714      	adds	r7, #20
1000bc0a:	46bd      	mov	sp, r7
1000bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bc10:	4770      	bx	lr

1000bc12 <metal_mutex_init>:
{
1000bc12:	b580      	push	{r7, lr}
1000bc14:	b082      	sub	sp, #8
1000bc16:	af00      	add	r7, sp, #0
1000bc18:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
1000bc1a:	6878      	ldr	r0, [r7, #4]
1000bc1c:	f7ff ff9e 	bl	1000bb5c <__metal_mutex_init>
}
1000bc20:	bf00      	nop
1000bc22:	3708      	adds	r7, #8
1000bc24:	46bd      	mov	sp, r7
1000bc26:	bd80      	pop	{r7, pc}

1000bc28 <metal_mutex_acquire>:
{
1000bc28:	b580      	push	{r7, lr}
1000bc2a:	b082      	sub	sp, #8
1000bc2c:	af00      	add	r7, sp, #0
1000bc2e:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
1000bc30:	6878      	ldr	r0, [r7, #4]
1000bc32:	f7ff ffa9 	bl	1000bb88 <__metal_mutex_acquire>
}
1000bc36:	bf00      	nop
1000bc38:	3708      	adds	r7, #8
1000bc3a:	46bd      	mov	sp, r7
1000bc3c:	bd80      	pop	{r7, pc}

1000bc3e <metal_mutex_release>:
{
1000bc3e:	b580      	push	{r7, lr}
1000bc40:	b082      	sub	sp, #8
1000bc42:	af00      	add	r7, sp, #0
1000bc44:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
1000bc46:	6878      	ldr	r0, [r7, #4]
1000bc48:	f7ff ffcd 	bl	1000bbe6 <__metal_mutex_release>
}
1000bc4c:	bf00      	nop
1000bc4e:	3708      	adds	r7, #8
1000bc50:	46bd      	mov	sp, r7
1000bc52:	bd80      	pop	{r7, pc}

1000bc54 <rpmsg_virtio_get_role>:
#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
1000bc54:	b480      	push	{r7}
1000bc56:	b083      	sub	sp, #12
1000bc58:	af00      	add	r7, sp, #0
1000bc5a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
1000bc5c:	687b      	ldr	r3, [r7, #4]
1000bc5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1000bc60:	699b      	ldr	r3, [r3, #24]
}
1000bc62:	4618      	mov	r0, r3
1000bc64:	370c      	adds	r7, #12
1000bc66:	46bd      	mov	sp, r7
1000bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bc6c:	4770      	bx	lr

1000bc6e <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
1000bc6e:	b580      	push	{r7, lr}
1000bc70:	b082      	sub	sp, #8
1000bc72:	af00      	add	r7, sp, #0
1000bc74:	6078      	str	r0, [r7, #4]
1000bc76:	460b      	mov	r3, r1
1000bc78:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
1000bc7a:	687b      	ldr	r3, [r7, #4]
1000bc7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1000bc7e:	6a1b      	ldr	r3, [r3, #32]
1000bc80:	685b      	ldr	r3, [r3, #4]
1000bc82:	687a      	ldr	r2, [r7, #4]
1000bc84:	6f92      	ldr	r2, [r2, #120]	@ 0x78
1000bc86:	78f9      	ldrb	r1, [r7, #3]
1000bc88:	4610      	mov	r0, r2
1000bc8a:	4798      	blx	r3
}
1000bc8c:	bf00      	nop
1000bc8e:	3708      	adds	r7, #8
1000bc90:	46bd      	mov	sp, r7
1000bc92:	bd80      	pop	{r7, pc}

1000bc94 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
1000bc94:	b580      	push	{r7, lr}
1000bc96:	b082      	sub	sp, #8
1000bc98:	af00      	add	r7, sp, #0
1000bc9a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
1000bc9c:	687b      	ldr	r3, [r7, #4]
1000bc9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1000bca0:	6a1b      	ldr	r3, [r3, #32]
1000bca2:	681b      	ldr	r3, [r3, #0]
1000bca4:	687a      	ldr	r2, [r7, #4]
1000bca6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
1000bca8:	4610      	mov	r0, r2
1000bcaa:	4798      	blx	r3
1000bcac:	4603      	mov	r3, r0
}
1000bcae:	4618      	mov	r0, r3
1000bcb0:	3708      	adds	r7, #8
1000bcb2:	46bd      	mov	sp, r7
1000bcb4:	bd80      	pop	{r7, pc}

1000bcb6 <rpmsg_virtio_get_features>:

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
1000bcb6:	b580      	push	{r7, lr}
1000bcb8:	b082      	sub	sp, #8
1000bcba:	af00      	add	r7, sp, #0
1000bcbc:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
1000bcbe:	687b      	ldr	r3, [r7, #4]
1000bcc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1000bcc2:	6a1b      	ldr	r3, [r3, #32]
1000bcc4:	689b      	ldr	r3, [r3, #8]
1000bcc6:	687a      	ldr	r2, [r7, #4]
1000bcc8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
1000bcca:	4610      	mov	r0, r2
1000bccc:	4798      	blx	r3
1000bcce:	4603      	mov	r3, r0
}
1000bcd0:	4618      	mov	r0, r3
1000bcd2:	3708      	adds	r7, #8
1000bcd4:	46bd      	mov	sp, r7
1000bcd6:	bd80      	pop	{r7, pc}

1000bcd8 <rpmsg_virtio_create_virtqueues>:
static inline int
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
1000bcd8:	b580      	push	{r7, lr}
1000bcda:	b086      	sub	sp, #24
1000bcdc:	af02      	add	r7, sp, #8
1000bcde:	60f8      	str	r0, [r7, #12]
1000bce0:	60b9      	str	r1, [r7, #8]
1000bce2:	607a      	str	r2, [r7, #4]
1000bce4:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
1000bce6:	68fb      	ldr	r3, [r7, #12]
1000bce8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
1000bcea:	68b9      	ldr	r1, [r7, #8]
1000bcec:	69bb      	ldr	r3, [r7, #24]
1000bcee:	9300      	str	r3, [sp, #0]
1000bcf0:	683b      	ldr	r3, [r7, #0]
1000bcf2:	687a      	ldr	r2, [r7, #4]
1000bcf4:	f000 fc06 	bl	1000c504 <virtio_create_virtqueues>
1000bcf8:	4603      	mov	r3, r0
					callbacks);
}
1000bcfa:	4618      	mov	r0, r3
1000bcfc:	3710      	adds	r7, #16
1000bcfe:	46bd      	mov	sp, r7
1000bd00:	bd80      	pop	{r7, pc}
	...

1000bd04 <rpmsg_initialize_ept>:
{
1000bd04:	b580      	push	{r7, lr}
1000bd06:	b084      	sub	sp, #16
1000bd08:	af00      	add	r7, sp, #0
1000bd0a:	60f8      	str	r0, [r7, #12]
1000bd0c:	60b9      	str	r1, [r7, #8]
1000bd0e:	607a      	str	r2, [r7, #4]
1000bd10:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000bd12:	68f8      	ldr	r0, [r7, #12]
1000bd14:	68bb      	ldr	r3, [r7, #8]
1000bd16:	2b00      	cmp	r3, #0
1000bd18:	d001      	beq.n	1000bd1e <rpmsg_initialize_ept+0x1a>
1000bd1a:	68bb      	ldr	r3, [r7, #8]
1000bd1c:	e000      	b.n	1000bd20 <rpmsg_initialize_ept+0x1c>
1000bd1e:	4b0a      	ldr	r3, [pc, #40]	@ (1000bd48 <rpmsg_initialize_ept+0x44>)
1000bd20:	2220      	movs	r2, #32
1000bd22:	4619      	mov	r1, r3
1000bd24:	f002 f855 	bl	1000ddd2 <strncpy>
	ept->addr = src;
1000bd28:	68fb      	ldr	r3, [r7, #12]
1000bd2a:	687a      	ldr	r2, [r7, #4]
1000bd2c:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
1000bd2e:	68fb      	ldr	r3, [r7, #12]
1000bd30:	683a      	ldr	r2, [r7, #0]
1000bd32:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
1000bd34:	68fb      	ldr	r3, [r7, #12]
1000bd36:	69ba      	ldr	r2, [r7, #24]
1000bd38:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
1000bd3a:	68fb      	ldr	r3, [r7, #12]
1000bd3c:	69fa      	ldr	r2, [r7, #28]
1000bd3e:	631a      	str	r2, [r3, #48]	@ 0x30
}
1000bd40:	bf00      	nop
1000bd42:	3710      	adds	r7, #16
1000bd44:	46bd      	mov	sp, r7
1000bd46:	bd80      	pop	{r7, pc}
1000bd48:	100118d8 	.word	0x100118d8

1000bd4c <rpmsg_get_ept_from_addr>:
void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
1000bd4c:	b580      	push	{r7, lr}
1000bd4e:	b082      	sub	sp, #8
1000bd50:	af00      	add	r7, sp, #0
1000bd52:	6078      	str	r0, [r7, #4]
1000bd54:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
1000bd56:	f04f 33ff 	mov.w	r3, #4294967295
1000bd5a:	683a      	ldr	r2, [r7, #0]
1000bd5c:	2100      	movs	r1, #0
1000bd5e:	6878      	ldr	r0, [r7, #4]
1000bd60:	f7ff fd9c 	bl	1000b89c <rpmsg_get_endpoint>
1000bd64:	4603      	mov	r3, r0
}
1000bd66:	4618      	mov	r0, r3
1000bd68:	3708      	adds	r7, #8
1000bd6a:	46bd      	mov	sp, r7
1000bd6c:	bd80      	pop	{r7, pc}

1000bd6e <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
1000bd6e:	b480      	push	{r7}
1000bd70:	b085      	sub	sp, #20
1000bd72:	af00      	add	r7, sp, #0
1000bd74:	60f8      	str	r0, [r7, #12]
1000bd76:	60b9      	str	r1, [r7, #8]
1000bd78:	607a      	str	r2, [r7, #4]
	if (!shpool)
1000bd7a:	68fb      	ldr	r3, [r7, #12]
1000bd7c:	2b00      	cmp	r3, #0
1000bd7e:	d009      	beq.n	1000bd94 <rpmsg_virtio_init_shm_pool+0x26>
		return;
	shpool->base = shb;
1000bd80:	68fb      	ldr	r3, [r7, #12]
1000bd82:	68ba      	ldr	r2, [r7, #8]
1000bd84:	601a      	str	r2, [r3, #0]
	shpool->size = size;
1000bd86:	68fb      	ldr	r3, [r7, #12]
1000bd88:	687a      	ldr	r2, [r7, #4]
1000bd8a:	609a      	str	r2, [r3, #8]
	shpool->avail = size;
1000bd8c:	68fb      	ldr	r3, [r7, #12]
1000bd8e:	687a      	ldr	r2, [r7, #4]
1000bd90:	605a      	str	r2, [r3, #4]
1000bd92:	e000      	b.n	1000bd96 <rpmsg_virtio_init_shm_pool+0x28>
		return;
1000bd94:	bf00      	nop
}
1000bd96:	3714      	adds	r7, #20
1000bd98:	46bd      	mov	sp, r7
1000bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bd9e:	4770      	bx	lr

1000bda0 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000bda0:	b580      	push	{r7, lr}
1000bda2:	b086      	sub	sp, #24
1000bda4:	af00      	add	r7, sp, #0
1000bda6:	60f8      	str	r0, [r7, #12]
1000bda8:	60b9      	str	r1, [r7, #8]
1000bdaa:	607a      	str	r2, [r7, #4]
1000bdac:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000bdae:	68f8      	ldr	r0, [r7, #12]
1000bdb0:	f7ff ff50 	bl	1000bc54 <rpmsg_virtio_get_role>
1000bdb4:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000bdb6:	697b      	ldr	r3, [r7, #20]
1000bdb8:	2b01      	cmp	r3, #1
1000bdba:	d106      	bne.n	1000bdca <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
1000bdbc:	68fb      	ldr	r3, [r7, #12]
1000bdbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1000bdc0:	8879      	ldrh	r1, [r7, #2]
1000bdc2:	687a      	ldr	r2, [r7, #4]
1000bdc4:	4618      	mov	r0, r3
1000bdc6:	f000 fd6f 	bl	1000c8a8 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
1000bdca:	bf00      	nop
1000bdcc:	3718      	adds	r7, #24
1000bdce:	46bd      	mov	sp, r7
1000bdd0:	bd80      	pop	{r7, pc}

1000bdd2 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, uint32_t len,
				       uint16_t idx)
{
1000bdd2:	b580      	push	{r7, lr}
1000bdd4:	b086      	sub	sp, #24
1000bdd6:	af00      	add	r7, sp, #0
1000bdd8:	60f8      	str	r0, [r7, #12]
1000bdda:	60b9      	str	r1, [r7, #8]
1000bddc:	607a      	str	r2, [r7, #4]
1000bdde:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000bde0:	68f8      	ldr	r0, [r7, #12]
1000bde2:	f7ff ff37 	bl	1000bc54 <rpmsg_virtio_get_role>
1000bde6:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000bde8:	697b      	ldr	r3, [r7, #20]
1000bdea:	2b01      	cmp	r3, #1
1000bdec:	d109      	bne.n	1000be02 <rpmsg_virtio_enqueue_buffer+0x30>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
1000bdee:	68fb      	ldr	r3, [r7, #12]
1000bdf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000bdf4:	8879      	ldrh	r1, [r7, #2]
1000bdf6:	687a      	ldr	r2, [r7, #4]
1000bdf8:	4618      	mov	r0, r3
1000bdfa:	f000 fd55 	bl	1000c8a8 <virtqueue_add_consumed_buffer>
1000bdfe:	4603      	mov	r3, r0
1000be00:	e000      	b.n	1000be04 <rpmsg_virtio_enqueue_buffer+0x32>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
1000be02:	2300      	movs	r3, #0
}
1000be04:	4618      	mov	r0, r3
1000be06:	3718      	adds	r7, #24
1000be08:	46bd      	mov	sp, r7
1000be0a:	bd80      	pop	{r7, pc}

1000be0c <rpmsg_virtio_get_tx_buffer>:
 *
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000be0c:	b580      	push	{r7, lr}
1000be0e:	b086      	sub	sp, #24
1000be10:	af00      	add	r7, sp, #0
1000be12:	60f8      	str	r0, [r7, #12]
1000be14:	60b9      	str	r1, [r7, #8]
1000be16:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000be18:	68f8      	ldr	r0, [r7, #12]
1000be1a:	f7ff ff1b 	bl	1000bc54 <rpmsg_virtio_get_role>
1000be1e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000be20:	2300      	movs	r3, #0
1000be22:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000be24:	693b      	ldr	r3, [r7, #16]
1000be26:	2b01      	cmp	r3, #1
1000be28:	d108      	bne.n	1000be3c <rpmsg_virtio_get_tx_buffer+0x30>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
1000be2a:	68fb      	ldr	r3, [r7, #12]
1000be2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000be30:	68ba      	ldr	r2, [r7, #8]
1000be32:	6879      	ldr	r1, [r7, #4]
1000be34:	4618      	mov	r0, r3
1000be36:	f000 fcef 	bl	1000c818 <virtqueue_get_available_buffer>
1000be3a:	6178      	str	r0, [r7, #20]
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
1000be3c:	697b      	ldr	r3, [r7, #20]
}
1000be3e:	4618      	mov	r0, r3
1000be40:	3718      	adds	r7, #24
1000be42:	46bd      	mov	sp, r7
1000be44:	bd80      	pop	{r7, pc}

1000be46 <rpmsg_virtio_get_rx_buffer>:
 * @return - pointer to received buffer
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					uint32_t *len, uint16_t *idx)
{
1000be46:	b580      	push	{r7, lr}
1000be48:	b086      	sub	sp, #24
1000be4a:	af00      	add	r7, sp, #0
1000be4c:	60f8      	str	r0, [r7, #12]
1000be4e:	60b9      	str	r1, [r7, #8]
1000be50:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
1000be52:	68f8      	ldr	r0, [r7, #12]
1000be54:	f7ff fefe 	bl	1000bc54 <rpmsg_virtio_get_role>
1000be58:	6138      	str	r0, [r7, #16]
	void *data = NULL;
1000be5a:	2300      	movs	r3, #0
1000be5c:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000be5e:	693b      	ldr	r3, [r7, #16]
1000be60:	2b01      	cmp	r3, #1
1000be62:	d107      	bne.n	1000be74 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
1000be64:	68fb      	ldr	r3, [r7, #12]
1000be66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1000be68:	68ba      	ldr	r2, [r7, #8]
1000be6a:	6879      	ldr	r1, [r7, #4]
1000be6c:	4618      	mov	r0, r3
1000be6e:	f000 fcd3 	bl	1000c818 <virtqueue_get_available_buffer>
1000be72:	6178      	str	r0, [r7, #20]
#ifdef VIRTIO_CACHED_BUFFERS
	/* Invalidate the buffer before returning it */
	metal_cache_invalidate(data, *len);
#endif /* VIRTIO_CACHED_BUFFERS */

	return data;
1000be74:	697b      	ldr	r3, [r7, #20]
}
1000be76:	4618      	mov	r0, r3
1000be78:	3718      	adds	r7, #24
1000be7a:	46bd      	mov	sp, r7
1000be7c:	bd80      	pop	{r7, pc}

1000be7e <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
1000be7e:	b580      	push	{r7, lr}
1000be80:	b084      	sub	sp, #16
1000be82:	af00      	add	r7, sp, #0
1000be84:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
1000be86:	6878      	ldr	r0, [r7, #4]
1000be88:	f7ff ff04 	bl	1000bc94 <rpmsg_virtio_get_status>
1000be8c:	4603      	mov	r3, r0
1000be8e:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
1000be90:	7bfb      	ldrb	r3, [r7, #15]
1000be92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
1000be96:	2b00      	cmp	r3, #0
1000be98:	d004      	beq.n	1000bea4 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
1000be9a:	2100      	movs	r1, #0
1000be9c:	6878      	ldr	r0, [r7, #4]
1000be9e:	f7ff fee6 	bl	1000bc6e <rpmsg_virtio_set_status>
1000bea2:	e7f0      	b.n	1000be86 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
1000bea4:	7bfb      	ldrb	r3, [r7, #15]
1000bea6:	f003 0304 	and.w	r3, r3, #4
1000beaa:	2b00      	cmp	r3, #0
1000beac:	d0eb      	beq.n	1000be86 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
1000beae:	2301      	movs	r3, #1
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
1000beb0:	4618      	mov	r0, r3
1000beb2:	3710      	adds	r7, #16
1000beb4:	46bd      	mov	sp, r7
1000beb6:	bd80      	pop	{r7, pc}

1000beb8 <rpmsg_virtio_hold_rx_buffer>:

	return length;
}

static void rpmsg_virtio_hold_rx_buffer(struct rpmsg_device *rdev, void *rxbuf)
{
1000beb8:	b480      	push	{r7}
1000beba:	b085      	sub	sp, #20
1000bebc:	af00      	add	r7, sp, #0
1000bebe:	6078      	str	r0, [r7, #4]
1000bec0:	6039      	str	r1, [r7, #0]
	struct rpmsg_hdr *rp_hdr;

	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000bec2:	683b      	ldr	r3, [r7, #0]
1000bec4:	3b10      	subs	r3, #16
1000bec6:	60fb      	str	r3, [r7, #12]

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
1000bec8:	68fb      	ldr	r3, [r7, #12]
1000beca:	689b      	ldr	r3, [r3, #8]
1000becc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
1000bed0:	68fb      	ldr	r3, [r7, #12]
1000bed2:	609a      	str	r2, [r3, #8]
}
1000bed4:	bf00      	nop
1000bed6:	3714      	adds	r7, #20
1000bed8:	46bd      	mov	sp, r7
1000beda:	f85d 7b04 	ldr.w	r7, [sp], #4
1000bede:	4770      	bx	lr

1000bee0 <rpmsg_virtio_release_rx_buffer>:

static void rpmsg_virtio_release_rx_buffer(struct rpmsg_device *rdev,
					   void *rxbuf)
{
1000bee0:	b580      	push	{r7, lr}
1000bee2:	b086      	sub	sp, #24
1000bee4:	af00      	add	r7, sp, #0
1000bee6:	6078      	str	r0, [r7, #4]
1000bee8:	6039      	str	r1, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr *rp_hdr;
	uint16_t idx;
	uint32_t len;

	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000beea:	687b      	ldr	r3, [r7, #4]
1000beec:	617b      	str	r3, [r7, #20]
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
1000beee:	683b      	ldr	r3, [r7, #0]
1000bef0:	3b10      	subs	r3, #16
1000bef2:	613b      	str	r3, [r7, #16]
	/* The reserved field contains buffer index */
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
1000bef4:	693b      	ldr	r3, [r7, #16]
1000bef6:	689b      	ldr	r3, [r3, #8]
1000bef8:	81fb      	strh	r3, [r7, #14]

	metal_mutex_acquire(&rdev->lock);
1000befa:	687b      	ldr	r3, [r7, #4]
1000befc:	3358      	adds	r3, #88	@ 0x58
1000befe:	4618      	mov	r0, r3
1000bf00:	f7ff fe92 	bl	1000bc28 <metal_mutex_acquire>
	/* Return buffer on virtqueue. */
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
1000bf04:	697b      	ldr	r3, [r7, #20]
1000bf06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1000bf08:	89fa      	ldrh	r2, [r7, #14]
1000bf0a:	4611      	mov	r1, r2
1000bf0c:	4618      	mov	r0, r3
1000bf0e:	f000 fc71 	bl	1000c7f4 <virtqueue_get_buffer_length>
1000bf12:	60b8      	str	r0, [r7, #8]
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000bf14:	89fb      	ldrh	r3, [r7, #14]
1000bf16:	68ba      	ldr	r2, [r7, #8]
1000bf18:	6939      	ldr	r1, [r7, #16]
1000bf1a:	6978      	ldr	r0, [r7, #20]
1000bf1c:	f7ff ff40 	bl	1000bda0 <rpmsg_virtio_return_buffer>
	metal_mutex_release(&rdev->lock);
1000bf20:	687b      	ldr	r3, [r7, #4]
1000bf22:	3358      	adds	r3, #88	@ 0x58
1000bf24:	4618      	mov	r0, r3
1000bf26:	f7ff fe8a 	bl	1000bc3e <metal_mutex_release>
}
1000bf2a:	bf00      	nop
1000bf2c:	3718      	adds	r7, #24
1000bf2e:	46bd      	mov	sp, r7
1000bf30:	bd80      	pop	{r7, pc}

1000bf32 <rpmsg_virtio_get_tx_payload_buffer>:

static void *rpmsg_virtio_get_tx_payload_buffer(struct rpmsg_device *rdev,
						uint32_t *len, int wait)
{
1000bf32:	b580      	push	{r7, lr}
1000bf34:	b08a      	sub	sp, #40	@ 0x28
1000bf36:	af00      	add	r7, sp, #0
1000bf38:	60f8      	str	r0, [r7, #12]
1000bf3a:	60b9      	str	r1, [r7, #8]
1000bf3c:	607a      	str	r2, [r7, #4]
	uint16_t idx;
	int tick_count;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000bf3e:	68fb      	ldr	r3, [r7, #12]
1000bf40:	623b      	str	r3, [r7, #32]

	/* Validate device state */
	status = rpmsg_virtio_get_status(rvdev);
1000bf42:	6a38      	ldr	r0, [r7, #32]
1000bf44:	f7ff fea6 	bl	1000bc94 <rpmsg_virtio_get_status>
1000bf48:	4603      	mov	r3, r0
1000bf4a:	61fb      	str	r3, [r7, #28]
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
1000bf4c:	69fb      	ldr	r3, [r7, #28]
1000bf4e:	f003 0304 	and.w	r3, r3, #4
1000bf52:	2b00      	cmp	r3, #0
1000bf54:	d101      	bne.n	1000bf5a <rpmsg_virtio_get_tx_payload_buffer+0x28>
		return NULL;
1000bf56:	2300      	movs	r3, #0
1000bf58:	e039      	b.n	1000bfce <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	if (wait)
1000bf5a:	687b      	ldr	r3, [r7, #4]
1000bf5c:	2b00      	cmp	r3, #0
1000bf5e:	d003      	beq.n	1000bf68 <rpmsg_virtio_get_tx_payload_buffer+0x36>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
1000bf60:	f643 2398 	movw	r3, #15000	@ 0x3a98
1000bf64:	627b      	str	r3, [r7, #36]	@ 0x24
1000bf66:	e001      	b.n	1000bf6c <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	else
		tick_count = 0;
1000bf68:	2300      	movs	r3, #0
1000bf6a:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
1000bf6c:	68fb      	ldr	r3, [r7, #12]
1000bf6e:	3358      	adds	r3, #88	@ 0x58
1000bf70:	4618      	mov	r0, r3
1000bf72:	f7ff fe59 	bl	1000bc28 <metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
1000bf76:	f107 0316 	add.w	r3, r7, #22
1000bf7a:	461a      	mov	r2, r3
1000bf7c:	68b9      	ldr	r1, [r7, #8]
1000bf7e:	6a38      	ldr	r0, [r7, #32]
1000bf80:	f7ff ff44 	bl	1000be0c <rpmsg_virtio_get_tx_buffer>
1000bf84:	61b8      	str	r0, [r7, #24]
		metal_mutex_release(&rdev->lock);
1000bf86:	68fb      	ldr	r3, [r7, #12]
1000bf88:	3358      	adds	r3, #88	@ 0x58
1000bf8a:	4618      	mov	r0, r3
1000bf8c:	f7ff fe57 	bl	1000bc3e <metal_mutex_release>
		if (rp_hdr || !tick_count)
1000bf90:	69bb      	ldr	r3, [r7, #24]
1000bf92:	2b00      	cmp	r3, #0
1000bf94:	d10a      	bne.n	1000bfac <rpmsg_virtio_get_tx_payload_buffer+0x7a>
1000bf96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000bf98:	2b00      	cmp	r3, #0
1000bf9a:	d007      	beq.n	1000bfac <rpmsg_virtio_get_tx_payload_buffer+0x7a>
			break;
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
1000bf9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
1000bfa0:	f7ff fda7 	bl	1000baf2 <metal_sleep_usec>
		tick_count--;
1000bfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000bfa6:	3b01      	subs	r3, #1
1000bfa8:	627b      	str	r3, [r7, #36]	@ 0x24
		metal_mutex_acquire(&rdev->lock);
1000bfaa:	e7df      	b.n	1000bf6c <rpmsg_virtio_get_tx_payload_buffer+0x3a>
	}

	if (!rp_hdr)
1000bfac:	69bb      	ldr	r3, [r7, #24]
1000bfae:	2b00      	cmp	r3, #0
1000bfb0:	d101      	bne.n	1000bfb6 <rpmsg_virtio_get_tx_payload_buffer+0x84>
		return NULL;
1000bfb2:	2300      	movs	r3, #0
1000bfb4:	e00b      	b.n	1000bfce <rpmsg_virtio_get_tx_payload_buffer+0x9c>

	/* Store the index into the reserved field to be used when sending */
	rp_hdr->reserved = idx;
1000bfb6:	8afb      	ldrh	r3, [r7, #22]
1000bfb8:	461a      	mov	r2, r3
1000bfba:	69bb      	ldr	r3, [r7, #24]
1000bfbc:	609a      	str	r2, [r3, #8]

	/* Actual data buffer size is vring buffer size minus header length */
	*len -= sizeof(struct rpmsg_hdr);
1000bfbe:	68bb      	ldr	r3, [r7, #8]
1000bfc0:	681b      	ldr	r3, [r3, #0]
1000bfc2:	f1a3 0210 	sub.w	r2, r3, #16
1000bfc6:	68bb      	ldr	r3, [r7, #8]
1000bfc8:	601a      	str	r2, [r3, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
1000bfca:	69bb      	ldr	r3, [r7, #24]
1000bfcc:	3310      	adds	r3, #16
}
1000bfce:	4618      	mov	r0, r3
1000bfd0:	3728      	adds	r7, #40	@ 0x28
1000bfd2:	46bd      	mov	sp, r7
1000bfd4:	bd80      	pop	{r7, pc}
	...

1000bfd8 <rpmsg_virtio_send_offchannel_nocopy>:

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
1000bfd8:	b580      	push	{r7, lr}
1000bfda:	b08e      	sub	sp, #56	@ 0x38
1000bfdc:	af00      	add	r7, sp, #0
1000bfde:	60f8      	str	r0, [r7, #12]
1000bfe0:	60b9      	str	r1, [r7, #8]
1000bfe2:	607a      	str	r2, [r7, #4]
1000bfe4:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	uint16_t idx;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000bfe6:	68fb      	ldr	r3, [r7, #12]
1000bfe8:	637b      	str	r3, [r7, #52]	@ 0x34

	hdr = RPMSG_LOCATE_HDR(data);
1000bfea:	683b      	ldr	r3, [r7, #0]
1000bfec:	3b10      	subs	r3, #16
1000bfee:	633b      	str	r3, [r7, #48]	@ 0x30
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
1000bff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000bff2:	689b      	ldr	r3, [r3, #8]
1000bff4:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
1000bff6:	687b      	ldr	r3, [r7, #4]
1000bff8:	617b      	str	r3, [r7, #20]
	rp_hdr.src = src;
1000bffa:	68bb      	ldr	r3, [r7, #8]
1000bffc:	613b      	str	r3, [r7, #16]
	rp_hdr.len = len;
1000bffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000c000:	b29b      	uxth	r3, r3
1000c002:	83bb      	strh	r3, [r7, #28]
	rp_hdr.reserved = 0;
1000c004:	2300      	movs	r3, #0
1000c006:	61bb      	str	r3, [r7, #24]
	rp_hdr.flags = 0;
1000c008:	2300      	movs	r3, #0
1000c00a:	83fb      	strh	r3, [r7, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
1000c00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000c00e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000c012:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
1000c014:	6b39      	ldr	r1, [r7, #48]	@ 0x30
1000c016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1000c018:	f7ff fd87 	bl	1000bb2a <metal_io_virt_to_offset>
1000c01c:	4601      	mov	r1, r0
1000c01e:	f107 0210 	add.w	r2, r7, #16
1000c022:	2310      	movs	r3, #16
1000c024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1000c026:	f7fe fe1b 	bl	1000ac60 <metal_io_block_write>
1000c02a:	6278      	str	r0, [r7, #36]	@ 0x24
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
1000c02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c02e:	2b10      	cmp	r3, #16
1000c030:	d006      	beq.n	1000c040 <rpmsg_virtio_send_offchannel_nocopy+0x68>
1000c032:	4b1b      	ldr	r3, [pc, #108]	@ (1000c0a0 <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
1000c034:	4a1b      	ldr	r2, [pc, #108]	@ (1000c0a4 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000c036:	f240 117d 	movw	r1, #381	@ 0x17d
1000c03a:	481b      	ldr	r0, [pc, #108]	@ (1000c0a8 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000c03c:	f000 fdd4 	bl	1000cbe8 <__assert_func>

	metal_mutex_acquire(&rdev->lock);
1000c040:	68fb      	ldr	r3, [r7, #12]
1000c042:	3358      	adds	r3, #88	@ 0x58
1000c044:	4618      	mov	r0, r3
1000c046:	f7ff fdef 	bl	1000bc28 <metal_mutex_acquire>
#ifndef VIRTIO_SLAVE_ONLY
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_MASTER)
		buff_len = RPMSG_BUFFER_SIZE;
	else
#endif /*!VIRTIO_SLAVE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
1000c04a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000c04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000c050:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
1000c052:	4611      	mov	r1, r2
1000c054:	4618      	mov	r0, r3
1000c056:	f000 fbcd 	bl	1000c7f4 <virtqueue_get_buffer_length>
1000c05a:	6238      	str	r0, [r7, #32]

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
1000c05c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
1000c05e:	6a3a      	ldr	r2, [r7, #32]
1000c060:	6b39      	ldr	r1, [r7, #48]	@ 0x30
1000c062:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1000c064:	f7ff feb5 	bl	1000bdd2 <rpmsg_virtio_enqueue_buffer>
1000c068:	6278      	str	r0, [r7, #36]	@ 0x24
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
1000c06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c06c:	2b00      	cmp	r3, #0
1000c06e:	d006      	beq.n	1000c07e <rpmsg_virtio_send_offchannel_nocopy+0xa6>
1000c070:	4b0e      	ldr	r3, [pc, #56]	@ (1000c0ac <rpmsg_virtio_send_offchannel_nocopy+0xd4>)
1000c072:	4a0c      	ldr	r2, [pc, #48]	@ (1000c0a4 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
1000c074:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
1000c078:	480b      	ldr	r0, [pc, #44]	@ (1000c0a8 <rpmsg_virtio_send_offchannel_nocopy+0xd0>)
1000c07a:	f000 fdb5 	bl	1000cbe8 <__assert_func>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
1000c07e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000c080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000c084:	4618      	mov	r0, r3
1000c086:	f000 fc89 	bl	1000c99c <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
1000c08a:	68fb      	ldr	r3, [r7, #12]
1000c08c:	3358      	adds	r3, #88	@ 0x58
1000c08e:	4618      	mov	r0, r3
1000c090:	f7ff fdd5 	bl	1000bc3e <metal_mutex_release>

	return len;
1000c094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
1000c096:	4618      	mov	r0, r3
1000c098:	3738      	adds	r7, #56	@ 0x38
1000c09a:	46bd      	mov	sp, r7
1000c09c:	bd80      	pop	{r7, pc}
1000c09e:	bf00      	nop
1000c0a0:	100118dc 	.word	0x100118dc
1000c0a4:	100121b8 	.word	0x100121b8
1000c0a8:	100118f8 	.word	0x100118f8
1000c0ac:	10011984 	.word	0x10011984

1000c0b0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
1000c0b0:	b580      	push	{r7, lr}
1000c0b2:	b08c      	sub	sp, #48	@ 0x30
1000c0b4:	af02      	add	r7, sp, #8
1000c0b6:	60f8      	str	r0, [r7, #12]
1000c0b8:	60b9      	str	r1, [r7, #8]
1000c0ba:	607a      	str	r2, [r7, #4]
1000c0bc:	603b      	str	r3, [r7, #0]
	uint32_t buff_len;
	void *buffer;
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
1000c0be:	68fb      	ldr	r3, [r7, #12]
1000c0c0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
1000c0c2:	f107 0314 	add.w	r3, r7, #20
1000c0c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000c0c8:	4619      	mov	r1, r3
1000c0ca:	68f8      	ldr	r0, [r7, #12]
1000c0cc:	f7ff ff31 	bl	1000bf32 <rpmsg_virtio_get_tx_payload_buffer>
1000c0d0:	6238      	str	r0, [r7, #32]
	if (!buffer)
1000c0d2:	6a3b      	ldr	r3, [r7, #32]
1000c0d4:	2b00      	cmp	r3, #0
1000c0d6:	d101      	bne.n	1000c0dc <rpmsg_virtio_send_offchannel_raw+0x2c>
		return RPMSG_ERR_NO_BUFF;
1000c0d8:	4b17      	ldr	r3, [pc, #92]	@ (1000c138 <rpmsg_virtio_send_offchannel_raw+0x88>)
1000c0da:	e029      	b.n	1000c130 <rpmsg_virtio_send_offchannel_raw+0x80>

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
1000c0dc:	697b      	ldr	r3, [r7, #20]
1000c0de:	461a      	mov	r2, r3
1000c0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c0e2:	4293      	cmp	r3, r2
1000c0e4:	dd01      	ble.n	1000c0ea <rpmsg_virtio_send_offchannel_raw+0x3a>
		len = buff_len;
1000c0e6:	697b      	ldr	r3, [r7, #20]
1000c0e8:	633b      	str	r3, [r7, #48]	@ 0x30
	io = rvdev->shbuf_io;
1000c0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c0ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000c0f0:	61fb      	str	r3, [r7, #28]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
1000c0f2:	6a39      	ldr	r1, [r7, #32]
1000c0f4:	69f8      	ldr	r0, [r7, #28]
1000c0f6:	f7ff fd18 	bl	1000bb2a <metal_io_virt_to_offset>
1000c0fa:	4601      	mov	r1, r0
1000c0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c0fe:	683a      	ldr	r2, [r7, #0]
1000c100:	69f8      	ldr	r0, [r7, #28]
1000c102:	f7fe fdad 	bl	1000ac60 <metal_io_block_write>
1000c106:	61b8      	str	r0, [r7, #24]
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
1000c108:	69ba      	ldr	r2, [r7, #24]
1000c10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c10c:	429a      	cmp	r2, r3
1000c10e:	d006      	beq.n	1000c11e <rpmsg_virtio_send_offchannel_raw+0x6e>
1000c110:	4b0a      	ldr	r3, [pc, #40]	@ (1000c13c <rpmsg_virtio_send_offchannel_raw+0x8c>)
1000c112:	4a0b      	ldr	r2, [pc, #44]	@ (1000c140 <rpmsg_virtio_send_offchannel_raw+0x90>)
1000c114:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
1000c118:	480a      	ldr	r0, [pc, #40]	@ (1000c144 <rpmsg_virtio_send_offchannel_raw+0x94>)
1000c11a:	f000 fd65 	bl	1000cbe8 <__assert_func>

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
1000c11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c120:	9300      	str	r3, [sp, #0]
1000c122:	6a3b      	ldr	r3, [r7, #32]
1000c124:	687a      	ldr	r2, [r7, #4]
1000c126:	68b9      	ldr	r1, [r7, #8]
1000c128:	68f8      	ldr	r0, [r7, #12]
1000c12a:	f7ff ff55 	bl	1000bfd8 <rpmsg_virtio_send_offchannel_nocopy>
1000c12e:	4603      	mov	r3, r0
}
1000c130:	4618      	mov	r0, r3
1000c132:	3728      	adds	r7, #40	@ 0x28
1000c134:	46bd      	mov	sp, r7
1000c136:	bd80      	pop	{r7, pc}
1000c138:	fffff82e 	.word	0xfffff82e
1000c13c:	10011990 	.word	0x10011990
1000c140:	100121dc 	.word	0x100121dc
1000c144:	100118f8 	.word	0x100118f8

1000c148 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
1000c148:	b480      	push	{r7}
1000c14a:	b083      	sub	sp, #12
1000c14c:	af00      	add	r7, sp, #0
1000c14e:	6078      	str	r0, [r7, #4]
	(void)vq;
}
1000c150:	bf00      	nop
1000c152:	370c      	adds	r7, #12
1000c154:	46bd      	mov	sp, r7
1000c156:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c15a:	4770      	bx	lr

1000c15c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
1000c15c:	b590      	push	{r4, r7, lr}
1000c15e:	b08d      	sub	sp, #52	@ 0x34
1000c160:	af02      	add	r7, sp, #8
1000c162:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
1000c164:	687b      	ldr	r3, [r7, #4]
1000c166:	681b      	ldr	r3, [r3, #0]
1000c168:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
1000c16a:	6a3b      	ldr	r3, [r7, #32]
1000c16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000c16e:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
1000c170:	69fb      	ldr	r3, [r7, #28]
1000c172:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
1000c174:	69bb      	ldr	r3, [r7, #24]
1000c176:	3358      	adds	r3, #88	@ 0x58
1000c178:	4618      	mov	r0, r3
1000c17a:	f7ff fd55 	bl	1000bc28 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000c17e:	f107 020a 	add.w	r2, r7, #10
1000c182:	f107 030c 	add.w	r3, r7, #12
1000c186:	4619      	mov	r1, r3
1000c188:	69f8      	ldr	r0, [r7, #28]
1000c18a:	f7ff fe5c 	bl	1000be46 <rpmsg_virtio_get_rx_buffer>
1000c18e:	6278      	str	r0, [r7, #36]	@ 0x24

	metal_mutex_release(&rdev->lock);
1000c190:	69bb      	ldr	r3, [r7, #24]
1000c192:	3358      	adds	r3, #88	@ 0x58
1000c194:	4618      	mov	r0, r3
1000c196:	f7ff fd52 	bl	1000bc3e <metal_mutex_release>

	while (rp_hdr) {
1000c19a:	e062      	b.n	1000c262 <rpmsg_virtio_rx_callback+0x106>
		rp_hdr->reserved = idx;
1000c19c:	897b      	ldrh	r3, [r7, #10]
1000c19e:	461a      	mov	r2, r3
1000c1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c1a2:	609a      	str	r2, [r3, #8]

		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
1000c1a4:	69bb      	ldr	r3, [r7, #24]
1000c1a6:	3358      	adds	r3, #88	@ 0x58
1000c1a8:	4618      	mov	r0, r3
1000c1aa:	f7ff fd3d 	bl	1000bc28 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
1000c1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c1b0:	685b      	ldr	r3, [r3, #4]
1000c1b2:	4619      	mov	r1, r3
1000c1b4:	69b8      	ldr	r0, [r7, #24]
1000c1b6:	f7ff fdc9 	bl	1000bd4c <rpmsg_get_ept_from_addr>
1000c1ba:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
1000c1bc:	69bb      	ldr	r3, [r7, #24]
1000c1be:	3358      	adds	r3, #88	@ 0x58
1000c1c0:	4618      	mov	r0, r3
1000c1c2:	f7ff fd3c 	bl	1000bc3e <metal_mutex_release>

		if (ept) {
1000c1c6:	697b      	ldr	r3, [r7, #20]
1000c1c8:	2b00      	cmp	r3, #0
1000c1ca:	d025      	beq.n	1000c218 <rpmsg_virtio_rx_callback+0xbc>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
1000c1cc:	697b      	ldr	r3, [r7, #20]
1000c1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000c1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c1d4:	d103      	bne.n	1000c1de <rpmsg_virtio_rx_callback+0x82>
				/*
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
1000c1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c1d8:	681a      	ldr	r2, [r3, #0]
1000c1da:	697b      	ldr	r3, [r7, #20]
1000c1dc:	629a      	str	r2, [r3, #40]	@ 0x28
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000c1de:	697b      	ldr	r3, [r7, #20]
1000c1e0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
1000c1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c1e4:	f103 0110 	add.w	r1, r3, #16
					 rp_hdr->len, rp_hdr->src, ept->priv);
1000c1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c1ea:	899b      	ldrh	r3, [r3, #12]
1000c1ec:	b29b      	uxth	r3, r3
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000c1ee:	4618      	mov	r0, r3
1000c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c1f2:	681a      	ldr	r2, [r3, #0]
1000c1f4:	697b      	ldr	r3, [r7, #20]
1000c1f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1000c1f8:	9300      	str	r3, [sp, #0]
1000c1fa:	4613      	mov	r3, r2
1000c1fc:	4602      	mov	r2, r0
1000c1fe:	6978      	ldr	r0, [r7, #20]
1000c200:	47a0      	blx	r4
1000c202:	6138      	str	r0, [r7, #16]

			RPMSG_ASSERT(status >= 0,
1000c204:	693b      	ldr	r3, [r7, #16]
1000c206:	2b00      	cmp	r3, #0
1000c208:	da06      	bge.n	1000c218 <rpmsg_virtio_rx_callback+0xbc>
1000c20a:	4b1a      	ldr	r3, [pc, #104]	@ (1000c274 <rpmsg_virtio_rx_callback+0x118>)
1000c20c:	4a1a      	ldr	r2, [pc, #104]	@ (1000c278 <rpmsg_virtio_rx_callback+0x11c>)
1000c20e:	f44f 71fd 	mov.w	r1, #506	@ 0x1fa
1000c212:	481a      	ldr	r0, [pc, #104]	@ (1000c27c <rpmsg_virtio_rx_callback+0x120>)
1000c214:	f000 fce8 	bl	1000cbe8 <__assert_func>
				     "unexpected callback status\r\n");
		}

		metal_mutex_acquire(&rdev->lock);
1000c218:	69bb      	ldr	r3, [r7, #24]
1000c21a:	3358      	adds	r3, #88	@ 0x58
1000c21c:	4618      	mov	r0, r3
1000c21e:	f7ff fd03 	bl	1000bc28 <metal_mutex_acquire>

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
1000c222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c224:	689b      	ldr	r3, [r3, #8]
1000c226:	2b00      	cmp	r3, #0
1000c228:	db05      	blt.n	1000c236 <rpmsg_virtio_rx_callback+0xda>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000c22a:	68fa      	ldr	r2, [r7, #12]
1000c22c:	897b      	ldrh	r3, [r7, #10]
1000c22e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1000c230:	69f8      	ldr	r0, [r7, #28]
1000c232:	f7ff fdb5 	bl	1000bda0 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000c236:	f107 020a 	add.w	r2, r7, #10
1000c23a:	f107 030c 	add.w	r3, r7, #12
1000c23e:	4619      	mov	r1, r3
1000c240:	69f8      	ldr	r0, [r7, #28]
1000c242:	f7ff fe00 	bl	1000be46 <rpmsg_virtio_get_rx_buffer>
1000c246:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!rp_hdr) {
1000c248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c24a:	2b00      	cmp	r3, #0
1000c24c:	d104      	bne.n	1000c258 <rpmsg_virtio_rx_callback+0xfc>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
1000c24e:	69fb      	ldr	r3, [r7, #28]
1000c250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1000c252:	4618      	mov	r0, r3
1000c254:	f000 fba2 	bl	1000c99c <virtqueue_kick>
		}
		metal_mutex_release(&rdev->lock);
1000c258:	69bb      	ldr	r3, [r7, #24]
1000c25a:	3358      	adds	r3, #88	@ 0x58
1000c25c:	4618      	mov	r0, r3
1000c25e:	f7ff fcee 	bl	1000bc3e <metal_mutex_release>
	while (rp_hdr) {
1000c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c264:	2b00      	cmp	r3, #0
1000c266:	d199      	bne.n	1000c19c <rpmsg_virtio_rx_callback+0x40>
	}
}
1000c268:	bf00      	nop
1000c26a:	bf00      	nop
1000c26c:	372c      	adds	r7, #44	@ 0x2c
1000c26e:	46bd      	mov	sp, r7
1000c270:	bd90      	pop	{r4, r7, pc}
1000c272:	bf00      	nop
1000c274:	100119a0 	.word	0x100119a0
1000c278:	10012200 	.word	0x10012200
1000c27c:	100118f8 	.word	0x100118f8

1000c280 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
1000c280:	b580      	push	{r7, lr}
1000c282:	b092      	sub	sp, #72	@ 0x48
1000c284:	af00      	add	r7, sp, #0
1000c286:	60f8      	str	r0, [r7, #12]
1000c288:	60b9      	str	r1, [r7, #8]
1000c28a:	607a      	str	r2, [r7, #4]
1000c28c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
1000c28e:	68fb      	ldr	r3, [r7, #12]
1000c290:	6a1b      	ldr	r3, [r3, #32]
1000c292:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
1000c294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000c296:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
1000c298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000c29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
1000c29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = data;
1000c2a0:	68bb      	ldr	r3, [r7, #8]
1000c2a2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
1000c2a4:	687b      	ldr	r3, [r7, #4]
1000c2a6:	2b28      	cmp	r3, #40	@ 0x28
1000c2a8:	d001      	beq.n	1000c2ae <rpmsg_virtio_ns_callback+0x2e>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
1000c2aa:	2300      	movs	r3, #0
1000c2ac:	e057      	b.n	1000c35e <rpmsg_virtio_ns_callback+0xde>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
1000c2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
1000c2b0:	4619      	mov	r1, r3
1000c2b2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
1000c2b4:	f7ff fc39 	bl	1000bb2a <metal_io_virt_to_offset>
1000c2b8:	4601      	mov	r1, r0
1000c2ba:	f107 0210 	add.w	r2, r7, #16
1000c2be:	2320      	movs	r3, #32
1000c2c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
1000c2c2:	f7fe fc58 	bl	1000ab76 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
1000c2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1000c2c8:	6a1b      	ldr	r3, [r3, #32]
1000c2ca:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
1000c2cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000c2ce:	3358      	adds	r3, #88	@ 0x58
1000c2d0:	4618      	mov	r0, r3
1000c2d2:	f7ff fca9 	bl	1000bc28 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
1000c2d6:	f107 0110 	add.w	r1, r7, #16
1000c2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000c2dc:	f04f 32ff 	mov.w	r2, #4294967295
1000c2e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
1000c2e2:	f7ff fadb 	bl	1000b89c <rpmsg_get_endpoint>
1000c2e6:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
1000c2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1000c2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000c2ec:	f003 0301 	and.w	r3, r3, #1
1000c2f0:	2b00      	cmp	r3, #0
1000c2f2:	d017      	beq.n	1000c324 <rpmsg_virtio_ns_callback+0xa4>
		if (_ept)
1000c2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c2f6:	2b00      	cmp	r3, #0
1000c2f8:	d003      	beq.n	1000c302 <rpmsg_virtio_ns_callback+0x82>
			_ept->dest_addr = RPMSG_ADDR_ANY;
1000c2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c2fc:	f04f 32ff 	mov.w	r2, #4294967295
1000c300:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
1000c302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000c304:	3358      	adds	r3, #88	@ 0x58
1000c306:	4618      	mov	r0, r3
1000c308:	f7ff fc99 	bl	1000bc3e <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
1000c30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c30e:	2b00      	cmp	r3, #0
1000c310:	d024      	beq.n	1000c35c <rpmsg_virtio_ns_callback+0xdc>
1000c312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000c316:	2b00      	cmp	r3, #0
1000c318:	d020      	beq.n	1000c35c <rpmsg_virtio_ns_callback+0xdc>
			_ept->ns_unbind_cb(_ept);
1000c31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c31c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000c31e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1000c320:	4798      	blx	r3
1000c322:	e01b      	b.n	1000c35c <rpmsg_virtio_ns_callback+0xdc>
	} else {
		if (!_ept) {
1000c324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c326:	2b00      	cmp	r3, #0
1000c328:	d110      	bne.n	1000c34c <rpmsg_virtio_ns_callback+0xcc>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
1000c32a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000c32c:	3358      	adds	r3, #88	@ 0x58
1000c32e:	4618      	mov	r0, r3
1000c330:	f7ff fc85 	bl	1000bc3e <metal_mutex_release>
			if (rdev->ns_bind_cb)
1000c334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000c336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1000c338:	2b00      	cmp	r3, #0
1000c33a:	d00f      	beq.n	1000c35c <rpmsg_virtio_ns_callback+0xdc>
				rdev->ns_bind_cb(rdev, name, dest);
1000c33c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000c33e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1000c340:	f107 0110 	add.w	r1, r7, #16
1000c344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000c346:	6c78      	ldr	r0, [r7, #68]	@ 0x44
1000c348:	4798      	blx	r3
1000c34a:	e007      	b.n	1000c35c <rpmsg_virtio_ns_callback+0xdc>
		} else {
			_ept->dest_addr = dest;
1000c34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c34e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000c350:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
1000c352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000c354:	3358      	adds	r3, #88	@ 0x58
1000c356:	4618      	mov	r0, r3
1000c358:	f7ff fc71 	bl	1000bc3e <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
1000c35c:	2300      	movs	r3, #0
}
1000c35e:	4618      	mov	r0, r3
1000c360:	3748      	adds	r7, #72	@ 0x48
1000c362:	46bd      	mov	sp, r7
1000c364:	bd80      	pop	{r7, pc}
	...

1000c368 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
1000c368:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
1000c36c:	b090      	sub	sp, #64	@ 0x40
1000c36e:	af02      	add	r7, sp, #8
1000c370:	60f8      	str	r0, [r7, #12]
1000c372:	60b9      	str	r1, [r7, #8]
1000c374:	607a      	str	r2, [r7, #4]
1000c376:	603b      	str	r3, [r7, #0]
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
1000c378:	68fb      	ldr	r3, [r7, #12]
1000c37a:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
1000c37c:	2278      	movs	r2, #120	@ 0x78
1000c37e:	2100      	movs	r1, #0
1000c380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1000c382:	f001 fd0c 	bl	1000dd9e <memset>
	metal_mutex_init(&rdev->lock);
1000c386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c388:	3358      	adds	r3, #88	@ 0x58
1000c38a:	4618      	mov	r0, r3
1000c38c:	f7ff fc41 	bl	1000bc12 <metal_mutex_init>
	rvdev->vdev = vdev;
1000c390:	68fb      	ldr	r3, [r7, #12]
1000c392:	68ba      	ldr	r2, [r7, #8]
1000c394:	679a      	str	r2, [r3, #120]	@ 0x78
	rdev->ns_bind_cb = ns_bind_cb;
1000c396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c398:	687a      	ldr	r2, [r7, #4]
1000c39a:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
1000c39c:	68bb      	ldr	r3, [r7, #8]
1000c39e:	68fa      	ldr	r2, [r7, #12]
1000c3a0:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
1000c3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c3a4:	4a4c      	ldr	r2, [pc, #304]	@ (1000c4d8 <rpmsg_init_vdev+0x170>)
1000c3a6:	661a      	str	r2, [r3, #96]	@ 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
1000c3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c3aa:	4a4c      	ldr	r2, [pc, #304]	@ (1000c4dc <rpmsg_init_vdev+0x174>)
1000c3ac:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
1000c3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c3b0:	4a4b      	ldr	r2, [pc, #300]	@ (1000c4e0 <rpmsg_init_vdev+0x178>)
1000c3b2:	669a      	str	r2, [r3, #104]	@ 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
1000c3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c3b6:	4a4b      	ldr	r2, [pc, #300]	@ (1000c4e4 <rpmsg_init_vdev+0x17c>)
1000c3b8:	66da      	str	r2, [r3, #108]	@ 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
1000c3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c3bc:	4a4a      	ldr	r2, [pc, #296]	@ (1000c4e8 <rpmsg_init_vdev+0x180>)
1000c3be:	671a      	str	r2, [r3, #112]	@ 0x70
	role = rpmsg_virtio_get_role(rvdev);
1000c3c0:	68f8      	ldr	r0, [r7, #12]
1000c3c2:	f7ff fc47 	bl	1000bc54 <rpmsg_virtio_get_role>
1000c3c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
1000c3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000c3ca:	2b01      	cmp	r3, #1
1000c3cc:	d102      	bne.n	1000c3d4 <rpmsg_init_vdev+0x6c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
1000c3ce:	68f8      	ldr	r0, [r7, #12]
1000c3d0:	f7ff fd55 	bl	1000be7e <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
1000c3d4:	68f8      	ldr	r0, [r7, #12]
1000c3d6:	f7ff fc6e 	bl	1000bcb6 <rpmsg_virtio_get_features>
1000c3da:	4603      	mov	r3, r0
1000c3dc:	2200      	movs	r2, #0
1000c3de:	4698      	mov	r8, r3
1000c3e0:	4691      	mov	r9, r2
1000c3e2:	68bb      	ldr	r3, [r7, #8]
1000c3e4:	e9c3 8904 	strd	r8, r9, [r3, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
1000c3e8:	68bb      	ldr	r3, [r7, #8]
1000c3ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
1000c3ee:	f002 0401 	and.w	r4, r2, #1
1000c3f2:	2500      	movs	r5, #0
1000c3f4:	ea54 0305 	orrs.w	r3, r4, r5
1000c3f8:	bf14      	ite	ne
1000c3fa:	2301      	movne	r3, #1
1000c3fc:	2300      	moveq	r3, #0
1000c3fe:	b2da      	uxtb	r2, r3
1000c400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c402:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
1000c406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000c408:	2b01      	cmp	r3, #1
1000c40a:	d113      	bne.n	1000c434 <rpmsg_init_vdev+0xcc>
		vq_names[0] = "tx_vq";
1000c40c:	4b37      	ldr	r3, [pc, #220]	@ (1000c4ec <rpmsg_init_vdev+0x184>)
1000c40e:	61fb      	str	r3, [r7, #28]
		vq_names[1] = "rx_vq";
1000c410:	4b37      	ldr	r3, [pc, #220]	@ (1000c4f0 <rpmsg_init_vdev+0x188>)
1000c412:	623b      	str	r3, [r7, #32]
		callback[0] = rpmsg_virtio_tx_callback;
1000c414:	4b37      	ldr	r3, [pc, #220]	@ (1000c4f4 <rpmsg_init_vdev+0x18c>)
1000c416:	617b      	str	r3, [r7, #20]
		callback[1] = rpmsg_virtio_rx_callback;
1000c418:	4b37      	ldr	r3, [pc, #220]	@ (1000c4f8 <rpmsg_init_vdev+0x190>)
1000c41a:	61bb      	str	r3, [r7, #24]
		rvdev->rvq  = vdev->vrings_info[1].vq;
1000c41c:	68bb      	ldr	r3, [r7, #8]
1000c41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000c420:	3318      	adds	r3, #24
1000c422:	681a      	ldr	r2, [r3, #0]
1000c424:	68fb      	ldr	r3, [r7, #12]
1000c426:	67da      	str	r2, [r3, #124]	@ 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
1000c428:	68bb      	ldr	r3, [r7, #8]
1000c42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1000c42c:	681a      	ldr	r2, [r3, #0]
1000c42e:	68fb      	ldr	r3, [r7, #12]
1000c430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
1000c434:	68fb      	ldr	r3, [r7, #12]
1000c436:	683a      	ldr	r2, [r7, #0]
1000c438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
1000c43c:	f107 021c 	add.w	r2, r7, #28
1000c440:	f107 0314 	add.w	r3, r7, #20
1000c444:	9300      	str	r3, [sp, #0]
1000c446:	4613      	mov	r3, r2
1000c448:	2202      	movs	r2, #2
1000c44a:	2100      	movs	r1, #0
1000c44c:	68f8      	ldr	r0, [r7, #12]
1000c44e:	f7ff fc43 	bl	1000bcd8 <rpmsg_virtio_create_virtqueues>
1000c452:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
1000c454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000c456:	2b00      	cmp	r3, #0
1000c458:	d001      	beq.n	1000c45e <rpmsg_init_vdev+0xf6>
		return status;
1000c45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000c45c:	e037      	b.n	1000c4ce <rpmsg_init_vdev+0x166>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
1000c45e:	68fb      	ldr	r3, [r7, #12]
1000c460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000c464:	4618      	mov	r0, r3
1000c466:	f000 fa61 	bl	1000c92c <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000c46a:	2300      	movs	r3, #0
1000c46c:	637b      	str	r3, [r7, #52]	@ 0x34
1000c46e:	e00f      	b.n	1000c490 <rpmsg_init_vdev+0x128>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
1000c470:	68bb      	ldr	r3, [r7, #8]
1000c472:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000c474:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000c476:	4613      	mov	r3, r2
1000c478:	005b      	lsls	r3, r3, #1
1000c47a:	4413      	add	r3, r2
1000c47c:	00db      	lsls	r3, r3, #3
1000c47e:	440b      	add	r3, r1
1000c480:	681b      	ldr	r3, [r3, #0]
1000c482:	627b      	str	r3, [r7, #36]	@ 0x24
		vq->shm_io = shm_io;
1000c484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c486:	683a      	ldr	r2, [r7, #0]
1000c488:	629a      	str	r2, [r3, #40]	@ 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
1000c48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000c48c:	3301      	adds	r3, #1
1000c48e:	637b      	str	r3, [r7, #52]	@ 0x34
1000c490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000c492:	2b01      	cmp	r3, #1
1000c494:	d9ec      	bls.n	1000c470 <rpmsg_init_vdev+0x108>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
1000c496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c498:	4618      	mov	r0, r3
1000c49a:	f7ff fb36 	bl	1000bb0a <metal_list_init>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
1000c49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c4a0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
1000c4a4:	2b00      	cmp	r3, #0
1000c4a6:	d011      	beq.n	1000c4cc <rpmsg_init_vdev+0x164>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
1000c4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c4aa:	f103 0008 	add.w	r0, r3, #8
1000c4ae:	2300      	movs	r3, #0
1000c4b0:	9301      	str	r3, [sp, #4]
1000c4b2:	4b12      	ldr	r3, [pc, #72]	@ (1000c4fc <rpmsg_init_vdev+0x194>)
1000c4b4:	9300      	str	r3, [sp, #0]
1000c4b6:	2335      	movs	r3, #53	@ 0x35
1000c4b8:	2235      	movs	r2, #53	@ 0x35
1000c4ba:	4911      	ldr	r1, [pc, #68]	@ (1000c500 <rpmsg_init_vdev+0x198>)
1000c4bc:	f7ff fc22 	bl	1000bd04 <rpmsg_initialize_ept>
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
1000c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000c4c2:	3308      	adds	r3, #8
1000c4c4:	4619      	mov	r1, r3
1000c4c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1000c4c8:	f7ff fa73 	bl	1000b9b2 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
1000c4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
1000c4ce:	4618      	mov	r0, r3
1000c4d0:	3738      	adds	r7, #56	@ 0x38
1000c4d2:	46bd      	mov	sp, r7
1000c4d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
1000c4d8:	1000c0b1 	.word	0x1000c0b1
1000c4dc:	1000beb9 	.word	0x1000beb9
1000c4e0:	1000bee1 	.word	0x1000bee1
1000c4e4:	1000bf33 	.word	0x1000bf33
1000c4e8:	1000bfd9 	.word	0x1000bfd9
1000c4ec:	100119ac 	.word	0x100119ac
1000c4f0:	100119b4 	.word	0x100119b4
1000c4f4:	1000c149 	.word	0x1000c149
1000c4f8:	1000c15d 	.word	0x1000c15d
1000c4fc:	1000c281 	.word	0x1000c281
1000c500:	100119bc 	.word	0x100119bc

1000c504 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
1000c504:	b590      	push	{r4, r7, lr}
1000c506:	b08f      	sub	sp, #60	@ 0x3c
1000c508:	af04      	add	r7, sp, #16
1000c50a:	60f8      	str	r0, [r7, #12]
1000c50c:	60b9      	str	r1, [r7, #8]
1000c50e:	607a      	str	r2, [r7, #4]
1000c510:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
1000c512:	68fb      	ldr	r3, [r7, #12]
1000c514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000c516:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
1000c518:	687a      	ldr	r2, [r7, #4]
1000c51a:	6a3b      	ldr	r3, [r7, #32]
1000c51c:	429a      	cmp	r2, r3
1000c51e:	d901      	bls.n	1000c524 <virtio_create_virtqueues+0x20>
		return ERROR_VQUEUE_INVLD_PARAM;
1000c520:	4b1e      	ldr	r3, [pc, #120]	@ (1000c59c <virtio_create_virtqueues+0x98>)
1000c522:	e036      	b.n	1000c592 <virtio_create_virtqueues+0x8e>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
1000c524:	2300      	movs	r3, #0
1000c526:	627b      	str	r3, [r7, #36]	@ 0x24
1000c528:	e02e      	b.n	1000c588 <virtio_create_virtqueues+0x84>
		vring_info = &vdev->vrings_info[i];
1000c52a:	68fb      	ldr	r3, [r7, #12]
1000c52c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1000c52e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000c530:	4613      	mov	r3, r2
1000c532:	005b      	lsls	r3, r3, #1
1000c534:	4413      	add	r3, r2
1000c536:	00db      	lsls	r3, r3, #3
1000c538:	440b      	add	r3, r1
1000c53a:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
1000c53c:	69fb      	ldr	r3, [r7, #28]
1000c53e:	3304      	adds	r3, #4
1000c540:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000c542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c544:	b298      	uxth	r0, r3
1000c546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c548:	009b      	lsls	r3, r3, #2
1000c54a:	683a      	ldr	r2, [r7, #0]
1000c54c:	4413      	add	r3, r2
1000c54e:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000c550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c552:	009b      	lsls	r3, r3, #2
1000c554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
1000c556:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000c558:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
1000c55a:	68fa      	ldr	r2, [r7, #12]
1000c55c:	6a12      	ldr	r2, [r2, #32]
1000c55e:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
1000c560:	69f9      	ldr	r1, [r7, #28]
1000c562:	6809      	ldr	r1, [r1, #0]
1000c564:	9102      	str	r1, [sp, #8]
1000c566:	9201      	str	r2, [sp, #4]
1000c568:	9300      	str	r3, [sp, #0]
1000c56a:	69bb      	ldr	r3, [r7, #24]
1000c56c:	4622      	mov	r2, r4
1000c56e:	4601      	mov	r1, r0
1000c570:	68f8      	ldr	r0, [r7, #12]
1000c572:	f000 f90e 	bl	1000c792 <virtqueue_create>
1000c576:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
1000c578:	697b      	ldr	r3, [r7, #20]
1000c57a:	2b00      	cmp	r3, #0
1000c57c:	d001      	beq.n	1000c582 <virtio_create_virtqueues+0x7e>
			return ret;
1000c57e:	697b      	ldr	r3, [r7, #20]
1000c580:	e007      	b.n	1000c592 <virtio_create_virtqueues+0x8e>
	for (i = 0; i < nvqs; i++) {
1000c582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000c584:	3301      	adds	r3, #1
1000c586:	627b      	str	r3, [r7, #36]	@ 0x24
1000c588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000c58a:	687b      	ldr	r3, [r7, #4]
1000c58c:	429a      	cmp	r2, r3
1000c58e:	d3cc      	bcc.n	1000c52a <virtio_create_virtqueues+0x26>
	}
	return 0;
1000c590:	2300      	movs	r3, #0
}
1000c592:	4618      	mov	r0, r3
1000c594:	372c      	adds	r7, #44	@ 0x2c
1000c596:	46bd      	mov	sp, r7
1000c598:	bd90      	pop	{r4, r7, pc}
1000c59a:	bf00      	nop
1000c59c:	fffff440 	.word	0xfffff440

1000c5a0 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
1000c5a0:	b480      	push	{r7}
1000c5a2:	b085      	sub	sp, #20
1000c5a4:	af00      	add	r7, sp, #0
1000c5a6:	60f8      	str	r0, [r7, #12]
1000c5a8:	60b9      	str	r1, [r7, #8]
1000c5aa:	607a      	str	r2, [r7, #4]
1000c5ac:	603b      	str	r3, [r7, #0]
	vr->num = num;
1000c5ae:	68fb      	ldr	r3, [r7, #12]
1000c5b0:	68ba      	ldr	r2, [r7, #8]
1000c5b2:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
1000c5b4:	68fb      	ldr	r3, [r7, #12]
1000c5b6:	687a      	ldr	r2, [r7, #4]
1000c5b8:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
1000c5ba:	68bb      	ldr	r3, [r7, #8]
1000c5bc:	011b      	lsls	r3, r3, #4
1000c5be:	687a      	ldr	r2, [r7, #4]
1000c5c0:	441a      	add	r2, r3
1000c5c2:	68fb      	ldr	r3, [r7, #12]
1000c5c4:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
1000c5c6:	68fb      	ldr	r3, [r7, #12]
1000c5c8:	689a      	ldr	r2, [r3, #8]
1000c5ca:	68bb      	ldr	r3, [r7, #8]
1000c5cc:	005b      	lsls	r3, r3, #1
1000c5ce:	4413      	add	r3, r2
1000c5d0:	3304      	adds	r3, #4
1000c5d2:	461a      	mov	r2, r3
1000c5d4:	683b      	ldr	r3, [r7, #0]
1000c5d6:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
1000c5d8:	1c5a      	adds	r2, r3, #1
1000c5da:	683b      	ldr	r3, [r7, #0]
1000c5dc:	425b      	negs	r3, r3
1000c5de:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
1000c5e0:	461a      	mov	r2, r3
1000c5e2:	68fb      	ldr	r3, [r7, #12]
1000c5e4:	60da      	str	r2, [r3, #12]
}
1000c5e6:	bf00      	nop
1000c5e8:	3714      	adds	r7, #20
1000c5ea:	46bd      	mov	sp, r7
1000c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c5f0:	4770      	bx	lr

1000c5f2 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
1000c5f2:	b480      	push	{r7}
1000c5f4:	b083      	sub	sp, #12
1000c5f6:	af00      	add	r7, sp, #0
1000c5f8:	4603      	mov	r3, r0
1000c5fa:	80fb      	strh	r3, [r7, #6]
1000c5fc:	460b      	mov	r3, r1
1000c5fe:	80bb      	strh	r3, [r7, #4]
1000c600:	4613      	mov	r3, r2
1000c602:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
1000c604:	88ba      	ldrh	r2, [r7, #4]
1000c606:	88fb      	ldrh	r3, [r7, #6]
1000c608:	1ad3      	subs	r3, r2, r3
1000c60a:	b29b      	uxth	r3, r3
1000c60c:	3b01      	subs	r3, #1
1000c60e:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
1000c610:	88b9      	ldrh	r1, [r7, #4]
1000c612:	887b      	ldrh	r3, [r7, #2]
1000c614:	1acb      	subs	r3, r1, r3
1000c616:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
1000c618:	429a      	cmp	r2, r3
1000c61a:	bf34      	ite	cc
1000c61c:	2301      	movcc	r3, #1
1000c61e:	2300      	movcs	r3, #0
1000c620:	b2db      	uxtb	r3, r3
}
1000c622:	4618      	mov	r0, r3
1000c624:	370c      	adds	r7, #12
1000c626:	46bd      	mov	sp, r7
1000c628:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c62c:	4770      	bx	lr

1000c62e <metal_io_virt>:
{
1000c62e:	b480      	push	{r7}
1000c630:	b083      	sub	sp, #12
1000c632:	af00      	add	r7, sp, #0
1000c634:	6078      	str	r0, [r7, #4]
1000c636:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset < io->size
1000c638:	687b      	ldr	r3, [r7, #4]
1000c63a:	681b      	ldr	r3, [r3, #0]
		: NULL);
1000c63c:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c640:	d00a      	beq.n	1000c658 <metal_io_virt+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
1000c642:	687b      	ldr	r3, [r7, #4]
1000c644:	689b      	ldr	r3, [r3, #8]
1000c646:	683a      	ldr	r2, [r7, #0]
1000c648:	429a      	cmp	r2, r3
1000c64a:	d205      	bcs.n	1000c658 <metal_io_virt+0x2a>
		? (void *)((uintptr_t)io->virt + offset)
1000c64c:	687b      	ldr	r3, [r7, #4]
1000c64e:	681b      	ldr	r3, [r3, #0]
1000c650:	461a      	mov	r2, r3
1000c652:	683b      	ldr	r3, [r7, #0]
1000c654:	4413      	add	r3, r2
		: NULL);
1000c656:	e000      	b.n	1000c65a <metal_io_virt+0x2c>
1000c658:	2300      	movs	r3, #0
}
1000c65a:	4618      	mov	r0, r3
1000c65c:	370c      	adds	r7, #12
1000c65e:	46bd      	mov	sp, r7
1000c660:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c664:	4770      	bx	lr

1000c666 <metal_io_phys>:
{
1000c666:	b580      	push	{r7, lr}
1000c668:	b084      	sub	sp, #16
1000c66a:	af00      	add	r7, sp, #0
1000c66c:	6078      	str	r0, [r7, #4]
1000c66e:	6039      	str	r1, [r7, #0]
	if (!io->ops.offset_to_phys) {
1000c670:	687b      	ldr	r3, [r7, #4]
1000c672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000c674:	2b00      	cmp	r3, #0
1000c676:	d123      	bne.n	1000c6c0 <metal_io_phys+0x5a>
		unsigned long page = (io->page_shift >=
1000c678:	687b      	ldr	r3, [r7, #4]
1000c67a:	68db      	ldr	r3, [r3, #12]
				     0 : offset >> io->page_shift);
1000c67c:	2b1f      	cmp	r3, #31
1000c67e:	d805      	bhi.n	1000c68c <metal_io_phys+0x26>
1000c680:	687b      	ldr	r3, [r7, #4]
1000c682:	68db      	ldr	r3, [r3, #12]
1000c684:	683a      	ldr	r2, [r7, #0]
1000c686:	fa22 f303 	lsr.w	r3, r2, r3
1000c68a:	e000      	b.n	1000c68e <metal_io_phys+0x28>
1000c68c:	2300      	movs	r3, #0
		unsigned long page = (io->page_shift >=
1000c68e:	60fb      	str	r3, [r7, #12]
		return (io->physmap && offset < io->size
1000c690:	687b      	ldr	r3, [r7, #4]
1000c692:	685b      	ldr	r3, [r3, #4]
			: METAL_BAD_PHYS);
1000c694:	2b00      	cmp	r3, #0
1000c696:	d010      	beq.n	1000c6ba <metal_io_phys+0x54>
		return (io->physmap && offset < io->size
1000c698:	687b      	ldr	r3, [r7, #4]
1000c69a:	689b      	ldr	r3, [r3, #8]
1000c69c:	683a      	ldr	r2, [r7, #0]
1000c69e:	429a      	cmp	r2, r3
1000c6a0:	d20b      	bcs.n	1000c6ba <metal_io_phys+0x54>
			? io->physmap[page] + (offset & io->page_mask)
1000c6a2:	687b      	ldr	r3, [r7, #4]
1000c6a4:	685a      	ldr	r2, [r3, #4]
1000c6a6:	68fb      	ldr	r3, [r7, #12]
1000c6a8:	009b      	lsls	r3, r3, #2
1000c6aa:	4413      	add	r3, r2
1000c6ac:	681a      	ldr	r2, [r3, #0]
1000c6ae:	687b      	ldr	r3, [r7, #4]
1000c6b0:	6919      	ldr	r1, [r3, #16]
1000c6b2:	683b      	ldr	r3, [r7, #0]
1000c6b4:	400b      	ands	r3, r1
			: METAL_BAD_PHYS);
1000c6b6:	4413      	add	r3, r2
1000c6b8:	e008      	b.n	1000c6cc <metal_io_phys+0x66>
1000c6ba:	f04f 33ff 	mov.w	r3, #4294967295
1000c6be:	e005      	b.n	1000c6cc <metal_io_phys+0x66>
	return io->ops.offset_to_phys(io, offset);
1000c6c0:	687b      	ldr	r3, [r7, #4]
1000c6c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1000c6c4:	6839      	ldr	r1, [r7, #0]
1000c6c6:	6878      	ldr	r0, [r7, #4]
1000c6c8:	4798      	blx	r3
1000c6ca:	4603      	mov	r3, r0
}
1000c6cc:	4618      	mov	r0, r3
1000c6ce:	3710      	adds	r7, #16
1000c6d0:	46bd      	mov	sp, r7
1000c6d2:	bd80      	pop	{r7, pc}

1000c6d4 <metal_io_phys_to_offset>:
{
1000c6d4:	b580      	push	{r7, lr}
1000c6d6:	b084      	sub	sp, #16
1000c6d8:	af00      	add	r7, sp, #0
1000c6da:	6078      	str	r0, [r7, #4]
1000c6dc:	6039      	str	r1, [r7, #0]
	if (!io->ops.phys_to_offset) {
1000c6de:	687b      	ldr	r3, [r7, #4]
1000c6e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000c6e2:	2b00      	cmp	r3, #0
1000c6e4:	d127      	bne.n	1000c736 <metal_io_phys_to_offset+0x62>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
1000c6e6:	687b      	ldr	r3, [r7, #4]
1000c6e8:	691b      	ldr	r3, [r3, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
1000c6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
1000c6ee:	d105      	bne.n	1000c6fc <metal_io_phys_to_offset+0x28>
1000c6f0:	687b      	ldr	r3, [r7, #4]
1000c6f2:	685b      	ldr	r3, [r3, #4]
1000c6f4:	681b      	ldr	r3, [r3, #0]
1000c6f6:	683a      	ldr	r2, [r7, #0]
1000c6f8:	1ad3      	subs	r3, r2, r3
1000c6fa:	e003      	b.n	1000c704 <metal_io_phys_to_offset+0x30>
1000c6fc:	687b      	ldr	r3, [r7, #4]
1000c6fe:	691a      	ldr	r2, [r3, #16]
1000c700:	683b      	ldr	r3, [r7, #0]
1000c702:	4013      	ands	r3, r2
		unsigned long offset =
1000c704:	60fb      	str	r3, [r7, #12]
			if (metal_io_phys(io, offset) == phys)
1000c706:	68f9      	ldr	r1, [r7, #12]
1000c708:	6878      	ldr	r0, [r7, #4]
1000c70a:	f7ff ffac 	bl	1000c666 <metal_io_phys>
1000c70e:	4602      	mov	r2, r0
1000c710:	683b      	ldr	r3, [r7, #0]
1000c712:	4293      	cmp	r3, r2
1000c714:	d101      	bne.n	1000c71a <metal_io_phys_to_offset+0x46>
				return offset;
1000c716:	68fb      	ldr	r3, [r7, #12]
1000c718:	e013      	b.n	1000c742 <metal_io_phys_to_offset+0x6e>
			offset += io->page_mask + 1;
1000c71a:	687b      	ldr	r3, [r7, #4]
1000c71c:	691a      	ldr	r2, [r3, #16]
1000c71e:	68fb      	ldr	r3, [r7, #12]
1000c720:	4413      	add	r3, r2
1000c722:	3301      	adds	r3, #1
1000c724:	60fb      	str	r3, [r7, #12]
		} while (offset < io->size);
1000c726:	687b      	ldr	r3, [r7, #4]
1000c728:	689b      	ldr	r3, [r3, #8]
1000c72a:	68fa      	ldr	r2, [r7, #12]
1000c72c:	429a      	cmp	r2, r3
1000c72e:	d3ea      	bcc.n	1000c706 <metal_io_phys_to_offset+0x32>
		return METAL_BAD_OFFSET;
1000c730:	f04f 33ff 	mov.w	r3, #4294967295
1000c734:	e005      	b.n	1000c742 <metal_io_phys_to_offset+0x6e>
	return (*io->ops.phys_to_offset)(io, phys);
1000c736:	687b      	ldr	r3, [r7, #4]
1000c738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
1000c73a:	6839      	ldr	r1, [r7, #0]
1000c73c:	6878      	ldr	r0, [r7, #4]
1000c73e:	4798      	blx	r3
1000c740:	4603      	mov	r3, r0
}
1000c742:	4618      	mov	r0, r3
1000c744:	3710      	adds	r7, #16
1000c746:	46bd      	mov	sp, r7
1000c748:	bd80      	pop	{r7, pc}

1000c74a <metal_io_phys_to_virt>:
{
1000c74a:	b580      	push	{r7, lr}
1000c74c:	b082      	sub	sp, #8
1000c74e:	af00      	add	r7, sp, #0
1000c750:	6078      	str	r0, [r7, #4]
1000c752:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
1000c754:	6839      	ldr	r1, [r7, #0]
1000c756:	6878      	ldr	r0, [r7, #4]
1000c758:	f7ff ffbc 	bl	1000c6d4 <metal_io_phys_to_offset>
1000c75c:	4603      	mov	r3, r0
1000c75e:	4619      	mov	r1, r3
1000c760:	6878      	ldr	r0, [r7, #4]
1000c762:	f7ff ff64 	bl	1000c62e <metal_io_virt>
1000c766:	4603      	mov	r3, r0
}
1000c768:	4618      	mov	r0, r3
1000c76a:	3708      	adds	r7, #8
1000c76c:	46bd      	mov	sp, r7
1000c76e:	bd80      	pop	{r7, pc}

1000c770 <virtqueue_phys_to_virt>:
#endif /* VIRTIO_CACHED_VRINGS */

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
1000c770:	b580      	push	{r7, lr}
1000c772:	b084      	sub	sp, #16
1000c774:	af00      	add	r7, sp, #0
1000c776:	6078      	str	r0, [r7, #4]
1000c778:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
1000c77a:	687b      	ldr	r3, [r7, #4]
1000c77c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000c77e:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
1000c780:	6839      	ldr	r1, [r7, #0]
1000c782:	68f8      	ldr	r0, [r7, #12]
1000c784:	f7ff ffe1 	bl	1000c74a <metal_io_phys_to_virt>
1000c788:	4603      	mov	r3, r0
}
1000c78a:	4618      	mov	r0, r3
1000c78c:	3710      	adds	r7, #16
1000c78e:	46bd      	mov	sp, r7
1000c790:	bd80      	pop	{r7, pc}

1000c792 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
1000c792:	b580      	push	{r7, lr}
1000c794:	b086      	sub	sp, #24
1000c796:	af00      	add	r7, sp, #0
1000c798:	60f8      	str	r0, [r7, #12]
1000c79a:	607a      	str	r2, [r7, #4]
1000c79c:	603b      	str	r3, [r7, #0]
1000c79e:	460b      	mov	r3, r1
1000c7a0:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
1000c7a2:	2300      	movs	r3, #0
1000c7a4:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
1000c7a6:	697b      	ldr	r3, [r7, #20]
1000c7a8:	2b00      	cmp	r3, #0
1000c7aa:	d11e      	bne.n	1000c7ea <virtqueue_create+0x58>
		vq->vq_dev = virt_dev;
1000c7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000c7ae:	68fa      	ldr	r2, [r7, #12]
1000c7b0:	601a      	str	r2, [r3, #0]
		vq->vq_name = name;
1000c7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000c7b4:	687a      	ldr	r2, [r7, #4]
1000c7b6:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
1000c7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000c7ba:	897a      	ldrh	r2, [r7, #10]
1000c7bc:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
1000c7be:	683b      	ldr	r3, [r7, #0]
1000c7c0:	891a      	ldrh	r2, [r3, #8]
1000c7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000c7c4:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
1000c7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000c7c8:	895a      	ldrh	r2, [r3, #10]
1000c7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000c7cc:	849a      	strh	r2, [r3, #36]	@ 0x24
		vq->callback = callback;
1000c7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000c7d0:	6a3a      	ldr	r2, [r7, #32]
1000c7d2:	60da      	str	r2, [r3, #12]
		vq->notify = notify;
1000c7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000c7d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000c7d8:	611a      	str	r2, [r3, #16]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, ring->vaddr, ring->align);
1000c7da:	683b      	ldr	r3, [r7, #0]
1000c7dc:	6819      	ldr	r1, [r3, #0]
1000c7de:	683b      	ldr	r3, [r7, #0]
1000c7e0:	685b      	ldr	r3, [r3, #4]
1000c7e2:	461a      	mov	r2, r3
1000c7e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1000c7e6:	f000 f8ef 	bl	1000c9c8 <vq_ring_init>
	/*
	 * CACHE: nothing to be done here. Only desc.next is setup at this
	 * stage but that is only written by master, so no need to flush it.
	 */

	return status;
1000c7ea:	697b      	ldr	r3, [r7, #20]
}
1000c7ec:	4618      	mov	r0, r3
1000c7ee:	3718      	adds	r7, #24
1000c7f0:	46bd      	mov	sp, r7
1000c7f2:	bd80      	pop	{r7, pc}

1000c7f4 <virtqueue_get_buffer_length>:

	return cookie;
}

uint32_t virtqueue_get_buffer_length(struct virtqueue *vq, uint16_t idx)
{
1000c7f4:	b480      	push	{r7}
1000c7f6:	b083      	sub	sp, #12
1000c7f8:	af00      	add	r7, sp, #0
1000c7fa:	6078      	str	r0, [r7, #4]
1000c7fc:	460b      	mov	r3, r1
1000c7fe:	807b      	strh	r3, [r7, #2]
	VRING_INVALIDATE(vq->vq_ring.desc[idx].len);
	return vq->vq_ring.desc[idx].len;
1000c800:	687b      	ldr	r3, [r7, #4]
1000c802:	699a      	ldr	r2, [r3, #24]
1000c804:	887b      	ldrh	r3, [r7, #2]
1000c806:	011b      	lsls	r3, r3, #4
1000c808:	4413      	add	r3, r2
1000c80a:	689b      	ldr	r3, [r3, #8]
}
1000c80c:	4618      	mov	r0, r3
1000c80e:	370c      	adds	r7, #12
1000c810:	46bd      	mov	sp, r7
1000c812:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c816:	4770      	bx	lr

1000c818 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
1000c818:	b580      	push	{r7, lr}
1000c81a:	b086      	sub	sp, #24
1000c81c:	af00      	add	r7, sp, #0
1000c81e:	60f8      	str	r0, [r7, #12]
1000c820:	60b9      	str	r1, [r7, #8]
1000c822:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
1000c824:	2300      	movs	r3, #0
1000c826:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
1000c828:	f3bf 8f5b 	dmb	ish

	/* Avail.idx is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->idx);
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
1000c82c:	68fb      	ldr	r3, [r7, #12]
1000c82e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
1000c830:	68fb      	ldr	r3, [r7, #12]
1000c832:	69db      	ldr	r3, [r3, #28]
1000c834:	885b      	ldrh	r3, [r3, #2]
1000c836:	b29b      	uxth	r3, r3
1000c838:	429a      	cmp	r2, r3
1000c83a:	d101      	bne.n	1000c840 <virtqueue_get_available_buffer+0x28>
		return NULL;
1000c83c:	2300      	movs	r3, #0
1000c83e:	e02f      	b.n	1000c8a0 <virtqueue_get_available_buffer+0x88>
	VQUEUE_BUSY(vq);

	/* Avail.ring is updated by master, invalidate it */
	VRING_INVALIDATE(vq->vq_ring.avail->ring[head_idx]);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
1000c840:	68fb      	ldr	r3, [r7, #12]
1000c842:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
1000c844:	1c5a      	adds	r2, r3, #1
1000c846:	b291      	uxth	r1, r2
1000c848:	68fa      	ldr	r2, [r7, #12]
1000c84a:	8611      	strh	r1, [r2, #48]	@ 0x30
1000c84c:	b21a      	sxth	r2, r3
1000c84e:	68fb      	ldr	r3, [r7, #12]
1000c850:	895b      	ldrh	r3, [r3, #10]
1000c852:	3b01      	subs	r3, #1
1000c854:	b29b      	uxth	r3, r3
1000c856:	b21b      	sxth	r3, r3
1000c858:	4013      	ands	r3, r2
1000c85a:	b21b      	sxth	r3, r3
1000c85c:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
1000c85e:	68fb      	ldr	r3, [r7, #12]
1000c860:	69da      	ldr	r2, [r3, #28]
1000c862:	8afb      	ldrh	r3, [r7, #22]
1000c864:	005b      	lsls	r3, r3, #1
1000c866:	4413      	add	r3, r2
1000c868:	889b      	ldrh	r3, [r3, #4]
1000c86a:	b29a      	uxth	r2, r3
1000c86c:	68bb      	ldr	r3, [r7, #8]
1000c86e:	801a      	strh	r2, [r3, #0]

	/* Invalidate the desc entry written by master before accessing it */
	VRING_INVALIDATE(vq->vq_ring.desc[*avail_idx]);
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
1000c870:	68fb      	ldr	r3, [r7, #12]
1000c872:	699a      	ldr	r2, [r3, #24]
1000c874:	68bb      	ldr	r3, [r7, #8]
1000c876:	881b      	ldrh	r3, [r3, #0]
1000c878:	011b      	lsls	r3, r3, #4
1000c87a:	18d1      	adds	r1, r2, r3
1000c87c:	680a      	ldr	r2, [r1, #0]
1000c87e:	684b      	ldr	r3, [r1, #4]
1000c880:	4613      	mov	r3, r2
1000c882:	4619      	mov	r1, r3
1000c884:	68f8      	ldr	r0, [r7, #12]
1000c886:	f7ff ff73 	bl	1000c770 <virtqueue_phys_to_virt>
1000c88a:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
1000c88c:	68fb      	ldr	r3, [r7, #12]
1000c88e:	699a      	ldr	r2, [r3, #24]
1000c890:	68bb      	ldr	r3, [r7, #8]
1000c892:	881b      	ldrh	r3, [r3, #0]
1000c894:	011b      	lsls	r3, r3, #4
1000c896:	4413      	add	r3, r2
1000c898:	689a      	ldr	r2, [r3, #8]
1000c89a:	687b      	ldr	r3, [r7, #4]
1000c89c:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
1000c89e:	693b      	ldr	r3, [r7, #16]
}
1000c8a0:	4618      	mov	r0, r3
1000c8a2:	3718      	adds	r7, #24
1000c8a4:	46bd      	mov	sp, r7
1000c8a6:	bd80      	pop	{r7, pc}

1000c8a8 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
1000c8a8:	b480      	push	{r7}
1000c8aa:	b087      	sub	sp, #28
1000c8ac:	af00      	add	r7, sp, #0
1000c8ae:	60f8      	str	r0, [r7, #12]
1000c8b0:	460b      	mov	r3, r1
1000c8b2:	607a      	str	r2, [r7, #4]
1000c8b4:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
1000c8b6:	2300      	movs	r3, #0
1000c8b8:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
1000c8ba:	68fb      	ldr	r3, [r7, #12]
1000c8bc:	895b      	ldrh	r3, [r3, #10]
1000c8be:	897a      	ldrh	r2, [r7, #10]
1000c8c0:	429a      	cmp	r2, r3
1000c8c2:	d901      	bls.n	1000c8c8 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
1000c8c4:	4b18      	ldr	r3, [pc, #96]	@ (1000c928 <virtqueue_add_consumed_buffer+0x80>)
1000c8c6:	e029      	b.n	1000c91c <virtqueue_add_consumed_buffer+0x74>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by master, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
1000c8c8:	68fb      	ldr	r3, [r7, #12]
1000c8ca:	6a1b      	ldr	r3, [r3, #32]
1000c8cc:	885b      	ldrh	r3, [r3, #2]
1000c8ce:	b29b      	uxth	r3, r3
1000c8d0:	b21a      	sxth	r2, r3
1000c8d2:	68fb      	ldr	r3, [r7, #12]
1000c8d4:	895b      	ldrh	r3, [r3, #10]
1000c8d6:	3b01      	subs	r3, #1
1000c8d8:	b29b      	uxth	r3, r3
1000c8da:	b21b      	sxth	r3, r3
1000c8dc:	4013      	ands	r3, r2
1000c8de:	b21b      	sxth	r3, r3
1000c8e0:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
1000c8e2:	68fb      	ldr	r3, [r7, #12]
1000c8e4:	6a1a      	ldr	r2, [r3, #32]
1000c8e6:	8a7b      	ldrh	r3, [r7, #18]
1000c8e8:	00db      	lsls	r3, r3, #3
1000c8ea:	4413      	add	r3, r2
1000c8ec:	3304      	adds	r3, #4
1000c8ee:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
1000c8f0:	897a      	ldrh	r2, [r7, #10]
1000c8f2:	697b      	ldr	r3, [r7, #20]
1000c8f4:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
1000c8f6:	697b      	ldr	r3, [r7, #20]
1000c8f8:	687a      	ldr	r2, [r7, #4]
1000c8fa:	605a      	str	r2, [r3, #4]

	/* We still need to flush it because this is read by master */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
1000c8fc:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
1000c900:	68fb      	ldr	r3, [r7, #12]
1000c902:	6a1b      	ldr	r3, [r3, #32]
1000c904:	885a      	ldrh	r2, [r3, #2]
1000c906:	b292      	uxth	r2, r2
1000c908:	3201      	adds	r2, #1
1000c90a:	b292      	uxth	r2, r2
1000c90c:	805a      	strh	r2, [r3, #2]

	/* Used.idx is read by master, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
1000c90e:	68fb      	ldr	r3, [r7, #12]
1000c910:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
1000c912:	3301      	adds	r3, #1
1000c914:	b29a      	uxth	r2, r3
1000c916:	68fb      	ldr	r3, [r7, #12]
1000c918:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
1000c91a:	2300      	movs	r3, #0
}
1000c91c:	4618      	mov	r0, r3
1000c91e:	371c      	adds	r7, #28
1000c920:	46bd      	mov	sp, r7
1000c922:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c926:	4770      	bx	lr
1000c928:	fffff441 	.word	0xfffff441

1000c92c <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
1000c92c:	b480      	push	{r7}
1000c92e:	b083      	sub	sp, #12
1000c930:	af00      	add	r7, sp, #0
1000c932:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000c934:	6879      	ldr	r1, [r7, #4]
1000c936:	6809      	ldr	r1, [r1, #0]
1000c938:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000c93c:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
1000c940:	2300      	movs	r3, #0
1000c942:	4313      	orrs	r3, r2
1000c944:	d015      	beq.n	1000c972 <virtqueue_disable_cb+0x46>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
			VRING_FLUSH(vring_used_event(&vq->vq_ring));
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c946:	687b      	ldr	r3, [r7, #4]
1000c948:	681b      	ldr	r3, [r3, #0]
1000c94a:	699b      	ldr	r3, [r3, #24]
1000c94c:	2b01      	cmp	r3, #1
1000c94e:	d11f      	bne.n	1000c990 <virtqueue_disable_cb+0x64>
			vring_avail_event(&vq->vq_ring) =
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000c950:	687b      	ldr	r3, [r7, #4]
1000c952:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
1000c954:	687b      	ldr	r3, [r7, #4]
1000c956:	895b      	ldrh	r3, [r3, #10]
1000c958:	1ad3      	subs	r3, r2, r3
1000c95a:	b299      	uxth	r1, r3
			vring_avail_event(&vq->vq_ring) =
1000c95c:	687b      	ldr	r3, [r7, #4]
1000c95e:	6a1a      	ldr	r2, [r3, #32]
1000c960:	687b      	ldr	r3, [r7, #4]
1000c962:	695b      	ldr	r3, [r3, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
1000c964:	3901      	subs	r1, #1
1000c966:	b289      	uxth	r1, r1
			vring_avail_event(&vq->vq_ring) =
1000c968:	00db      	lsls	r3, r3, #3
1000c96a:	4413      	add	r3, r2
1000c96c:	460a      	mov	r2, r1
1000c96e:	809a      	strh	r2, [r3, #4]
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	VQUEUE_IDLE(vq);
}
1000c970:	e00e      	b.n	1000c990 <virtqueue_disable_cb+0x64>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000c972:	687b      	ldr	r3, [r7, #4]
1000c974:	681b      	ldr	r3, [r3, #0]
1000c976:	699b      	ldr	r3, [r3, #24]
1000c978:	2b01      	cmp	r3, #1
1000c97a:	d109      	bne.n	1000c990 <virtqueue_disable_cb+0x64>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
1000c97c:	687b      	ldr	r3, [r7, #4]
1000c97e:	6a1b      	ldr	r3, [r3, #32]
1000c980:	881b      	ldrh	r3, [r3, #0]
1000c982:	b29a      	uxth	r2, r3
1000c984:	687b      	ldr	r3, [r7, #4]
1000c986:	6a1b      	ldr	r3, [r3, #32]
1000c988:	f042 0201 	orr.w	r2, r2, #1
1000c98c:	b292      	uxth	r2, r2
1000c98e:	801a      	strh	r2, [r3, #0]
}
1000c990:	bf00      	nop
1000c992:	370c      	adds	r7, #12
1000c994:	46bd      	mov	sp, r7
1000c996:	f85d 7b04 	ldr.w	r7, [sp], #4
1000c99a:	4770      	bx	lr

1000c99c <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
1000c99c:	b580      	push	{r7, lr}
1000c99e:	b082      	sub	sp, #8
1000c9a0:	af00      	add	r7, sp, #0
1000c9a2:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
1000c9a4:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify(vq))
1000c9a8:	6878      	ldr	r0, [r7, #4]
1000c9aa:	f000 f835 	bl	1000ca18 <vq_ring_must_notify>
1000c9ae:	4603      	mov	r3, r0
1000c9b0:	2b00      	cmp	r3, #0
1000c9b2:	d002      	beq.n	1000c9ba <virtqueue_kick+0x1e>
		vq_ring_notify(vq);
1000c9b4:	6878      	ldr	r0, [r7, #4]
1000c9b6:	f000 f87d 	bl	1000cab4 <vq_ring_notify>

	vq->vq_queued_cnt = 0;
1000c9ba:	687b      	ldr	r3, [r7, #4]
1000c9bc:	2200      	movs	r2, #0
1000c9be:	84da      	strh	r2, [r3, #38]	@ 0x26

	VQUEUE_IDLE(vq);
}
1000c9c0:	bf00      	nop
1000c9c2:	3708      	adds	r7, #8
1000c9c4:	46bd      	mov	sp, r7
1000c9c6:	bd80      	pop	{r7, pc}

1000c9c8 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
1000c9c8:	b580      	push	{r7, lr}
1000c9ca:	b086      	sub	sp, #24
1000c9cc:	af00      	add	r7, sp, #0
1000c9ce:	60f8      	str	r0, [r7, #12]
1000c9d0:	60b9      	str	r1, [r7, #8]
1000c9d2:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
1000c9d4:	68fb      	ldr	r3, [r7, #12]
1000c9d6:	895b      	ldrh	r3, [r3, #10]
1000c9d8:	617b      	str	r3, [r7, #20]
	vr = &vq->vq_ring;
1000c9da:	68fb      	ldr	r3, [r7, #12]
1000c9dc:	3314      	adds	r3, #20
1000c9de:	613b      	str	r3, [r7, #16]

	vring_init(vr, size, ring_mem, alignment);
1000c9e0:	6979      	ldr	r1, [r7, #20]
1000c9e2:	687b      	ldr	r3, [r7, #4]
1000c9e4:	68ba      	ldr	r2, [r7, #8]
1000c9e6:	6938      	ldr	r0, [r7, #16]
1000c9e8:	f7ff fdda 	bl	1000c5a0 <vring_init>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
1000c9ec:	bf00      	nop
1000c9ee:	3718      	adds	r7, #24
1000c9f0:	46bd      	mov	sp, r7
1000c9f2:	bd80      	pop	{r7, pc}

1000c9f4 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
1000c9f4:	b580      	push	{r7, lr}
1000c9f6:	b082      	sub	sp, #8
1000c9f8:	af00      	add	r7, sp, #0
1000c9fa:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
1000c9fc:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
1000ca00:	687b      	ldr	r3, [r7, #4]
1000ca02:	68db      	ldr	r3, [r3, #12]
1000ca04:	2b00      	cmp	r3, #0
1000ca06:	d003      	beq.n	1000ca10 <virtqueue_notification+0x1c>
		vq->callback(vq);
1000ca08:	687b      	ldr	r3, [r7, #4]
1000ca0a:	68db      	ldr	r3, [r3, #12]
1000ca0c:	6878      	ldr	r0, [r7, #4]
1000ca0e:	4798      	blx	r3
}
1000ca10:	bf00      	nop
1000ca12:	3708      	adds	r7, #8
1000ca14:	46bd      	mov	sp, r7
1000ca16:	bd80      	pop	{r7, pc}

1000ca18 <vq_ring_must_notify>:
 *
 * vq_ring_must_notify
 *
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
1000ca18:	b580      	push	{r7, lr}
1000ca1a:	b084      	sub	sp, #16
1000ca1c:	af00      	add	r7, sp, #0
1000ca1e:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
1000ca20:	6879      	ldr	r1, [r7, #4]
1000ca22:	6809      	ldr	r1, [r1, #0]
1000ca24:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
1000ca28:	f000 5200 	and.w	r2, r0, #536870912	@ 0x20000000
1000ca2c:	2300      	movs	r3, #0
1000ca2e:	4313      	orrs	r3, r2
1000ca30:	d02a      	beq.n	1000ca88 <vq_ring_must_notify+0x70>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000ca32:	687b      	ldr	r3, [r7, #4]
1000ca34:	681b      	ldr	r3, [r3, #0]
1000ca36:	699b      	ldr	r3, [r3, #24]
1000ca38:	2b01      	cmp	r3, #1
1000ca3a:	d136      	bne.n	1000caaa <vq_ring_must_notify+0x92>
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
1000ca3c:	687b      	ldr	r3, [r7, #4]
1000ca3e:	6a1b      	ldr	r3, [r3, #32]
1000ca40:	789a      	ldrb	r2, [r3, #2]
1000ca42:	78db      	ldrb	r3, [r3, #3]
1000ca44:	021b      	lsls	r3, r3, #8
1000ca46:	4313      	orrs	r3, r2
1000ca48:	81fb      	strh	r3, [r7, #14]
			prev_idx = new_idx - vq->vq_queued_cnt;
1000ca4a:	687b      	ldr	r3, [r7, #4]
1000ca4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
1000ca4e:	89fa      	ldrh	r2, [r7, #14]
1000ca50:	1ad3      	subs	r3, r2, r3
1000ca52:	81bb      	strh	r3, [r7, #12]
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
1000ca54:	687b      	ldr	r3, [r7, #4]
1000ca56:	69da      	ldr	r2, [r3, #28]
1000ca58:	687b      	ldr	r3, [r7, #4]
1000ca5a:	6959      	ldr	r1, [r3, #20]
1000ca5c:	004b      	lsls	r3, r1, #1
1000ca5e:	4413      	add	r3, r2
1000ca60:	7918      	ldrb	r0, [r3, #4]
1000ca62:	004b      	lsls	r3, r1, #1
1000ca64:	4413      	add	r3, r2
1000ca66:	795b      	ldrb	r3, [r3, #5]
1000ca68:	021b      	lsls	r3, r3, #8
1000ca6a:	4303      	orrs	r3, r0
1000ca6c:	817b      	strh	r3, [r7, #10]
			return vring_need_event(event_idx, new_idx,
1000ca6e:	89ba      	ldrh	r2, [r7, #12]
1000ca70:	89f9      	ldrh	r1, [r7, #14]
1000ca72:	897b      	ldrh	r3, [r7, #10]
1000ca74:	4618      	mov	r0, r3
1000ca76:	f7ff fdbc 	bl	1000c5f2 <vring_need_event>
1000ca7a:	4603      	mov	r3, r0
						prev_idx) != 0;
1000ca7c:	2b00      	cmp	r3, #0
1000ca7e:	bf14      	ite	ne
1000ca80:	2301      	movne	r3, #1
1000ca82:	2300      	moveq	r3, #0
1000ca84:	b2db      	uxtb	r3, r3
1000ca86:	e011      	b.n	1000caac <vq_ring_must_notify+0x94>
			return (vq->vq_ring.used->flags &
				VRING_USED_F_NO_NOTIFY) == 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
1000ca88:	687b      	ldr	r3, [r7, #4]
1000ca8a:	681b      	ldr	r3, [r3, #0]
1000ca8c:	699b      	ldr	r3, [r3, #24]
1000ca8e:	2b01      	cmp	r3, #1
1000ca90:	d10b      	bne.n	1000caaa <vq_ring_must_notify+0x92>
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
1000ca92:	687b      	ldr	r3, [r7, #4]
1000ca94:	69db      	ldr	r3, [r3, #28]
1000ca96:	881b      	ldrh	r3, [r3, #0]
1000ca98:	b29b      	uxth	r3, r3
1000ca9a:	f003 0301 	and.w	r3, r3, #1
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
1000ca9e:	2b00      	cmp	r3, #0
1000caa0:	bf0c      	ite	eq
1000caa2:	2301      	moveq	r3, #1
1000caa4:	2300      	movne	r3, #0
1000caa6:	b2db      	uxtb	r3, r3
1000caa8:	e000      	b.n	1000caac <vq_ring_must_notify+0x94>
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
1000caaa:	2300      	movs	r3, #0
}
1000caac:	4618      	mov	r0, r3
1000caae:	3710      	adds	r7, #16
1000cab0:	46bd      	mov	sp, r7
1000cab2:	bd80      	pop	{r7, pc}

1000cab4 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
1000cab4:	b580      	push	{r7, lr}
1000cab6:	b082      	sub	sp, #8
1000cab8:	af00      	add	r7, sp, #0
1000caba:	6078      	str	r0, [r7, #4]
	if (vq->notify)
1000cabc:	687b      	ldr	r3, [r7, #4]
1000cabe:	691b      	ldr	r3, [r3, #16]
1000cac0:	2b00      	cmp	r3, #0
1000cac2:	d003      	beq.n	1000cacc <vq_ring_notify+0x18>
		vq->notify(vq);
1000cac4:	687b      	ldr	r3, [r7, #4]
1000cac6:	691b      	ldr	r3, [r3, #16]
1000cac8:	6878      	ldr	r0, [r7, #4]
1000caca:	4798      	blx	r3
}
1000cacc:	bf00      	nop
1000cace:	3708      	adds	r7, #8
1000cad0:	46bd      	mov	sp, r7
1000cad2:	bd80      	pop	{r7, pc}

1000cad4 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
1000cad4:	b580      	push	{r7, lr}
1000cad6:	b086      	sub	sp, #24
1000cad8:	af02      	add	r7, sp, #8
1000cada:	60f8      	str	r0, [r7, #12]
1000cadc:	60b9      	str	r1, [r7, #8]
1000cade:	607a      	str	r2, [r7, #4]
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
1000cae0:	68fb      	ldr	r3, [r7, #12]
1000cae2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1000cae4:	68fb      	ldr	r3, [r7, #12]
1000cae6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1000cae8:	2301      	movs	r3, #1
1000caea:	9301      	str	r3, [sp, #4]
1000caec:	687b      	ldr	r3, [r7, #4]
1000caee:	9300      	str	r3, [sp, #0]
1000caf0:	68bb      	ldr	r3, [r7, #8]
1000caf2:	68f8      	ldr	r0, [r7, #12]
1000caf4:	f7fe fe78 	bl	1000b7e8 <rpmsg_send_offchannel_raw>
1000caf8:	4603      	mov	r3, r0
					 len, true);
}
1000cafa:	4618      	mov	r0, r3
1000cafc:	3710      	adds	r7, #16
1000cafe:	46bd      	mov	sp, r7
1000cb00:	bd80      	pop	{r7, pc}

1000cb02 <VIRT_UART_read_cb>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

static int VIRT_UART_read_cb(struct rpmsg_endpoint *ept, void *data,
			    size_t len, uint32_t src, void *priv)
{
1000cb02:	b580      	push	{r7, lr}
1000cb04:	b086      	sub	sp, #24
1000cb06:	af00      	add	r7, sp, #0
1000cb08:	60f8      	str	r0, [r7, #12]
1000cb0a:	60b9      	str	r1, [r7, #8]
1000cb0c:	607a      	str	r2, [r7, #4]
1000cb0e:	603b      	str	r3, [r7, #0]
  VIRT_UART_HandleTypeDef *huart = metal_container_of(ept, VIRT_UART_HandleTypeDef, ept);
1000cb10:	68fb      	ldr	r3, [r7, #12]
1000cb12:	617b      	str	r3, [r7, #20]
  (void)src;

  huart->pRxBuffPtr = data;
1000cb14:	697b      	ldr	r3, [r7, #20]
1000cb16:	68ba      	ldr	r2, [r7, #8]
1000cb18:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxXferSize = len;
1000cb1a:	687b      	ldr	r3, [r7, #4]
1000cb1c:	b29a      	uxth	r2, r3
1000cb1e:	697b      	ldr	r3, [r7, #20]
1000cb20:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  if (huart->RxCpltCallback != NULL) {
1000cb24:	697b      	ldr	r3, [r7, #20]
1000cb26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1000cb28:	2b00      	cmp	r3, #0
1000cb2a:	d003      	beq.n	1000cb34 <VIRT_UART_read_cb+0x32>
    huart->RxCpltCallback(huart);
1000cb2c:	697b      	ldr	r3, [r7, #20]
1000cb2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1000cb30:	6978      	ldr	r0, [r7, #20]
1000cb32:	4798      	blx	r3
  }

  return 0;
1000cb34:	2300      	movs	r3, #0
}
1000cb36:	4618      	mov	r0, r3
1000cb38:	3718      	adds	r7, #24
1000cb3a:	46bd      	mov	sp, r7
1000cb3c:	bd80      	pop	{r7, pc}
	...

1000cb40 <VIRT_UART_Init>:

VIRT_UART_StatusTypeDef VIRT_UART_Init(VIRT_UART_HandleTypeDef *huart)
{
1000cb40:	b580      	push	{r7, lr}
1000cb42:	b086      	sub	sp, #24
1000cb44:	af02      	add	r7, sp, #8
1000cb46:	6078      	str	r0, [r7, #4]

  int status;

  /* Create a endpoint for rmpsg communication */

  status = OPENAMP_create_endpoint(&huart->ept, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
1000cb48:	6878      	ldr	r0, [r7, #4]
1000cb4a:	2300      	movs	r3, #0
1000cb4c:	9300      	str	r3, [sp, #0]
1000cb4e:	4b08      	ldr	r3, [pc, #32]	@ (1000cb70 <VIRT_UART_Init+0x30>)
1000cb50:	f04f 32ff 	mov.w	r2, #4294967295
1000cb54:	4907      	ldr	r1, [pc, #28]	@ (1000cb74 <VIRT_UART_Init+0x34>)
1000cb56:	f7f5 fbbf 	bl	100022d8 <OPENAMP_create_endpoint>
1000cb5a:	60f8      	str	r0, [r7, #12]
		  	  	  	  	  	  	   VIRT_UART_read_cb, NULL);

  if(status < 0) {
1000cb5c:	68fb      	ldr	r3, [r7, #12]
1000cb5e:	2b00      	cmp	r3, #0
1000cb60:	da01      	bge.n	1000cb66 <VIRT_UART_Init+0x26>
    return VIRT_UART_ERROR;
1000cb62:	2301      	movs	r3, #1
1000cb64:	e000      	b.n	1000cb68 <VIRT_UART_Init+0x28>
  }

  return VIRT_UART_OK;
1000cb66:	2300      	movs	r3, #0
}
1000cb68:	4618      	mov	r0, r3
1000cb6a:	3710      	adds	r7, #16
1000cb6c:	46bd      	mov	sp, r7
1000cb6e:	bd80      	pop	{r7, pc}
1000cb70:	1000cb03 	.word	0x1000cb03
1000cb74:	100119c0 	.word	0x100119c0

1000cb78 <VIRT_UART_RegisterCallback>:
}

VIRT_UART_StatusTypeDef VIRT_UART_RegisterCallback(VIRT_UART_HandleTypeDef *huart,
                                                   VIRT_UART_CallbackIDTypeDef CallbackID,
                                                   void (* pCallback)(VIRT_UART_HandleTypeDef *_huart))
{
1000cb78:	b480      	push	{r7}
1000cb7a:	b087      	sub	sp, #28
1000cb7c:	af00      	add	r7, sp, #0
1000cb7e:	60f8      	str	r0, [r7, #12]
1000cb80:	460b      	mov	r3, r1
1000cb82:	607a      	str	r2, [r7, #4]
1000cb84:	72fb      	strb	r3, [r7, #11]
  VIRT_UART_StatusTypeDef status = VIRT_UART_OK;
1000cb86:	2300      	movs	r3, #0
1000cb88:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
1000cb8a:	7afb      	ldrb	r3, [r7, #11]
1000cb8c:	2b00      	cmp	r3, #0
1000cb8e:	d103      	bne.n	1000cb98 <VIRT_UART_RegisterCallback+0x20>
  {
  case VIRT_UART_RXCPLT_CB_ID :
    huart->RxCpltCallback = pCallback;
1000cb90:	68fb      	ldr	r3, [r7, #12]
1000cb92:	687a      	ldr	r2, [r7, #4]
1000cb94:	64da      	str	r2, [r3, #76]	@ 0x4c
    break;
1000cb96:	e002      	b.n	1000cb9e <VIRT_UART_RegisterCallback+0x26>

  default :
   /* Return error status */
    status =  VIRT_UART_ERROR;
1000cb98:	2301      	movs	r3, #1
1000cb9a:	75fb      	strb	r3, [r7, #23]
    break;
1000cb9c:	bf00      	nop
  }
  return status;
1000cb9e:	7dfb      	ldrb	r3, [r7, #23]
}
1000cba0:	4618      	mov	r0, r3
1000cba2:	371c      	adds	r7, #28
1000cba4:	46bd      	mov	sp, r7
1000cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000cbaa:	4770      	bx	lr

1000cbac <VIRT_UART_Transmit>:

VIRT_UART_StatusTypeDef VIRT_UART_Transmit(VIRT_UART_HandleTypeDef *huart, const void *pData, uint16_t Size)
{
1000cbac:	b580      	push	{r7, lr}
1000cbae:	b086      	sub	sp, #24
1000cbb0:	af00      	add	r7, sp, #0
1000cbb2:	60f8      	str	r0, [r7, #12]
1000cbb4:	60b9      	str	r1, [r7, #8]
1000cbb6:	4613      	mov	r3, r2
1000cbb8:	80fb      	strh	r3, [r7, #6]
	int res;

	if (Size > (RPMSG_BUFFER_SIZE-16))
1000cbba:	88fb      	ldrh	r3, [r7, #6]
1000cbbc:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
1000cbc0:	d901      	bls.n	1000cbc6 <VIRT_UART_Transmit+0x1a>
	  return VIRT_UART_ERROR;
1000cbc2:	2301      	movs	r3, #1
1000cbc4:	e00c      	b.n	1000cbe0 <VIRT_UART_Transmit+0x34>

	res = OPENAMP_send(&huart->ept, pData, Size);
1000cbc6:	68fb      	ldr	r3, [r7, #12]
1000cbc8:	88fa      	ldrh	r2, [r7, #6]
1000cbca:	68b9      	ldr	r1, [r7, #8]
1000cbcc:	4618      	mov	r0, r3
1000cbce:	f7ff ff81 	bl	1000cad4 <rpmsg_send>
1000cbd2:	6178      	str	r0, [r7, #20]
	if (res <0) {
1000cbd4:	697b      	ldr	r3, [r7, #20]
1000cbd6:	2b00      	cmp	r3, #0
1000cbd8:	da01      	bge.n	1000cbde <VIRT_UART_Transmit+0x32>
		return VIRT_UART_ERROR;
1000cbda:	2301      	movs	r3, #1
1000cbdc:	e000      	b.n	1000cbe0 <VIRT_UART_Transmit+0x34>
	}

	return VIRT_UART_OK;
1000cbde:	2300      	movs	r3, #0
}
1000cbe0:	4618      	mov	r0, r3
1000cbe2:	3718      	adds	r7, #24
1000cbe4:	46bd      	mov	sp, r7
1000cbe6:	bd80      	pop	{r7, pc}

1000cbe8 <__assert_func>:
1000cbe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000cbea:	4614      	mov	r4, r2
1000cbec:	461a      	mov	r2, r3
1000cbee:	4b09      	ldr	r3, [pc, #36]	@ (1000cc14 <__assert_func+0x2c>)
1000cbf0:	681b      	ldr	r3, [r3, #0]
1000cbf2:	4605      	mov	r5, r0
1000cbf4:	68d8      	ldr	r0, [r3, #12]
1000cbf6:	b14c      	cbz	r4, 1000cc0c <__assert_func+0x24>
1000cbf8:	4b07      	ldr	r3, [pc, #28]	@ (1000cc18 <__assert_func+0x30>)
1000cbfa:	9100      	str	r1, [sp, #0]
1000cbfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
1000cc00:	4906      	ldr	r1, [pc, #24]	@ (1000cc1c <__assert_func+0x34>)
1000cc02:	462b      	mov	r3, r5
1000cc04:	f000 ffd4 	bl	1000dbb0 <fiprintf>
1000cc08:	f001 f992 	bl	1000df30 <abort>
1000cc0c:	4b04      	ldr	r3, [pc, #16]	@ (1000cc20 <__assert_func+0x38>)
1000cc0e:	461c      	mov	r4, r3
1000cc10:	e7f3      	b.n	1000cbfa <__assert_func+0x12>
1000cc12:	bf00      	nop
1000cc14:	100200e0 	.word	0x100200e0
1000cc18:	10012219 	.word	0x10012219
1000cc1c:	10012226 	.word	0x10012226
1000cc20:	10012254 	.word	0x10012254

1000cc24 <malloc>:
1000cc24:	4b02      	ldr	r3, [pc, #8]	@ (1000cc30 <malloc+0xc>)
1000cc26:	4601      	mov	r1, r0
1000cc28:	6818      	ldr	r0, [r3, #0]
1000cc2a:	f000 b82d 	b.w	1000cc88 <_malloc_r>
1000cc2e:	bf00      	nop
1000cc30:	100200e0 	.word	0x100200e0

1000cc34 <free>:
1000cc34:	4b02      	ldr	r3, [pc, #8]	@ (1000cc40 <free+0xc>)
1000cc36:	4601      	mov	r1, r0
1000cc38:	6818      	ldr	r0, [r3, #0]
1000cc3a:	f001 bfd9 	b.w	1000ebf0 <_free_r>
1000cc3e:	bf00      	nop
1000cc40:	100200e0 	.word	0x100200e0

1000cc44 <sbrk_aligned>:
1000cc44:	b570      	push	{r4, r5, r6, lr}
1000cc46:	4e0f      	ldr	r6, [pc, #60]	@ (1000cc84 <sbrk_aligned+0x40>)
1000cc48:	460c      	mov	r4, r1
1000cc4a:	6831      	ldr	r1, [r6, #0]
1000cc4c:	4605      	mov	r5, r0
1000cc4e:	b911      	cbnz	r1, 1000cc56 <sbrk_aligned+0x12>
1000cc50:	f001 f90a 	bl	1000de68 <_sbrk_r>
1000cc54:	6030      	str	r0, [r6, #0]
1000cc56:	4621      	mov	r1, r4
1000cc58:	4628      	mov	r0, r5
1000cc5a:	f001 f905 	bl	1000de68 <_sbrk_r>
1000cc5e:	1c43      	adds	r3, r0, #1
1000cc60:	d103      	bne.n	1000cc6a <sbrk_aligned+0x26>
1000cc62:	f04f 34ff 	mov.w	r4, #4294967295
1000cc66:	4620      	mov	r0, r4
1000cc68:	bd70      	pop	{r4, r5, r6, pc}
1000cc6a:	1cc4      	adds	r4, r0, #3
1000cc6c:	f024 0403 	bic.w	r4, r4, #3
1000cc70:	42a0      	cmp	r0, r4
1000cc72:	d0f8      	beq.n	1000cc66 <sbrk_aligned+0x22>
1000cc74:	1a21      	subs	r1, r4, r0
1000cc76:	4628      	mov	r0, r5
1000cc78:	f001 f8f6 	bl	1000de68 <_sbrk_r>
1000cc7c:	3001      	adds	r0, #1
1000cc7e:	d1f2      	bne.n	1000cc66 <sbrk_aligned+0x22>
1000cc80:	e7ef      	b.n	1000cc62 <sbrk_aligned+0x1e>
1000cc82:	bf00      	nop
1000cc84:	100216b8 	.word	0x100216b8

1000cc88 <_malloc_r>:
1000cc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000cc8c:	1ccd      	adds	r5, r1, #3
1000cc8e:	f025 0503 	bic.w	r5, r5, #3
1000cc92:	3508      	adds	r5, #8
1000cc94:	2d0c      	cmp	r5, #12
1000cc96:	bf38      	it	cc
1000cc98:	250c      	movcc	r5, #12
1000cc9a:	2d00      	cmp	r5, #0
1000cc9c:	4606      	mov	r6, r0
1000cc9e:	db01      	blt.n	1000cca4 <_malloc_r+0x1c>
1000cca0:	42a9      	cmp	r1, r5
1000cca2:	d904      	bls.n	1000ccae <_malloc_r+0x26>
1000cca4:	230c      	movs	r3, #12
1000cca6:	6033      	str	r3, [r6, #0]
1000cca8:	2000      	movs	r0, #0
1000ccaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000ccae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 1000cd84 <_malloc_r+0xfc>
1000ccb2:	f000 f869 	bl	1000cd88 <__malloc_lock>
1000ccb6:	f8d8 3000 	ldr.w	r3, [r8]
1000ccba:	461c      	mov	r4, r3
1000ccbc:	bb44      	cbnz	r4, 1000cd10 <_malloc_r+0x88>
1000ccbe:	4629      	mov	r1, r5
1000ccc0:	4630      	mov	r0, r6
1000ccc2:	f7ff ffbf 	bl	1000cc44 <sbrk_aligned>
1000ccc6:	1c43      	adds	r3, r0, #1
1000ccc8:	4604      	mov	r4, r0
1000ccca:	d158      	bne.n	1000cd7e <_malloc_r+0xf6>
1000cccc:	f8d8 4000 	ldr.w	r4, [r8]
1000ccd0:	4627      	mov	r7, r4
1000ccd2:	2f00      	cmp	r7, #0
1000ccd4:	d143      	bne.n	1000cd5e <_malloc_r+0xd6>
1000ccd6:	2c00      	cmp	r4, #0
1000ccd8:	d04b      	beq.n	1000cd72 <_malloc_r+0xea>
1000ccda:	6823      	ldr	r3, [r4, #0]
1000ccdc:	4639      	mov	r1, r7
1000ccde:	4630      	mov	r0, r6
1000cce0:	eb04 0903 	add.w	r9, r4, r3
1000cce4:	f001 f8c0 	bl	1000de68 <_sbrk_r>
1000cce8:	4581      	cmp	r9, r0
1000ccea:	d142      	bne.n	1000cd72 <_malloc_r+0xea>
1000ccec:	6821      	ldr	r1, [r4, #0]
1000ccee:	1a6d      	subs	r5, r5, r1
1000ccf0:	4629      	mov	r1, r5
1000ccf2:	4630      	mov	r0, r6
1000ccf4:	f7ff ffa6 	bl	1000cc44 <sbrk_aligned>
1000ccf8:	3001      	adds	r0, #1
1000ccfa:	d03a      	beq.n	1000cd72 <_malloc_r+0xea>
1000ccfc:	6823      	ldr	r3, [r4, #0]
1000ccfe:	442b      	add	r3, r5
1000cd00:	6023      	str	r3, [r4, #0]
1000cd02:	f8d8 3000 	ldr.w	r3, [r8]
1000cd06:	685a      	ldr	r2, [r3, #4]
1000cd08:	bb62      	cbnz	r2, 1000cd64 <_malloc_r+0xdc>
1000cd0a:	f8c8 7000 	str.w	r7, [r8]
1000cd0e:	e00f      	b.n	1000cd30 <_malloc_r+0xa8>
1000cd10:	6822      	ldr	r2, [r4, #0]
1000cd12:	1b52      	subs	r2, r2, r5
1000cd14:	d420      	bmi.n	1000cd58 <_malloc_r+0xd0>
1000cd16:	2a0b      	cmp	r2, #11
1000cd18:	d917      	bls.n	1000cd4a <_malloc_r+0xc2>
1000cd1a:	1961      	adds	r1, r4, r5
1000cd1c:	42a3      	cmp	r3, r4
1000cd1e:	6025      	str	r5, [r4, #0]
1000cd20:	bf18      	it	ne
1000cd22:	6059      	strne	r1, [r3, #4]
1000cd24:	6863      	ldr	r3, [r4, #4]
1000cd26:	bf08      	it	eq
1000cd28:	f8c8 1000 	streq.w	r1, [r8]
1000cd2c:	5162      	str	r2, [r4, r5]
1000cd2e:	604b      	str	r3, [r1, #4]
1000cd30:	4630      	mov	r0, r6
1000cd32:	f000 f82f 	bl	1000cd94 <__malloc_unlock>
1000cd36:	f104 000b 	add.w	r0, r4, #11
1000cd3a:	1d23      	adds	r3, r4, #4
1000cd3c:	f020 0007 	bic.w	r0, r0, #7
1000cd40:	1ac2      	subs	r2, r0, r3
1000cd42:	bf1c      	itt	ne
1000cd44:	1a1b      	subne	r3, r3, r0
1000cd46:	50a3      	strne	r3, [r4, r2]
1000cd48:	e7af      	b.n	1000ccaa <_malloc_r+0x22>
1000cd4a:	6862      	ldr	r2, [r4, #4]
1000cd4c:	42a3      	cmp	r3, r4
1000cd4e:	bf0c      	ite	eq
1000cd50:	f8c8 2000 	streq.w	r2, [r8]
1000cd54:	605a      	strne	r2, [r3, #4]
1000cd56:	e7eb      	b.n	1000cd30 <_malloc_r+0xa8>
1000cd58:	4623      	mov	r3, r4
1000cd5a:	6864      	ldr	r4, [r4, #4]
1000cd5c:	e7ae      	b.n	1000ccbc <_malloc_r+0x34>
1000cd5e:	463c      	mov	r4, r7
1000cd60:	687f      	ldr	r7, [r7, #4]
1000cd62:	e7b6      	b.n	1000ccd2 <_malloc_r+0x4a>
1000cd64:	461a      	mov	r2, r3
1000cd66:	685b      	ldr	r3, [r3, #4]
1000cd68:	42a3      	cmp	r3, r4
1000cd6a:	d1fb      	bne.n	1000cd64 <_malloc_r+0xdc>
1000cd6c:	2300      	movs	r3, #0
1000cd6e:	6053      	str	r3, [r2, #4]
1000cd70:	e7de      	b.n	1000cd30 <_malloc_r+0xa8>
1000cd72:	230c      	movs	r3, #12
1000cd74:	6033      	str	r3, [r6, #0]
1000cd76:	4630      	mov	r0, r6
1000cd78:	f000 f80c 	bl	1000cd94 <__malloc_unlock>
1000cd7c:	e794      	b.n	1000cca8 <_malloc_r+0x20>
1000cd7e:	6005      	str	r5, [r0, #0]
1000cd80:	e7d6      	b.n	1000cd30 <_malloc_r+0xa8>
1000cd82:	bf00      	nop
1000cd84:	100216bc 	.word	0x100216bc

1000cd88 <__malloc_lock>:
1000cd88:	4801      	ldr	r0, [pc, #4]	@ (1000cd90 <__malloc_lock+0x8>)
1000cd8a:	f001 b8ba 	b.w	1000df02 <__retarget_lock_acquire_recursive>
1000cd8e:	bf00      	nop
1000cd90:	10021800 	.word	0x10021800

1000cd94 <__malloc_unlock>:
1000cd94:	4801      	ldr	r0, [pc, #4]	@ (1000cd9c <__malloc_unlock+0x8>)
1000cd96:	f001 b8b5 	b.w	1000df04 <__retarget_lock_release_recursive>
1000cd9a:	bf00      	nop
1000cd9c:	10021800 	.word	0x10021800

1000cda0 <__cvt>:
1000cda0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000cda4:	ec57 6b10 	vmov	r6, r7, d0
1000cda8:	2f00      	cmp	r7, #0
1000cdaa:	460c      	mov	r4, r1
1000cdac:	4619      	mov	r1, r3
1000cdae:	463b      	mov	r3, r7
1000cdb0:	bfbb      	ittet	lt
1000cdb2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
1000cdb6:	461f      	movlt	r7, r3
1000cdb8:	2300      	movge	r3, #0
1000cdba:	232d      	movlt	r3, #45	@ 0x2d
1000cdbc:	700b      	strb	r3, [r1, #0]
1000cdbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1000cdc0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
1000cdc4:	4691      	mov	r9, r2
1000cdc6:	f023 0820 	bic.w	r8, r3, #32
1000cdca:	bfbc      	itt	lt
1000cdcc:	4632      	movlt	r2, r6
1000cdce:	4616      	movlt	r6, r2
1000cdd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
1000cdd4:	d005      	beq.n	1000cde2 <__cvt+0x42>
1000cdd6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
1000cdda:	d100      	bne.n	1000cdde <__cvt+0x3e>
1000cddc:	3401      	adds	r4, #1
1000cdde:	2102      	movs	r1, #2
1000cde0:	e000      	b.n	1000cde4 <__cvt+0x44>
1000cde2:	2103      	movs	r1, #3
1000cde4:	ab03      	add	r3, sp, #12
1000cde6:	9301      	str	r3, [sp, #4]
1000cde8:	ab02      	add	r3, sp, #8
1000cdea:	9300      	str	r3, [sp, #0]
1000cdec:	ec47 6b10 	vmov	d0, r6, r7
1000cdf0:	4653      	mov	r3, sl
1000cdf2:	4622      	mov	r2, r4
1000cdf4:	f001 f92c 	bl	1000e050 <_dtoa_r>
1000cdf8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
1000cdfc:	4605      	mov	r5, r0
1000cdfe:	d119      	bne.n	1000ce34 <__cvt+0x94>
1000ce00:	f019 0f01 	tst.w	r9, #1
1000ce04:	d00e      	beq.n	1000ce24 <__cvt+0x84>
1000ce06:	eb00 0904 	add.w	r9, r0, r4
1000ce0a:	2200      	movs	r2, #0
1000ce0c:	2300      	movs	r3, #0
1000ce0e:	4630      	mov	r0, r6
1000ce10:	4639      	mov	r1, r7
1000ce12:	f7f3 fda1 	bl	10000958 <__aeabi_dcmpeq>
1000ce16:	b108      	cbz	r0, 1000ce1c <__cvt+0x7c>
1000ce18:	f8cd 900c 	str.w	r9, [sp, #12]
1000ce1c:	2230      	movs	r2, #48	@ 0x30
1000ce1e:	9b03      	ldr	r3, [sp, #12]
1000ce20:	454b      	cmp	r3, r9
1000ce22:	d31e      	bcc.n	1000ce62 <__cvt+0xc2>
1000ce24:	9b03      	ldr	r3, [sp, #12]
1000ce26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1000ce28:	1b5b      	subs	r3, r3, r5
1000ce2a:	4628      	mov	r0, r5
1000ce2c:	6013      	str	r3, [r2, #0]
1000ce2e:	b004      	add	sp, #16
1000ce30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000ce34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
1000ce38:	eb00 0904 	add.w	r9, r0, r4
1000ce3c:	d1e5      	bne.n	1000ce0a <__cvt+0x6a>
1000ce3e:	7803      	ldrb	r3, [r0, #0]
1000ce40:	2b30      	cmp	r3, #48	@ 0x30
1000ce42:	d10a      	bne.n	1000ce5a <__cvt+0xba>
1000ce44:	2200      	movs	r2, #0
1000ce46:	2300      	movs	r3, #0
1000ce48:	4630      	mov	r0, r6
1000ce4a:	4639      	mov	r1, r7
1000ce4c:	f7f3 fd84 	bl	10000958 <__aeabi_dcmpeq>
1000ce50:	b918      	cbnz	r0, 1000ce5a <__cvt+0xba>
1000ce52:	f1c4 0401 	rsb	r4, r4, #1
1000ce56:	f8ca 4000 	str.w	r4, [sl]
1000ce5a:	f8da 3000 	ldr.w	r3, [sl]
1000ce5e:	4499      	add	r9, r3
1000ce60:	e7d3      	b.n	1000ce0a <__cvt+0x6a>
1000ce62:	1c59      	adds	r1, r3, #1
1000ce64:	9103      	str	r1, [sp, #12]
1000ce66:	701a      	strb	r2, [r3, #0]
1000ce68:	e7d9      	b.n	1000ce1e <__cvt+0x7e>

1000ce6a <__exponent>:
1000ce6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ce6c:	2900      	cmp	r1, #0
1000ce6e:	bfba      	itte	lt
1000ce70:	4249      	neglt	r1, r1
1000ce72:	232d      	movlt	r3, #45	@ 0x2d
1000ce74:	232b      	movge	r3, #43	@ 0x2b
1000ce76:	2909      	cmp	r1, #9
1000ce78:	7002      	strb	r2, [r0, #0]
1000ce7a:	7043      	strb	r3, [r0, #1]
1000ce7c:	dd29      	ble.n	1000ced2 <__exponent+0x68>
1000ce7e:	f10d 0307 	add.w	r3, sp, #7
1000ce82:	461d      	mov	r5, r3
1000ce84:	270a      	movs	r7, #10
1000ce86:	461a      	mov	r2, r3
1000ce88:	fbb1 f6f7 	udiv	r6, r1, r7
1000ce8c:	fb07 1416 	mls	r4, r7, r6, r1
1000ce90:	3430      	adds	r4, #48	@ 0x30
1000ce92:	f802 4c01 	strb.w	r4, [r2, #-1]
1000ce96:	460c      	mov	r4, r1
1000ce98:	2c63      	cmp	r4, #99	@ 0x63
1000ce9a:	f103 33ff 	add.w	r3, r3, #4294967295
1000ce9e:	4631      	mov	r1, r6
1000cea0:	dcf1      	bgt.n	1000ce86 <__exponent+0x1c>
1000cea2:	3130      	adds	r1, #48	@ 0x30
1000cea4:	1e94      	subs	r4, r2, #2
1000cea6:	f803 1c01 	strb.w	r1, [r3, #-1]
1000ceaa:	1c41      	adds	r1, r0, #1
1000ceac:	4623      	mov	r3, r4
1000ceae:	42ab      	cmp	r3, r5
1000ceb0:	d30a      	bcc.n	1000cec8 <__exponent+0x5e>
1000ceb2:	f10d 0309 	add.w	r3, sp, #9
1000ceb6:	1a9b      	subs	r3, r3, r2
1000ceb8:	42ac      	cmp	r4, r5
1000ceba:	bf88      	it	hi
1000cebc:	2300      	movhi	r3, #0
1000cebe:	3302      	adds	r3, #2
1000cec0:	4403      	add	r3, r0
1000cec2:	1a18      	subs	r0, r3, r0
1000cec4:	b003      	add	sp, #12
1000cec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cec8:	f813 6b01 	ldrb.w	r6, [r3], #1
1000cecc:	f801 6f01 	strb.w	r6, [r1, #1]!
1000ced0:	e7ed      	b.n	1000ceae <__exponent+0x44>
1000ced2:	2330      	movs	r3, #48	@ 0x30
1000ced4:	3130      	adds	r1, #48	@ 0x30
1000ced6:	7083      	strb	r3, [r0, #2]
1000ced8:	70c1      	strb	r1, [r0, #3]
1000ceda:	1d03      	adds	r3, r0, #4
1000cedc:	e7f1      	b.n	1000cec2 <__exponent+0x58>
	...

1000cee0 <_printf_float>:
1000cee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000cee4:	b08d      	sub	sp, #52	@ 0x34
1000cee6:	460c      	mov	r4, r1
1000cee8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
1000ceec:	4616      	mov	r6, r2
1000ceee:	461f      	mov	r7, r3
1000cef0:	4605      	mov	r5, r0
1000cef2:	f000 ff81 	bl	1000ddf8 <_localeconv_r>
1000cef6:	6803      	ldr	r3, [r0, #0]
1000cef8:	9304      	str	r3, [sp, #16]
1000cefa:	4618      	mov	r0, r3
1000cefc:	f7f3 f900 	bl	10000100 <strlen>
1000cf00:	2300      	movs	r3, #0
1000cf02:	930a      	str	r3, [sp, #40]	@ 0x28
1000cf04:	f8d8 3000 	ldr.w	r3, [r8]
1000cf08:	9005      	str	r0, [sp, #20]
1000cf0a:	3307      	adds	r3, #7
1000cf0c:	f023 0307 	bic.w	r3, r3, #7
1000cf10:	f103 0208 	add.w	r2, r3, #8
1000cf14:	f894 a018 	ldrb.w	sl, [r4, #24]
1000cf18:	f8d4 b000 	ldr.w	fp, [r4]
1000cf1c:	f8c8 2000 	str.w	r2, [r8]
1000cf20:	e9d3 8900 	ldrd	r8, r9, [r3]
1000cf24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
1000cf28:	9307      	str	r3, [sp, #28]
1000cf2a:	f8cd 8018 	str.w	r8, [sp, #24]
1000cf2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
1000cf32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000cf36:	4b9c      	ldr	r3, [pc, #624]	@ (1000d1a8 <_printf_float+0x2c8>)
1000cf38:	f04f 32ff 	mov.w	r2, #4294967295
1000cf3c:	f7f3 fd3e 	bl	100009bc <__aeabi_dcmpun>
1000cf40:	bb70      	cbnz	r0, 1000cfa0 <_printf_float+0xc0>
1000cf42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1000cf46:	4b98      	ldr	r3, [pc, #608]	@ (1000d1a8 <_printf_float+0x2c8>)
1000cf48:	f04f 32ff 	mov.w	r2, #4294967295
1000cf4c:	f7f3 fd18 	bl	10000980 <__aeabi_dcmple>
1000cf50:	bb30      	cbnz	r0, 1000cfa0 <_printf_float+0xc0>
1000cf52:	2200      	movs	r2, #0
1000cf54:	2300      	movs	r3, #0
1000cf56:	4640      	mov	r0, r8
1000cf58:	4649      	mov	r1, r9
1000cf5a:	f7f3 fd07 	bl	1000096c <__aeabi_dcmplt>
1000cf5e:	b110      	cbz	r0, 1000cf66 <_printf_float+0x86>
1000cf60:	232d      	movs	r3, #45	@ 0x2d
1000cf62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000cf66:	4a91      	ldr	r2, [pc, #580]	@ (1000d1ac <_printf_float+0x2cc>)
1000cf68:	4b91      	ldr	r3, [pc, #580]	@ (1000d1b0 <_printf_float+0x2d0>)
1000cf6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
1000cf6e:	bf8c      	ite	hi
1000cf70:	4690      	movhi	r8, r2
1000cf72:	4698      	movls	r8, r3
1000cf74:	2303      	movs	r3, #3
1000cf76:	6123      	str	r3, [r4, #16]
1000cf78:	f02b 0304 	bic.w	r3, fp, #4
1000cf7c:	6023      	str	r3, [r4, #0]
1000cf7e:	f04f 0900 	mov.w	r9, #0
1000cf82:	9700      	str	r7, [sp, #0]
1000cf84:	4633      	mov	r3, r6
1000cf86:	aa0b      	add	r2, sp, #44	@ 0x2c
1000cf88:	4621      	mov	r1, r4
1000cf8a:	4628      	mov	r0, r5
1000cf8c:	f000 f9d2 	bl	1000d334 <_printf_common>
1000cf90:	3001      	adds	r0, #1
1000cf92:	f040 808d 	bne.w	1000d0b0 <_printf_float+0x1d0>
1000cf96:	f04f 30ff 	mov.w	r0, #4294967295
1000cf9a:	b00d      	add	sp, #52	@ 0x34
1000cf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000cfa0:	4642      	mov	r2, r8
1000cfa2:	464b      	mov	r3, r9
1000cfa4:	4640      	mov	r0, r8
1000cfa6:	4649      	mov	r1, r9
1000cfa8:	f7f3 fd08 	bl	100009bc <__aeabi_dcmpun>
1000cfac:	b140      	cbz	r0, 1000cfc0 <_printf_float+0xe0>
1000cfae:	464b      	mov	r3, r9
1000cfb0:	2b00      	cmp	r3, #0
1000cfb2:	bfbc      	itt	lt
1000cfb4:	232d      	movlt	r3, #45	@ 0x2d
1000cfb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
1000cfba:	4a7e      	ldr	r2, [pc, #504]	@ (1000d1b4 <_printf_float+0x2d4>)
1000cfbc:	4b7e      	ldr	r3, [pc, #504]	@ (1000d1b8 <_printf_float+0x2d8>)
1000cfbe:	e7d4      	b.n	1000cf6a <_printf_float+0x8a>
1000cfc0:	6863      	ldr	r3, [r4, #4]
1000cfc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
1000cfc6:	9206      	str	r2, [sp, #24]
1000cfc8:	1c5a      	adds	r2, r3, #1
1000cfca:	d13b      	bne.n	1000d044 <_printf_float+0x164>
1000cfcc:	2306      	movs	r3, #6
1000cfce:	6063      	str	r3, [r4, #4]
1000cfd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
1000cfd4:	2300      	movs	r3, #0
1000cfd6:	6022      	str	r2, [r4, #0]
1000cfd8:	9303      	str	r3, [sp, #12]
1000cfda:	ab0a      	add	r3, sp, #40	@ 0x28
1000cfdc:	e9cd a301 	strd	sl, r3, [sp, #4]
1000cfe0:	ab09      	add	r3, sp, #36	@ 0x24
1000cfe2:	9300      	str	r3, [sp, #0]
1000cfe4:	6861      	ldr	r1, [r4, #4]
1000cfe6:	ec49 8b10 	vmov	d0, r8, r9
1000cfea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
1000cfee:	4628      	mov	r0, r5
1000cff0:	f7ff fed6 	bl	1000cda0 <__cvt>
1000cff4:	9b06      	ldr	r3, [sp, #24]
1000cff6:	9909      	ldr	r1, [sp, #36]	@ 0x24
1000cff8:	2b47      	cmp	r3, #71	@ 0x47
1000cffa:	4680      	mov	r8, r0
1000cffc:	d129      	bne.n	1000d052 <_printf_float+0x172>
1000cffe:	1cc8      	adds	r0, r1, #3
1000d000:	db02      	blt.n	1000d008 <_printf_float+0x128>
1000d002:	6863      	ldr	r3, [r4, #4]
1000d004:	4299      	cmp	r1, r3
1000d006:	dd41      	ble.n	1000d08c <_printf_float+0x1ac>
1000d008:	f1aa 0a02 	sub.w	sl, sl, #2
1000d00c:	fa5f fa8a 	uxtb.w	sl, sl
1000d010:	3901      	subs	r1, #1
1000d012:	4652      	mov	r2, sl
1000d014:	f104 0050 	add.w	r0, r4, #80	@ 0x50
1000d018:	9109      	str	r1, [sp, #36]	@ 0x24
1000d01a:	f7ff ff26 	bl	1000ce6a <__exponent>
1000d01e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1000d020:	1813      	adds	r3, r2, r0
1000d022:	2a01      	cmp	r2, #1
1000d024:	4681      	mov	r9, r0
1000d026:	6123      	str	r3, [r4, #16]
1000d028:	dc02      	bgt.n	1000d030 <_printf_float+0x150>
1000d02a:	6822      	ldr	r2, [r4, #0]
1000d02c:	07d2      	lsls	r2, r2, #31
1000d02e:	d501      	bpl.n	1000d034 <_printf_float+0x154>
1000d030:	3301      	adds	r3, #1
1000d032:	6123      	str	r3, [r4, #16]
1000d034:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
1000d038:	2b00      	cmp	r3, #0
1000d03a:	d0a2      	beq.n	1000cf82 <_printf_float+0xa2>
1000d03c:	232d      	movs	r3, #45	@ 0x2d
1000d03e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000d042:	e79e      	b.n	1000cf82 <_printf_float+0xa2>
1000d044:	9a06      	ldr	r2, [sp, #24]
1000d046:	2a47      	cmp	r2, #71	@ 0x47
1000d048:	d1c2      	bne.n	1000cfd0 <_printf_float+0xf0>
1000d04a:	2b00      	cmp	r3, #0
1000d04c:	d1c0      	bne.n	1000cfd0 <_printf_float+0xf0>
1000d04e:	2301      	movs	r3, #1
1000d050:	e7bd      	b.n	1000cfce <_printf_float+0xee>
1000d052:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
1000d056:	d9db      	bls.n	1000d010 <_printf_float+0x130>
1000d058:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
1000d05c:	d118      	bne.n	1000d090 <_printf_float+0x1b0>
1000d05e:	2900      	cmp	r1, #0
1000d060:	6863      	ldr	r3, [r4, #4]
1000d062:	dd0b      	ble.n	1000d07c <_printf_float+0x19c>
1000d064:	6121      	str	r1, [r4, #16]
1000d066:	b913      	cbnz	r3, 1000d06e <_printf_float+0x18e>
1000d068:	6822      	ldr	r2, [r4, #0]
1000d06a:	07d0      	lsls	r0, r2, #31
1000d06c:	d502      	bpl.n	1000d074 <_printf_float+0x194>
1000d06e:	3301      	adds	r3, #1
1000d070:	440b      	add	r3, r1
1000d072:	6123      	str	r3, [r4, #16]
1000d074:	65a1      	str	r1, [r4, #88]	@ 0x58
1000d076:	f04f 0900 	mov.w	r9, #0
1000d07a:	e7db      	b.n	1000d034 <_printf_float+0x154>
1000d07c:	b913      	cbnz	r3, 1000d084 <_printf_float+0x1a4>
1000d07e:	6822      	ldr	r2, [r4, #0]
1000d080:	07d2      	lsls	r2, r2, #31
1000d082:	d501      	bpl.n	1000d088 <_printf_float+0x1a8>
1000d084:	3302      	adds	r3, #2
1000d086:	e7f4      	b.n	1000d072 <_printf_float+0x192>
1000d088:	2301      	movs	r3, #1
1000d08a:	e7f2      	b.n	1000d072 <_printf_float+0x192>
1000d08c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
1000d090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000d092:	4299      	cmp	r1, r3
1000d094:	db05      	blt.n	1000d0a2 <_printf_float+0x1c2>
1000d096:	6823      	ldr	r3, [r4, #0]
1000d098:	6121      	str	r1, [r4, #16]
1000d09a:	07d8      	lsls	r0, r3, #31
1000d09c:	d5ea      	bpl.n	1000d074 <_printf_float+0x194>
1000d09e:	1c4b      	adds	r3, r1, #1
1000d0a0:	e7e7      	b.n	1000d072 <_printf_float+0x192>
1000d0a2:	2900      	cmp	r1, #0
1000d0a4:	bfd4      	ite	le
1000d0a6:	f1c1 0202 	rsble	r2, r1, #2
1000d0aa:	2201      	movgt	r2, #1
1000d0ac:	4413      	add	r3, r2
1000d0ae:	e7e0      	b.n	1000d072 <_printf_float+0x192>
1000d0b0:	6823      	ldr	r3, [r4, #0]
1000d0b2:	055a      	lsls	r2, r3, #21
1000d0b4:	d407      	bmi.n	1000d0c6 <_printf_float+0x1e6>
1000d0b6:	6923      	ldr	r3, [r4, #16]
1000d0b8:	4642      	mov	r2, r8
1000d0ba:	4631      	mov	r1, r6
1000d0bc:	4628      	mov	r0, r5
1000d0be:	47b8      	blx	r7
1000d0c0:	3001      	adds	r0, #1
1000d0c2:	d12b      	bne.n	1000d11c <_printf_float+0x23c>
1000d0c4:	e767      	b.n	1000cf96 <_printf_float+0xb6>
1000d0c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
1000d0ca:	f240 80dd 	bls.w	1000d288 <_printf_float+0x3a8>
1000d0ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
1000d0d2:	2200      	movs	r2, #0
1000d0d4:	2300      	movs	r3, #0
1000d0d6:	f7f3 fc3f 	bl	10000958 <__aeabi_dcmpeq>
1000d0da:	2800      	cmp	r0, #0
1000d0dc:	d033      	beq.n	1000d146 <_printf_float+0x266>
1000d0de:	4a37      	ldr	r2, [pc, #220]	@ (1000d1bc <_printf_float+0x2dc>)
1000d0e0:	2301      	movs	r3, #1
1000d0e2:	4631      	mov	r1, r6
1000d0e4:	4628      	mov	r0, r5
1000d0e6:	47b8      	blx	r7
1000d0e8:	3001      	adds	r0, #1
1000d0ea:	f43f af54 	beq.w	1000cf96 <_printf_float+0xb6>
1000d0ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
1000d0f2:	4543      	cmp	r3, r8
1000d0f4:	db02      	blt.n	1000d0fc <_printf_float+0x21c>
1000d0f6:	6823      	ldr	r3, [r4, #0]
1000d0f8:	07d8      	lsls	r0, r3, #31
1000d0fa:	d50f      	bpl.n	1000d11c <_printf_float+0x23c>
1000d0fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1000d100:	4631      	mov	r1, r6
1000d102:	4628      	mov	r0, r5
1000d104:	47b8      	blx	r7
1000d106:	3001      	adds	r0, #1
1000d108:	f43f af45 	beq.w	1000cf96 <_printf_float+0xb6>
1000d10c:	f04f 0900 	mov.w	r9, #0
1000d110:	f108 38ff 	add.w	r8, r8, #4294967295
1000d114:	f104 0a1a 	add.w	sl, r4, #26
1000d118:	45c8      	cmp	r8, r9
1000d11a:	dc09      	bgt.n	1000d130 <_printf_float+0x250>
1000d11c:	6823      	ldr	r3, [r4, #0]
1000d11e:	079b      	lsls	r3, r3, #30
1000d120:	f100 8103 	bmi.w	1000d32a <_printf_float+0x44a>
1000d124:	68e0      	ldr	r0, [r4, #12]
1000d126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1000d128:	4298      	cmp	r0, r3
1000d12a:	bfb8      	it	lt
1000d12c:	4618      	movlt	r0, r3
1000d12e:	e734      	b.n	1000cf9a <_printf_float+0xba>
1000d130:	2301      	movs	r3, #1
1000d132:	4652      	mov	r2, sl
1000d134:	4631      	mov	r1, r6
1000d136:	4628      	mov	r0, r5
1000d138:	47b8      	blx	r7
1000d13a:	3001      	adds	r0, #1
1000d13c:	f43f af2b 	beq.w	1000cf96 <_printf_float+0xb6>
1000d140:	f109 0901 	add.w	r9, r9, #1
1000d144:	e7e8      	b.n	1000d118 <_printf_float+0x238>
1000d146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000d148:	2b00      	cmp	r3, #0
1000d14a:	dc39      	bgt.n	1000d1c0 <_printf_float+0x2e0>
1000d14c:	4a1b      	ldr	r2, [pc, #108]	@ (1000d1bc <_printf_float+0x2dc>)
1000d14e:	2301      	movs	r3, #1
1000d150:	4631      	mov	r1, r6
1000d152:	4628      	mov	r0, r5
1000d154:	47b8      	blx	r7
1000d156:	3001      	adds	r0, #1
1000d158:	f43f af1d 	beq.w	1000cf96 <_printf_float+0xb6>
1000d15c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
1000d160:	ea59 0303 	orrs.w	r3, r9, r3
1000d164:	d102      	bne.n	1000d16c <_printf_float+0x28c>
1000d166:	6823      	ldr	r3, [r4, #0]
1000d168:	07d9      	lsls	r1, r3, #31
1000d16a:	d5d7      	bpl.n	1000d11c <_printf_float+0x23c>
1000d16c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1000d170:	4631      	mov	r1, r6
1000d172:	4628      	mov	r0, r5
1000d174:	47b8      	blx	r7
1000d176:	3001      	adds	r0, #1
1000d178:	f43f af0d 	beq.w	1000cf96 <_printf_float+0xb6>
1000d17c:	f04f 0a00 	mov.w	sl, #0
1000d180:	f104 0b1a 	add.w	fp, r4, #26
1000d184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000d186:	425b      	negs	r3, r3
1000d188:	4553      	cmp	r3, sl
1000d18a:	dc01      	bgt.n	1000d190 <_printf_float+0x2b0>
1000d18c:	464b      	mov	r3, r9
1000d18e:	e793      	b.n	1000d0b8 <_printf_float+0x1d8>
1000d190:	2301      	movs	r3, #1
1000d192:	465a      	mov	r2, fp
1000d194:	4631      	mov	r1, r6
1000d196:	4628      	mov	r0, r5
1000d198:	47b8      	blx	r7
1000d19a:	3001      	adds	r0, #1
1000d19c:	f43f aefb 	beq.w	1000cf96 <_printf_float+0xb6>
1000d1a0:	f10a 0a01 	add.w	sl, sl, #1
1000d1a4:	e7ee      	b.n	1000d184 <_printf_float+0x2a4>
1000d1a6:	bf00      	nop
1000d1a8:	7fefffff 	.word	0x7fefffff
1000d1ac:	10012259 	.word	0x10012259
1000d1b0:	10012255 	.word	0x10012255
1000d1b4:	10012261 	.word	0x10012261
1000d1b8:	1001225d 	.word	0x1001225d
1000d1bc:	10012265 	.word	0x10012265
1000d1c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
1000d1c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
1000d1c6:	4553      	cmp	r3, sl
1000d1c8:	bfa8      	it	ge
1000d1ca:	4653      	movge	r3, sl
1000d1cc:	2b00      	cmp	r3, #0
1000d1ce:	4699      	mov	r9, r3
1000d1d0:	dc36      	bgt.n	1000d240 <_printf_float+0x360>
1000d1d2:	f04f 0b00 	mov.w	fp, #0
1000d1d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
1000d1da:	f104 021a 	add.w	r2, r4, #26
1000d1de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
1000d1e0:	9306      	str	r3, [sp, #24]
1000d1e2:	eba3 0309 	sub.w	r3, r3, r9
1000d1e6:	455b      	cmp	r3, fp
1000d1e8:	dc31      	bgt.n	1000d24e <_printf_float+0x36e>
1000d1ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000d1ec:	459a      	cmp	sl, r3
1000d1ee:	dc3a      	bgt.n	1000d266 <_printf_float+0x386>
1000d1f0:	6823      	ldr	r3, [r4, #0]
1000d1f2:	07da      	lsls	r2, r3, #31
1000d1f4:	d437      	bmi.n	1000d266 <_printf_float+0x386>
1000d1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000d1f8:	ebaa 0903 	sub.w	r9, sl, r3
1000d1fc:	9b06      	ldr	r3, [sp, #24]
1000d1fe:	ebaa 0303 	sub.w	r3, sl, r3
1000d202:	4599      	cmp	r9, r3
1000d204:	bfa8      	it	ge
1000d206:	4699      	movge	r9, r3
1000d208:	f1b9 0f00 	cmp.w	r9, #0
1000d20c:	dc33      	bgt.n	1000d276 <_printf_float+0x396>
1000d20e:	f04f 0800 	mov.w	r8, #0
1000d212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
1000d216:	f104 0b1a 	add.w	fp, r4, #26
1000d21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000d21c:	ebaa 0303 	sub.w	r3, sl, r3
1000d220:	eba3 0309 	sub.w	r3, r3, r9
1000d224:	4543      	cmp	r3, r8
1000d226:	f77f af79 	ble.w	1000d11c <_printf_float+0x23c>
1000d22a:	2301      	movs	r3, #1
1000d22c:	465a      	mov	r2, fp
1000d22e:	4631      	mov	r1, r6
1000d230:	4628      	mov	r0, r5
1000d232:	47b8      	blx	r7
1000d234:	3001      	adds	r0, #1
1000d236:	f43f aeae 	beq.w	1000cf96 <_printf_float+0xb6>
1000d23a:	f108 0801 	add.w	r8, r8, #1
1000d23e:	e7ec      	b.n	1000d21a <_printf_float+0x33a>
1000d240:	4642      	mov	r2, r8
1000d242:	4631      	mov	r1, r6
1000d244:	4628      	mov	r0, r5
1000d246:	47b8      	blx	r7
1000d248:	3001      	adds	r0, #1
1000d24a:	d1c2      	bne.n	1000d1d2 <_printf_float+0x2f2>
1000d24c:	e6a3      	b.n	1000cf96 <_printf_float+0xb6>
1000d24e:	2301      	movs	r3, #1
1000d250:	4631      	mov	r1, r6
1000d252:	4628      	mov	r0, r5
1000d254:	9206      	str	r2, [sp, #24]
1000d256:	47b8      	blx	r7
1000d258:	3001      	adds	r0, #1
1000d25a:	f43f ae9c 	beq.w	1000cf96 <_printf_float+0xb6>
1000d25e:	9a06      	ldr	r2, [sp, #24]
1000d260:	f10b 0b01 	add.w	fp, fp, #1
1000d264:	e7bb      	b.n	1000d1de <_printf_float+0x2fe>
1000d266:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1000d26a:	4631      	mov	r1, r6
1000d26c:	4628      	mov	r0, r5
1000d26e:	47b8      	blx	r7
1000d270:	3001      	adds	r0, #1
1000d272:	d1c0      	bne.n	1000d1f6 <_printf_float+0x316>
1000d274:	e68f      	b.n	1000cf96 <_printf_float+0xb6>
1000d276:	9a06      	ldr	r2, [sp, #24]
1000d278:	464b      	mov	r3, r9
1000d27a:	4442      	add	r2, r8
1000d27c:	4631      	mov	r1, r6
1000d27e:	4628      	mov	r0, r5
1000d280:	47b8      	blx	r7
1000d282:	3001      	adds	r0, #1
1000d284:	d1c3      	bne.n	1000d20e <_printf_float+0x32e>
1000d286:	e686      	b.n	1000cf96 <_printf_float+0xb6>
1000d288:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
1000d28c:	f1ba 0f01 	cmp.w	sl, #1
1000d290:	dc01      	bgt.n	1000d296 <_printf_float+0x3b6>
1000d292:	07db      	lsls	r3, r3, #31
1000d294:	d536      	bpl.n	1000d304 <_printf_float+0x424>
1000d296:	2301      	movs	r3, #1
1000d298:	4642      	mov	r2, r8
1000d29a:	4631      	mov	r1, r6
1000d29c:	4628      	mov	r0, r5
1000d29e:	47b8      	blx	r7
1000d2a0:	3001      	adds	r0, #1
1000d2a2:	f43f ae78 	beq.w	1000cf96 <_printf_float+0xb6>
1000d2a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1000d2aa:	4631      	mov	r1, r6
1000d2ac:	4628      	mov	r0, r5
1000d2ae:	47b8      	blx	r7
1000d2b0:	3001      	adds	r0, #1
1000d2b2:	f43f ae70 	beq.w	1000cf96 <_printf_float+0xb6>
1000d2b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
1000d2ba:	2200      	movs	r2, #0
1000d2bc:	2300      	movs	r3, #0
1000d2be:	f10a 3aff 	add.w	sl, sl, #4294967295
1000d2c2:	f7f3 fb49 	bl	10000958 <__aeabi_dcmpeq>
1000d2c6:	b9c0      	cbnz	r0, 1000d2fa <_printf_float+0x41a>
1000d2c8:	4653      	mov	r3, sl
1000d2ca:	f108 0201 	add.w	r2, r8, #1
1000d2ce:	4631      	mov	r1, r6
1000d2d0:	4628      	mov	r0, r5
1000d2d2:	47b8      	blx	r7
1000d2d4:	3001      	adds	r0, #1
1000d2d6:	d10c      	bne.n	1000d2f2 <_printf_float+0x412>
1000d2d8:	e65d      	b.n	1000cf96 <_printf_float+0xb6>
1000d2da:	2301      	movs	r3, #1
1000d2dc:	465a      	mov	r2, fp
1000d2de:	4631      	mov	r1, r6
1000d2e0:	4628      	mov	r0, r5
1000d2e2:	47b8      	blx	r7
1000d2e4:	3001      	adds	r0, #1
1000d2e6:	f43f ae56 	beq.w	1000cf96 <_printf_float+0xb6>
1000d2ea:	f108 0801 	add.w	r8, r8, #1
1000d2ee:	45d0      	cmp	r8, sl
1000d2f0:	dbf3      	blt.n	1000d2da <_printf_float+0x3fa>
1000d2f2:	464b      	mov	r3, r9
1000d2f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
1000d2f8:	e6df      	b.n	1000d0ba <_printf_float+0x1da>
1000d2fa:	f04f 0800 	mov.w	r8, #0
1000d2fe:	f104 0b1a 	add.w	fp, r4, #26
1000d302:	e7f4      	b.n	1000d2ee <_printf_float+0x40e>
1000d304:	2301      	movs	r3, #1
1000d306:	4642      	mov	r2, r8
1000d308:	e7e1      	b.n	1000d2ce <_printf_float+0x3ee>
1000d30a:	2301      	movs	r3, #1
1000d30c:	464a      	mov	r2, r9
1000d30e:	4631      	mov	r1, r6
1000d310:	4628      	mov	r0, r5
1000d312:	47b8      	blx	r7
1000d314:	3001      	adds	r0, #1
1000d316:	f43f ae3e 	beq.w	1000cf96 <_printf_float+0xb6>
1000d31a:	f108 0801 	add.w	r8, r8, #1
1000d31e:	68e3      	ldr	r3, [r4, #12]
1000d320:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1000d322:	1a5b      	subs	r3, r3, r1
1000d324:	4543      	cmp	r3, r8
1000d326:	dcf0      	bgt.n	1000d30a <_printf_float+0x42a>
1000d328:	e6fc      	b.n	1000d124 <_printf_float+0x244>
1000d32a:	f04f 0800 	mov.w	r8, #0
1000d32e:	f104 0919 	add.w	r9, r4, #25
1000d332:	e7f4      	b.n	1000d31e <_printf_float+0x43e>

1000d334 <_printf_common>:
1000d334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000d338:	4616      	mov	r6, r2
1000d33a:	4698      	mov	r8, r3
1000d33c:	688a      	ldr	r2, [r1, #8]
1000d33e:	690b      	ldr	r3, [r1, #16]
1000d340:	f8dd 9020 	ldr.w	r9, [sp, #32]
1000d344:	4293      	cmp	r3, r2
1000d346:	bfb8      	it	lt
1000d348:	4613      	movlt	r3, r2
1000d34a:	6033      	str	r3, [r6, #0]
1000d34c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
1000d350:	4607      	mov	r7, r0
1000d352:	460c      	mov	r4, r1
1000d354:	b10a      	cbz	r2, 1000d35a <_printf_common+0x26>
1000d356:	3301      	adds	r3, #1
1000d358:	6033      	str	r3, [r6, #0]
1000d35a:	6823      	ldr	r3, [r4, #0]
1000d35c:	0699      	lsls	r1, r3, #26
1000d35e:	bf42      	ittt	mi
1000d360:	6833      	ldrmi	r3, [r6, #0]
1000d362:	3302      	addmi	r3, #2
1000d364:	6033      	strmi	r3, [r6, #0]
1000d366:	6825      	ldr	r5, [r4, #0]
1000d368:	f015 0506 	ands.w	r5, r5, #6
1000d36c:	d106      	bne.n	1000d37c <_printf_common+0x48>
1000d36e:	f104 0a19 	add.w	sl, r4, #25
1000d372:	68e3      	ldr	r3, [r4, #12]
1000d374:	6832      	ldr	r2, [r6, #0]
1000d376:	1a9b      	subs	r3, r3, r2
1000d378:	42ab      	cmp	r3, r5
1000d37a:	dc26      	bgt.n	1000d3ca <_printf_common+0x96>
1000d37c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
1000d380:	6822      	ldr	r2, [r4, #0]
1000d382:	3b00      	subs	r3, #0
1000d384:	bf18      	it	ne
1000d386:	2301      	movne	r3, #1
1000d388:	0692      	lsls	r2, r2, #26
1000d38a:	d42b      	bmi.n	1000d3e4 <_printf_common+0xb0>
1000d38c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1000d390:	4641      	mov	r1, r8
1000d392:	4638      	mov	r0, r7
1000d394:	47c8      	blx	r9
1000d396:	3001      	adds	r0, #1
1000d398:	d01e      	beq.n	1000d3d8 <_printf_common+0xa4>
1000d39a:	6823      	ldr	r3, [r4, #0]
1000d39c:	6922      	ldr	r2, [r4, #16]
1000d39e:	f003 0306 	and.w	r3, r3, #6
1000d3a2:	2b04      	cmp	r3, #4
1000d3a4:	bf02      	ittt	eq
1000d3a6:	68e5      	ldreq	r5, [r4, #12]
1000d3a8:	6833      	ldreq	r3, [r6, #0]
1000d3aa:	1aed      	subeq	r5, r5, r3
1000d3ac:	68a3      	ldr	r3, [r4, #8]
1000d3ae:	bf0c      	ite	eq
1000d3b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1000d3b4:	2500      	movne	r5, #0
1000d3b6:	4293      	cmp	r3, r2
1000d3b8:	bfc4      	itt	gt
1000d3ba:	1a9b      	subgt	r3, r3, r2
1000d3bc:	18ed      	addgt	r5, r5, r3
1000d3be:	2600      	movs	r6, #0
1000d3c0:	341a      	adds	r4, #26
1000d3c2:	42b5      	cmp	r5, r6
1000d3c4:	d11a      	bne.n	1000d3fc <_printf_common+0xc8>
1000d3c6:	2000      	movs	r0, #0
1000d3c8:	e008      	b.n	1000d3dc <_printf_common+0xa8>
1000d3ca:	2301      	movs	r3, #1
1000d3cc:	4652      	mov	r2, sl
1000d3ce:	4641      	mov	r1, r8
1000d3d0:	4638      	mov	r0, r7
1000d3d2:	47c8      	blx	r9
1000d3d4:	3001      	adds	r0, #1
1000d3d6:	d103      	bne.n	1000d3e0 <_printf_common+0xac>
1000d3d8:	f04f 30ff 	mov.w	r0, #4294967295
1000d3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000d3e0:	3501      	adds	r5, #1
1000d3e2:	e7c6      	b.n	1000d372 <_printf_common+0x3e>
1000d3e4:	18e1      	adds	r1, r4, r3
1000d3e6:	1c5a      	adds	r2, r3, #1
1000d3e8:	2030      	movs	r0, #48	@ 0x30
1000d3ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
1000d3ee:	4422      	add	r2, r4
1000d3f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
1000d3f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
1000d3f8:	3302      	adds	r3, #2
1000d3fa:	e7c7      	b.n	1000d38c <_printf_common+0x58>
1000d3fc:	2301      	movs	r3, #1
1000d3fe:	4622      	mov	r2, r4
1000d400:	4641      	mov	r1, r8
1000d402:	4638      	mov	r0, r7
1000d404:	47c8      	blx	r9
1000d406:	3001      	adds	r0, #1
1000d408:	d0e6      	beq.n	1000d3d8 <_printf_common+0xa4>
1000d40a:	3601      	adds	r6, #1
1000d40c:	e7d9      	b.n	1000d3c2 <_printf_common+0x8e>
	...

1000d410 <_printf_i>:
1000d410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000d414:	7e0f      	ldrb	r7, [r1, #24]
1000d416:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1000d418:	2f78      	cmp	r7, #120	@ 0x78
1000d41a:	4691      	mov	r9, r2
1000d41c:	4680      	mov	r8, r0
1000d41e:	460c      	mov	r4, r1
1000d420:	469a      	mov	sl, r3
1000d422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
1000d426:	d807      	bhi.n	1000d438 <_printf_i+0x28>
1000d428:	2f62      	cmp	r7, #98	@ 0x62
1000d42a:	d80a      	bhi.n	1000d442 <_printf_i+0x32>
1000d42c:	2f00      	cmp	r7, #0
1000d42e:	f000 80d1 	beq.w	1000d5d4 <_printf_i+0x1c4>
1000d432:	2f58      	cmp	r7, #88	@ 0x58
1000d434:	f000 80b8 	beq.w	1000d5a8 <_printf_i+0x198>
1000d438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000d43c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
1000d440:	e03a      	b.n	1000d4b8 <_printf_i+0xa8>
1000d442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
1000d446:	2b15      	cmp	r3, #21
1000d448:	d8f6      	bhi.n	1000d438 <_printf_i+0x28>
1000d44a:	a101      	add	r1, pc, #4	@ (adr r1, 1000d450 <_printf_i+0x40>)
1000d44c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1000d450:	1000d4a9 	.word	0x1000d4a9
1000d454:	1000d4bd 	.word	0x1000d4bd
1000d458:	1000d439 	.word	0x1000d439
1000d45c:	1000d439 	.word	0x1000d439
1000d460:	1000d439 	.word	0x1000d439
1000d464:	1000d439 	.word	0x1000d439
1000d468:	1000d4bd 	.word	0x1000d4bd
1000d46c:	1000d439 	.word	0x1000d439
1000d470:	1000d439 	.word	0x1000d439
1000d474:	1000d439 	.word	0x1000d439
1000d478:	1000d439 	.word	0x1000d439
1000d47c:	1000d5bb 	.word	0x1000d5bb
1000d480:	1000d4e7 	.word	0x1000d4e7
1000d484:	1000d575 	.word	0x1000d575
1000d488:	1000d439 	.word	0x1000d439
1000d48c:	1000d439 	.word	0x1000d439
1000d490:	1000d5dd 	.word	0x1000d5dd
1000d494:	1000d439 	.word	0x1000d439
1000d498:	1000d4e7 	.word	0x1000d4e7
1000d49c:	1000d439 	.word	0x1000d439
1000d4a0:	1000d439 	.word	0x1000d439
1000d4a4:	1000d57d 	.word	0x1000d57d
1000d4a8:	6833      	ldr	r3, [r6, #0]
1000d4aa:	1d1a      	adds	r2, r3, #4
1000d4ac:	681b      	ldr	r3, [r3, #0]
1000d4ae:	6032      	str	r2, [r6, #0]
1000d4b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
1000d4b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
1000d4b8:	2301      	movs	r3, #1
1000d4ba:	e09c      	b.n	1000d5f6 <_printf_i+0x1e6>
1000d4bc:	6833      	ldr	r3, [r6, #0]
1000d4be:	6820      	ldr	r0, [r4, #0]
1000d4c0:	1d19      	adds	r1, r3, #4
1000d4c2:	6031      	str	r1, [r6, #0]
1000d4c4:	0606      	lsls	r6, r0, #24
1000d4c6:	d501      	bpl.n	1000d4cc <_printf_i+0xbc>
1000d4c8:	681d      	ldr	r5, [r3, #0]
1000d4ca:	e003      	b.n	1000d4d4 <_printf_i+0xc4>
1000d4cc:	0645      	lsls	r5, r0, #25
1000d4ce:	d5fb      	bpl.n	1000d4c8 <_printf_i+0xb8>
1000d4d0:	f9b3 5000 	ldrsh.w	r5, [r3]
1000d4d4:	2d00      	cmp	r5, #0
1000d4d6:	da03      	bge.n	1000d4e0 <_printf_i+0xd0>
1000d4d8:	232d      	movs	r3, #45	@ 0x2d
1000d4da:	426d      	negs	r5, r5
1000d4dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000d4e0:	4858      	ldr	r0, [pc, #352]	@ (1000d644 <_printf_i+0x234>)
1000d4e2:	230a      	movs	r3, #10
1000d4e4:	e011      	b.n	1000d50a <_printf_i+0xfa>
1000d4e6:	6821      	ldr	r1, [r4, #0]
1000d4e8:	6833      	ldr	r3, [r6, #0]
1000d4ea:	0608      	lsls	r0, r1, #24
1000d4ec:	f853 5b04 	ldr.w	r5, [r3], #4
1000d4f0:	d402      	bmi.n	1000d4f8 <_printf_i+0xe8>
1000d4f2:	0649      	lsls	r1, r1, #25
1000d4f4:	bf48      	it	mi
1000d4f6:	b2ad      	uxthmi	r5, r5
1000d4f8:	2f6f      	cmp	r7, #111	@ 0x6f
1000d4fa:	4852      	ldr	r0, [pc, #328]	@ (1000d644 <_printf_i+0x234>)
1000d4fc:	6033      	str	r3, [r6, #0]
1000d4fe:	bf14      	ite	ne
1000d500:	230a      	movne	r3, #10
1000d502:	2308      	moveq	r3, #8
1000d504:	2100      	movs	r1, #0
1000d506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
1000d50a:	6866      	ldr	r6, [r4, #4]
1000d50c:	60a6      	str	r6, [r4, #8]
1000d50e:	2e00      	cmp	r6, #0
1000d510:	db05      	blt.n	1000d51e <_printf_i+0x10e>
1000d512:	6821      	ldr	r1, [r4, #0]
1000d514:	432e      	orrs	r6, r5
1000d516:	f021 0104 	bic.w	r1, r1, #4
1000d51a:	6021      	str	r1, [r4, #0]
1000d51c:	d04b      	beq.n	1000d5b6 <_printf_i+0x1a6>
1000d51e:	4616      	mov	r6, r2
1000d520:	fbb5 f1f3 	udiv	r1, r5, r3
1000d524:	fb03 5711 	mls	r7, r3, r1, r5
1000d528:	5dc7      	ldrb	r7, [r0, r7]
1000d52a:	f806 7d01 	strb.w	r7, [r6, #-1]!
1000d52e:	462f      	mov	r7, r5
1000d530:	42bb      	cmp	r3, r7
1000d532:	460d      	mov	r5, r1
1000d534:	d9f4      	bls.n	1000d520 <_printf_i+0x110>
1000d536:	2b08      	cmp	r3, #8
1000d538:	d10b      	bne.n	1000d552 <_printf_i+0x142>
1000d53a:	6823      	ldr	r3, [r4, #0]
1000d53c:	07df      	lsls	r7, r3, #31
1000d53e:	d508      	bpl.n	1000d552 <_printf_i+0x142>
1000d540:	6923      	ldr	r3, [r4, #16]
1000d542:	6861      	ldr	r1, [r4, #4]
1000d544:	4299      	cmp	r1, r3
1000d546:	bfde      	ittt	le
1000d548:	2330      	movle	r3, #48	@ 0x30
1000d54a:	f806 3c01 	strble.w	r3, [r6, #-1]
1000d54e:	f106 36ff 	addle.w	r6, r6, #4294967295
1000d552:	1b92      	subs	r2, r2, r6
1000d554:	6122      	str	r2, [r4, #16]
1000d556:	f8cd a000 	str.w	sl, [sp]
1000d55a:	464b      	mov	r3, r9
1000d55c:	aa03      	add	r2, sp, #12
1000d55e:	4621      	mov	r1, r4
1000d560:	4640      	mov	r0, r8
1000d562:	f7ff fee7 	bl	1000d334 <_printf_common>
1000d566:	3001      	adds	r0, #1
1000d568:	d14a      	bne.n	1000d600 <_printf_i+0x1f0>
1000d56a:	f04f 30ff 	mov.w	r0, #4294967295
1000d56e:	b004      	add	sp, #16
1000d570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000d574:	6823      	ldr	r3, [r4, #0]
1000d576:	f043 0320 	orr.w	r3, r3, #32
1000d57a:	6023      	str	r3, [r4, #0]
1000d57c:	4832      	ldr	r0, [pc, #200]	@ (1000d648 <_printf_i+0x238>)
1000d57e:	2778      	movs	r7, #120	@ 0x78
1000d580:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
1000d584:	6823      	ldr	r3, [r4, #0]
1000d586:	6831      	ldr	r1, [r6, #0]
1000d588:	061f      	lsls	r7, r3, #24
1000d58a:	f851 5b04 	ldr.w	r5, [r1], #4
1000d58e:	d402      	bmi.n	1000d596 <_printf_i+0x186>
1000d590:	065f      	lsls	r7, r3, #25
1000d592:	bf48      	it	mi
1000d594:	b2ad      	uxthmi	r5, r5
1000d596:	6031      	str	r1, [r6, #0]
1000d598:	07d9      	lsls	r1, r3, #31
1000d59a:	bf44      	itt	mi
1000d59c:	f043 0320 	orrmi.w	r3, r3, #32
1000d5a0:	6023      	strmi	r3, [r4, #0]
1000d5a2:	b11d      	cbz	r5, 1000d5ac <_printf_i+0x19c>
1000d5a4:	2310      	movs	r3, #16
1000d5a6:	e7ad      	b.n	1000d504 <_printf_i+0xf4>
1000d5a8:	4826      	ldr	r0, [pc, #152]	@ (1000d644 <_printf_i+0x234>)
1000d5aa:	e7e9      	b.n	1000d580 <_printf_i+0x170>
1000d5ac:	6823      	ldr	r3, [r4, #0]
1000d5ae:	f023 0320 	bic.w	r3, r3, #32
1000d5b2:	6023      	str	r3, [r4, #0]
1000d5b4:	e7f6      	b.n	1000d5a4 <_printf_i+0x194>
1000d5b6:	4616      	mov	r6, r2
1000d5b8:	e7bd      	b.n	1000d536 <_printf_i+0x126>
1000d5ba:	6833      	ldr	r3, [r6, #0]
1000d5bc:	6825      	ldr	r5, [r4, #0]
1000d5be:	6961      	ldr	r1, [r4, #20]
1000d5c0:	1d18      	adds	r0, r3, #4
1000d5c2:	6030      	str	r0, [r6, #0]
1000d5c4:	062e      	lsls	r6, r5, #24
1000d5c6:	681b      	ldr	r3, [r3, #0]
1000d5c8:	d501      	bpl.n	1000d5ce <_printf_i+0x1be>
1000d5ca:	6019      	str	r1, [r3, #0]
1000d5cc:	e002      	b.n	1000d5d4 <_printf_i+0x1c4>
1000d5ce:	0668      	lsls	r0, r5, #25
1000d5d0:	d5fb      	bpl.n	1000d5ca <_printf_i+0x1ba>
1000d5d2:	8019      	strh	r1, [r3, #0]
1000d5d4:	2300      	movs	r3, #0
1000d5d6:	6123      	str	r3, [r4, #16]
1000d5d8:	4616      	mov	r6, r2
1000d5da:	e7bc      	b.n	1000d556 <_printf_i+0x146>
1000d5dc:	6833      	ldr	r3, [r6, #0]
1000d5de:	1d1a      	adds	r2, r3, #4
1000d5e0:	6032      	str	r2, [r6, #0]
1000d5e2:	681e      	ldr	r6, [r3, #0]
1000d5e4:	6862      	ldr	r2, [r4, #4]
1000d5e6:	2100      	movs	r1, #0
1000d5e8:	4630      	mov	r0, r6
1000d5ea:	f7f2 fd39 	bl	10000060 <memchr>
1000d5ee:	b108      	cbz	r0, 1000d5f4 <_printf_i+0x1e4>
1000d5f0:	1b80      	subs	r0, r0, r6
1000d5f2:	6060      	str	r0, [r4, #4]
1000d5f4:	6863      	ldr	r3, [r4, #4]
1000d5f6:	6123      	str	r3, [r4, #16]
1000d5f8:	2300      	movs	r3, #0
1000d5fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1000d5fe:	e7aa      	b.n	1000d556 <_printf_i+0x146>
1000d600:	6923      	ldr	r3, [r4, #16]
1000d602:	4632      	mov	r2, r6
1000d604:	4649      	mov	r1, r9
1000d606:	4640      	mov	r0, r8
1000d608:	47d0      	blx	sl
1000d60a:	3001      	adds	r0, #1
1000d60c:	d0ad      	beq.n	1000d56a <_printf_i+0x15a>
1000d60e:	6823      	ldr	r3, [r4, #0]
1000d610:	079b      	lsls	r3, r3, #30
1000d612:	d413      	bmi.n	1000d63c <_printf_i+0x22c>
1000d614:	68e0      	ldr	r0, [r4, #12]
1000d616:	9b03      	ldr	r3, [sp, #12]
1000d618:	4298      	cmp	r0, r3
1000d61a:	bfb8      	it	lt
1000d61c:	4618      	movlt	r0, r3
1000d61e:	e7a6      	b.n	1000d56e <_printf_i+0x15e>
1000d620:	2301      	movs	r3, #1
1000d622:	4632      	mov	r2, r6
1000d624:	4649      	mov	r1, r9
1000d626:	4640      	mov	r0, r8
1000d628:	47d0      	blx	sl
1000d62a:	3001      	adds	r0, #1
1000d62c:	d09d      	beq.n	1000d56a <_printf_i+0x15a>
1000d62e:	3501      	adds	r5, #1
1000d630:	68e3      	ldr	r3, [r4, #12]
1000d632:	9903      	ldr	r1, [sp, #12]
1000d634:	1a5b      	subs	r3, r3, r1
1000d636:	42ab      	cmp	r3, r5
1000d638:	dcf2      	bgt.n	1000d620 <_printf_i+0x210>
1000d63a:	e7eb      	b.n	1000d614 <_printf_i+0x204>
1000d63c:	2500      	movs	r5, #0
1000d63e:	f104 0619 	add.w	r6, r4, #25
1000d642:	e7f5      	b.n	1000d630 <_printf_i+0x220>
1000d644:	10012267 	.word	0x10012267
1000d648:	10012278 	.word	0x10012278

1000d64c <_scanf_float>:
1000d64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000d650:	b087      	sub	sp, #28
1000d652:	4691      	mov	r9, r2
1000d654:	9303      	str	r3, [sp, #12]
1000d656:	688b      	ldr	r3, [r1, #8]
1000d658:	1e5a      	subs	r2, r3, #1
1000d65a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
1000d65e:	bf81      	itttt	hi
1000d660:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
1000d664:	eb03 0b05 	addhi.w	fp, r3, r5
1000d668:	f240 135d 	movwhi	r3, #349	@ 0x15d
1000d66c:	608b      	strhi	r3, [r1, #8]
1000d66e:	680b      	ldr	r3, [r1, #0]
1000d670:	460a      	mov	r2, r1
1000d672:	f04f 0500 	mov.w	r5, #0
1000d676:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
1000d67a:	f842 3b1c 	str.w	r3, [r2], #28
1000d67e:	e9cd 5504 	strd	r5, r5, [sp, #16]
1000d682:	4680      	mov	r8, r0
1000d684:	460c      	mov	r4, r1
1000d686:	bf98      	it	ls
1000d688:	f04f 0b00 	movls.w	fp, #0
1000d68c:	9201      	str	r2, [sp, #4]
1000d68e:	4616      	mov	r6, r2
1000d690:	46aa      	mov	sl, r5
1000d692:	462f      	mov	r7, r5
1000d694:	9502      	str	r5, [sp, #8]
1000d696:	68a2      	ldr	r2, [r4, #8]
1000d698:	b15a      	cbz	r2, 1000d6b2 <_scanf_float+0x66>
1000d69a:	f8d9 3000 	ldr.w	r3, [r9]
1000d69e:	781b      	ldrb	r3, [r3, #0]
1000d6a0:	2b4e      	cmp	r3, #78	@ 0x4e
1000d6a2:	d863      	bhi.n	1000d76c <_scanf_float+0x120>
1000d6a4:	2b40      	cmp	r3, #64	@ 0x40
1000d6a6:	d83b      	bhi.n	1000d720 <_scanf_float+0xd4>
1000d6a8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
1000d6ac:	b2c8      	uxtb	r0, r1
1000d6ae:	280e      	cmp	r0, #14
1000d6b0:	d939      	bls.n	1000d726 <_scanf_float+0xda>
1000d6b2:	b11f      	cbz	r7, 1000d6bc <_scanf_float+0x70>
1000d6b4:	6823      	ldr	r3, [r4, #0]
1000d6b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
1000d6ba:	6023      	str	r3, [r4, #0]
1000d6bc:	f10a 3aff 	add.w	sl, sl, #4294967295
1000d6c0:	f1ba 0f01 	cmp.w	sl, #1
1000d6c4:	f200 8114 	bhi.w	1000d8f0 <_scanf_float+0x2a4>
1000d6c8:	9b01      	ldr	r3, [sp, #4]
1000d6ca:	429e      	cmp	r6, r3
1000d6cc:	f200 8105 	bhi.w	1000d8da <_scanf_float+0x28e>
1000d6d0:	2001      	movs	r0, #1
1000d6d2:	b007      	add	sp, #28
1000d6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000d6d8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
1000d6dc:	2a0d      	cmp	r2, #13
1000d6de:	d8e8      	bhi.n	1000d6b2 <_scanf_float+0x66>
1000d6e0:	a101      	add	r1, pc, #4	@ (adr r1, 1000d6e8 <_scanf_float+0x9c>)
1000d6e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
1000d6e6:	bf00      	nop
1000d6e8:	1000d831 	.word	0x1000d831
1000d6ec:	1000d6b3 	.word	0x1000d6b3
1000d6f0:	1000d6b3 	.word	0x1000d6b3
1000d6f4:	1000d6b3 	.word	0x1000d6b3
1000d6f8:	1000d88d 	.word	0x1000d88d
1000d6fc:	1000d867 	.word	0x1000d867
1000d700:	1000d6b3 	.word	0x1000d6b3
1000d704:	1000d6b3 	.word	0x1000d6b3
1000d708:	1000d83f 	.word	0x1000d83f
1000d70c:	1000d6b3 	.word	0x1000d6b3
1000d710:	1000d6b3 	.word	0x1000d6b3
1000d714:	1000d6b3 	.word	0x1000d6b3
1000d718:	1000d6b3 	.word	0x1000d6b3
1000d71c:	1000d7fb 	.word	0x1000d7fb
1000d720:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
1000d724:	e7da      	b.n	1000d6dc <_scanf_float+0x90>
1000d726:	290e      	cmp	r1, #14
1000d728:	d8c3      	bhi.n	1000d6b2 <_scanf_float+0x66>
1000d72a:	a001      	add	r0, pc, #4	@ (adr r0, 1000d730 <_scanf_float+0xe4>)
1000d72c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
1000d730:	1000d7eb 	.word	0x1000d7eb
1000d734:	1000d6b3 	.word	0x1000d6b3
1000d738:	1000d7eb 	.word	0x1000d7eb
1000d73c:	1000d87b 	.word	0x1000d87b
1000d740:	1000d6b3 	.word	0x1000d6b3
1000d744:	1000d78d 	.word	0x1000d78d
1000d748:	1000d7d1 	.word	0x1000d7d1
1000d74c:	1000d7d1 	.word	0x1000d7d1
1000d750:	1000d7d1 	.word	0x1000d7d1
1000d754:	1000d7d1 	.word	0x1000d7d1
1000d758:	1000d7d1 	.word	0x1000d7d1
1000d75c:	1000d7d1 	.word	0x1000d7d1
1000d760:	1000d7d1 	.word	0x1000d7d1
1000d764:	1000d7d1 	.word	0x1000d7d1
1000d768:	1000d7d1 	.word	0x1000d7d1
1000d76c:	2b6e      	cmp	r3, #110	@ 0x6e
1000d76e:	d809      	bhi.n	1000d784 <_scanf_float+0x138>
1000d770:	2b60      	cmp	r3, #96	@ 0x60
1000d772:	d8b1      	bhi.n	1000d6d8 <_scanf_float+0x8c>
1000d774:	2b54      	cmp	r3, #84	@ 0x54
1000d776:	d07b      	beq.n	1000d870 <_scanf_float+0x224>
1000d778:	2b59      	cmp	r3, #89	@ 0x59
1000d77a:	d19a      	bne.n	1000d6b2 <_scanf_float+0x66>
1000d77c:	2d07      	cmp	r5, #7
1000d77e:	d198      	bne.n	1000d6b2 <_scanf_float+0x66>
1000d780:	2508      	movs	r5, #8
1000d782:	e02f      	b.n	1000d7e4 <_scanf_float+0x198>
1000d784:	2b74      	cmp	r3, #116	@ 0x74
1000d786:	d073      	beq.n	1000d870 <_scanf_float+0x224>
1000d788:	2b79      	cmp	r3, #121	@ 0x79
1000d78a:	e7f6      	b.n	1000d77a <_scanf_float+0x12e>
1000d78c:	6821      	ldr	r1, [r4, #0]
1000d78e:	05c8      	lsls	r0, r1, #23
1000d790:	d51e      	bpl.n	1000d7d0 <_scanf_float+0x184>
1000d792:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
1000d796:	6021      	str	r1, [r4, #0]
1000d798:	3701      	adds	r7, #1
1000d79a:	f1bb 0f00 	cmp.w	fp, #0
1000d79e:	d003      	beq.n	1000d7a8 <_scanf_float+0x15c>
1000d7a0:	3201      	adds	r2, #1
1000d7a2:	f10b 3bff 	add.w	fp, fp, #4294967295
1000d7a6:	60a2      	str	r2, [r4, #8]
1000d7a8:	68a3      	ldr	r3, [r4, #8]
1000d7aa:	3b01      	subs	r3, #1
1000d7ac:	60a3      	str	r3, [r4, #8]
1000d7ae:	6923      	ldr	r3, [r4, #16]
1000d7b0:	3301      	adds	r3, #1
1000d7b2:	6123      	str	r3, [r4, #16]
1000d7b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
1000d7b8:	3b01      	subs	r3, #1
1000d7ba:	2b00      	cmp	r3, #0
1000d7bc:	f8c9 3004 	str.w	r3, [r9, #4]
1000d7c0:	f340 8082 	ble.w	1000d8c8 <_scanf_float+0x27c>
1000d7c4:	f8d9 3000 	ldr.w	r3, [r9]
1000d7c8:	3301      	adds	r3, #1
1000d7ca:	f8c9 3000 	str.w	r3, [r9]
1000d7ce:	e762      	b.n	1000d696 <_scanf_float+0x4a>
1000d7d0:	eb1a 0105 	adds.w	r1, sl, r5
1000d7d4:	f47f af6d 	bne.w	1000d6b2 <_scanf_float+0x66>
1000d7d8:	6822      	ldr	r2, [r4, #0]
1000d7da:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
1000d7de:	6022      	str	r2, [r4, #0]
1000d7e0:	460d      	mov	r5, r1
1000d7e2:	468a      	mov	sl, r1
1000d7e4:	f806 3b01 	strb.w	r3, [r6], #1
1000d7e8:	e7de      	b.n	1000d7a8 <_scanf_float+0x15c>
1000d7ea:	6822      	ldr	r2, [r4, #0]
1000d7ec:	0610      	lsls	r0, r2, #24
1000d7ee:	f57f af60 	bpl.w	1000d6b2 <_scanf_float+0x66>
1000d7f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
1000d7f6:	6022      	str	r2, [r4, #0]
1000d7f8:	e7f4      	b.n	1000d7e4 <_scanf_float+0x198>
1000d7fa:	f1ba 0f00 	cmp.w	sl, #0
1000d7fe:	d10c      	bne.n	1000d81a <_scanf_float+0x1ce>
1000d800:	b977      	cbnz	r7, 1000d820 <_scanf_float+0x1d4>
1000d802:	6822      	ldr	r2, [r4, #0]
1000d804:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
1000d808:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
1000d80c:	d108      	bne.n	1000d820 <_scanf_float+0x1d4>
1000d80e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
1000d812:	6022      	str	r2, [r4, #0]
1000d814:	f04f 0a01 	mov.w	sl, #1
1000d818:	e7e4      	b.n	1000d7e4 <_scanf_float+0x198>
1000d81a:	f1ba 0f02 	cmp.w	sl, #2
1000d81e:	d050      	beq.n	1000d8c2 <_scanf_float+0x276>
1000d820:	2d01      	cmp	r5, #1
1000d822:	d002      	beq.n	1000d82a <_scanf_float+0x1de>
1000d824:	2d04      	cmp	r5, #4
1000d826:	f47f af44 	bne.w	1000d6b2 <_scanf_float+0x66>
1000d82a:	3501      	adds	r5, #1
1000d82c:	b2ed      	uxtb	r5, r5
1000d82e:	e7d9      	b.n	1000d7e4 <_scanf_float+0x198>
1000d830:	f1ba 0f01 	cmp.w	sl, #1
1000d834:	f47f af3d 	bne.w	1000d6b2 <_scanf_float+0x66>
1000d838:	f04f 0a02 	mov.w	sl, #2
1000d83c:	e7d2      	b.n	1000d7e4 <_scanf_float+0x198>
1000d83e:	b975      	cbnz	r5, 1000d85e <_scanf_float+0x212>
1000d840:	2f00      	cmp	r7, #0
1000d842:	f47f af37 	bne.w	1000d6b4 <_scanf_float+0x68>
1000d846:	6822      	ldr	r2, [r4, #0]
1000d848:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
1000d84c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
1000d850:	f040 8103 	bne.w	1000da5a <_scanf_float+0x40e>
1000d854:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
1000d858:	6022      	str	r2, [r4, #0]
1000d85a:	2501      	movs	r5, #1
1000d85c:	e7c2      	b.n	1000d7e4 <_scanf_float+0x198>
1000d85e:	2d03      	cmp	r5, #3
1000d860:	d0e3      	beq.n	1000d82a <_scanf_float+0x1de>
1000d862:	2d05      	cmp	r5, #5
1000d864:	e7df      	b.n	1000d826 <_scanf_float+0x1da>
1000d866:	2d02      	cmp	r5, #2
1000d868:	f47f af23 	bne.w	1000d6b2 <_scanf_float+0x66>
1000d86c:	2503      	movs	r5, #3
1000d86e:	e7b9      	b.n	1000d7e4 <_scanf_float+0x198>
1000d870:	2d06      	cmp	r5, #6
1000d872:	f47f af1e 	bne.w	1000d6b2 <_scanf_float+0x66>
1000d876:	2507      	movs	r5, #7
1000d878:	e7b4      	b.n	1000d7e4 <_scanf_float+0x198>
1000d87a:	6822      	ldr	r2, [r4, #0]
1000d87c:	0591      	lsls	r1, r2, #22
1000d87e:	f57f af18 	bpl.w	1000d6b2 <_scanf_float+0x66>
1000d882:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
1000d886:	6022      	str	r2, [r4, #0]
1000d888:	9702      	str	r7, [sp, #8]
1000d88a:	e7ab      	b.n	1000d7e4 <_scanf_float+0x198>
1000d88c:	6822      	ldr	r2, [r4, #0]
1000d88e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
1000d892:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
1000d896:	d005      	beq.n	1000d8a4 <_scanf_float+0x258>
1000d898:	0550      	lsls	r0, r2, #21
1000d89a:	f57f af0a 	bpl.w	1000d6b2 <_scanf_float+0x66>
1000d89e:	2f00      	cmp	r7, #0
1000d8a0:	f000 80db 	beq.w	1000da5a <_scanf_float+0x40e>
1000d8a4:	0591      	lsls	r1, r2, #22
1000d8a6:	bf58      	it	pl
1000d8a8:	9902      	ldrpl	r1, [sp, #8]
1000d8aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
1000d8ae:	bf58      	it	pl
1000d8b0:	1a79      	subpl	r1, r7, r1
1000d8b2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
1000d8b6:	bf58      	it	pl
1000d8b8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
1000d8bc:	6022      	str	r2, [r4, #0]
1000d8be:	2700      	movs	r7, #0
1000d8c0:	e790      	b.n	1000d7e4 <_scanf_float+0x198>
1000d8c2:	f04f 0a03 	mov.w	sl, #3
1000d8c6:	e78d      	b.n	1000d7e4 <_scanf_float+0x198>
1000d8c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
1000d8cc:	4649      	mov	r1, r9
1000d8ce:	4640      	mov	r0, r8
1000d8d0:	4798      	blx	r3
1000d8d2:	2800      	cmp	r0, #0
1000d8d4:	f43f aedf 	beq.w	1000d696 <_scanf_float+0x4a>
1000d8d8:	e6eb      	b.n	1000d6b2 <_scanf_float+0x66>
1000d8da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
1000d8de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
1000d8e2:	464a      	mov	r2, r9
1000d8e4:	4640      	mov	r0, r8
1000d8e6:	4798      	blx	r3
1000d8e8:	6923      	ldr	r3, [r4, #16]
1000d8ea:	3b01      	subs	r3, #1
1000d8ec:	6123      	str	r3, [r4, #16]
1000d8ee:	e6eb      	b.n	1000d6c8 <_scanf_float+0x7c>
1000d8f0:	1e6b      	subs	r3, r5, #1
1000d8f2:	2b06      	cmp	r3, #6
1000d8f4:	d824      	bhi.n	1000d940 <_scanf_float+0x2f4>
1000d8f6:	2d02      	cmp	r5, #2
1000d8f8:	d836      	bhi.n	1000d968 <_scanf_float+0x31c>
1000d8fa:	9b01      	ldr	r3, [sp, #4]
1000d8fc:	429e      	cmp	r6, r3
1000d8fe:	f67f aee7 	bls.w	1000d6d0 <_scanf_float+0x84>
1000d902:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
1000d906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
1000d90a:	464a      	mov	r2, r9
1000d90c:	4640      	mov	r0, r8
1000d90e:	4798      	blx	r3
1000d910:	6923      	ldr	r3, [r4, #16]
1000d912:	3b01      	subs	r3, #1
1000d914:	6123      	str	r3, [r4, #16]
1000d916:	e7f0      	b.n	1000d8fa <_scanf_float+0x2ae>
1000d918:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
1000d91c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
1000d920:	464a      	mov	r2, r9
1000d922:	4640      	mov	r0, r8
1000d924:	4798      	blx	r3
1000d926:	6923      	ldr	r3, [r4, #16]
1000d928:	3b01      	subs	r3, #1
1000d92a:	6123      	str	r3, [r4, #16]
1000d92c:	f10a 3aff 	add.w	sl, sl, #4294967295
1000d930:	fa5f fa8a 	uxtb.w	sl, sl
1000d934:	f1ba 0f02 	cmp.w	sl, #2
1000d938:	d1ee      	bne.n	1000d918 <_scanf_float+0x2cc>
1000d93a:	3d03      	subs	r5, #3
1000d93c:	b2ed      	uxtb	r5, r5
1000d93e:	1b76      	subs	r6, r6, r5
1000d940:	6823      	ldr	r3, [r4, #0]
1000d942:	05da      	lsls	r2, r3, #23
1000d944:	d530      	bpl.n	1000d9a8 <_scanf_float+0x35c>
1000d946:	055b      	lsls	r3, r3, #21
1000d948:	d511      	bpl.n	1000d96e <_scanf_float+0x322>
1000d94a:	9b01      	ldr	r3, [sp, #4]
1000d94c:	429e      	cmp	r6, r3
1000d94e:	f67f aebf 	bls.w	1000d6d0 <_scanf_float+0x84>
1000d952:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
1000d956:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
1000d95a:	464a      	mov	r2, r9
1000d95c:	4640      	mov	r0, r8
1000d95e:	4798      	blx	r3
1000d960:	6923      	ldr	r3, [r4, #16]
1000d962:	3b01      	subs	r3, #1
1000d964:	6123      	str	r3, [r4, #16]
1000d966:	e7f0      	b.n	1000d94a <_scanf_float+0x2fe>
1000d968:	46aa      	mov	sl, r5
1000d96a:	46b3      	mov	fp, r6
1000d96c:	e7de      	b.n	1000d92c <_scanf_float+0x2e0>
1000d96e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
1000d972:	6923      	ldr	r3, [r4, #16]
1000d974:	2965      	cmp	r1, #101	@ 0x65
1000d976:	f103 33ff 	add.w	r3, r3, #4294967295
1000d97a:	f106 35ff 	add.w	r5, r6, #4294967295
1000d97e:	6123      	str	r3, [r4, #16]
1000d980:	d00c      	beq.n	1000d99c <_scanf_float+0x350>
1000d982:	2945      	cmp	r1, #69	@ 0x45
1000d984:	d00a      	beq.n	1000d99c <_scanf_float+0x350>
1000d986:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
1000d98a:	464a      	mov	r2, r9
1000d98c:	4640      	mov	r0, r8
1000d98e:	4798      	blx	r3
1000d990:	6923      	ldr	r3, [r4, #16]
1000d992:	f816 1c02 	ldrb.w	r1, [r6, #-2]
1000d996:	3b01      	subs	r3, #1
1000d998:	1eb5      	subs	r5, r6, #2
1000d99a:	6123      	str	r3, [r4, #16]
1000d99c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
1000d9a0:	464a      	mov	r2, r9
1000d9a2:	4640      	mov	r0, r8
1000d9a4:	4798      	blx	r3
1000d9a6:	462e      	mov	r6, r5
1000d9a8:	6822      	ldr	r2, [r4, #0]
1000d9aa:	f012 0210 	ands.w	r2, r2, #16
1000d9ae:	d001      	beq.n	1000d9b4 <_scanf_float+0x368>
1000d9b0:	2000      	movs	r0, #0
1000d9b2:	e68e      	b.n	1000d6d2 <_scanf_float+0x86>
1000d9b4:	7032      	strb	r2, [r6, #0]
1000d9b6:	6823      	ldr	r3, [r4, #0]
1000d9b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
1000d9bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
1000d9c0:	d125      	bne.n	1000da0e <_scanf_float+0x3c2>
1000d9c2:	9b02      	ldr	r3, [sp, #8]
1000d9c4:	429f      	cmp	r7, r3
1000d9c6:	d00a      	beq.n	1000d9de <_scanf_float+0x392>
1000d9c8:	1bda      	subs	r2, r3, r7
1000d9ca:	f204 136f 	addw	r3, r4, #367	@ 0x16f
1000d9ce:	429e      	cmp	r6, r3
1000d9d0:	bf28      	it	cs
1000d9d2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
1000d9d6:	4922      	ldr	r1, [pc, #136]	@ (1000da60 <_scanf_float+0x414>)
1000d9d8:	4630      	mov	r0, r6
1000d9da:	f000 f961 	bl	1000dca0 <siprintf>
1000d9de:	9901      	ldr	r1, [sp, #4]
1000d9e0:	2200      	movs	r2, #0
1000d9e2:	4640      	mov	r0, r8
1000d9e4:	f002 fbfc 	bl	100101e0 <_strtod_r>
1000d9e8:	9b03      	ldr	r3, [sp, #12]
1000d9ea:	6821      	ldr	r1, [r4, #0]
1000d9ec:	681b      	ldr	r3, [r3, #0]
1000d9ee:	f011 0f02 	tst.w	r1, #2
1000d9f2:	ec57 6b10 	vmov	r6, r7, d0
1000d9f6:	f103 0204 	add.w	r2, r3, #4
1000d9fa:	d015      	beq.n	1000da28 <_scanf_float+0x3dc>
1000d9fc:	9903      	ldr	r1, [sp, #12]
1000d9fe:	600a      	str	r2, [r1, #0]
1000da00:	681b      	ldr	r3, [r3, #0]
1000da02:	e9c3 6700 	strd	r6, r7, [r3]
1000da06:	68e3      	ldr	r3, [r4, #12]
1000da08:	3301      	adds	r3, #1
1000da0a:	60e3      	str	r3, [r4, #12]
1000da0c:	e7d0      	b.n	1000d9b0 <_scanf_float+0x364>
1000da0e:	9b04      	ldr	r3, [sp, #16]
1000da10:	2b00      	cmp	r3, #0
1000da12:	d0e4      	beq.n	1000d9de <_scanf_float+0x392>
1000da14:	9905      	ldr	r1, [sp, #20]
1000da16:	230a      	movs	r3, #10
1000da18:	3101      	adds	r1, #1
1000da1a:	4640      	mov	r0, r8
1000da1c:	f002 fc60 	bl	100102e0 <_strtol_r>
1000da20:	9b04      	ldr	r3, [sp, #16]
1000da22:	9e05      	ldr	r6, [sp, #20]
1000da24:	1ac2      	subs	r2, r0, r3
1000da26:	e7d0      	b.n	1000d9ca <_scanf_float+0x37e>
1000da28:	f011 0f04 	tst.w	r1, #4
1000da2c:	9903      	ldr	r1, [sp, #12]
1000da2e:	600a      	str	r2, [r1, #0]
1000da30:	d1e6      	bne.n	1000da00 <_scanf_float+0x3b4>
1000da32:	681d      	ldr	r5, [r3, #0]
1000da34:	4632      	mov	r2, r6
1000da36:	463b      	mov	r3, r7
1000da38:	4630      	mov	r0, r6
1000da3a:	4639      	mov	r1, r7
1000da3c:	f7f2 ffbe 	bl	100009bc <__aeabi_dcmpun>
1000da40:	b128      	cbz	r0, 1000da4e <_scanf_float+0x402>
1000da42:	4808      	ldr	r0, [pc, #32]	@ (1000da64 <_scanf_float+0x418>)
1000da44:	f000 fa6e 	bl	1000df24 <nanf>
1000da48:	ed85 0a00 	vstr	s0, [r5]
1000da4c:	e7db      	b.n	1000da06 <_scanf_float+0x3ba>
1000da4e:	4630      	mov	r0, r6
1000da50:	4639      	mov	r1, r7
1000da52:	f7f3 f811 	bl	10000a78 <__aeabi_d2f>
1000da56:	6028      	str	r0, [r5, #0]
1000da58:	e7d5      	b.n	1000da06 <_scanf_float+0x3ba>
1000da5a:	2700      	movs	r7, #0
1000da5c:	e62e      	b.n	1000d6bc <_scanf_float+0x70>
1000da5e:	bf00      	nop
1000da60:	10012289 	.word	0x10012289
1000da64:	10012254 	.word	0x10012254

1000da68 <std>:
1000da68:	2300      	movs	r3, #0
1000da6a:	b510      	push	{r4, lr}
1000da6c:	4604      	mov	r4, r0
1000da6e:	e9c0 3300 	strd	r3, r3, [r0]
1000da72:	e9c0 3304 	strd	r3, r3, [r0, #16]
1000da76:	6083      	str	r3, [r0, #8]
1000da78:	8181      	strh	r1, [r0, #12]
1000da7a:	6643      	str	r3, [r0, #100]	@ 0x64
1000da7c:	81c2      	strh	r2, [r0, #14]
1000da7e:	6183      	str	r3, [r0, #24]
1000da80:	4619      	mov	r1, r3
1000da82:	2208      	movs	r2, #8
1000da84:	305c      	adds	r0, #92	@ 0x5c
1000da86:	f000 f98a 	bl	1000dd9e <memset>
1000da8a:	4b0d      	ldr	r3, [pc, #52]	@ (1000dac0 <std+0x58>)
1000da8c:	6263      	str	r3, [r4, #36]	@ 0x24
1000da8e:	4b0d      	ldr	r3, [pc, #52]	@ (1000dac4 <std+0x5c>)
1000da90:	62a3      	str	r3, [r4, #40]	@ 0x28
1000da92:	4b0d      	ldr	r3, [pc, #52]	@ (1000dac8 <std+0x60>)
1000da94:	62e3      	str	r3, [r4, #44]	@ 0x2c
1000da96:	4b0d      	ldr	r3, [pc, #52]	@ (1000dacc <std+0x64>)
1000da98:	6323      	str	r3, [r4, #48]	@ 0x30
1000da9a:	4b0d      	ldr	r3, [pc, #52]	@ (1000dad0 <std+0x68>)
1000da9c:	6224      	str	r4, [r4, #32]
1000da9e:	429c      	cmp	r4, r3
1000daa0:	d006      	beq.n	1000dab0 <std+0x48>
1000daa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
1000daa6:	4294      	cmp	r4, r2
1000daa8:	d002      	beq.n	1000dab0 <std+0x48>
1000daaa:	33d0      	adds	r3, #208	@ 0xd0
1000daac:	429c      	cmp	r4, r3
1000daae:	d105      	bne.n	1000dabc <std+0x54>
1000dab0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
1000dab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000dab8:	f000 ba22 	b.w	1000df00 <__retarget_lock_init_recursive>
1000dabc:	bd10      	pop	{r4, pc}
1000dabe:	bf00      	nop
1000dac0:	1000dce5 	.word	0x1000dce5
1000dac4:	1000dd07 	.word	0x1000dd07
1000dac8:	1000dd3f 	.word	0x1000dd3f
1000dacc:	1000dd63 	.word	0x1000dd63
1000dad0:	100216c0 	.word	0x100216c0

1000dad4 <stdio_exit_handler>:
1000dad4:	4a02      	ldr	r2, [pc, #8]	@ (1000dae0 <stdio_exit_handler+0xc>)
1000dad6:	4903      	ldr	r1, [pc, #12]	@ (1000dae4 <stdio_exit_handler+0x10>)
1000dad8:	4803      	ldr	r0, [pc, #12]	@ (1000dae8 <stdio_exit_handler+0x14>)
1000dada:	f000 b87b 	b.w	1000dbd4 <_fwalk_sglue>
1000dade:	bf00      	nop
1000dae0:	100200d4 	.word	0x100200d4
1000dae4:	10010921 	.word	0x10010921
1000dae8:	100200e4 	.word	0x100200e4

1000daec <cleanup_stdio>:
1000daec:	6841      	ldr	r1, [r0, #4]
1000daee:	4b0c      	ldr	r3, [pc, #48]	@ (1000db20 <cleanup_stdio+0x34>)
1000daf0:	4299      	cmp	r1, r3
1000daf2:	b510      	push	{r4, lr}
1000daf4:	4604      	mov	r4, r0
1000daf6:	d001      	beq.n	1000dafc <cleanup_stdio+0x10>
1000daf8:	f002 ff12 	bl	10010920 <_fflush_r>
1000dafc:	68a1      	ldr	r1, [r4, #8]
1000dafe:	4b09      	ldr	r3, [pc, #36]	@ (1000db24 <cleanup_stdio+0x38>)
1000db00:	4299      	cmp	r1, r3
1000db02:	d002      	beq.n	1000db0a <cleanup_stdio+0x1e>
1000db04:	4620      	mov	r0, r4
1000db06:	f002 ff0b 	bl	10010920 <_fflush_r>
1000db0a:	68e1      	ldr	r1, [r4, #12]
1000db0c:	4b06      	ldr	r3, [pc, #24]	@ (1000db28 <cleanup_stdio+0x3c>)
1000db0e:	4299      	cmp	r1, r3
1000db10:	d004      	beq.n	1000db1c <cleanup_stdio+0x30>
1000db12:	4620      	mov	r0, r4
1000db14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000db18:	f002 bf02 	b.w	10010920 <_fflush_r>
1000db1c:	bd10      	pop	{r4, pc}
1000db1e:	bf00      	nop
1000db20:	100216c0 	.word	0x100216c0
1000db24:	10021728 	.word	0x10021728
1000db28:	10021790 	.word	0x10021790

1000db2c <global_stdio_init.part.0>:
1000db2c:	b510      	push	{r4, lr}
1000db2e:	4b0b      	ldr	r3, [pc, #44]	@ (1000db5c <global_stdio_init.part.0+0x30>)
1000db30:	4c0b      	ldr	r4, [pc, #44]	@ (1000db60 <global_stdio_init.part.0+0x34>)
1000db32:	4a0c      	ldr	r2, [pc, #48]	@ (1000db64 <global_stdio_init.part.0+0x38>)
1000db34:	601a      	str	r2, [r3, #0]
1000db36:	4620      	mov	r0, r4
1000db38:	2200      	movs	r2, #0
1000db3a:	2104      	movs	r1, #4
1000db3c:	f7ff ff94 	bl	1000da68 <std>
1000db40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
1000db44:	2201      	movs	r2, #1
1000db46:	2109      	movs	r1, #9
1000db48:	f7ff ff8e 	bl	1000da68 <std>
1000db4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
1000db50:	2202      	movs	r2, #2
1000db52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000db56:	2112      	movs	r1, #18
1000db58:	f7ff bf86 	b.w	1000da68 <std>
1000db5c:	100217f8 	.word	0x100217f8
1000db60:	100216c0 	.word	0x100216c0
1000db64:	1000dad5 	.word	0x1000dad5

1000db68 <__sfp_lock_acquire>:
1000db68:	4801      	ldr	r0, [pc, #4]	@ (1000db70 <__sfp_lock_acquire+0x8>)
1000db6a:	f000 b9ca 	b.w	1000df02 <__retarget_lock_acquire_recursive>
1000db6e:	bf00      	nop
1000db70:	10021801 	.word	0x10021801

1000db74 <__sfp_lock_release>:
1000db74:	4801      	ldr	r0, [pc, #4]	@ (1000db7c <__sfp_lock_release+0x8>)
1000db76:	f000 b9c5 	b.w	1000df04 <__retarget_lock_release_recursive>
1000db7a:	bf00      	nop
1000db7c:	10021801 	.word	0x10021801

1000db80 <__sinit>:
1000db80:	b510      	push	{r4, lr}
1000db82:	4604      	mov	r4, r0
1000db84:	f7ff fff0 	bl	1000db68 <__sfp_lock_acquire>
1000db88:	6a23      	ldr	r3, [r4, #32]
1000db8a:	b11b      	cbz	r3, 1000db94 <__sinit+0x14>
1000db8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000db90:	f7ff bff0 	b.w	1000db74 <__sfp_lock_release>
1000db94:	4b04      	ldr	r3, [pc, #16]	@ (1000dba8 <__sinit+0x28>)
1000db96:	6223      	str	r3, [r4, #32]
1000db98:	4b04      	ldr	r3, [pc, #16]	@ (1000dbac <__sinit+0x2c>)
1000db9a:	681b      	ldr	r3, [r3, #0]
1000db9c:	2b00      	cmp	r3, #0
1000db9e:	d1f5      	bne.n	1000db8c <__sinit+0xc>
1000dba0:	f7ff ffc4 	bl	1000db2c <global_stdio_init.part.0>
1000dba4:	e7f2      	b.n	1000db8c <__sinit+0xc>
1000dba6:	bf00      	nop
1000dba8:	1000daed 	.word	0x1000daed
1000dbac:	100217f8 	.word	0x100217f8

1000dbb0 <fiprintf>:
1000dbb0:	b40e      	push	{r1, r2, r3}
1000dbb2:	b503      	push	{r0, r1, lr}
1000dbb4:	4601      	mov	r1, r0
1000dbb6:	ab03      	add	r3, sp, #12
1000dbb8:	4805      	ldr	r0, [pc, #20]	@ (1000dbd0 <fiprintf+0x20>)
1000dbba:	f853 2b04 	ldr.w	r2, [r3], #4
1000dbbe:	6800      	ldr	r0, [r0, #0]
1000dbc0:	9301      	str	r3, [sp, #4]
1000dbc2:	f002 fd11 	bl	100105e8 <_vfiprintf_r>
1000dbc6:	b002      	add	sp, #8
1000dbc8:	f85d eb04 	ldr.w	lr, [sp], #4
1000dbcc:	b003      	add	sp, #12
1000dbce:	4770      	bx	lr
1000dbd0:	100200e0 	.word	0x100200e0

1000dbd4 <_fwalk_sglue>:
1000dbd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000dbd8:	4607      	mov	r7, r0
1000dbda:	4688      	mov	r8, r1
1000dbdc:	4614      	mov	r4, r2
1000dbde:	2600      	movs	r6, #0
1000dbe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
1000dbe4:	f1b9 0901 	subs.w	r9, r9, #1
1000dbe8:	d505      	bpl.n	1000dbf6 <_fwalk_sglue+0x22>
1000dbea:	6824      	ldr	r4, [r4, #0]
1000dbec:	2c00      	cmp	r4, #0
1000dbee:	d1f7      	bne.n	1000dbe0 <_fwalk_sglue+0xc>
1000dbf0:	4630      	mov	r0, r6
1000dbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000dbf6:	89ab      	ldrh	r3, [r5, #12]
1000dbf8:	2b01      	cmp	r3, #1
1000dbfa:	d907      	bls.n	1000dc0c <_fwalk_sglue+0x38>
1000dbfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1000dc00:	3301      	adds	r3, #1
1000dc02:	d003      	beq.n	1000dc0c <_fwalk_sglue+0x38>
1000dc04:	4629      	mov	r1, r5
1000dc06:	4638      	mov	r0, r7
1000dc08:	47c0      	blx	r8
1000dc0a:	4306      	orrs	r6, r0
1000dc0c:	3568      	adds	r5, #104	@ 0x68
1000dc0e:	e7e9      	b.n	1000dbe4 <_fwalk_sglue+0x10>

1000dc10 <iprintf>:
1000dc10:	b40f      	push	{r0, r1, r2, r3}
1000dc12:	b507      	push	{r0, r1, r2, lr}
1000dc14:	4906      	ldr	r1, [pc, #24]	@ (1000dc30 <iprintf+0x20>)
1000dc16:	ab04      	add	r3, sp, #16
1000dc18:	6808      	ldr	r0, [r1, #0]
1000dc1a:	f853 2b04 	ldr.w	r2, [r3], #4
1000dc1e:	6881      	ldr	r1, [r0, #8]
1000dc20:	9301      	str	r3, [sp, #4]
1000dc22:	f002 fce1 	bl	100105e8 <_vfiprintf_r>
1000dc26:	b003      	add	sp, #12
1000dc28:	f85d eb04 	ldr.w	lr, [sp], #4
1000dc2c:	b004      	add	sp, #16
1000dc2e:	4770      	bx	lr
1000dc30:	100200e0 	.word	0x100200e0

1000dc34 <sniprintf>:
1000dc34:	b40c      	push	{r2, r3}
1000dc36:	b530      	push	{r4, r5, lr}
1000dc38:	4b18      	ldr	r3, [pc, #96]	@ (1000dc9c <sniprintf+0x68>)
1000dc3a:	1e0c      	subs	r4, r1, #0
1000dc3c:	681d      	ldr	r5, [r3, #0]
1000dc3e:	b09d      	sub	sp, #116	@ 0x74
1000dc40:	da08      	bge.n	1000dc54 <sniprintf+0x20>
1000dc42:	238b      	movs	r3, #139	@ 0x8b
1000dc44:	602b      	str	r3, [r5, #0]
1000dc46:	f04f 30ff 	mov.w	r0, #4294967295
1000dc4a:	b01d      	add	sp, #116	@ 0x74
1000dc4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1000dc50:	b002      	add	sp, #8
1000dc52:	4770      	bx	lr
1000dc54:	f44f 7302 	mov.w	r3, #520	@ 0x208
1000dc58:	f8ad 3014 	strh.w	r3, [sp, #20]
1000dc5c:	f04f 0300 	mov.w	r3, #0
1000dc60:	931b      	str	r3, [sp, #108]	@ 0x6c
1000dc62:	bf14      	ite	ne
1000dc64:	f104 33ff 	addne.w	r3, r4, #4294967295
1000dc68:	4623      	moveq	r3, r4
1000dc6a:	9304      	str	r3, [sp, #16]
1000dc6c:	9307      	str	r3, [sp, #28]
1000dc6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
1000dc72:	9002      	str	r0, [sp, #8]
1000dc74:	9006      	str	r0, [sp, #24]
1000dc76:	f8ad 3016 	strh.w	r3, [sp, #22]
1000dc7a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1000dc7c:	ab21      	add	r3, sp, #132	@ 0x84
1000dc7e:	a902      	add	r1, sp, #8
1000dc80:	4628      	mov	r0, r5
1000dc82:	9301      	str	r3, [sp, #4]
1000dc84:	f002 fb8a 	bl	1001039c <_svfiprintf_r>
1000dc88:	1c43      	adds	r3, r0, #1
1000dc8a:	bfbc      	itt	lt
1000dc8c:	238b      	movlt	r3, #139	@ 0x8b
1000dc8e:	602b      	strlt	r3, [r5, #0]
1000dc90:	2c00      	cmp	r4, #0
1000dc92:	d0da      	beq.n	1000dc4a <sniprintf+0x16>
1000dc94:	9b02      	ldr	r3, [sp, #8]
1000dc96:	2200      	movs	r2, #0
1000dc98:	701a      	strb	r2, [r3, #0]
1000dc9a:	e7d6      	b.n	1000dc4a <sniprintf+0x16>
1000dc9c:	100200e0 	.word	0x100200e0

1000dca0 <siprintf>:
1000dca0:	b40e      	push	{r1, r2, r3}
1000dca2:	b510      	push	{r4, lr}
1000dca4:	b09d      	sub	sp, #116	@ 0x74
1000dca6:	ab1f      	add	r3, sp, #124	@ 0x7c
1000dca8:	9002      	str	r0, [sp, #8]
1000dcaa:	9006      	str	r0, [sp, #24]
1000dcac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
1000dcb0:	480a      	ldr	r0, [pc, #40]	@ (1000dcdc <siprintf+0x3c>)
1000dcb2:	9107      	str	r1, [sp, #28]
1000dcb4:	9104      	str	r1, [sp, #16]
1000dcb6:	490a      	ldr	r1, [pc, #40]	@ (1000dce0 <siprintf+0x40>)
1000dcb8:	f853 2b04 	ldr.w	r2, [r3], #4
1000dcbc:	9105      	str	r1, [sp, #20]
1000dcbe:	2400      	movs	r4, #0
1000dcc0:	a902      	add	r1, sp, #8
1000dcc2:	6800      	ldr	r0, [r0, #0]
1000dcc4:	9301      	str	r3, [sp, #4]
1000dcc6:	941b      	str	r4, [sp, #108]	@ 0x6c
1000dcc8:	f002 fb68 	bl	1001039c <_svfiprintf_r>
1000dccc:	9b02      	ldr	r3, [sp, #8]
1000dcce:	701c      	strb	r4, [r3, #0]
1000dcd0:	b01d      	add	sp, #116	@ 0x74
1000dcd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000dcd6:	b003      	add	sp, #12
1000dcd8:	4770      	bx	lr
1000dcda:	bf00      	nop
1000dcdc:	100200e0 	.word	0x100200e0
1000dce0:	ffff0208 	.word	0xffff0208

1000dce4 <__sread>:
1000dce4:	b510      	push	{r4, lr}
1000dce6:	460c      	mov	r4, r1
1000dce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000dcec:	f000 f8aa 	bl	1000de44 <_read_r>
1000dcf0:	2800      	cmp	r0, #0
1000dcf2:	bfab      	itete	ge
1000dcf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
1000dcf6:	89a3      	ldrhlt	r3, [r4, #12]
1000dcf8:	181b      	addge	r3, r3, r0
1000dcfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
1000dcfe:	bfac      	ite	ge
1000dd00:	6563      	strge	r3, [r4, #84]	@ 0x54
1000dd02:	81a3      	strhlt	r3, [r4, #12]
1000dd04:	bd10      	pop	{r4, pc}

1000dd06 <__swrite>:
1000dd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000dd0a:	461f      	mov	r7, r3
1000dd0c:	898b      	ldrh	r3, [r1, #12]
1000dd0e:	05db      	lsls	r3, r3, #23
1000dd10:	4605      	mov	r5, r0
1000dd12:	460c      	mov	r4, r1
1000dd14:	4616      	mov	r6, r2
1000dd16:	d505      	bpl.n	1000dd24 <__swrite+0x1e>
1000dd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000dd1c:	2302      	movs	r3, #2
1000dd1e:	2200      	movs	r2, #0
1000dd20:	f000 f87e 	bl	1000de20 <_lseek_r>
1000dd24:	89a3      	ldrh	r3, [r4, #12]
1000dd26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000dd2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
1000dd2e:	81a3      	strh	r3, [r4, #12]
1000dd30:	4632      	mov	r2, r6
1000dd32:	463b      	mov	r3, r7
1000dd34:	4628      	mov	r0, r5
1000dd36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000dd3a:	f000 b8a5 	b.w	1000de88 <_write_r>

1000dd3e <__sseek>:
1000dd3e:	b510      	push	{r4, lr}
1000dd40:	460c      	mov	r4, r1
1000dd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000dd46:	f000 f86b 	bl	1000de20 <_lseek_r>
1000dd4a:	1c43      	adds	r3, r0, #1
1000dd4c:	89a3      	ldrh	r3, [r4, #12]
1000dd4e:	bf15      	itete	ne
1000dd50:	6560      	strne	r0, [r4, #84]	@ 0x54
1000dd52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
1000dd56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
1000dd5a:	81a3      	strheq	r3, [r4, #12]
1000dd5c:	bf18      	it	ne
1000dd5e:	81a3      	strhne	r3, [r4, #12]
1000dd60:	bd10      	pop	{r4, pc}

1000dd62 <__sclose>:
1000dd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000dd66:	f000 b84b 	b.w	1000de00 <_close_r>

1000dd6a <memmove>:
1000dd6a:	4288      	cmp	r0, r1
1000dd6c:	b510      	push	{r4, lr}
1000dd6e:	eb01 0402 	add.w	r4, r1, r2
1000dd72:	d902      	bls.n	1000dd7a <memmove+0x10>
1000dd74:	4284      	cmp	r4, r0
1000dd76:	4623      	mov	r3, r4
1000dd78:	d807      	bhi.n	1000dd8a <memmove+0x20>
1000dd7a:	1e43      	subs	r3, r0, #1
1000dd7c:	42a1      	cmp	r1, r4
1000dd7e:	d008      	beq.n	1000dd92 <memmove+0x28>
1000dd80:	f811 2b01 	ldrb.w	r2, [r1], #1
1000dd84:	f803 2f01 	strb.w	r2, [r3, #1]!
1000dd88:	e7f8      	b.n	1000dd7c <memmove+0x12>
1000dd8a:	4402      	add	r2, r0
1000dd8c:	4601      	mov	r1, r0
1000dd8e:	428a      	cmp	r2, r1
1000dd90:	d100      	bne.n	1000dd94 <memmove+0x2a>
1000dd92:	bd10      	pop	{r4, pc}
1000dd94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1000dd98:	f802 4d01 	strb.w	r4, [r2, #-1]!
1000dd9c:	e7f7      	b.n	1000dd8e <memmove+0x24>

1000dd9e <memset>:
1000dd9e:	4402      	add	r2, r0
1000dda0:	4603      	mov	r3, r0
1000dda2:	4293      	cmp	r3, r2
1000dda4:	d100      	bne.n	1000dda8 <memset+0xa>
1000dda6:	4770      	bx	lr
1000dda8:	f803 1b01 	strb.w	r1, [r3], #1
1000ddac:	e7f9      	b.n	1000dda2 <memset+0x4>

1000ddae <strncmp>:
1000ddae:	b510      	push	{r4, lr}
1000ddb0:	b16a      	cbz	r2, 1000ddce <strncmp+0x20>
1000ddb2:	3901      	subs	r1, #1
1000ddb4:	1884      	adds	r4, r0, r2
1000ddb6:	f810 2b01 	ldrb.w	r2, [r0], #1
1000ddba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
1000ddbe:	429a      	cmp	r2, r3
1000ddc0:	d103      	bne.n	1000ddca <strncmp+0x1c>
1000ddc2:	42a0      	cmp	r0, r4
1000ddc4:	d001      	beq.n	1000ddca <strncmp+0x1c>
1000ddc6:	2a00      	cmp	r2, #0
1000ddc8:	d1f5      	bne.n	1000ddb6 <strncmp+0x8>
1000ddca:	1ad0      	subs	r0, r2, r3
1000ddcc:	bd10      	pop	{r4, pc}
1000ddce:	4610      	mov	r0, r2
1000ddd0:	e7fc      	b.n	1000ddcc <strncmp+0x1e>

1000ddd2 <strncpy>:
1000ddd2:	b510      	push	{r4, lr}
1000ddd4:	3901      	subs	r1, #1
1000ddd6:	4603      	mov	r3, r0
1000ddd8:	b132      	cbz	r2, 1000dde8 <strncpy+0x16>
1000ddda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1000ddde:	f803 4b01 	strb.w	r4, [r3], #1
1000dde2:	3a01      	subs	r2, #1
1000dde4:	2c00      	cmp	r4, #0
1000dde6:	d1f7      	bne.n	1000ddd8 <strncpy+0x6>
1000dde8:	441a      	add	r2, r3
1000ddea:	2100      	movs	r1, #0
1000ddec:	4293      	cmp	r3, r2
1000ddee:	d100      	bne.n	1000ddf2 <strncpy+0x20>
1000ddf0:	bd10      	pop	{r4, pc}
1000ddf2:	f803 1b01 	strb.w	r1, [r3], #1
1000ddf6:	e7f9      	b.n	1000ddec <strncpy+0x1a>

1000ddf8 <_localeconv_r>:
1000ddf8:	4800      	ldr	r0, [pc, #0]	@ (1000ddfc <_localeconv_r+0x4>)
1000ddfa:	4770      	bx	lr
1000ddfc:	10020220 	.word	0x10020220

1000de00 <_close_r>:
1000de00:	b538      	push	{r3, r4, r5, lr}
1000de02:	4d06      	ldr	r5, [pc, #24]	@ (1000de1c <_close_r+0x1c>)
1000de04:	2300      	movs	r3, #0
1000de06:	4604      	mov	r4, r0
1000de08:	4608      	mov	r0, r1
1000de0a:	602b      	str	r3, [r5, #0]
1000de0c:	f7f4 fc1e 	bl	1000264c <_close>
1000de10:	1c43      	adds	r3, r0, #1
1000de12:	d102      	bne.n	1000de1a <_close_r+0x1a>
1000de14:	682b      	ldr	r3, [r5, #0]
1000de16:	b103      	cbz	r3, 1000de1a <_close_r+0x1a>
1000de18:	6023      	str	r3, [r4, #0]
1000de1a:	bd38      	pop	{r3, r4, r5, pc}
1000de1c:	100217fc 	.word	0x100217fc

1000de20 <_lseek_r>:
1000de20:	b538      	push	{r3, r4, r5, lr}
1000de22:	4d07      	ldr	r5, [pc, #28]	@ (1000de40 <_lseek_r+0x20>)
1000de24:	4604      	mov	r4, r0
1000de26:	4608      	mov	r0, r1
1000de28:	4611      	mov	r1, r2
1000de2a:	2200      	movs	r2, #0
1000de2c:	602a      	str	r2, [r5, #0]
1000de2e:	461a      	mov	r2, r3
1000de30:	f7f4 fc33 	bl	1000269a <_lseek>
1000de34:	1c43      	adds	r3, r0, #1
1000de36:	d102      	bne.n	1000de3e <_lseek_r+0x1e>
1000de38:	682b      	ldr	r3, [r5, #0]
1000de3a:	b103      	cbz	r3, 1000de3e <_lseek_r+0x1e>
1000de3c:	6023      	str	r3, [r4, #0]
1000de3e:	bd38      	pop	{r3, r4, r5, pc}
1000de40:	100217fc 	.word	0x100217fc

1000de44 <_read_r>:
1000de44:	b538      	push	{r3, r4, r5, lr}
1000de46:	4d07      	ldr	r5, [pc, #28]	@ (1000de64 <_read_r+0x20>)
1000de48:	4604      	mov	r4, r0
1000de4a:	4608      	mov	r0, r1
1000de4c:	4611      	mov	r1, r2
1000de4e:	2200      	movs	r2, #0
1000de50:	602a      	str	r2, [r5, #0]
1000de52:	461a      	mov	r2, r3
1000de54:	f7f4 fbc1 	bl	100025da <_read>
1000de58:	1c43      	adds	r3, r0, #1
1000de5a:	d102      	bne.n	1000de62 <_read_r+0x1e>
1000de5c:	682b      	ldr	r3, [r5, #0]
1000de5e:	b103      	cbz	r3, 1000de62 <_read_r+0x1e>
1000de60:	6023      	str	r3, [r4, #0]
1000de62:	bd38      	pop	{r3, r4, r5, pc}
1000de64:	100217fc 	.word	0x100217fc

1000de68 <_sbrk_r>:
1000de68:	b538      	push	{r3, r4, r5, lr}
1000de6a:	4d06      	ldr	r5, [pc, #24]	@ (1000de84 <_sbrk_r+0x1c>)
1000de6c:	2300      	movs	r3, #0
1000de6e:	4604      	mov	r4, r0
1000de70:	4608      	mov	r0, r1
1000de72:	602b      	str	r3, [r5, #0]
1000de74:	f003 fa82 	bl	1001137c <_sbrk>
1000de78:	1c43      	adds	r3, r0, #1
1000de7a:	d102      	bne.n	1000de82 <_sbrk_r+0x1a>
1000de7c:	682b      	ldr	r3, [r5, #0]
1000de7e:	b103      	cbz	r3, 1000de82 <_sbrk_r+0x1a>
1000de80:	6023      	str	r3, [r4, #0]
1000de82:	bd38      	pop	{r3, r4, r5, pc}
1000de84:	100217fc 	.word	0x100217fc

1000de88 <_write_r>:
1000de88:	b538      	push	{r3, r4, r5, lr}
1000de8a:	4d07      	ldr	r5, [pc, #28]	@ (1000dea8 <_write_r+0x20>)
1000de8c:	4604      	mov	r4, r0
1000de8e:	4608      	mov	r0, r1
1000de90:	4611      	mov	r1, r2
1000de92:	2200      	movs	r2, #0
1000de94:	602a      	str	r2, [r5, #0]
1000de96:	461a      	mov	r2, r3
1000de98:	f7f4 fbbc 	bl	10002614 <_write>
1000de9c:	1c43      	adds	r3, r0, #1
1000de9e:	d102      	bne.n	1000dea6 <_write_r+0x1e>
1000dea0:	682b      	ldr	r3, [r5, #0]
1000dea2:	b103      	cbz	r3, 1000dea6 <_write_r+0x1e>
1000dea4:	6023      	str	r3, [r4, #0]
1000dea6:	bd38      	pop	{r3, r4, r5, pc}
1000dea8:	100217fc 	.word	0x100217fc

1000deac <__errno>:
1000deac:	4b01      	ldr	r3, [pc, #4]	@ (1000deb4 <__errno+0x8>)
1000deae:	6818      	ldr	r0, [r3, #0]
1000deb0:	4770      	bx	lr
1000deb2:	bf00      	nop
1000deb4:	100200e0 	.word	0x100200e0

1000deb8 <__libc_init_array>:
1000deb8:	b570      	push	{r4, r5, r6, lr}
1000deba:	4d0d      	ldr	r5, [pc, #52]	@ (1000def0 <__libc_init_array+0x38>)
1000debc:	4c0d      	ldr	r4, [pc, #52]	@ (1000def4 <__libc_init_array+0x3c>)
1000debe:	1b64      	subs	r4, r4, r5
1000dec0:	10a4      	asrs	r4, r4, #2
1000dec2:	2600      	movs	r6, #0
1000dec4:	42a6      	cmp	r6, r4
1000dec6:	d109      	bne.n	1000dedc <__libc_init_array+0x24>
1000dec8:	4d0b      	ldr	r5, [pc, #44]	@ (1000def8 <__libc_init_array+0x40>)
1000deca:	4c0c      	ldr	r4, [pc, #48]	@ (1000defc <__libc_init_array+0x44>)
1000decc:	f003 fa64 	bl	10011398 <_init>
1000ded0:	1b64      	subs	r4, r4, r5
1000ded2:	10a4      	asrs	r4, r4, #2
1000ded4:	2600      	movs	r6, #0
1000ded6:	42a6      	cmp	r6, r4
1000ded8:	d105      	bne.n	1000dee6 <__libc_init_array+0x2e>
1000deda:	bd70      	pop	{r4, r5, r6, pc}
1000dedc:	f855 3b04 	ldr.w	r3, [r5], #4
1000dee0:	4798      	blx	r3
1000dee2:	3601      	adds	r6, #1
1000dee4:	e7ee      	b.n	1000dec4 <__libc_init_array+0xc>
1000dee6:	f855 3b04 	ldr.w	r3, [r5], #4
1000deea:	4798      	blx	r3
1000deec:	3601      	adds	r6, #1
1000deee:	e7f2      	b.n	1000ded6 <__libc_init_array+0x1e>
1000def0:	1001264c 	.word	0x1001264c
1000def4:	1001264c 	.word	0x1001264c
1000def8:	1001264c 	.word	0x1001264c
1000defc:	10012650 	.word	0x10012650

1000df00 <__retarget_lock_init_recursive>:
1000df00:	4770      	bx	lr

1000df02 <__retarget_lock_acquire_recursive>:
1000df02:	4770      	bx	lr

1000df04 <__retarget_lock_release_recursive>:
1000df04:	4770      	bx	lr

1000df06 <memcpy>:
1000df06:	440a      	add	r2, r1
1000df08:	4291      	cmp	r1, r2
1000df0a:	f100 33ff 	add.w	r3, r0, #4294967295
1000df0e:	d100      	bne.n	1000df12 <memcpy+0xc>
1000df10:	4770      	bx	lr
1000df12:	b510      	push	{r4, lr}
1000df14:	f811 4b01 	ldrb.w	r4, [r1], #1
1000df18:	f803 4f01 	strb.w	r4, [r3, #1]!
1000df1c:	4291      	cmp	r1, r2
1000df1e:	d1f9      	bne.n	1000df14 <memcpy+0xe>
1000df20:	bd10      	pop	{r4, pc}
	...

1000df24 <nanf>:
1000df24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 1000df2c <nanf+0x8>
1000df28:	4770      	bx	lr
1000df2a:	bf00      	nop
1000df2c:	7fc00000 	.word	0x7fc00000

1000df30 <abort>:
1000df30:	b508      	push	{r3, lr}
1000df32:	2006      	movs	r0, #6
1000df34:	f002 fdd8 	bl	10010ae8 <raise>
1000df38:	2001      	movs	r0, #1
1000df3a:	f7f4 fb43 	bl	100025c4 <_exit>

1000df3e <quorem>:
1000df3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000df42:	6903      	ldr	r3, [r0, #16]
1000df44:	690c      	ldr	r4, [r1, #16]
1000df46:	42a3      	cmp	r3, r4
1000df48:	4607      	mov	r7, r0
1000df4a:	db7e      	blt.n	1000e04a <quorem+0x10c>
1000df4c:	3c01      	subs	r4, #1
1000df4e:	f101 0814 	add.w	r8, r1, #20
1000df52:	00a3      	lsls	r3, r4, #2
1000df54:	f100 0514 	add.w	r5, r0, #20
1000df58:	9300      	str	r3, [sp, #0]
1000df5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
1000df5e:	9301      	str	r3, [sp, #4]
1000df60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
1000df64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
1000df68:	3301      	adds	r3, #1
1000df6a:	429a      	cmp	r2, r3
1000df6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
1000df70:	fbb2 f6f3 	udiv	r6, r2, r3
1000df74:	d32e      	bcc.n	1000dfd4 <quorem+0x96>
1000df76:	f04f 0a00 	mov.w	sl, #0
1000df7a:	46c4      	mov	ip, r8
1000df7c:	46ae      	mov	lr, r5
1000df7e:	46d3      	mov	fp, sl
1000df80:	f85c 3b04 	ldr.w	r3, [ip], #4
1000df84:	b298      	uxth	r0, r3
1000df86:	fb06 a000 	mla	r0, r6, r0, sl
1000df8a:	0c02      	lsrs	r2, r0, #16
1000df8c:	0c1b      	lsrs	r3, r3, #16
1000df8e:	fb06 2303 	mla	r3, r6, r3, r2
1000df92:	f8de 2000 	ldr.w	r2, [lr]
1000df96:	b280      	uxth	r0, r0
1000df98:	b292      	uxth	r2, r2
1000df9a:	1a12      	subs	r2, r2, r0
1000df9c:	445a      	add	r2, fp
1000df9e:	f8de 0000 	ldr.w	r0, [lr]
1000dfa2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
1000dfa6:	b29b      	uxth	r3, r3
1000dfa8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
1000dfac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
1000dfb0:	b292      	uxth	r2, r2
1000dfb2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1000dfb6:	45e1      	cmp	r9, ip
1000dfb8:	f84e 2b04 	str.w	r2, [lr], #4
1000dfbc:	ea4f 4b23 	mov.w	fp, r3, asr #16
1000dfc0:	d2de      	bcs.n	1000df80 <quorem+0x42>
1000dfc2:	9b00      	ldr	r3, [sp, #0]
1000dfc4:	58eb      	ldr	r3, [r5, r3]
1000dfc6:	b92b      	cbnz	r3, 1000dfd4 <quorem+0x96>
1000dfc8:	9b01      	ldr	r3, [sp, #4]
1000dfca:	3b04      	subs	r3, #4
1000dfcc:	429d      	cmp	r5, r3
1000dfce:	461a      	mov	r2, r3
1000dfd0:	d32f      	bcc.n	1000e032 <quorem+0xf4>
1000dfd2:	613c      	str	r4, [r7, #16]
1000dfd4:	4638      	mov	r0, r7
1000dfd6:	f001 f911 	bl	1000f1fc <__mcmp>
1000dfda:	2800      	cmp	r0, #0
1000dfdc:	db25      	blt.n	1000e02a <quorem+0xec>
1000dfde:	4629      	mov	r1, r5
1000dfe0:	2000      	movs	r0, #0
1000dfe2:	f858 2b04 	ldr.w	r2, [r8], #4
1000dfe6:	f8d1 c000 	ldr.w	ip, [r1]
1000dfea:	fa1f fe82 	uxth.w	lr, r2
1000dfee:	fa1f f38c 	uxth.w	r3, ip
1000dff2:	eba3 030e 	sub.w	r3, r3, lr
1000dff6:	4403      	add	r3, r0
1000dff8:	0c12      	lsrs	r2, r2, #16
1000dffa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
1000dffe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
1000e002:	b29b      	uxth	r3, r3
1000e004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1000e008:	45c1      	cmp	r9, r8
1000e00a:	f841 3b04 	str.w	r3, [r1], #4
1000e00e:	ea4f 4022 	mov.w	r0, r2, asr #16
1000e012:	d2e6      	bcs.n	1000dfe2 <quorem+0xa4>
1000e014:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
1000e018:	eb05 0384 	add.w	r3, r5, r4, lsl #2
1000e01c:	b922      	cbnz	r2, 1000e028 <quorem+0xea>
1000e01e:	3b04      	subs	r3, #4
1000e020:	429d      	cmp	r5, r3
1000e022:	461a      	mov	r2, r3
1000e024:	d30b      	bcc.n	1000e03e <quorem+0x100>
1000e026:	613c      	str	r4, [r7, #16]
1000e028:	3601      	adds	r6, #1
1000e02a:	4630      	mov	r0, r6
1000e02c:	b003      	add	sp, #12
1000e02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000e032:	6812      	ldr	r2, [r2, #0]
1000e034:	3b04      	subs	r3, #4
1000e036:	2a00      	cmp	r2, #0
1000e038:	d1cb      	bne.n	1000dfd2 <quorem+0x94>
1000e03a:	3c01      	subs	r4, #1
1000e03c:	e7c6      	b.n	1000dfcc <quorem+0x8e>
1000e03e:	6812      	ldr	r2, [r2, #0]
1000e040:	3b04      	subs	r3, #4
1000e042:	2a00      	cmp	r2, #0
1000e044:	d1ef      	bne.n	1000e026 <quorem+0xe8>
1000e046:	3c01      	subs	r4, #1
1000e048:	e7ea      	b.n	1000e020 <quorem+0xe2>
1000e04a:	2000      	movs	r0, #0
1000e04c:	e7ee      	b.n	1000e02c <quorem+0xee>
	...

1000e050 <_dtoa_r>:
1000e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000e054:	69c7      	ldr	r7, [r0, #28]
1000e056:	b097      	sub	sp, #92	@ 0x5c
1000e058:	ed8d 0b04 	vstr	d0, [sp, #16]
1000e05c:	ec55 4b10 	vmov	r4, r5, d0
1000e060:	9e20      	ldr	r6, [sp, #128]	@ 0x80
1000e062:	9107      	str	r1, [sp, #28]
1000e064:	4681      	mov	r9, r0
1000e066:	920c      	str	r2, [sp, #48]	@ 0x30
1000e068:	9311      	str	r3, [sp, #68]	@ 0x44
1000e06a:	b97f      	cbnz	r7, 1000e08c <_dtoa_r+0x3c>
1000e06c:	2010      	movs	r0, #16
1000e06e:	f7fe fdd9 	bl	1000cc24 <malloc>
1000e072:	4602      	mov	r2, r0
1000e074:	f8c9 001c 	str.w	r0, [r9, #28]
1000e078:	b920      	cbnz	r0, 1000e084 <_dtoa_r+0x34>
1000e07a:	4ba9      	ldr	r3, [pc, #676]	@ (1000e320 <_dtoa_r+0x2d0>)
1000e07c:	21ef      	movs	r1, #239	@ 0xef
1000e07e:	48a9      	ldr	r0, [pc, #676]	@ (1000e324 <_dtoa_r+0x2d4>)
1000e080:	f7fe fdb2 	bl	1000cbe8 <__assert_func>
1000e084:	e9c0 7701 	strd	r7, r7, [r0, #4]
1000e088:	6007      	str	r7, [r0, #0]
1000e08a:	60c7      	str	r7, [r0, #12]
1000e08c:	f8d9 301c 	ldr.w	r3, [r9, #28]
1000e090:	6819      	ldr	r1, [r3, #0]
1000e092:	b159      	cbz	r1, 1000e0ac <_dtoa_r+0x5c>
1000e094:	685a      	ldr	r2, [r3, #4]
1000e096:	604a      	str	r2, [r1, #4]
1000e098:	2301      	movs	r3, #1
1000e09a:	4093      	lsls	r3, r2
1000e09c:	608b      	str	r3, [r1, #8]
1000e09e:	4648      	mov	r0, r9
1000e0a0:	f000 fe30 	bl	1000ed04 <_Bfree>
1000e0a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
1000e0a8:	2200      	movs	r2, #0
1000e0aa:	601a      	str	r2, [r3, #0]
1000e0ac:	1e2b      	subs	r3, r5, #0
1000e0ae:	bfb9      	ittee	lt
1000e0b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
1000e0b4:	9305      	strlt	r3, [sp, #20]
1000e0b6:	2300      	movge	r3, #0
1000e0b8:	6033      	strge	r3, [r6, #0]
1000e0ba:	9f05      	ldr	r7, [sp, #20]
1000e0bc:	4b9a      	ldr	r3, [pc, #616]	@ (1000e328 <_dtoa_r+0x2d8>)
1000e0be:	bfbc      	itt	lt
1000e0c0:	2201      	movlt	r2, #1
1000e0c2:	6032      	strlt	r2, [r6, #0]
1000e0c4:	43bb      	bics	r3, r7
1000e0c6:	d112      	bne.n	1000e0ee <_dtoa_r+0x9e>
1000e0c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
1000e0ca:	f242 730f 	movw	r3, #9999	@ 0x270f
1000e0ce:	6013      	str	r3, [r2, #0]
1000e0d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
1000e0d4:	4323      	orrs	r3, r4
1000e0d6:	f000 855a 	beq.w	1000eb8e <_dtoa_r+0xb3e>
1000e0da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
1000e0dc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 1000e33c <_dtoa_r+0x2ec>
1000e0e0:	2b00      	cmp	r3, #0
1000e0e2:	f000 855c 	beq.w	1000eb9e <_dtoa_r+0xb4e>
1000e0e6:	f10a 0303 	add.w	r3, sl, #3
1000e0ea:	f000 bd56 	b.w	1000eb9a <_dtoa_r+0xb4a>
1000e0ee:	ed9d 7b04 	vldr	d7, [sp, #16]
1000e0f2:	2200      	movs	r2, #0
1000e0f4:	ec51 0b17 	vmov	r0, r1, d7
1000e0f8:	2300      	movs	r3, #0
1000e0fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
1000e0fe:	f7f2 fc2b 	bl	10000958 <__aeabi_dcmpeq>
1000e102:	4680      	mov	r8, r0
1000e104:	b158      	cbz	r0, 1000e11e <_dtoa_r+0xce>
1000e106:	9a11      	ldr	r2, [sp, #68]	@ 0x44
1000e108:	2301      	movs	r3, #1
1000e10a:	6013      	str	r3, [r2, #0]
1000e10c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
1000e10e:	b113      	cbz	r3, 1000e116 <_dtoa_r+0xc6>
1000e110:	9a21      	ldr	r2, [sp, #132]	@ 0x84
1000e112:	4b86      	ldr	r3, [pc, #536]	@ (1000e32c <_dtoa_r+0x2dc>)
1000e114:	6013      	str	r3, [r2, #0]
1000e116:	f8df a228 	ldr.w	sl, [pc, #552]	@ 1000e340 <_dtoa_r+0x2f0>
1000e11a:	f000 bd40 	b.w	1000eb9e <_dtoa_r+0xb4e>
1000e11e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
1000e122:	aa14      	add	r2, sp, #80	@ 0x50
1000e124:	a915      	add	r1, sp, #84	@ 0x54
1000e126:	4648      	mov	r0, r9
1000e128:	f001 f988 	bl	1000f43c <__d2b>
1000e12c:	f3c7 560a 	ubfx	r6, r7, #20, #11
1000e130:	9002      	str	r0, [sp, #8]
1000e132:	2e00      	cmp	r6, #0
1000e134:	d078      	beq.n	1000e228 <_dtoa_r+0x1d8>
1000e136:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1000e138:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
1000e13c:	f3c3 0313 	ubfx	r3, r3, #0, #20
1000e140:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
1000e144:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
1000e148:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
1000e14c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
1000e150:	4619      	mov	r1, r3
1000e152:	2200      	movs	r2, #0
1000e154:	4b76      	ldr	r3, [pc, #472]	@ (1000e330 <_dtoa_r+0x2e0>)
1000e156:	f7f1 ffdf 	bl	10000118 <__aeabi_dsub>
1000e15a:	a36b      	add	r3, pc, #428	@ (adr r3, 1000e308 <_dtoa_r+0x2b8>)
1000e15c:	e9d3 2300 	ldrd	r2, r3, [r3]
1000e160:	f7f2 f992 	bl	10000488 <__aeabi_dmul>
1000e164:	a36a      	add	r3, pc, #424	@ (adr r3, 1000e310 <_dtoa_r+0x2c0>)
1000e166:	e9d3 2300 	ldrd	r2, r3, [r3]
1000e16a:	f7f1 ffd7 	bl	1000011c <__adddf3>
1000e16e:	4604      	mov	r4, r0
1000e170:	4630      	mov	r0, r6
1000e172:	460d      	mov	r5, r1
1000e174:	f7f2 f91e 	bl	100003b4 <__aeabi_i2d>
1000e178:	a367      	add	r3, pc, #412	@ (adr r3, 1000e318 <_dtoa_r+0x2c8>)
1000e17a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000e17e:	f7f2 f983 	bl	10000488 <__aeabi_dmul>
1000e182:	4602      	mov	r2, r0
1000e184:	460b      	mov	r3, r1
1000e186:	4620      	mov	r0, r4
1000e188:	4629      	mov	r1, r5
1000e18a:	f7f1 ffc7 	bl	1000011c <__adddf3>
1000e18e:	4604      	mov	r4, r0
1000e190:	460d      	mov	r5, r1
1000e192:	f7f2 fc29 	bl	100009e8 <__aeabi_d2iz>
1000e196:	2200      	movs	r2, #0
1000e198:	4607      	mov	r7, r0
1000e19a:	2300      	movs	r3, #0
1000e19c:	4620      	mov	r0, r4
1000e19e:	4629      	mov	r1, r5
1000e1a0:	f7f2 fbe4 	bl	1000096c <__aeabi_dcmplt>
1000e1a4:	b140      	cbz	r0, 1000e1b8 <_dtoa_r+0x168>
1000e1a6:	4638      	mov	r0, r7
1000e1a8:	f7f2 f904 	bl	100003b4 <__aeabi_i2d>
1000e1ac:	4622      	mov	r2, r4
1000e1ae:	462b      	mov	r3, r5
1000e1b0:	f7f2 fbd2 	bl	10000958 <__aeabi_dcmpeq>
1000e1b4:	b900      	cbnz	r0, 1000e1b8 <_dtoa_r+0x168>
1000e1b6:	3f01      	subs	r7, #1
1000e1b8:	2f16      	cmp	r7, #22
1000e1ba:	d852      	bhi.n	1000e262 <_dtoa_r+0x212>
1000e1bc:	4b5d      	ldr	r3, [pc, #372]	@ (1000e334 <_dtoa_r+0x2e4>)
1000e1be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
1000e1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
1000e1c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
1000e1ca:	f7f2 fbcf 	bl	1000096c <__aeabi_dcmplt>
1000e1ce:	2800      	cmp	r0, #0
1000e1d0:	d049      	beq.n	1000e266 <_dtoa_r+0x216>
1000e1d2:	3f01      	subs	r7, #1
1000e1d4:	2300      	movs	r3, #0
1000e1d6:	9310      	str	r3, [sp, #64]	@ 0x40
1000e1d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
1000e1da:	1b9b      	subs	r3, r3, r6
1000e1dc:	1e5a      	subs	r2, r3, #1
1000e1de:	bf45      	ittet	mi
1000e1e0:	f1c3 0301 	rsbmi	r3, r3, #1
1000e1e4:	9300      	strmi	r3, [sp, #0]
1000e1e6:	2300      	movpl	r3, #0
1000e1e8:	2300      	movmi	r3, #0
1000e1ea:	9206      	str	r2, [sp, #24]
1000e1ec:	bf54      	ite	pl
1000e1ee:	9300      	strpl	r3, [sp, #0]
1000e1f0:	9306      	strmi	r3, [sp, #24]
1000e1f2:	2f00      	cmp	r7, #0
1000e1f4:	db39      	blt.n	1000e26a <_dtoa_r+0x21a>
1000e1f6:	9b06      	ldr	r3, [sp, #24]
1000e1f8:	970d      	str	r7, [sp, #52]	@ 0x34
1000e1fa:	443b      	add	r3, r7
1000e1fc:	9306      	str	r3, [sp, #24]
1000e1fe:	2300      	movs	r3, #0
1000e200:	9308      	str	r3, [sp, #32]
1000e202:	9b07      	ldr	r3, [sp, #28]
1000e204:	2b09      	cmp	r3, #9
1000e206:	d863      	bhi.n	1000e2d0 <_dtoa_r+0x280>
1000e208:	2b05      	cmp	r3, #5
1000e20a:	bfc4      	itt	gt
1000e20c:	3b04      	subgt	r3, #4
1000e20e:	9307      	strgt	r3, [sp, #28]
1000e210:	9b07      	ldr	r3, [sp, #28]
1000e212:	f1a3 0302 	sub.w	r3, r3, #2
1000e216:	bfcc      	ite	gt
1000e218:	2400      	movgt	r4, #0
1000e21a:	2401      	movle	r4, #1
1000e21c:	2b03      	cmp	r3, #3
1000e21e:	d863      	bhi.n	1000e2e8 <_dtoa_r+0x298>
1000e220:	e8df f003 	tbb	[pc, r3]
1000e224:	2b375452 	.word	0x2b375452
1000e228:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
1000e22c:	441e      	add	r6, r3
1000e22e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
1000e232:	2b20      	cmp	r3, #32
1000e234:	bfc1      	itttt	gt
1000e236:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
1000e23a:	409f      	lslgt	r7, r3
1000e23c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
1000e240:	fa24 f303 	lsrgt.w	r3, r4, r3
1000e244:	bfd6      	itet	le
1000e246:	f1c3 0320 	rsble	r3, r3, #32
1000e24a:	ea47 0003 	orrgt.w	r0, r7, r3
1000e24e:	fa04 f003 	lslle.w	r0, r4, r3
1000e252:	f7f2 f89f 	bl	10000394 <__aeabi_ui2d>
1000e256:	2201      	movs	r2, #1
1000e258:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
1000e25c:	3e01      	subs	r6, #1
1000e25e:	9212      	str	r2, [sp, #72]	@ 0x48
1000e260:	e776      	b.n	1000e150 <_dtoa_r+0x100>
1000e262:	2301      	movs	r3, #1
1000e264:	e7b7      	b.n	1000e1d6 <_dtoa_r+0x186>
1000e266:	9010      	str	r0, [sp, #64]	@ 0x40
1000e268:	e7b6      	b.n	1000e1d8 <_dtoa_r+0x188>
1000e26a:	9b00      	ldr	r3, [sp, #0]
1000e26c:	1bdb      	subs	r3, r3, r7
1000e26e:	9300      	str	r3, [sp, #0]
1000e270:	427b      	negs	r3, r7
1000e272:	9308      	str	r3, [sp, #32]
1000e274:	2300      	movs	r3, #0
1000e276:	930d      	str	r3, [sp, #52]	@ 0x34
1000e278:	e7c3      	b.n	1000e202 <_dtoa_r+0x1b2>
1000e27a:	2301      	movs	r3, #1
1000e27c:	9309      	str	r3, [sp, #36]	@ 0x24
1000e27e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1000e280:	eb07 0b03 	add.w	fp, r7, r3
1000e284:	f10b 0301 	add.w	r3, fp, #1
1000e288:	2b01      	cmp	r3, #1
1000e28a:	9303      	str	r3, [sp, #12]
1000e28c:	bfb8      	it	lt
1000e28e:	2301      	movlt	r3, #1
1000e290:	e006      	b.n	1000e2a0 <_dtoa_r+0x250>
1000e292:	2301      	movs	r3, #1
1000e294:	9309      	str	r3, [sp, #36]	@ 0x24
1000e296:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1000e298:	2b00      	cmp	r3, #0
1000e29a:	dd28      	ble.n	1000e2ee <_dtoa_r+0x29e>
1000e29c:	469b      	mov	fp, r3
1000e29e:	9303      	str	r3, [sp, #12]
1000e2a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
1000e2a4:	2100      	movs	r1, #0
1000e2a6:	2204      	movs	r2, #4
1000e2a8:	f102 0514 	add.w	r5, r2, #20
1000e2ac:	429d      	cmp	r5, r3
1000e2ae:	d926      	bls.n	1000e2fe <_dtoa_r+0x2ae>
1000e2b0:	6041      	str	r1, [r0, #4]
1000e2b2:	4648      	mov	r0, r9
1000e2b4:	f000 fce6 	bl	1000ec84 <_Balloc>
1000e2b8:	4682      	mov	sl, r0
1000e2ba:	2800      	cmp	r0, #0
1000e2bc:	d142      	bne.n	1000e344 <_dtoa_r+0x2f4>
1000e2be:	4b1e      	ldr	r3, [pc, #120]	@ (1000e338 <_dtoa_r+0x2e8>)
1000e2c0:	4602      	mov	r2, r0
1000e2c2:	f240 11af 	movw	r1, #431	@ 0x1af
1000e2c6:	e6da      	b.n	1000e07e <_dtoa_r+0x2e>
1000e2c8:	2300      	movs	r3, #0
1000e2ca:	e7e3      	b.n	1000e294 <_dtoa_r+0x244>
1000e2cc:	2300      	movs	r3, #0
1000e2ce:	e7d5      	b.n	1000e27c <_dtoa_r+0x22c>
1000e2d0:	2401      	movs	r4, #1
1000e2d2:	2300      	movs	r3, #0
1000e2d4:	9307      	str	r3, [sp, #28]
1000e2d6:	9409      	str	r4, [sp, #36]	@ 0x24
1000e2d8:	f04f 3bff 	mov.w	fp, #4294967295
1000e2dc:	2200      	movs	r2, #0
1000e2de:	f8cd b00c 	str.w	fp, [sp, #12]
1000e2e2:	2312      	movs	r3, #18
1000e2e4:	920c      	str	r2, [sp, #48]	@ 0x30
1000e2e6:	e7db      	b.n	1000e2a0 <_dtoa_r+0x250>
1000e2e8:	2301      	movs	r3, #1
1000e2ea:	9309      	str	r3, [sp, #36]	@ 0x24
1000e2ec:	e7f4      	b.n	1000e2d8 <_dtoa_r+0x288>
1000e2ee:	f04f 0b01 	mov.w	fp, #1
1000e2f2:	f8cd b00c 	str.w	fp, [sp, #12]
1000e2f6:	465b      	mov	r3, fp
1000e2f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
1000e2fc:	e7d0      	b.n	1000e2a0 <_dtoa_r+0x250>
1000e2fe:	3101      	adds	r1, #1
1000e300:	0052      	lsls	r2, r2, #1
1000e302:	e7d1      	b.n	1000e2a8 <_dtoa_r+0x258>
1000e304:	f3af 8000 	nop.w
1000e308:	636f4361 	.word	0x636f4361
1000e30c:	3fd287a7 	.word	0x3fd287a7
1000e310:	8b60c8b3 	.word	0x8b60c8b3
1000e314:	3fc68a28 	.word	0x3fc68a28
1000e318:	509f79fb 	.word	0x509f79fb
1000e31c:	3fd34413 	.word	0x3fd34413
1000e320:	1001229b 	.word	0x1001229b
1000e324:	100122b2 	.word	0x100122b2
1000e328:	7ff00000 	.word	0x7ff00000
1000e32c:	10012266 	.word	0x10012266
1000e330:	3ff80000 	.word	0x3ff80000
1000e334:	10012428 	.word	0x10012428
1000e338:	1001230a 	.word	0x1001230a
1000e33c:	10012297 	.word	0x10012297
1000e340:	10012265 	.word	0x10012265
1000e344:	f8d9 301c 	ldr.w	r3, [r9, #28]
1000e348:	6018      	str	r0, [r3, #0]
1000e34a:	9b03      	ldr	r3, [sp, #12]
1000e34c:	2b0e      	cmp	r3, #14
1000e34e:	f200 80a1 	bhi.w	1000e494 <_dtoa_r+0x444>
1000e352:	2c00      	cmp	r4, #0
1000e354:	f000 809e 	beq.w	1000e494 <_dtoa_r+0x444>
1000e358:	2f00      	cmp	r7, #0
1000e35a:	dd33      	ble.n	1000e3c4 <_dtoa_r+0x374>
1000e35c:	4b9c      	ldr	r3, [pc, #624]	@ (1000e5d0 <_dtoa_r+0x580>)
1000e35e:	f007 020f 	and.w	r2, r7, #15
1000e362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000e366:	ed93 7b00 	vldr	d7, [r3]
1000e36a:	05f8      	lsls	r0, r7, #23
1000e36c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
1000e370:	ea4f 1427 	mov.w	r4, r7, asr #4
1000e374:	d516      	bpl.n	1000e3a4 <_dtoa_r+0x354>
1000e376:	4b97      	ldr	r3, [pc, #604]	@ (1000e5d4 <_dtoa_r+0x584>)
1000e378:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
1000e37c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1000e380:	f7f2 f9ac 	bl	100006dc <__aeabi_ddiv>
1000e384:	e9cd 0104 	strd	r0, r1, [sp, #16]
1000e388:	f004 040f 	and.w	r4, r4, #15
1000e38c:	2603      	movs	r6, #3
1000e38e:	4d91      	ldr	r5, [pc, #580]	@ (1000e5d4 <_dtoa_r+0x584>)
1000e390:	b954      	cbnz	r4, 1000e3a8 <_dtoa_r+0x358>
1000e392:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
1000e396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1000e39a:	f7f2 f99f 	bl	100006dc <__aeabi_ddiv>
1000e39e:	e9cd 0104 	strd	r0, r1, [sp, #16]
1000e3a2:	e028      	b.n	1000e3f6 <_dtoa_r+0x3a6>
1000e3a4:	2602      	movs	r6, #2
1000e3a6:	e7f2      	b.n	1000e38e <_dtoa_r+0x33e>
1000e3a8:	07e1      	lsls	r1, r4, #31
1000e3aa:	d508      	bpl.n	1000e3be <_dtoa_r+0x36e>
1000e3ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
1000e3b0:	e9d5 2300 	ldrd	r2, r3, [r5]
1000e3b4:	f7f2 f868 	bl	10000488 <__aeabi_dmul>
1000e3b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
1000e3bc:	3601      	adds	r6, #1
1000e3be:	1064      	asrs	r4, r4, #1
1000e3c0:	3508      	adds	r5, #8
1000e3c2:	e7e5      	b.n	1000e390 <_dtoa_r+0x340>
1000e3c4:	f000 80af 	beq.w	1000e526 <_dtoa_r+0x4d6>
1000e3c8:	427c      	negs	r4, r7
1000e3ca:	4b81      	ldr	r3, [pc, #516]	@ (1000e5d0 <_dtoa_r+0x580>)
1000e3cc:	4d81      	ldr	r5, [pc, #516]	@ (1000e5d4 <_dtoa_r+0x584>)
1000e3ce:	f004 020f 	and.w	r2, r4, #15
1000e3d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000e3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
1000e3da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
1000e3de:	f7f2 f853 	bl	10000488 <__aeabi_dmul>
1000e3e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
1000e3e6:	1124      	asrs	r4, r4, #4
1000e3e8:	2300      	movs	r3, #0
1000e3ea:	2602      	movs	r6, #2
1000e3ec:	2c00      	cmp	r4, #0
1000e3ee:	f040 808f 	bne.w	1000e510 <_dtoa_r+0x4c0>
1000e3f2:	2b00      	cmp	r3, #0
1000e3f4:	d1d3      	bne.n	1000e39e <_dtoa_r+0x34e>
1000e3f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1000e3f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
1000e3fc:	2b00      	cmp	r3, #0
1000e3fe:	f000 8094 	beq.w	1000e52a <_dtoa_r+0x4da>
1000e402:	4b75      	ldr	r3, [pc, #468]	@ (1000e5d8 <_dtoa_r+0x588>)
1000e404:	2200      	movs	r2, #0
1000e406:	4620      	mov	r0, r4
1000e408:	4629      	mov	r1, r5
1000e40a:	f7f2 faaf 	bl	1000096c <__aeabi_dcmplt>
1000e40e:	2800      	cmp	r0, #0
1000e410:	f000 808b 	beq.w	1000e52a <_dtoa_r+0x4da>
1000e414:	9b03      	ldr	r3, [sp, #12]
1000e416:	2b00      	cmp	r3, #0
1000e418:	f000 8087 	beq.w	1000e52a <_dtoa_r+0x4da>
1000e41c:	f1bb 0f00 	cmp.w	fp, #0
1000e420:	dd34      	ble.n	1000e48c <_dtoa_r+0x43c>
1000e422:	4620      	mov	r0, r4
1000e424:	4b6d      	ldr	r3, [pc, #436]	@ (1000e5dc <_dtoa_r+0x58c>)
1000e426:	2200      	movs	r2, #0
1000e428:	4629      	mov	r1, r5
1000e42a:	f7f2 f82d 	bl	10000488 <__aeabi_dmul>
1000e42e:	e9cd 0104 	strd	r0, r1, [sp, #16]
1000e432:	f107 38ff 	add.w	r8, r7, #4294967295
1000e436:	3601      	adds	r6, #1
1000e438:	465c      	mov	r4, fp
1000e43a:	4630      	mov	r0, r6
1000e43c:	f7f1 ffba 	bl	100003b4 <__aeabi_i2d>
1000e440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1000e444:	f7f2 f820 	bl	10000488 <__aeabi_dmul>
1000e448:	4b65      	ldr	r3, [pc, #404]	@ (1000e5e0 <_dtoa_r+0x590>)
1000e44a:	2200      	movs	r2, #0
1000e44c:	f7f1 fe66 	bl	1000011c <__adddf3>
1000e450:	4605      	mov	r5, r0
1000e452:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
1000e456:	2c00      	cmp	r4, #0
1000e458:	d16a      	bne.n	1000e530 <_dtoa_r+0x4e0>
1000e45a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1000e45e:	4b61      	ldr	r3, [pc, #388]	@ (1000e5e4 <_dtoa_r+0x594>)
1000e460:	2200      	movs	r2, #0
1000e462:	f7f1 fe59 	bl	10000118 <__aeabi_dsub>
1000e466:	4602      	mov	r2, r0
1000e468:	460b      	mov	r3, r1
1000e46a:	e9cd 2304 	strd	r2, r3, [sp, #16]
1000e46e:	462a      	mov	r2, r5
1000e470:	4633      	mov	r3, r6
1000e472:	f7f2 fa99 	bl	100009a8 <__aeabi_dcmpgt>
1000e476:	2800      	cmp	r0, #0
1000e478:	f040 8298 	bne.w	1000e9ac <_dtoa_r+0x95c>
1000e47c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1000e480:	462a      	mov	r2, r5
1000e482:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
1000e486:	f7f2 fa71 	bl	1000096c <__aeabi_dcmplt>
1000e48a:	bb38      	cbnz	r0, 1000e4dc <_dtoa_r+0x48c>
1000e48c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
1000e490:	e9cd 3404 	strd	r3, r4, [sp, #16]
1000e494:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1000e496:	2b00      	cmp	r3, #0
1000e498:	f2c0 8157 	blt.w	1000e74a <_dtoa_r+0x6fa>
1000e49c:	2f0e      	cmp	r7, #14
1000e49e:	f300 8154 	bgt.w	1000e74a <_dtoa_r+0x6fa>
1000e4a2:	4b4b      	ldr	r3, [pc, #300]	@ (1000e5d0 <_dtoa_r+0x580>)
1000e4a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
1000e4a8:	ed93 7b00 	vldr	d7, [r3]
1000e4ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1000e4ae:	2b00      	cmp	r3, #0
1000e4b0:	ed8d 7b00 	vstr	d7, [sp]
1000e4b4:	f280 80e5 	bge.w	1000e682 <_dtoa_r+0x632>
1000e4b8:	9b03      	ldr	r3, [sp, #12]
1000e4ba:	2b00      	cmp	r3, #0
1000e4bc:	f300 80e1 	bgt.w	1000e682 <_dtoa_r+0x632>
1000e4c0:	d10c      	bne.n	1000e4dc <_dtoa_r+0x48c>
1000e4c2:	4b48      	ldr	r3, [pc, #288]	@ (1000e5e4 <_dtoa_r+0x594>)
1000e4c4:	2200      	movs	r2, #0
1000e4c6:	ec51 0b17 	vmov	r0, r1, d7
1000e4ca:	f7f1 ffdd 	bl	10000488 <__aeabi_dmul>
1000e4ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1000e4d2:	f7f2 fa5f 	bl	10000994 <__aeabi_dcmpge>
1000e4d6:	2800      	cmp	r0, #0
1000e4d8:	f000 8266 	beq.w	1000e9a8 <_dtoa_r+0x958>
1000e4dc:	2400      	movs	r4, #0
1000e4de:	4625      	mov	r5, r4
1000e4e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1000e4e2:	4656      	mov	r6, sl
1000e4e4:	ea6f 0803 	mvn.w	r8, r3
1000e4e8:	2700      	movs	r7, #0
1000e4ea:	4621      	mov	r1, r4
1000e4ec:	4648      	mov	r0, r9
1000e4ee:	f000 fc09 	bl	1000ed04 <_Bfree>
1000e4f2:	2d00      	cmp	r5, #0
1000e4f4:	f000 80bd 	beq.w	1000e672 <_dtoa_r+0x622>
1000e4f8:	b12f      	cbz	r7, 1000e506 <_dtoa_r+0x4b6>
1000e4fa:	42af      	cmp	r7, r5
1000e4fc:	d003      	beq.n	1000e506 <_dtoa_r+0x4b6>
1000e4fe:	4639      	mov	r1, r7
1000e500:	4648      	mov	r0, r9
1000e502:	f000 fbff 	bl	1000ed04 <_Bfree>
1000e506:	4629      	mov	r1, r5
1000e508:	4648      	mov	r0, r9
1000e50a:	f000 fbfb 	bl	1000ed04 <_Bfree>
1000e50e:	e0b0      	b.n	1000e672 <_dtoa_r+0x622>
1000e510:	07e2      	lsls	r2, r4, #31
1000e512:	d505      	bpl.n	1000e520 <_dtoa_r+0x4d0>
1000e514:	e9d5 2300 	ldrd	r2, r3, [r5]
1000e518:	f7f1 ffb6 	bl	10000488 <__aeabi_dmul>
1000e51c:	3601      	adds	r6, #1
1000e51e:	2301      	movs	r3, #1
1000e520:	1064      	asrs	r4, r4, #1
1000e522:	3508      	adds	r5, #8
1000e524:	e762      	b.n	1000e3ec <_dtoa_r+0x39c>
1000e526:	2602      	movs	r6, #2
1000e528:	e765      	b.n	1000e3f6 <_dtoa_r+0x3a6>
1000e52a:	9c03      	ldr	r4, [sp, #12]
1000e52c:	46b8      	mov	r8, r7
1000e52e:	e784      	b.n	1000e43a <_dtoa_r+0x3ea>
1000e530:	4b27      	ldr	r3, [pc, #156]	@ (1000e5d0 <_dtoa_r+0x580>)
1000e532:	9909      	ldr	r1, [sp, #36]	@ 0x24
1000e534:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
1000e538:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1000e53c:	4454      	add	r4, sl
1000e53e:	2900      	cmp	r1, #0
1000e540:	d054      	beq.n	1000e5ec <_dtoa_r+0x59c>
1000e542:	4929      	ldr	r1, [pc, #164]	@ (1000e5e8 <_dtoa_r+0x598>)
1000e544:	2000      	movs	r0, #0
1000e546:	f7f2 f8c9 	bl	100006dc <__aeabi_ddiv>
1000e54a:	4633      	mov	r3, r6
1000e54c:	462a      	mov	r2, r5
1000e54e:	f7f1 fde3 	bl	10000118 <__aeabi_dsub>
1000e552:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
1000e556:	4656      	mov	r6, sl
1000e558:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1000e55c:	f7f2 fa44 	bl	100009e8 <__aeabi_d2iz>
1000e560:	4605      	mov	r5, r0
1000e562:	f7f1 ff27 	bl	100003b4 <__aeabi_i2d>
1000e566:	4602      	mov	r2, r0
1000e568:	460b      	mov	r3, r1
1000e56a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1000e56e:	f7f1 fdd3 	bl	10000118 <__aeabi_dsub>
1000e572:	3530      	adds	r5, #48	@ 0x30
1000e574:	4602      	mov	r2, r0
1000e576:	460b      	mov	r3, r1
1000e578:	e9cd 2304 	strd	r2, r3, [sp, #16]
1000e57c:	f806 5b01 	strb.w	r5, [r6], #1
1000e580:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
1000e584:	f7f2 f9f2 	bl	1000096c <__aeabi_dcmplt>
1000e588:	2800      	cmp	r0, #0
1000e58a:	d172      	bne.n	1000e672 <_dtoa_r+0x622>
1000e58c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1000e590:	4911      	ldr	r1, [pc, #68]	@ (1000e5d8 <_dtoa_r+0x588>)
1000e592:	2000      	movs	r0, #0
1000e594:	f7f1 fdc0 	bl	10000118 <__aeabi_dsub>
1000e598:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
1000e59c:	f7f2 f9e6 	bl	1000096c <__aeabi_dcmplt>
1000e5a0:	2800      	cmp	r0, #0
1000e5a2:	f040 80b4 	bne.w	1000e70e <_dtoa_r+0x6be>
1000e5a6:	42a6      	cmp	r6, r4
1000e5a8:	f43f af70 	beq.w	1000e48c <_dtoa_r+0x43c>
1000e5ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
1000e5b0:	4b0a      	ldr	r3, [pc, #40]	@ (1000e5dc <_dtoa_r+0x58c>)
1000e5b2:	2200      	movs	r2, #0
1000e5b4:	f7f1 ff68 	bl	10000488 <__aeabi_dmul>
1000e5b8:	4b08      	ldr	r3, [pc, #32]	@ (1000e5dc <_dtoa_r+0x58c>)
1000e5ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
1000e5be:	2200      	movs	r2, #0
1000e5c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1000e5c4:	f7f1 ff60 	bl	10000488 <__aeabi_dmul>
1000e5c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
1000e5cc:	e7c4      	b.n	1000e558 <_dtoa_r+0x508>
1000e5ce:	bf00      	nop
1000e5d0:	10012428 	.word	0x10012428
1000e5d4:	10012400 	.word	0x10012400
1000e5d8:	3ff00000 	.word	0x3ff00000
1000e5dc:	40240000 	.word	0x40240000
1000e5e0:	401c0000 	.word	0x401c0000
1000e5e4:	40140000 	.word	0x40140000
1000e5e8:	3fe00000 	.word	0x3fe00000
1000e5ec:	4631      	mov	r1, r6
1000e5ee:	4628      	mov	r0, r5
1000e5f0:	f7f1 ff4a 	bl	10000488 <__aeabi_dmul>
1000e5f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
1000e5f8:	9413      	str	r4, [sp, #76]	@ 0x4c
1000e5fa:	4656      	mov	r6, sl
1000e5fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1000e600:	f7f2 f9f2 	bl	100009e8 <__aeabi_d2iz>
1000e604:	4605      	mov	r5, r0
1000e606:	f7f1 fed5 	bl	100003b4 <__aeabi_i2d>
1000e60a:	4602      	mov	r2, r0
1000e60c:	460b      	mov	r3, r1
1000e60e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1000e612:	f7f1 fd81 	bl	10000118 <__aeabi_dsub>
1000e616:	3530      	adds	r5, #48	@ 0x30
1000e618:	f806 5b01 	strb.w	r5, [r6], #1
1000e61c:	4602      	mov	r2, r0
1000e61e:	460b      	mov	r3, r1
1000e620:	42a6      	cmp	r6, r4
1000e622:	e9cd 2304 	strd	r2, r3, [sp, #16]
1000e626:	f04f 0200 	mov.w	r2, #0
1000e62a:	d124      	bne.n	1000e676 <_dtoa_r+0x626>
1000e62c:	4baf      	ldr	r3, [pc, #700]	@ (1000e8ec <_dtoa_r+0x89c>)
1000e62e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
1000e632:	f7f1 fd73 	bl	1000011c <__adddf3>
1000e636:	4602      	mov	r2, r0
1000e638:	460b      	mov	r3, r1
1000e63a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1000e63e:	f7f2 f9b3 	bl	100009a8 <__aeabi_dcmpgt>
1000e642:	2800      	cmp	r0, #0
1000e644:	d163      	bne.n	1000e70e <_dtoa_r+0x6be>
1000e646:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
1000e64a:	49a8      	ldr	r1, [pc, #672]	@ (1000e8ec <_dtoa_r+0x89c>)
1000e64c:	2000      	movs	r0, #0
1000e64e:	f7f1 fd63 	bl	10000118 <__aeabi_dsub>
1000e652:	4602      	mov	r2, r0
1000e654:	460b      	mov	r3, r1
1000e656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1000e65a:	f7f2 f987 	bl	1000096c <__aeabi_dcmplt>
1000e65e:	2800      	cmp	r0, #0
1000e660:	f43f af14 	beq.w	1000e48c <_dtoa_r+0x43c>
1000e664:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
1000e666:	1e73      	subs	r3, r6, #1
1000e668:	9313      	str	r3, [sp, #76]	@ 0x4c
1000e66a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
1000e66e:	2b30      	cmp	r3, #48	@ 0x30
1000e670:	d0f8      	beq.n	1000e664 <_dtoa_r+0x614>
1000e672:	4647      	mov	r7, r8
1000e674:	e03b      	b.n	1000e6ee <_dtoa_r+0x69e>
1000e676:	4b9e      	ldr	r3, [pc, #632]	@ (1000e8f0 <_dtoa_r+0x8a0>)
1000e678:	f7f1 ff06 	bl	10000488 <__aeabi_dmul>
1000e67c:	e9cd 0104 	strd	r0, r1, [sp, #16]
1000e680:	e7bc      	b.n	1000e5fc <_dtoa_r+0x5ac>
1000e682:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
1000e686:	4656      	mov	r6, sl
1000e688:	e9dd 2300 	ldrd	r2, r3, [sp]
1000e68c:	4620      	mov	r0, r4
1000e68e:	4629      	mov	r1, r5
1000e690:	f7f2 f824 	bl	100006dc <__aeabi_ddiv>
1000e694:	f7f2 f9a8 	bl	100009e8 <__aeabi_d2iz>
1000e698:	4680      	mov	r8, r0
1000e69a:	f7f1 fe8b 	bl	100003b4 <__aeabi_i2d>
1000e69e:	e9dd 2300 	ldrd	r2, r3, [sp]
1000e6a2:	f7f1 fef1 	bl	10000488 <__aeabi_dmul>
1000e6a6:	4602      	mov	r2, r0
1000e6a8:	460b      	mov	r3, r1
1000e6aa:	4620      	mov	r0, r4
1000e6ac:	4629      	mov	r1, r5
1000e6ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
1000e6b2:	f7f1 fd31 	bl	10000118 <__aeabi_dsub>
1000e6b6:	f806 4b01 	strb.w	r4, [r6], #1
1000e6ba:	9d03      	ldr	r5, [sp, #12]
1000e6bc:	eba6 040a 	sub.w	r4, r6, sl
1000e6c0:	42a5      	cmp	r5, r4
1000e6c2:	4602      	mov	r2, r0
1000e6c4:	460b      	mov	r3, r1
1000e6c6:	d133      	bne.n	1000e730 <_dtoa_r+0x6e0>
1000e6c8:	f7f1 fd28 	bl	1000011c <__adddf3>
1000e6cc:	e9dd 2300 	ldrd	r2, r3, [sp]
1000e6d0:	4604      	mov	r4, r0
1000e6d2:	460d      	mov	r5, r1
1000e6d4:	f7f2 f968 	bl	100009a8 <__aeabi_dcmpgt>
1000e6d8:	b9c0      	cbnz	r0, 1000e70c <_dtoa_r+0x6bc>
1000e6da:	e9dd 2300 	ldrd	r2, r3, [sp]
1000e6de:	4620      	mov	r0, r4
1000e6e0:	4629      	mov	r1, r5
1000e6e2:	f7f2 f939 	bl	10000958 <__aeabi_dcmpeq>
1000e6e6:	b110      	cbz	r0, 1000e6ee <_dtoa_r+0x69e>
1000e6e8:	f018 0f01 	tst.w	r8, #1
1000e6ec:	d10e      	bne.n	1000e70c <_dtoa_r+0x6bc>
1000e6ee:	9902      	ldr	r1, [sp, #8]
1000e6f0:	4648      	mov	r0, r9
1000e6f2:	f000 fb07 	bl	1000ed04 <_Bfree>
1000e6f6:	2300      	movs	r3, #0
1000e6f8:	7033      	strb	r3, [r6, #0]
1000e6fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1000e6fc:	3701      	adds	r7, #1
1000e6fe:	601f      	str	r7, [r3, #0]
1000e700:	9b21      	ldr	r3, [sp, #132]	@ 0x84
1000e702:	2b00      	cmp	r3, #0
1000e704:	f000 824b 	beq.w	1000eb9e <_dtoa_r+0xb4e>
1000e708:	601e      	str	r6, [r3, #0]
1000e70a:	e248      	b.n	1000eb9e <_dtoa_r+0xb4e>
1000e70c:	46b8      	mov	r8, r7
1000e70e:	4633      	mov	r3, r6
1000e710:	461e      	mov	r6, r3
1000e712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1000e716:	2a39      	cmp	r2, #57	@ 0x39
1000e718:	d106      	bne.n	1000e728 <_dtoa_r+0x6d8>
1000e71a:	459a      	cmp	sl, r3
1000e71c:	d1f8      	bne.n	1000e710 <_dtoa_r+0x6c0>
1000e71e:	2230      	movs	r2, #48	@ 0x30
1000e720:	f108 0801 	add.w	r8, r8, #1
1000e724:	f88a 2000 	strb.w	r2, [sl]
1000e728:	781a      	ldrb	r2, [r3, #0]
1000e72a:	3201      	adds	r2, #1
1000e72c:	701a      	strb	r2, [r3, #0]
1000e72e:	e7a0      	b.n	1000e672 <_dtoa_r+0x622>
1000e730:	4b6f      	ldr	r3, [pc, #444]	@ (1000e8f0 <_dtoa_r+0x8a0>)
1000e732:	2200      	movs	r2, #0
1000e734:	f7f1 fea8 	bl	10000488 <__aeabi_dmul>
1000e738:	2200      	movs	r2, #0
1000e73a:	2300      	movs	r3, #0
1000e73c:	4604      	mov	r4, r0
1000e73e:	460d      	mov	r5, r1
1000e740:	f7f2 f90a 	bl	10000958 <__aeabi_dcmpeq>
1000e744:	2800      	cmp	r0, #0
1000e746:	d09f      	beq.n	1000e688 <_dtoa_r+0x638>
1000e748:	e7d1      	b.n	1000e6ee <_dtoa_r+0x69e>
1000e74a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000e74c:	2a00      	cmp	r2, #0
1000e74e:	f000 80ea 	beq.w	1000e926 <_dtoa_r+0x8d6>
1000e752:	9a07      	ldr	r2, [sp, #28]
1000e754:	2a01      	cmp	r2, #1
1000e756:	f300 80cd 	bgt.w	1000e8f4 <_dtoa_r+0x8a4>
1000e75a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
1000e75c:	2a00      	cmp	r2, #0
1000e75e:	f000 80c1 	beq.w	1000e8e4 <_dtoa_r+0x894>
1000e762:	f203 4333 	addw	r3, r3, #1075	@ 0x433
1000e766:	9c08      	ldr	r4, [sp, #32]
1000e768:	9e00      	ldr	r6, [sp, #0]
1000e76a:	9a00      	ldr	r2, [sp, #0]
1000e76c:	441a      	add	r2, r3
1000e76e:	9200      	str	r2, [sp, #0]
1000e770:	9a06      	ldr	r2, [sp, #24]
1000e772:	2101      	movs	r1, #1
1000e774:	441a      	add	r2, r3
1000e776:	4648      	mov	r0, r9
1000e778:	9206      	str	r2, [sp, #24]
1000e77a:	f000 fbc1 	bl	1000ef00 <__i2b>
1000e77e:	4605      	mov	r5, r0
1000e780:	b166      	cbz	r6, 1000e79c <_dtoa_r+0x74c>
1000e782:	9b06      	ldr	r3, [sp, #24]
1000e784:	2b00      	cmp	r3, #0
1000e786:	dd09      	ble.n	1000e79c <_dtoa_r+0x74c>
1000e788:	42b3      	cmp	r3, r6
1000e78a:	9a00      	ldr	r2, [sp, #0]
1000e78c:	bfa8      	it	ge
1000e78e:	4633      	movge	r3, r6
1000e790:	1ad2      	subs	r2, r2, r3
1000e792:	9200      	str	r2, [sp, #0]
1000e794:	9a06      	ldr	r2, [sp, #24]
1000e796:	1af6      	subs	r6, r6, r3
1000e798:	1ad3      	subs	r3, r2, r3
1000e79a:	9306      	str	r3, [sp, #24]
1000e79c:	9b08      	ldr	r3, [sp, #32]
1000e79e:	b30b      	cbz	r3, 1000e7e4 <_dtoa_r+0x794>
1000e7a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000e7a2:	2b00      	cmp	r3, #0
1000e7a4:	f000 80c6 	beq.w	1000e934 <_dtoa_r+0x8e4>
1000e7a8:	2c00      	cmp	r4, #0
1000e7aa:	f000 80c0 	beq.w	1000e92e <_dtoa_r+0x8de>
1000e7ae:	4629      	mov	r1, r5
1000e7b0:	4622      	mov	r2, r4
1000e7b2:	4648      	mov	r0, r9
1000e7b4:	f000 fc5c 	bl	1000f070 <__pow5mult>
1000e7b8:	9a02      	ldr	r2, [sp, #8]
1000e7ba:	4601      	mov	r1, r0
1000e7bc:	4605      	mov	r5, r0
1000e7be:	4648      	mov	r0, r9
1000e7c0:	f000 fbb4 	bl	1000ef2c <__multiply>
1000e7c4:	9902      	ldr	r1, [sp, #8]
1000e7c6:	4680      	mov	r8, r0
1000e7c8:	4648      	mov	r0, r9
1000e7ca:	f000 fa9b 	bl	1000ed04 <_Bfree>
1000e7ce:	9b08      	ldr	r3, [sp, #32]
1000e7d0:	1b1b      	subs	r3, r3, r4
1000e7d2:	9308      	str	r3, [sp, #32]
1000e7d4:	f000 80b1 	beq.w	1000e93a <_dtoa_r+0x8ea>
1000e7d8:	9a08      	ldr	r2, [sp, #32]
1000e7da:	4641      	mov	r1, r8
1000e7dc:	4648      	mov	r0, r9
1000e7de:	f000 fc47 	bl	1000f070 <__pow5mult>
1000e7e2:	9002      	str	r0, [sp, #8]
1000e7e4:	2101      	movs	r1, #1
1000e7e6:	4648      	mov	r0, r9
1000e7e8:	f000 fb8a 	bl	1000ef00 <__i2b>
1000e7ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1000e7ee:	4604      	mov	r4, r0
1000e7f0:	2b00      	cmp	r3, #0
1000e7f2:	f000 81d8 	beq.w	1000eba6 <_dtoa_r+0xb56>
1000e7f6:	461a      	mov	r2, r3
1000e7f8:	4601      	mov	r1, r0
1000e7fa:	4648      	mov	r0, r9
1000e7fc:	f000 fc38 	bl	1000f070 <__pow5mult>
1000e800:	9b07      	ldr	r3, [sp, #28]
1000e802:	2b01      	cmp	r3, #1
1000e804:	4604      	mov	r4, r0
1000e806:	f300 809f 	bgt.w	1000e948 <_dtoa_r+0x8f8>
1000e80a:	9b04      	ldr	r3, [sp, #16]
1000e80c:	2b00      	cmp	r3, #0
1000e80e:	f040 8097 	bne.w	1000e940 <_dtoa_r+0x8f0>
1000e812:	9b05      	ldr	r3, [sp, #20]
1000e814:	f3c3 0313 	ubfx	r3, r3, #0, #20
1000e818:	2b00      	cmp	r3, #0
1000e81a:	f040 8093 	bne.w	1000e944 <_dtoa_r+0x8f4>
1000e81e:	9b05      	ldr	r3, [sp, #20]
1000e820:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
1000e824:	0d1b      	lsrs	r3, r3, #20
1000e826:	051b      	lsls	r3, r3, #20
1000e828:	b133      	cbz	r3, 1000e838 <_dtoa_r+0x7e8>
1000e82a:	9b00      	ldr	r3, [sp, #0]
1000e82c:	3301      	adds	r3, #1
1000e82e:	9300      	str	r3, [sp, #0]
1000e830:	9b06      	ldr	r3, [sp, #24]
1000e832:	3301      	adds	r3, #1
1000e834:	9306      	str	r3, [sp, #24]
1000e836:	2301      	movs	r3, #1
1000e838:	9308      	str	r3, [sp, #32]
1000e83a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1000e83c:	2b00      	cmp	r3, #0
1000e83e:	f000 81b8 	beq.w	1000ebb2 <_dtoa_r+0xb62>
1000e842:	6923      	ldr	r3, [r4, #16]
1000e844:	eb04 0383 	add.w	r3, r4, r3, lsl #2
1000e848:	6918      	ldr	r0, [r3, #16]
1000e84a:	f000 fb0d 	bl	1000ee68 <__hi0bits>
1000e84e:	f1c0 0020 	rsb	r0, r0, #32
1000e852:	9b06      	ldr	r3, [sp, #24]
1000e854:	4418      	add	r0, r3
1000e856:	f010 001f 	ands.w	r0, r0, #31
1000e85a:	f000 8082 	beq.w	1000e962 <_dtoa_r+0x912>
1000e85e:	f1c0 0320 	rsb	r3, r0, #32
1000e862:	2b04      	cmp	r3, #4
1000e864:	dd73      	ble.n	1000e94e <_dtoa_r+0x8fe>
1000e866:	9b00      	ldr	r3, [sp, #0]
1000e868:	f1c0 001c 	rsb	r0, r0, #28
1000e86c:	4403      	add	r3, r0
1000e86e:	9300      	str	r3, [sp, #0]
1000e870:	9b06      	ldr	r3, [sp, #24]
1000e872:	4403      	add	r3, r0
1000e874:	4406      	add	r6, r0
1000e876:	9306      	str	r3, [sp, #24]
1000e878:	9b00      	ldr	r3, [sp, #0]
1000e87a:	2b00      	cmp	r3, #0
1000e87c:	dd05      	ble.n	1000e88a <_dtoa_r+0x83a>
1000e87e:	9902      	ldr	r1, [sp, #8]
1000e880:	461a      	mov	r2, r3
1000e882:	4648      	mov	r0, r9
1000e884:	f000 fc4e 	bl	1000f124 <__lshift>
1000e888:	9002      	str	r0, [sp, #8]
1000e88a:	9b06      	ldr	r3, [sp, #24]
1000e88c:	2b00      	cmp	r3, #0
1000e88e:	dd05      	ble.n	1000e89c <_dtoa_r+0x84c>
1000e890:	4621      	mov	r1, r4
1000e892:	461a      	mov	r2, r3
1000e894:	4648      	mov	r0, r9
1000e896:	f000 fc45 	bl	1000f124 <__lshift>
1000e89a:	4604      	mov	r4, r0
1000e89c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1000e89e:	2b00      	cmp	r3, #0
1000e8a0:	d061      	beq.n	1000e966 <_dtoa_r+0x916>
1000e8a2:	9802      	ldr	r0, [sp, #8]
1000e8a4:	4621      	mov	r1, r4
1000e8a6:	f000 fca9 	bl	1000f1fc <__mcmp>
1000e8aa:	2800      	cmp	r0, #0
1000e8ac:	da5b      	bge.n	1000e966 <_dtoa_r+0x916>
1000e8ae:	2300      	movs	r3, #0
1000e8b0:	9902      	ldr	r1, [sp, #8]
1000e8b2:	220a      	movs	r2, #10
1000e8b4:	4648      	mov	r0, r9
1000e8b6:	f000 fa47 	bl	1000ed48 <__multadd>
1000e8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000e8bc:	9002      	str	r0, [sp, #8]
1000e8be:	f107 38ff 	add.w	r8, r7, #4294967295
1000e8c2:	2b00      	cmp	r3, #0
1000e8c4:	f000 8177 	beq.w	1000ebb6 <_dtoa_r+0xb66>
1000e8c8:	4629      	mov	r1, r5
1000e8ca:	2300      	movs	r3, #0
1000e8cc:	220a      	movs	r2, #10
1000e8ce:	4648      	mov	r0, r9
1000e8d0:	f000 fa3a 	bl	1000ed48 <__multadd>
1000e8d4:	f1bb 0f00 	cmp.w	fp, #0
1000e8d8:	4605      	mov	r5, r0
1000e8da:	dc6f      	bgt.n	1000e9bc <_dtoa_r+0x96c>
1000e8dc:	9b07      	ldr	r3, [sp, #28]
1000e8de:	2b02      	cmp	r3, #2
1000e8e0:	dc49      	bgt.n	1000e976 <_dtoa_r+0x926>
1000e8e2:	e06b      	b.n	1000e9bc <_dtoa_r+0x96c>
1000e8e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
1000e8e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
1000e8ea:	e73c      	b.n	1000e766 <_dtoa_r+0x716>
1000e8ec:	3fe00000 	.word	0x3fe00000
1000e8f0:	40240000 	.word	0x40240000
1000e8f4:	9b03      	ldr	r3, [sp, #12]
1000e8f6:	1e5c      	subs	r4, r3, #1
1000e8f8:	9b08      	ldr	r3, [sp, #32]
1000e8fa:	42a3      	cmp	r3, r4
1000e8fc:	db09      	blt.n	1000e912 <_dtoa_r+0x8c2>
1000e8fe:	1b1c      	subs	r4, r3, r4
1000e900:	9b03      	ldr	r3, [sp, #12]
1000e902:	2b00      	cmp	r3, #0
1000e904:	f6bf af30 	bge.w	1000e768 <_dtoa_r+0x718>
1000e908:	9b00      	ldr	r3, [sp, #0]
1000e90a:	9a03      	ldr	r2, [sp, #12]
1000e90c:	1a9e      	subs	r6, r3, r2
1000e90e:	2300      	movs	r3, #0
1000e910:	e72b      	b.n	1000e76a <_dtoa_r+0x71a>
1000e912:	9b08      	ldr	r3, [sp, #32]
1000e914:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1000e916:	9408      	str	r4, [sp, #32]
1000e918:	1ae3      	subs	r3, r4, r3
1000e91a:	441a      	add	r2, r3
1000e91c:	9e00      	ldr	r6, [sp, #0]
1000e91e:	9b03      	ldr	r3, [sp, #12]
1000e920:	920d      	str	r2, [sp, #52]	@ 0x34
1000e922:	2400      	movs	r4, #0
1000e924:	e721      	b.n	1000e76a <_dtoa_r+0x71a>
1000e926:	9c08      	ldr	r4, [sp, #32]
1000e928:	9e00      	ldr	r6, [sp, #0]
1000e92a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
1000e92c:	e728      	b.n	1000e780 <_dtoa_r+0x730>
1000e92e:	f8dd 8008 	ldr.w	r8, [sp, #8]
1000e932:	e751      	b.n	1000e7d8 <_dtoa_r+0x788>
1000e934:	9a08      	ldr	r2, [sp, #32]
1000e936:	9902      	ldr	r1, [sp, #8]
1000e938:	e750      	b.n	1000e7dc <_dtoa_r+0x78c>
1000e93a:	f8cd 8008 	str.w	r8, [sp, #8]
1000e93e:	e751      	b.n	1000e7e4 <_dtoa_r+0x794>
1000e940:	2300      	movs	r3, #0
1000e942:	e779      	b.n	1000e838 <_dtoa_r+0x7e8>
1000e944:	9b04      	ldr	r3, [sp, #16]
1000e946:	e777      	b.n	1000e838 <_dtoa_r+0x7e8>
1000e948:	2300      	movs	r3, #0
1000e94a:	9308      	str	r3, [sp, #32]
1000e94c:	e779      	b.n	1000e842 <_dtoa_r+0x7f2>
1000e94e:	d093      	beq.n	1000e878 <_dtoa_r+0x828>
1000e950:	9a00      	ldr	r2, [sp, #0]
1000e952:	331c      	adds	r3, #28
1000e954:	441a      	add	r2, r3
1000e956:	9200      	str	r2, [sp, #0]
1000e958:	9a06      	ldr	r2, [sp, #24]
1000e95a:	441a      	add	r2, r3
1000e95c:	441e      	add	r6, r3
1000e95e:	9206      	str	r2, [sp, #24]
1000e960:	e78a      	b.n	1000e878 <_dtoa_r+0x828>
1000e962:	4603      	mov	r3, r0
1000e964:	e7f4      	b.n	1000e950 <_dtoa_r+0x900>
1000e966:	9b03      	ldr	r3, [sp, #12]
1000e968:	2b00      	cmp	r3, #0
1000e96a:	46b8      	mov	r8, r7
1000e96c:	dc20      	bgt.n	1000e9b0 <_dtoa_r+0x960>
1000e96e:	469b      	mov	fp, r3
1000e970:	9b07      	ldr	r3, [sp, #28]
1000e972:	2b02      	cmp	r3, #2
1000e974:	dd1e      	ble.n	1000e9b4 <_dtoa_r+0x964>
1000e976:	f1bb 0f00 	cmp.w	fp, #0
1000e97a:	f47f adb1 	bne.w	1000e4e0 <_dtoa_r+0x490>
1000e97e:	4621      	mov	r1, r4
1000e980:	465b      	mov	r3, fp
1000e982:	2205      	movs	r2, #5
1000e984:	4648      	mov	r0, r9
1000e986:	f000 f9df 	bl	1000ed48 <__multadd>
1000e98a:	4601      	mov	r1, r0
1000e98c:	4604      	mov	r4, r0
1000e98e:	9802      	ldr	r0, [sp, #8]
1000e990:	f000 fc34 	bl	1000f1fc <__mcmp>
1000e994:	2800      	cmp	r0, #0
1000e996:	f77f ada3 	ble.w	1000e4e0 <_dtoa_r+0x490>
1000e99a:	4656      	mov	r6, sl
1000e99c:	2331      	movs	r3, #49	@ 0x31
1000e99e:	f806 3b01 	strb.w	r3, [r6], #1
1000e9a2:	f108 0801 	add.w	r8, r8, #1
1000e9a6:	e59f      	b.n	1000e4e8 <_dtoa_r+0x498>
1000e9a8:	9c03      	ldr	r4, [sp, #12]
1000e9aa:	46b8      	mov	r8, r7
1000e9ac:	4625      	mov	r5, r4
1000e9ae:	e7f4      	b.n	1000e99a <_dtoa_r+0x94a>
1000e9b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
1000e9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000e9b6:	2b00      	cmp	r3, #0
1000e9b8:	f000 8101 	beq.w	1000ebbe <_dtoa_r+0xb6e>
1000e9bc:	2e00      	cmp	r6, #0
1000e9be:	dd05      	ble.n	1000e9cc <_dtoa_r+0x97c>
1000e9c0:	4629      	mov	r1, r5
1000e9c2:	4632      	mov	r2, r6
1000e9c4:	4648      	mov	r0, r9
1000e9c6:	f000 fbad 	bl	1000f124 <__lshift>
1000e9ca:	4605      	mov	r5, r0
1000e9cc:	9b08      	ldr	r3, [sp, #32]
1000e9ce:	2b00      	cmp	r3, #0
1000e9d0:	d05c      	beq.n	1000ea8c <_dtoa_r+0xa3c>
1000e9d2:	6869      	ldr	r1, [r5, #4]
1000e9d4:	4648      	mov	r0, r9
1000e9d6:	f000 f955 	bl	1000ec84 <_Balloc>
1000e9da:	4606      	mov	r6, r0
1000e9dc:	b928      	cbnz	r0, 1000e9ea <_dtoa_r+0x99a>
1000e9de:	4b82      	ldr	r3, [pc, #520]	@ (1000ebe8 <_dtoa_r+0xb98>)
1000e9e0:	4602      	mov	r2, r0
1000e9e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
1000e9e6:	f7ff bb4a 	b.w	1000e07e <_dtoa_r+0x2e>
1000e9ea:	692a      	ldr	r2, [r5, #16]
1000e9ec:	3202      	adds	r2, #2
1000e9ee:	0092      	lsls	r2, r2, #2
1000e9f0:	f105 010c 	add.w	r1, r5, #12
1000e9f4:	300c      	adds	r0, #12
1000e9f6:	f7ff fa86 	bl	1000df06 <memcpy>
1000e9fa:	2201      	movs	r2, #1
1000e9fc:	4631      	mov	r1, r6
1000e9fe:	4648      	mov	r0, r9
1000ea00:	f000 fb90 	bl	1000f124 <__lshift>
1000ea04:	f10a 0301 	add.w	r3, sl, #1
1000ea08:	9300      	str	r3, [sp, #0]
1000ea0a:	eb0a 030b 	add.w	r3, sl, fp
1000ea0e:	9308      	str	r3, [sp, #32]
1000ea10:	9b04      	ldr	r3, [sp, #16]
1000ea12:	f003 0301 	and.w	r3, r3, #1
1000ea16:	462f      	mov	r7, r5
1000ea18:	9306      	str	r3, [sp, #24]
1000ea1a:	4605      	mov	r5, r0
1000ea1c:	9b00      	ldr	r3, [sp, #0]
1000ea1e:	9802      	ldr	r0, [sp, #8]
1000ea20:	4621      	mov	r1, r4
1000ea22:	f103 3bff 	add.w	fp, r3, #4294967295
1000ea26:	f7ff fa8a 	bl	1000df3e <quorem>
1000ea2a:	4603      	mov	r3, r0
1000ea2c:	3330      	adds	r3, #48	@ 0x30
1000ea2e:	9003      	str	r0, [sp, #12]
1000ea30:	4639      	mov	r1, r7
1000ea32:	9802      	ldr	r0, [sp, #8]
1000ea34:	9309      	str	r3, [sp, #36]	@ 0x24
1000ea36:	f000 fbe1 	bl	1000f1fc <__mcmp>
1000ea3a:	462a      	mov	r2, r5
1000ea3c:	9004      	str	r0, [sp, #16]
1000ea3e:	4621      	mov	r1, r4
1000ea40:	4648      	mov	r0, r9
1000ea42:	f000 fbf7 	bl	1000f234 <__mdiff>
1000ea46:	68c2      	ldr	r2, [r0, #12]
1000ea48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000ea4a:	4606      	mov	r6, r0
1000ea4c:	bb02      	cbnz	r2, 1000ea90 <_dtoa_r+0xa40>
1000ea4e:	4601      	mov	r1, r0
1000ea50:	9802      	ldr	r0, [sp, #8]
1000ea52:	f000 fbd3 	bl	1000f1fc <__mcmp>
1000ea56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000ea58:	4602      	mov	r2, r0
1000ea5a:	4631      	mov	r1, r6
1000ea5c:	4648      	mov	r0, r9
1000ea5e:	920c      	str	r2, [sp, #48]	@ 0x30
1000ea60:	9309      	str	r3, [sp, #36]	@ 0x24
1000ea62:	f000 f94f 	bl	1000ed04 <_Bfree>
1000ea66:	9b07      	ldr	r3, [sp, #28]
1000ea68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1000ea6a:	9e00      	ldr	r6, [sp, #0]
1000ea6c:	ea42 0103 	orr.w	r1, r2, r3
1000ea70:	9b06      	ldr	r3, [sp, #24]
1000ea72:	4319      	orrs	r1, r3
1000ea74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000ea76:	d10d      	bne.n	1000ea94 <_dtoa_r+0xa44>
1000ea78:	2b39      	cmp	r3, #57	@ 0x39
1000ea7a:	d027      	beq.n	1000eacc <_dtoa_r+0xa7c>
1000ea7c:	9a04      	ldr	r2, [sp, #16]
1000ea7e:	2a00      	cmp	r2, #0
1000ea80:	dd01      	ble.n	1000ea86 <_dtoa_r+0xa36>
1000ea82:	9b03      	ldr	r3, [sp, #12]
1000ea84:	3331      	adds	r3, #49	@ 0x31
1000ea86:	f88b 3000 	strb.w	r3, [fp]
1000ea8a:	e52e      	b.n	1000e4ea <_dtoa_r+0x49a>
1000ea8c:	4628      	mov	r0, r5
1000ea8e:	e7b9      	b.n	1000ea04 <_dtoa_r+0x9b4>
1000ea90:	2201      	movs	r2, #1
1000ea92:	e7e2      	b.n	1000ea5a <_dtoa_r+0xa0a>
1000ea94:	9904      	ldr	r1, [sp, #16]
1000ea96:	2900      	cmp	r1, #0
1000ea98:	db04      	blt.n	1000eaa4 <_dtoa_r+0xa54>
1000ea9a:	9807      	ldr	r0, [sp, #28]
1000ea9c:	4301      	orrs	r1, r0
1000ea9e:	9806      	ldr	r0, [sp, #24]
1000eaa0:	4301      	orrs	r1, r0
1000eaa2:	d120      	bne.n	1000eae6 <_dtoa_r+0xa96>
1000eaa4:	2a00      	cmp	r2, #0
1000eaa6:	ddee      	ble.n	1000ea86 <_dtoa_r+0xa36>
1000eaa8:	9902      	ldr	r1, [sp, #8]
1000eaaa:	9300      	str	r3, [sp, #0]
1000eaac:	2201      	movs	r2, #1
1000eaae:	4648      	mov	r0, r9
1000eab0:	f000 fb38 	bl	1000f124 <__lshift>
1000eab4:	4621      	mov	r1, r4
1000eab6:	9002      	str	r0, [sp, #8]
1000eab8:	f000 fba0 	bl	1000f1fc <__mcmp>
1000eabc:	2800      	cmp	r0, #0
1000eabe:	9b00      	ldr	r3, [sp, #0]
1000eac0:	dc02      	bgt.n	1000eac8 <_dtoa_r+0xa78>
1000eac2:	d1e0      	bne.n	1000ea86 <_dtoa_r+0xa36>
1000eac4:	07da      	lsls	r2, r3, #31
1000eac6:	d5de      	bpl.n	1000ea86 <_dtoa_r+0xa36>
1000eac8:	2b39      	cmp	r3, #57	@ 0x39
1000eaca:	d1da      	bne.n	1000ea82 <_dtoa_r+0xa32>
1000eacc:	2339      	movs	r3, #57	@ 0x39
1000eace:	f88b 3000 	strb.w	r3, [fp]
1000ead2:	4633      	mov	r3, r6
1000ead4:	461e      	mov	r6, r3
1000ead6:	3b01      	subs	r3, #1
1000ead8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
1000eadc:	2a39      	cmp	r2, #57	@ 0x39
1000eade:	d04e      	beq.n	1000eb7e <_dtoa_r+0xb2e>
1000eae0:	3201      	adds	r2, #1
1000eae2:	701a      	strb	r2, [r3, #0]
1000eae4:	e501      	b.n	1000e4ea <_dtoa_r+0x49a>
1000eae6:	2a00      	cmp	r2, #0
1000eae8:	dd03      	ble.n	1000eaf2 <_dtoa_r+0xaa2>
1000eaea:	2b39      	cmp	r3, #57	@ 0x39
1000eaec:	d0ee      	beq.n	1000eacc <_dtoa_r+0xa7c>
1000eaee:	3301      	adds	r3, #1
1000eaf0:	e7c9      	b.n	1000ea86 <_dtoa_r+0xa36>
1000eaf2:	9a00      	ldr	r2, [sp, #0]
1000eaf4:	9908      	ldr	r1, [sp, #32]
1000eaf6:	f802 3c01 	strb.w	r3, [r2, #-1]
1000eafa:	428a      	cmp	r2, r1
1000eafc:	d028      	beq.n	1000eb50 <_dtoa_r+0xb00>
1000eafe:	9902      	ldr	r1, [sp, #8]
1000eb00:	2300      	movs	r3, #0
1000eb02:	220a      	movs	r2, #10
1000eb04:	4648      	mov	r0, r9
1000eb06:	f000 f91f 	bl	1000ed48 <__multadd>
1000eb0a:	42af      	cmp	r7, r5
1000eb0c:	9002      	str	r0, [sp, #8]
1000eb0e:	f04f 0300 	mov.w	r3, #0
1000eb12:	f04f 020a 	mov.w	r2, #10
1000eb16:	4639      	mov	r1, r7
1000eb18:	4648      	mov	r0, r9
1000eb1a:	d107      	bne.n	1000eb2c <_dtoa_r+0xadc>
1000eb1c:	f000 f914 	bl	1000ed48 <__multadd>
1000eb20:	4607      	mov	r7, r0
1000eb22:	4605      	mov	r5, r0
1000eb24:	9b00      	ldr	r3, [sp, #0]
1000eb26:	3301      	adds	r3, #1
1000eb28:	9300      	str	r3, [sp, #0]
1000eb2a:	e777      	b.n	1000ea1c <_dtoa_r+0x9cc>
1000eb2c:	f000 f90c 	bl	1000ed48 <__multadd>
1000eb30:	4629      	mov	r1, r5
1000eb32:	4607      	mov	r7, r0
1000eb34:	2300      	movs	r3, #0
1000eb36:	220a      	movs	r2, #10
1000eb38:	4648      	mov	r0, r9
1000eb3a:	f000 f905 	bl	1000ed48 <__multadd>
1000eb3e:	4605      	mov	r5, r0
1000eb40:	e7f0      	b.n	1000eb24 <_dtoa_r+0xad4>
1000eb42:	f1bb 0f00 	cmp.w	fp, #0
1000eb46:	bfcc      	ite	gt
1000eb48:	465e      	movgt	r6, fp
1000eb4a:	2601      	movle	r6, #1
1000eb4c:	4456      	add	r6, sl
1000eb4e:	2700      	movs	r7, #0
1000eb50:	9902      	ldr	r1, [sp, #8]
1000eb52:	9300      	str	r3, [sp, #0]
1000eb54:	2201      	movs	r2, #1
1000eb56:	4648      	mov	r0, r9
1000eb58:	f000 fae4 	bl	1000f124 <__lshift>
1000eb5c:	4621      	mov	r1, r4
1000eb5e:	9002      	str	r0, [sp, #8]
1000eb60:	f000 fb4c 	bl	1000f1fc <__mcmp>
1000eb64:	2800      	cmp	r0, #0
1000eb66:	dcb4      	bgt.n	1000ead2 <_dtoa_r+0xa82>
1000eb68:	d102      	bne.n	1000eb70 <_dtoa_r+0xb20>
1000eb6a:	9b00      	ldr	r3, [sp, #0]
1000eb6c:	07db      	lsls	r3, r3, #31
1000eb6e:	d4b0      	bmi.n	1000ead2 <_dtoa_r+0xa82>
1000eb70:	4633      	mov	r3, r6
1000eb72:	461e      	mov	r6, r3
1000eb74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1000eb78:	2a30      	cmp	r2, #48	@ 0x30
1000eb7a:	d0fa      	beq.n	1000eb72 <_dtoa_r+0xb22>
1000eb7c:	e4b5      	b.n	1000e4ea <_dtoa_r+0x49a>
1000eb7e:	459a      	cmp	sl, r3
1000eb80:	d1a8      	bne.n	1000ead4 <_dtoa_r+0xa84>
1000eb82:	2331      	movs	r3, #49	@ 0x31
1000eb84:	f108 0801 	add.w	r8, r8, #1
1000eb88:	f88a 3000 	strb.w	r3, [sl]
1000eb8c:	e4ad      	b.n	1000e4ea <_dtoa_r+0x49a>
1000eb8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
1000eb90:	f8df a058 	ldr.w	sl, [pc, #88]	@ 1000ebec <_dtoa_r+0xb9c>
1000eb94:	b11b      	cbz	r3, 1000eb9e <_dtoa_r+0xb4e>
1000eb96:	f10a 0308 	add.w	r3, sl, #8
1000eb9a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
1000eb9c:	6013      	str	r3, [r2, #0]
1000eb9e:	4650      	mov	r0, sl
1000eba0:	b017      	add	sp, #92	@ 0x5c
1000eba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000eba6:	9b07      	ldr	r3, [sp, #28]
1000eba8:	2b01      	cmp	r3, #1
1000ebaa:	f77f ae2e 	ble.w	1000e80a <_dtoa_r+0x7ba>
1000ebae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1000ebb0:	9308      	str	r3, [sp, #32]
1000ebb2:	2001      	movs	r0, #1
1000ebb4:	e64d      	b.n	1000e852 <_dtoa_r+0x802>
1000ebb6:	f1bb 0f00 	cmp.w	fp, #0
1000ebba:	f77f aed9 	ble.w	1000e970 <_dtoa_r+0x920>
1000ebbe:	4656      	mov	r6, sl
1000ebc0:	9802      	ldr	r0, [sp, #8]
1000ebc2:	4621      	mov	r1, r4
1000ebc4:	f7ff f9bb 	bl	1000df3e <quorem>
1000ebc8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
1000ebcc:	f806 3b01 	strb.w	r3, [r6], #1
1000ebd0:	eba6 020a 	sub.w	r2, r6, sl
1000ebd4:	4593      	cmp	fp, r2
1000ebd6:	ddb4      	ble.n	1000eb42 <_dtoa_r+0xaf2>
1000ebd8:	9902      	ldr	r1, [sp, #8]
1000ebda:	2300      	movs	r3, #0
1000ebdc:	220a      	movs	r2, #10
1000ebde:	4648      	mov	r0, r9
1000ebe0:	f000 f8b2 	bl	1000ed48 <__multadd>
1000ebe4:	9002      	str	r0, [sp, #8]
1000ebe6:	e7eb      	b.n	1000ebc0 <_dtoa_r+0xb70>
1000ebe8:	1001230a 	.word	0x1001230a
1000ebec:	1001228e 	.word	0x1001228e

1000ebf0 <_free_r>:
1000ebf0:	b538      	push	{r3, r4, r5, lr}
1000ebf2:	4605      	mov	r5, r0
1000ebf4:	2900      	cmp	r1, #0
1000ebf6:	d041      	beq.n	1000ec7c <_free_r+0x8c>
1000ebf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000ebfc:	1f0c      	subs	r4, r1, #4
1000ebfe:	2b00      	cmp	r3, #0
1000ec00:	bfb8      	it	lt
1000ec02:	18e4      	addlt	r4, r4, r3
1000ec04:	f7fe f8c0 	bl	1000cd88 <__malloc_lock>
1000ec08:	4a1d      	ldr	r2, [pc, #116]	@ (1000ec80 <_free_r+0x90>)
1000ec0a:	6813      	ldr	r3, [r2, #0]
1000ec0c:	b933      	cbnz	r3, 1000ec1c <_free_r+0x2c>
1000ec0e:	6063      	str	r3, [r4, #4]
1000ec10:	6014      	str	r4, [r2, #0]
1000ec12:	4628      	mov	r0, r5
1000ec14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000ec18:	f7fe b8bc 	b.w	1000cd94 <__malloc_unlock>
1000ec1c:	42a3      	cmp	r3, r4
1000ec1e:	d908      	bls.n	1000ec32 <_free_r+0x42>
1000ec20:	6820      	ldr	r0, [r4, #0]
1000ec22:	1821      	adds	r1, r4, r0
1000ec24:	428b      	cmp	r3, r1
1000ec26:	bf01      	itttt	eq
1000ec28:	6819      	ldreq	r1, [r3, #0]
1000ec2a:	685b      	ldreq	r3, [r3, #4]
1000ec2c:	1809      	addeq	r1, r1, r0
1000ec2e:	6021      	streq	r1, [r4, #0]
1000ec30:	e7ed      	b.n	1000ec0e <_free_r+0x1e>
1000ec32:	461a      	mov	r2, r3
1000ec34:	685b      	ldr	r3, [r3, #4]
1000ec36:	b10b      	cbz	r3, 1000ec3c <_free_r+0x4c>
1000ec38:	42a3      	cmp	r3, r4
1000ec3a:	d9fa      	bls.n	1000ec32 <_free_r+0x42>
1000ec3c:	6811      	ldr	r1, [r2, #0]
1000ec3e:	1850      	adds	r0, r2, r1
1000ec40:	42a0      	cmp	r0, r4
1000ec42:	d10b      	bne.n	1000ec5c <_free_r+0x6c>
1000ec44:	6820      	ldr	r0, [r4, #0]
1000ec46:	4401      	add	r1, r0
1000ec48:	1850      	adds	r0, r2, r1
1000ec4a:	4283      	cmp	r3, r0
1000ec4c:	6011      	str	r1, [r2, #0]
1000ec4e:	d1e0      	bne.n	1000ec12 <_free_r+0x22>
1000ec50:	6818      	ldr	r0, [r3, #0]
1000ec52:	685b      	ldr	r3, [r3, #4]
1000ec54:	6053      	str	r3, [r2, #4]
1000ec56:	4408      	add	r0, r1
1000ec58:	6010      	str	r0, [r2, #0]
1000ec5a:	e7da      	b.n	1000ec12 <_free_r+0x22>
1000ec5c:	d902      	bls.n	1000ec64 <_free_r+0x74>
1000ec5e:	230c      	movs	r3, #12
1000ec60:	602b      	str	r3, [r5, #0]
1000ec62:	e7d6      	b.n	1000ec12 <_free_r+0x22>
1000ec64:	6820      	ldr	r0, [r4, #0]
1000ec66:	1821      	adds	r1, r4, r0
1000ec68:	428b      	cmp	r3, r1
1000ec6a:	bf04      	itt	eq
1000ec6c:	6819      	ldreq	r1, [r3, #0]
1000ec6e:	685b      	ldreq	r3, [r3, #4]
1000ec70:	6063      	str	r3, [r4, #4]
1000ec72:	bf04      	itt	eq
1000ec74:	1809      	addeq	r1, r1, r0
1000ec76:	6021      	streq	r1, [r4, #0]
1000ec78:	6054      	str	r4, [r2, #4]
1000ec7a:	e7ca      	b.n	1000ec12 <_free_r+0x22>
1000ec7c:	bd38      	pop	{r3, r4, r5, pc}
1000ec7e:	bf00      	nop
1000ec80:	100216bc 	.word	0x100216bc

1000ec84 <_Balloc>:
1000ec84:	b570      	push	{r4, r5, r6, lr}
1000ec86:	69c6      	ldr	r6, [r0, #28]
1000ec88:	4604      	mov	r4, r0
1000ec8a:	460d      	mov	r5, r1
1000ec8c:	b976      	cbnz	r6, 1000ecac <_Balloc+0x28>
1000ec8e:	2010      	movs	r0, #16
1000ec90:	f7fd ffc8 	bl	1000cc24 <malloc>
1000ec94:	4602      	mov	r2, r0
1000ec96:	61e0      	str	r0, [r4, #28]
1000ec98:	b920      	cbnz	r0, 1000eca4 <_Balloc+0x20>
1000ec9a:	4b18      	ldr	r3, [pc, #96]	@ (1000ecfc <_Balloc+0x78>)
1000ec9c:	4818      	ldr	r0, [pc, #96]	@ (1000ed00 <_Balloc+0x7c>)
1000ec9e:	216b      	movs	r1, #107	@ 0x6b
1000eca0:	f7fd ffa2 	bl	1000cbe8 <__assert_func>
1000eca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
1000eca8:	6006      	str	r6, [r0, #0]
1000ecaa:	60c6      	str	r6, [r0, #12]
1000ecac:	69e6      	ldr	r6, [r4, #28]
1000ecae:	68f3      	ldr	r3, [r6, #12]
1000ecb0:	b183      	cbz	r3, 1000ecd4 <_Balloc+0x50>
1000ecb2:	69e3      	ldr	r3, [r4, #28]
1000ecb4:	68db      	ldr	r3, [r3, #12]
1000ecb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
1000ecba:	b9b8      	cbnz	r0, 1000ecec <_Balloc+0x68>
1000ecbc:	2101      	movs	r1, #1
1000ecbe:	fa01 f605 	lsl.w	r6, r1, r5
1000ecc2:	1d72      	adds	r2, r6, #5
1000ecc4:	0092      	lsls	r2, r2, #2
1000ecc6:	4620      	mov	r0, r4
1000ecc8:	f001 ff32 	bl	10010b30 <_calloc_r>
1000eccc:	b160      	cbz	r0, 1000ece8 <_Balloc+0x64>
1000ecce:	e9c0 5601 	strd	r5, r6, [r0, #4]
1000ecd2:	e00e      	b.n	1000ecf2 <_Balloc+0x6e>
1000ecd4:	2221      	movs	r2, #33	@ 0x21
1000ecd6:	2104      	movs	r1, #4
1000ecd8:	4620      	mov	r0, r4
1000ecda:	f001 ff29 	bl	10010b30 <_calloc_r>
1000ecde:	69e3      	ldr	r3, [r4, #28]
1000ece0:	60f0      	str	r0, [r6, #12]
1000ece2:	68db      	ldr	r3, [r3, #12]
1000ece4:	2b00      	cmp	r3, #0
1000ece6:	d1e4      	bne.n	1000ecb2 <_Balloc+0x2e>
1000ece8:	2000      	movs	r0, #0
1000ecea:	bd70      	pop	{r4, r5, r6, pc}
1000ecec:	6802      	ldr	r2, [r0, #0]
1000ecee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
1000ecf2:	2300      	movs	r3, #0
1000ecf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
1000ecf8:	e7f7      	b.n	1000ecea <_Balloc+0x66>
1000ecfa:	bf00      	nop
1000ecfc:	1001229b 	.word	0x1001229b
1000ed00:	1001231b 	.word	0x1001231b

1000ed04 <_Bfree>:
1000ed04:	b570      	push	{r4, r5, r6, lr}
1000ed06:	69c6      	ldr	r6, [r0, #28]
1000ed08:	4605      	mov	r5, r0
1000ed0a:	460c      	mov	r4, r1
1000ed0c:	b976      	cbnz	r6, 1000ed2c <_Bfree+0x28>
1000ed0e:	2010      	movs	r0, #16
1000ed10:	f7fd ff88 	bl	1000cc24 <malloc>
1000ed14:	4602      	mov	r2, r0
1000ed16:	61e8      	str	r0, [r5, #28]
1000ed18:	b920      	cbnz	r0, 1000ed24 <_Bfree+0x20>
1000ed1a:	4b09      	ldr	r3, [pc, #36]	@ (1000ed40 <_Bfree+0x3c>)
1000ed1c:	4809      	ldr	r0, [pc, #36]	@ (1000ed44 <_Bfree+0x40>)
1000ed1e:	218f      	movs	r1, #143	@ 0x8f
1000ed20:	f7fd ff62 	bl	1000cbe8 <__assert_func>
1000ed24:	e9c0 6601 	strd	r6, r6, [r0, #4]
1000ed28:	6006      	str	r6, [r0, #0]
1000ed2a:	60c6      	str	r6, [r0, #12]
1000ed2c:	b13c      	cbz	r4, 1000ed3e <_Bfree+0x3a>
1000ed2e:	69eb      	ldr	r3, [r5, #28]
1000ed30:	6862      	ldr	r2, [r4, #4]
1000ed32:	68db      	ldr	r3, [r3, #12]
1000ed34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1000ed38:	6021      	str	r1, [r4, #0]
1000ed3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
1000ed3e:	bd70      	pop	{r4, r5, r6, pc}
1000ed40:	1001229b 	.word	0x1001229b
1000ed44:	1001231b 	.word	0x1001231b

1000ed48 <__multadd>:
1000ed48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000ed4c:	690d      	ldr	r5, [r1, #16]
1000ed4e:	4607      	mov	r7, r0
1000ed50:	460c      	mov	r4, r1
1000ed52:	461e      	mov	r6, r3
1000ed54:	f101 0c14 	add.w	ip, r1, #20
1000ed58:	2000      	movs	r0, #0
1000ed5a:	f8dc 3000 	ldr.w	r3, [ip]
1000ed5e:	b299      	uxth	r1, r3
1000ed60:	fb02 6101 	mla	r1, r2, r1, r6
1000ed64:	0c1e      	lsrs	r6, r3, #16
1000ed66:	0c0b      	lsrs	r3, r1, #16
1000ed68:	fb02 3306 	mla	r3, r2, r6, r3
1000ed6c:	b289      	uxth	r1, r1
1000ed6e:	3001      	adds	r0, #1
1000ed70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
1000ed74:	4285      	cmp	r5, r0
1000ed76:	f84c 1b04 	str.w	r1, [ip], #4
1000ed7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
1000ed7e:	dcec      	bgt.n	1000ed5a <__multadd+0x12>
1000ed80:	b30e      	cbz	r6, 1000edc6 <__multadd+0x7e>
1000ed82:	68a3      	ldr	r3, [r4, #8]
1000ed84:	42ab      	cmp	r3, r5
1000ed86:	dc19      	bgt.n	1000edbc <__multadd+0x74>
1000ed88:	6861      	ldr	r1, [r4, #4]
1000ed8a:	4638      	mov	r0, r7
1000ed8c:	3101      	adds	r1, #1
1000ed8e:	f7ff ff79 	bl	1000ec84 <_Balloc>
1000ed92:	4680      	mov	r8, r0
1000ed94:	b928      	cbnz	r0, 1000eda2 <__multadd+0x5a>
1000ed96:	4602      	mov	r2, r0
1000ed98:	4b0c      	ldr	r3, [pc, #48]	@ (1000edcc <__multadd+0x84>)
1000ed9a:	480d      	ldr	r0, [pc, #52]	@ (1000edd0 <__multadd+0x88>)
1000ed9c:	21ba      	movs	r1, #186	@ 0xba
1000ed9e:	f7fd ff23 	bl	1000cbe8 <__assert_func>
1000eda2:	6922      	ldr	r2, [r4, #16]
1000eda4:	3202      	adds	r2, #2
1000eda6:	f104 010c 	add.w	r1, r4, #12
1000edaa:	0092      	lsls	r2, r2, #2
1000edac:	300c      	adds	r0, #12
1000edae:	f7ff f8aa 	bl	1000df06 <memcpy>
1000edb2:	4621      	mov	r1, r4
1000edb4:	4638      	mov	r0, r7
1000edb6:	f7ff ffa5 	bl	1000ed04 <_Bfree>
1000edba:	4644      	mov	r4, r8
1000edbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
1000edc0:	3501      	adds	r5, #1
1000edc2:	615e      	str	r6, [r3, #20]
1000edc4:	6125      	str	r5, [r4, #16]
1000edc6:	4620      	mov	r0, r4
1000edc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000edcc:	1001230a 	.word	0x1001230a
1000edd0:	1001231b 	.word	0x1001231b

1000edd4 <__s2b>:
1000edd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000edd8:	460c      	mov	r4, r1
1000edda:	4615      	mov	r5, r2
1000eddc:	461f      	mov	r7, r3
1000edde:	2209      	movs	r2, #9
1000ede0:	3308      	adds	r3, #8
1000ede2:	4606      	mov	r6, r0
1000ede4:	fb93 f3f2 	sdiv	r3, r3, r2
1000ede8:	2100      	movs	r1, #0
1000edea:	2201      	movs	r2, #1
1000edec:	429a      	cmp	r2, r3
1000edee:	db09      	blt.n	1000ee04 <__s2b+0x30>
1000edf0:	4630      	mov	r0, r6
1000edf2:	f7ff ff47 	bl	1000ec84 <_Balloc>
1000edf6:	b940      	cbnz	r0, 1000ee0a <__s2b+0x36>
1000edf8:	4602      	mov	r2, r0
1000edfa:	4b19      	ldr	r3, [pc, #100]	@ (1000ee60 <__s2b+0x8c>)
1000edfc:	4819      	ldr	r0, [pc, #100]	@ (1000ee64 <__s2b+0x90>)
1000edfe:	21d3      	movs	r1, #211	@ 0xd3
1000ee00:	f7fd fef2 	bl	1000cbe8 <__assert_func>
1000ee04:	0052      	lsls	r2, r2, #1
1000ee06:	3101      	adds	r1, #1
1000ee08:	e7f0      	b.n	1000edec <__s2b+0x18>
1000ee0a:	9b08      	ldr	r3, [sp, #32]
1000ee0c:	6143      	str	r3, [r0, #20]
1000ee0e:	2d09      	cmp	r5, #9
1000ee10:	f04f 0301 	mov.w	r3, #1
1000ee14:	6103      	str	r3, [r0, #16]
1000ee16:	dd16      	ble.n	1000ee46 <__s2b+0x72>
1000ee18:	f104 0909 	add.w	r9, r4, #9
1000ee1c:	46c8      	mov	r8, r9
1000ee1e:	442c      	add	r4, r5
1000ee20:	f818 3b01 	ldrb.w	r3, [r8], #1
1000ee24:	4601      	mov	r1, r0
1000ee26:	3b30      	subs	r3, #48	@ 0x30
1000ee28:	220a      	movs	r2, #10
1000ee2a:	4630      	mov	r0, r6
1000ee2c:	f7ff ff8c 	bl	1000ed48 <__multadd>
1000ee30:	45a0      	cmp	r8, r4
1000ee32:	d1f5      	bne.n	1000ee20 <__s2b+0x4c>
1000ee34:	f1a5 0408 	sub.w	r4, r5, #8
1000ee38:	444c      	add	r4, r9
1000ee3a:	1b2d      	subs	r5, r5, r4
1000ee3c:	1963      	adds	r3, r4, r5
1000ee3e:	42bb      	cmp	r3, r7
1000ee40:	db04      	blt.n	1000ee4c <__s2b+0x78>
1000ee42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000ee46:	340a      	adds	r4, #10
1000ee48:	2509      	movs	r5, #9
1000ee4a:	e7f6      	b.n	1000ee3a <__s2b+0x66>
1000ee4c:	f814 3b01 	ldrb.w	r3, [r4], #1
1000ee50:	4601      	mov	r1, r0
1000ee52:	3b30      	subs	r3, #48	@ 0x30
1000ee54:	220a      	movs	r2, #10
1000ee56:	4630      	mov	r0, r6
1000ee58:	f7ff ff76 	bl	1000ed48 <__multadd>
1000ee5c:	e7ee      	b.n	1000ee3c <__s2b+0x68>
1000ee5e:	bf00      	nop
1000ee60:	1001230a 	.word	0x1001230a
1000ee64:	1001231b 	.word	0x1001231b

1000ee68 <__hi0bits>:
1000ee68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
1000ee6c:	4603      	mov	r3, r0
1000ee6e:	bf36      	itet	cc
1000ee70:	0403      	lslcc	r3, r0, #16
1000ee72:	2000      	movcs	r0, #0
1000ee74:	2010      	movcc	r0, #16
1000ee76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
1000ee7a:	bf3c      	itt	cc
1000ee7c:	021b      	lslcc	r3, r3, #8
1000ee7e:	3008      	addcc	r0, #8
1000ee80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
1000ee84:	bf3c      	itt	cc
1000ee86:	011b      	lslcc	r3, r3, #4
1000ee88:	3004      	addcc	r0, #4
1000ee8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
1000ee8e:	bf3c      	itt	cc
1000ee90:	009b      	lslcc	r3, r3, #2
1000ee92:	3002      	addcc	r0, #2
1000ee94:	2b00      	cmp	r3, #0
1000ee96:	db05      	blt.n	1000eea4 <__hi0bits+0x3c>
1000ee98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
1000ee9c:	f100 0001 	add.w	r0, r0, #1
1000eea0:	bf08      	it	eq
1000eea2:	2020      	moveq	r0, #32
1000eea4:	4770      	bx	lr

1000eea6 <__lo0bits>:
1000eea6:	6803      	ldr	r3, [r0, #0]
1000eea8:	4602      	mov	r2, r0
1000eeaa:	f013 0007 	ands.w	r0, r3, #7
1000eeae:	d00b      	beq.n	1000eec8 <__lo0bits+0x22>
1000eeb0:	07d9      	lsls	r1, r3, #31
1000eeb2:	d421      	bmi.n	1000eef8 <__lo0bits+0x52>
1000eeb4:	0798      	lsls	r0, r3, #30
1000eeb6:	bf49      	itett	mi
1000eeb8:	085b      	lsrmi	r3, r3, #1
1000eeba:	089b      	lsrpl	r3, r3, #2
1000eebc:	2001      	movmi	r0, #1
1000eebe:	6013      	strmi	r3, [r2, #0]
1000eec0:	bf5c      	itt	pl
1000eec2:	6013      	strpl	r3, [r2, #0]
1000eec4:	2002      	movpl	r0, #2
1000eec6:	4770      	bx	lr
1000eec8:	b299      	uxth	r1, r3
1000eeca:	b909      	cbnz	r1, 1000eed0 <__lo0bits+0x2a>
1000eecc:	0c1b      	lsrs	r3, r3, #16
1000eece:	2010      	movs	r0, #16
1000eed0:	b2d9      	uxtb	r1, r3
1000eed2:	b909      	cbnz	r1, 1000eed8 <__lo0bits+0x32>
1000eed4:	3008      	adds	r0, #8
1000eed6:	0a1b      	lsrs	r3, r3, #8
1000eed8:	0719      	lsls	r1, r3, #28
1000eeda:	bf04      	itt	eq
1000eedc:	091b      	lsreq	r3, r3, #4
1000eede:	3004      	addeq	r0, #4
1000eee0:	0799      	lsls	r1, r3, #30
1000eee2:	bf04      	itt	eq
1000eee4:	089b      	lsreq	r3, r3, #2
1000eee6:	3002      	addeq	r0, #2
1000eee8:	07d9      	lsls	r1, r3, #31
1000eeea:	d403      	bmi.n	1000eef4 <__lo0bits+0x4e>
1000eeec:	085b      	lsrs	r3, r3, #1
1000eeee:	f100 0001 	add.w	r0, r0, #1
1000eef2:	d003      	beq.n	1000eefc <__lo0bits+0x56>
1000eef4:	6013      	str	r3, [r2, #0]
1000eef6:	4770      	bx	lr
1000eef8:	2000      	movs	r0, #0
1000eefa:	4770      	bx	lr
1000eefc:	2020      	movs	r0, #32
1000eefe:	4770      	bx	lr

1000ef00 <__i2b>:
1000ef00:	b510      	push	{r4, lr}
1000ef02:	460c      	mov	r4, r1
1000ef04:	2101      	movs	r1, #1
1000ef06:	f7ff febd 	bl	1000ec84 <_Balloc>
1000ef0a:	4602      	mov	r2, r0
1000ef0c:	b928      	cbnz	r0, 1000ef1a <__i2b+0x1a>
1000ef0e:	4b05      	ldr	r3, [pc, #20]	@ (1000ef24 <__i2b+0x24>)
1000ef10:	4805      	ldr	r0, [pc, #20]	@ (1000ef28 <__i2b+0x28>)
1000ef12:	f240 1145 	movw	r1, #325	@ 0x145
1000ef16:	f7fd fe67 	bl	1000cbe8 <__assert_func>
1000ef1a:	2301      	movs	r3, #1
1000ef1c:	6144      	str	r4, [r0, #20]
1000ef1e:	6103      	str	r3, [r0, #16]
1000ef20:	bd10      	pop	{r4, pc}
1000ef22:	bf00      	nop
1000ef24:	1001230a 	.word	0x1001230a
1000ef28:	1001231b 	.word	0x1001231b

1000ef2c <__multiply>:
1000ef2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000ef30:	4617      	mov	r7, r2
1000ef32:	690a      	ldr	r2, [r1, #16]
1000ef34:	693b      	ldr	r3, [r7, #16]
1000ef36:	429a      	cmp	r2, r3
1000ef38:	bfa8      	it	ge
1000ef3a:	463b      	movge	r3, r7
1000ef3c:	4689      	mov	r9, r1
1000ef3e:	bfa4      	itt	ge
1000ef40:	460f      	movge	r7, r1
1000ef42:	4699      	movge	r9, r3
1000ef44:	693d      	ldr	r5, [r7, #16]
1000ef46:	f8d9 a010 	ldr.w	sl, [r9, #16]
1000ef4a:	68bb      	ldr	r3, [r7, #8]
1000ef4c:	6879      	ldr	r1, [r7, #4]
1000ef4e:	eb05 060a 	add.w	r6, r5, sl
1000ef52:	42b3      	cmp	r3, r6
1000ef54:	b085      	sub	sp, #20
1000ef56:	bfb8      	it	lt
1000ef58:	3101      	addlt	r1, #1
1000ef5a:	f7ff fe93 	bl	1000ec84 <_Balloc>
1000ef5e:	b930      	cbnz	r0, 1000ef6e <__multiply+0x42>
1000ef60:	4602      	mov	r2, r0
1000ef62:	4b41      	ldr	r3, [pc, #260]	@ (1000f068 <__multiply+0x13c>)
1000ef64:	4841      	ldr	r0, [pc, #260]	@ (1000f06c <__multiply+0x140>)
1000ef66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
1000ef6a:	f7fd fe3d 	bl	1000cbe8 <__assert_func>
1000ef6e:	f100 0414 	add.w	r4, r0, #20
1000ef72:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
1000ef76:	4623      	mov	r3, r4
1000ef78:	2200      	movs	r2, #0
1000ef7a:	4573      	cmp	r3, lr
1000ef7c:	d320      	bcc.n	1000efc0 <__multiply+0x94>
1000ef7e:	f107 0814 	add.w	r8, r7, #20
1000ef82:	f109 0114 	add.w	r1, r9, #20
1000ef86:	eb08 0585 	add.w	r5, r8, r5, lsl #2
1000ef8a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
1000ef8e:	9302      	str	r3, [sp, #8]
1000ef90:	1beb      	subs	r3, r5, r7
1000ef92:	3b15      	subs	r3, #21
1000ef94:	f023 0303 	bic.w	r3, r3, #3
1000ef98:	3304      	adds	r3, #4
1000ef9a:	3715      	adds	r7, #21
1000ef9c:	42bd      	cmp	r5, r7
1000ef9e:	bf38      	it	cc
1000efa0:	2304      	movcc	r3, #4
1000efa2:	9301      	str	r3, [sp, #4]
1000efa4:	9b02      	ldr	r3, [sp, #8]
1000efa6:	9103      	str	r1, [sp, #12]
1000efa8:	428b      	cmp	r3, r1
1000efaa:	d80c      	bhi.n	1000efc6 <__multiply+0x9a>
1000efac:	2e00      	cmp	r6, #0
1000efae:	dd03      	ble.n	1000efb8 <__multiply+0x8c>
1000efb0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
1000efb4:	2b00      	cmp	r3, #0
1000efb6:	d055      	beq.n	1000f064 <__multiply+0x138>
1000efb8:	6106      	str	r6, [r0, #16]
1000efba:	b005      	add	sp, #20
1000efbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000efc0:	f843 2b04 	str.w	r2, [r3], #4
1000efc4:	e7d9      	b.n	1000ef7a <__multiply+0x4e>
1000efc6:	f8b1 a000 	ldrh.w	sl, [r1]
1000efca:	f1ba 0f00 	cmp.w	sl, #0
1000efce:	d01f      	beq.n	1000f010 <__multiply+0xe4>
1000efd0:	46c4      	mov	ip, r8
1000efd2:	46a1      	mov	r9, r4
1000efd4:	2700      	movs	r7, #0
1000efd6:	f85c 2b04 	ldr.w	r2, [ip], #4
1000efda:	f8d9 3000 	ldr.w	r3, [r9]
1000efde:	fa1f fb82 	uxth.w	fp, r2
1000efe2:	b29b      	uxth	r3, r3
1000efe4:	fb0a 330b 	mla	r3, sl, fp, r3
1000efe8:	443b      	add	r3, r7
1000efea:	f8d9 7000 	ldr.w	r7, [r9]
1000efee:	0c12      	lsrs	r2, r2, #16
1000eff0:	0c3f      	lsrs	r7, r7, #16
1000eff2:	fb0a 7202 	mla	r2, sl, r2, r7
1000eff6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1000effa:	b29b      	uxth	r3, r3
1000effc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1000f000:	4565      	cmp	r5, ip
1000f002:	f849 3b04 	str.w	r3, [r9], #4
1000f006:	ea4f 4712 	mov.w	r7, r2, lsr #16
1000f00a:	d8e4      	bhi.n	1000efd6 <__multiply+0xaa>
1000f00c:	9b01      	ldr	r3, [sp, #4]
1000f00e:	50e7      	str	r7, [r4, r3]
1000f010:	9b03      	ldr	r3, [sp, #12]
1000f012:	f8b3 9002 	ldrh.w	r9, [r3, #2]
1000f016:	3104      	adds	r1, #4
1000f018:	f1b9 0f00 	cmp.w	r9, #0
1000f01c:	d020      	beq.n	1000f060 <__multiply+0x134>
1000f01e:	6823      	ldr	r3, [r4, #0]
1000f020:	4647      	mov	r7, r8
1000f022:	46a4      	mov	ip, r4
1000f024:	f04f 0a00 	mov.w	sl, #0
1000f028:	f8b7 b000 	ldrh.w	fp, [r7]
1000f02c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
1000f030:	fb09 220b 	mla	r2, r9, fp, r2
1000f034:	4452      	add	r2, sl
1000f036:	b29b      	uxth	r3, r3
1000f038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1000f03c:	f84c 3b04 	str.w	r3, [ip], #4
1000f040:	f857 3b04 	ldr.w	r3, [r7], #4
1000f044:	ea4f 4a13 	mov.w	sl, r3, lsr #16
1000f048:	f8bc 3000 	ldrh.w	r3, [ip]
1000f04c:	fb09 330a 	mla	r3, r9, sl, r3
1000f050:	eb03 4312 	add.w	r3, r3, r2, lsr #16
1000f054:	42bd      	cmp	r5, r7
1000f056:	ea4f 4a13 	mov.w	sl, r3, lsr #16
1000f05a:	d8e5      	bhi.n	1000f028 <__multiply+0xfc>
1000f05c:	9a01      	ldr	r2, [sp, #4]
1000f05e:	50a3      	str	r3, [r4, r2]
1000f060:	3404      	adds	r4, #4
1000f062:	e79f      	b.n	1000efa4 <__multiply+0x78>
1000f064:	3e01      	subs	r6, #1
1000f066:	e7a1      	b.n	1000efac <__multiply+0x80>
1000f068:	1001230a 	.word	0x1001230a
1000f06c:	1001231b 	.word	0x1001231b

1000f070 <__pow5mult>:
1000f070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1000f074:	4615      	mov	r5, r2
1000f076:	f012 0203 	ands.w	r2, r2, #3
1000f07a:	4607      	mov	r7, r0
1000f07c:	460e      	mov	r6, r1
1000f07e:	d007      	beq.n	1000f090 <__pow5mult+0x20>
1000f080:	4c25      	ldr	r4, [pc, #148]	@ (1000f118 <__pow5mult+0xa8>)
1000f082:	3a01      	subs	r2, #1
1000f084:	2300      	movs	r3, #0
1000f086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
1000f08a:	f7ff fe5d 	bl	1000ed48 <__multadd>
1000f08e:	4606      	mov	r6, r0
1000f090:	10ad      	asrs	r5, r5, #2
1000f092:	d03d      	beq.n	1000f110 <__pow5mult+0xa0>
1000f094:	69fc      	ldr	r4, [r7, #28]
1000f096:	b97c      	cbnz	r4, 1000f0b8 <__pow5mult+0x48>
1000f098:	2010      	movs	r0, #16
1000f09a:	f7fd fdc3 	bl	1000cc24 <malloc>
1000f09e:	4602      	mov	r2, r0
1000f0a0:	61f8      	str	r0, [r7, #28]
1000f0a2:	b928      	cbnz	r0, 1000f0b0 <__pow5mult+0x40>
1000f0a4:	4b1d      	ldr	r3, [pc, #116]	@ (1000f11c <__pow5mult+0xac>)
1000f0a6:	481e      	ldr	r0, [pc, #120]	@ (1000f120 <__pow5mult+0xb0>)
1000f0a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
1000f0ac:	f7fd fd9c 	bl	1000cbe8 <__assert_func>
1000f0b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
1000f0b4:	6004      	str	r4, [r0, #0]
1000f0b6:	60c4      	str	r4, [r0, #12]
1000f0b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
1000f0bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
1000f0c0:	b94c      	cbnz	r4, 1000f0d6 <__pow5mult+0x66>
1000f0c2:	f240 2171 	movw	r1, #625	@ 0x271
1000f0c6:	4638      	mov	r0, r7
1000f0c8:	f7ff ff1a 	bl	1000ef00 <__i2b>
1000f0cc:	2300      	movs	r3, #0
1000f0ce:	f8c8 0008 	str.w	r0, [r8, #8]
1000f0d2:	4604      	mov	r4, r0
1000f0d4:	6003      	str	r3, [r0, #0]
1000f0d6:	f04f 0900 	mov.w	r9, #0
1000f0da:	07eb      	lsls	r3, r5, #31
1000f0dc:	d50a      	bpl.n	1000f0f4 <__pow5mult+0x84>
1000f0de:	4631      	mov	r1, r6
1000f0e0:	4622      	mov	r2, r4
1000f0e2:	4638      	mov	r0, r7
1000f0e4:	f7ff ff22 	bl	1000ef2c <__multiply>
1000f0e8:	4631      	mov	r1, r6
1000f0ea:	4680      	mov	r8, r0
1000f0ec:	4638      	mov	r0, r7
1000f0ee:	f7ff fe09 	bl	1000ed04 <_Bfree>
1000f0f2:	4646      	mov	r6, r8
1000f0f4:	106d      	asrs	r5, r5, #1
1000f0f6:	d00b      	beq.n	1000f110 <__pow5mult+0xa0>
1000f0f8:	6820      	ldr	r0, [r4, #0]
1000f0fa:	b938      	cbnz	r0, 1000f10c <__pow5mult+0x9c>
1000f0fc:	4622      	mov	r2, r4
1000f0fe:	4621      	mov	r1, r4
1000f100:	4638      	mov	r0, r7
1000f102:	f7ff ff13 	bl	1000ef2c <__multiply>
1000f106:	6020      	str	r0, [r4, #0]
1000f108:	f8c0 9000 	str.w	r9, [r0]
1000f10c:	4604      	mov	r4, r0
1000f10e:	e7e4      	b.n	1000f0da <__pow5mult+0x6a>
1000f110:	4630      	mov	r0, r6
1000f112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000f116:	bf00      	nop
1000f118:	100123f0 	.word	0x100123f0
1000f11c:	1001229b 	.word	0x1001229b
1000f120:	1001231b 	.word	0x1001231b

1000f124 <__lshift>:
1000f124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000f128:	460c      	mov	r4, r1
1000f12a:	6849      	ldr	r1, [r1, #4]
1000f12c:	6923      	ldr	r3, [r4, #16]
1000f12e:	eb03 1862 	add.w	r8, r3, r2, asr #5
1000f132:	68a3      	ldr	r3, [r4, #8]
1000f134:	4607      	mov	r7, r0
1000f136:	4691      	mov	r9, r2
1000f138:	ea4f 1a62 	mov.w	sl, r2, asr #5
1000f13c:	f108 0601 	add.w	r6, r8, #1
1000f140:	42b3      	cmp	r3, r6
1000f142:	db0b      	blt.n	1000f15c <__lshift+0x38>
1000f144:	4638      	mov	r0, r7
1000f146:	f7ff fd9d 	bl	1000ec84 <_Balloc>
1000f14a:	4605      	mov	r5, r0
1000f14c:	b948      	cbnz	r0, 1000f162 <__lshift+0x3e>
1000f14e:	4602      	mov	r2, r0
1000f150:	4b28      	ldr	r3, [pc, #160]	@ (1000f1f4 <__lshift+0xd0>)
1000f152:	4829      	ldr	r0, [pc, #164]	@ (1000f1f8 <__lshift+0xd4>)
1000f154:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
1000f158:	f7fd fd46 	bl	1000cbe8 <__assert_func>
1000f15c:	3101      	adds	r1, #1
1000f15e:	005b      	lsls	r3, r3, #1
1000f160:	e7ee      	b.n	1000f140 <__lshift+0x1c>
1000f162:	2300      	movs	r3, #0
1000f164:	f100 0114 	add.w	r1, r0, #20
1000f168:	f100 0210 	add.w	r2, r0, #16
1000f16c:	4618      	mov	r0, r3
1000f16e:	4553      	cmp	r3, sl
1000f170:	db33      	blt.n	1000f1da <__lshift+0xb6>
1000f172:	6920      	ldr	r0, [r4, #16]
1000f174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
1000f178:	f104 0314 	add.w	r3, r4, #20
1000f17c:	f019 091f 	ands.w	r9, r9, #31
1000f180:	eb01 018a 	add.w	r1, r1, sl, lsl #2
1000f184:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
1000f188:	d02b      	beq.n	1000f1e2 <__lshift+0xbe>
1000f18a:	f1c9 0e20 	rsb	lr, r9, #32
1000f18e:	468a      	mov	sl, r1
1000f190:	2200      	movs	r2, #0
1000f192:	6818      	ldr	r0, [r3, #0]
1000f194:	fa00 f009 	lsl.w	r0, r0, r9
1000f198:	4310      	orrs	r0, r2
1000f19a:	f84a 0b04 	str.w	r0, [sl], #4
1000f19e:	f853 2b04 	ldr.w	r2, [r3], #4
1000f1a2:	459c      	cmp	ip, r3
1000f1a4:	fa22 f20e 	lsr.w	r2, r2, lr
1000f1a8:	d8f3      	bhi.n	1000f192 <__lshift+0x6e>
1000f1aa:	ebac 0304 	sub.w	r3, ip, r4
1000f1ae:	3b15      	subs	r3, #21
1000f1b0:	f023 0303 	bic.w	r3, r3, #3
1000f1b4:	3304      	adds	r3, #4
1000f1b6:	f104 0015 	add.w	r0, r4, #21
1000f1ba:	4560      	cmp	r0, ip
1000f1bc:	bf88      	it	hi
1000f1be:	2304      	movhi	r3, #4
1000f1c0:	50ca      	str	r2, [r1, r3]
1000f1c2:	b10a      	cbz	r2, 1000f1c8 <__lshift+0xa4>
1000f1c4:	f108 0602 	add.w	r6, r8, #2
1000f1c8:	3e01      	subs	r6, #1
1000f1ca:	4638      	mov	r0, r7
1000f1cc:	612e      	str	r6, [r5, #16]
1000f1ce:	4621      	mov	r1, r4
1000f1d0:	f7ff fd98 	bl	1000ed04 <_Bfree>
1000f1d4:	4628      	mov	r0, r5
1000f1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000f1da:	f842 0f04 	str.w	r0, [r2, #4]!
1000f1de:	3301      	adds	r3, #1
1000f1e0:	e7c5      	b.n	1000f16e <__lshift+0x4a>
1000f1e2:	3904      	subs	r1, #4
1000f1e4:	f853 2b04 	ldr.w	r2, [r3], #4
1000f1e8:	f841 2f04 	str.w	r2, [r1, #4]!
1000f1ec:	459c      	cmp	ip, r3
1000f1ee:	d8f9      	bhi.n	1000f1e4 <__lshift+0xc0>
1000f1f0:	e7ea      	b.n	1000f1c8 <__lshift+0xa4>
1000f1f2:	bf00      	nop
1000f1f4:	1001230a 	.word	0x1001230a
1000f1f8:	1001231b 	.word	0x1001231b

1000f1fc <__mcmp>:
1000f1fc:	690a      	ldr	r2, [r1, #16]
1000f1fe:	4603      	mov	r3, r0
1000f200:	6900      	ldr	r0, [r0, #16]
1000f202:	1a80      	subs	r0, r0, r2
1000f204:	b530      	push	{r4, r5, lr}
1000f206:	d10e      	bne.n	1000f226 <__mcmp+0x2a>
1000f208:	3314      	adds	r3, #20
1000f20a:	3114      	adds	r1, #20
1000f20c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
1000f210:	eb01 0182 	add.w	r1, r1, r2, lsl #2
1000f214:	f854 5d04 	ldr.w	r5, [r4, #-4]!
1000f218:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1000f21c:	4295      	cmp	r5, r2
1000f21e:	d003      	beq.n	1000f228 <__mcmp+0x2c>
1000f220:	d205      	bcs.n	1000f22e <__mcmp+0x32>
1000f222:	f04f 30ff 	mov.w	r0, #4294967295
1000f226:	bd30      	pop	{r4, r5, pc}
1000f228:	42a3      	cmp	r3, r4
1000f22a:	d3f3      	bcc.n	1000f214 <__mcmp+0x18>
1000f22c:	e7fb      	b.n	1000f226 <__mcmp+0x2a>
1000f22e:	2001      	movs	r0, #1
1000f230:	e7f9      	b.n	1000f226 <__mcmp+0x2a>
	...

1000f234 <__mdiff>:
1000f234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f238:	4689      	mov	r9, r1
1000f23a:	4606      	mov	r6, r0
1000f23c:	4611      	mov	r1, r2
1000f23e:	4648      	mov	r0, r9
1000f240:	4614      	mov	r4, r2
1000f242:	f7ff ffdb 	bl	1000f1fc <__mcmp>
1000f246:	1e05      	subs	r5, r0, #0
1000f248:	d112      	bne.n	1000f270 <__mdiff+0x3c>
1000f24a:	4629      	mov	r1, r5
1000f24c:	4630      	mov	r0, r6
1000f24e:	f7ff fd19 	bl	1000ec84 <_Balloc>
1000f252:	4602      	mov	r2, r0
1000f254:	b928      	cbnz	r0, 1000f262 <__mdiff+0x2e>
1000f256:	4b3f      	ldr	r3, [pc, #252]	@ (1000f354 <__mdiff+0x120>)
1000f258:	f240 2137 	movw	r1, #567	@ 0x237
1000f25c:	483e      	ldr	r0, [pc, #248]	@ (1000f358 <__mdiff+0x124>)
1000f25e:	f7fd fcc3 	bl	1000cbe8 <__assert_func>
1000f262:	2301      	movs	r3, #1
1000f264:	e9c0 3504 	strd	r3, r5, [r0, #16]
1000f268:	4610      	mov	r0, r2
1000f26a:	b003      	add	sp, #12
1000f26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000f270:	bfbc      	itt	lt
1000f272:	464b      	movlt	r3, r9
1000f274:	46a1      	movlt	r9, r4
1000f276:	4630      	mov	r0, r6
1000f278:	f8d9 1004 	ldr.w	r1, [r9, #4]
1000f27c:	bfba      	itte	lt
1000f27e:	461c      	movlt	r4, r3
1000f280:	2501      	movlt	r5, #1
1000f282:	2500      	movge	r5, #0
1000f284:	f7ff fcfe 	bl	1000ec84 <_Balloc>
1000f288:	4602      	mov	r2, r0
1000f28a:	b918      	cbnz	r0, 1000f294 <__mdiff+0x60>
1000f28c:	4b31      	ldr	r3, [pc, #196]	@ (1000f354 <__mdiff+0x120>)
1000f28e:	f240 2145 	movw	r1, #581	@ 0x245
1000f292:	e7e3      	b.n	1000f25c <__mdiff+0x28>
1000f294:	f8d9 7010 	ldr.w	r7, [r9, #16]
1000f298:	6926      	ldr	r6, [r4, #16]
1000f29a:	60c5      	str	r5, [r0, #12]
1000f29c:	f109 0310 	add.w	r3, r9, #16
1000f2a0:	f109 0514 	add.w	r5, r9, #20
1000f2a4:	f104 0e14 	add.w	lr, r4, #20
1000f2a8:	f100 0b14 	add.w	fp, r0, #20
1000f2ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
1000f2b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
1000f2b4:	9301      	str	r3, [sp, #4]
1000f2b6:	46d9      	mov	r9, fp
1000f2b8:	f04f 0c00 	mov.w	ip, #0
1000f2bc:	9b01      	ldr	r3, [sp, #4]
1000f2be:	f85e 0b04 	ldr.w	r0, [lr], #4
1000f2c2:	f853 af04 	ldr.w	sl, [r3, #4]!
1000f2c6:	9301      	str	r3, [sp, #4]
1000f2c8:	fa1f f38a 	uxth.w	r3, sl
1000f2cc:	4619      	mov	r1, r3
1000f2ce:	b283      	uxth	r3, r0
1000f2d0:	1acb      	subs	r3, r1, r3
1000f2d2:	0c00      	lsrs	r0, r0, #16
1000f2d4:	4463      	add	r3, ip
1000f2d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
1000f2da:	eb00 4023 	add.w	r0, r0, r3, asr #16
1000f2de:	b29b      	uxth	r3, r3
1000f2e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1000f2e4:	4576      	cmp	r6, lr
1000f2e6:	f849 3b04 	str.w	r3, [r9], #4
1000f2ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
1000f2ee:	d8e5      	bhi.n	1000f2bc <__mdiff+0x88>
1000f2f0:	1b33      	subs	r3, r6, r4
1000f2f2:	3b15      	subs	r3, #21
1000f2f4:	f023 0303 	bic.w	r3, r3, #3
1000f2f8:	3415      	adds	r4, #21
1000f2fa:	3304      	adds	r3, #4
1000f2fc:	42a6      	cmp	r6, r4
1000f2fe:	bf38      	it	cc
1000f300:	2304      	movcc	r3, #4
1000f302:	441d      	add	r5, r3
1000f304:	445b      	add	r3, fp
1000f306:	461e      	mov	r6, r3
1000f308:	462c      	mov	r4, r5
1000f30a:	4544      	cmp	r4, r8
1000f30c:	d30e      	bcc.n	1000f32c <__mdiff+0xf8>
1000f30e:	f108 0103 	add.w	r1, r8, #3
1000f312:	1b49      	subs	r1, r1, r5
1000f314:	f021 0103 	bic.w	r1, r1, #3
1000f318:	3d03      	subs	r5, #3
1000f31a:	45a8      	cmp	r8, r5
1000f31c:	bf38      	it	cc
1000f31e:	2100      	movcc	r1, #0
1000f320:	440b      	add	r3, r1
1000f322:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1000f326:	b191      	cbz	r1, 1000f34e <__mdiff+0x11a>
1000f328:	6117      	str	r7, [r2, #16]
1000f32a:	e79d      	b.n	1000f268 <__mdiff+0x34>
1000f32c:	f854 1b04 	ldr.w	r1, [r4], #4
1000f330:	46e6      	mov	lr, ip
1000f332:	0c08      	lsrs	r0, r1, #16
1000f334:	fa1c fc81 	uxtah	ip, ip, r1
1000f338:	4471      	add	r1, lr
1000f33a:	eb00 402c 	add.w	r0, r0, ip, asr #16
1000f33e:	b289      	uxth	r1, r1
1000f340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1000f344:	f846 1b04 	str.w	r1, [r6], #4
1000f348:	ea4f 4c20 	mov.w	ip, r0, asr #16
1000f34c:	e7dd      	b.n	1000f30a <__mdiff+0xd6>
1000f34e:	3f01      	subs	r7, #1
1000f350:	e7e7      	b.n	1000f322 <__mdiff+0xee>
1000f352:	bf00      	nop
1000f354:	1001230a 	.word	0x1001230a
1000f358:	1001231b 	.word	0x1001231b

1000f35c <__ulp>:
1000f35c:	b082      	sub	sp, #8
1000f35e:	ed8d 0b00 	vstr	d0, [sp]
1000f362:	9a01      	ldr	r2, [sp, #4]
1000f364:	4b0f      	ldr	r3, [pc, #60]	@ (1000f3a4 <__ulp+0x48>)
1000f366:	4013      	ands	r3, r2
1000f368:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
1000f36c:	2b00      	cmp	r3, #0
1000f36e:	dc08      	bgt.n	1000f382 <__ulp+0x26>
1000f370:	425b      	negs	r3, r3
1000f372:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
1000f376:	ea4f 5223 	mov.w	r2, r3, asr #20
1000f37a:	da04      	bge.n	1000f386 <__ulp+0x2a>
1000f37c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
1000f380:	4113      	asrs	r3, r2
1000f382:	2200      	movs	r2, #0
1000f384:	e008      	b.n	1000f398 <__ulp+0x3c>
1000f386:	f1a2 0314 	sub.w	r3, r2, #20
1000f38a:	2b1e      	cmp	r3, #30
1000f38c:	bfda      	itte	le
1000f38e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
1000f392:	40da      	lsrle	r2, r3
1000f394:	2201      	movgt	r2, #1
1000f396:	2300      	movs	r3, #0
1000f398:	4619      	mov	r1, r3
1000f39a:	4610      	mov	r0, r2
1000f39c:	ec41 0b10 	vmov	d0, r0, r1
1000f3a0:	b002      	add	sp, #8
1000f3a2:	4770      	bx	lr
1000f3a4:	7ff00000 	.word	0x7ff00000

1000f3a8 <__b2d>:
1000f3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000f3ac:	6906      	ldr	r6, [r0, #16]
1000f3ae:	f100 0814 	add.w	r8, r0, #20
1000f3b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
1000f3b6:	1f37      	subs	r7, r6, #4
1000f3b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
1000f3bc:	4610      	mov	r0, r2
1000f3be:	f7ff fd53 	bl	1000ee68 <__hi0bits>
1000f3c2:	f1c0 0320 	rsb	r3, r0, #32
1000f3c6:	280a      	cmp	r0, #10
1000f3c8:	600b      	str	r3, [r1, #0]
1000f3ca:	491b      	ldr	r1, [pc, #108]	@ (1000f438 <__b2d+0x90>)
1000f3cc:	dc15      	bgt.n	1000f3fa <__b2d+0x52>
1000f3ce:	f1c0 0c0b 	rsb	ip, r0, #11
1000f3d2:	fa22 f30c 	lsr.w	r3, r2, ip
1000f3d6:	45b8      	cmp	r8, r7
1000f3d8:	ea43 0501 	orr.w	r5, r3, r1
1000f3dc:	bf34      	ite	cc
1000f3de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
1000f3e2:	2300      	movcs	r3, #0
1000f3e4:	3015      	adds	r0, #21
1000f3e6:	fa02 f000 	lsl.w	r0, r2, r0
1000f3ea:	fa23 f30c 	lsr.w	r3, r3, ip
1000f3ee:	4303      	orrs	r3, r0
1000f3f0:	461c      	mov	r4, r3
1000f3f2:	ec45 4b10 	vmov	d0, r4, r5
1000f3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000f3fa:	45b8      	cmp	r8, r7
1000f3fc:	bf3a      	itte	cc
1000f3fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
1000f402:	f1a6 0708 	subcc.w	r7, r6, #8
1000f406:	2300      	movcs	r3, #0
1000f408:	380b      	subs	r0, #11
1000f40a:	d012      	beq.n	1000f432 <__b2d+0x8a>
1000f40c:	f1c0 0120 	rsb	r1, r0, #32
1000f410:	fa23 f401 	lsr.w	r4, r3, r1
1000f414:	4082      	lsls	r2, r0
1000f416:	4322      	orrs	r2, r4
1000f418:	4547      	cmp	r7, r8
1000f41a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
1000f41e:	bf8c      	ite	hi
1000f420:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
1000f424:	2200      	movls	r2, #0
1000f426:	4083      	lsls	r3, r0
1000f428:	40ca      	lsrs	r2, r1
1000f42a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
1000f42e:	4313      	orrs	r3, r2
1000f430:	e7de      	b.n	1000f3f0 <__b2d+0x48>
1000f432:	ea42 0501 	orr.w	r5, r2, r1
1000f436:	e7db      	b.n	1000f3f0 <__b2d+0x48>
1000f438:	3ff00000 	.word	0x3ff00000

1000f43c <__d2b>:
1000f43c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
1000f440:	460f      	mov	r7, r1
1000f442:	2101      	movs	r1, #1
1000f444:	ec59 8b10 	vmov	r8, r9, d0
1000f448:	4616      	mov	r6, r2
1000f44a:	f7ff fc1b 	bl	1000ec84 <_Balloc>
1000f44e:	4604      	mov	r4, r0
1000f450:	b930      	cbnz	r0, 1000f460 <__d2b+0x24>
1000f452:	4602      	mov	r2, r0
1000f454:	4b23      	ldr	r3, [pc, #140]	@ (1000f4e4 <__d2b+0xa8>)
1000f456:	4824      	ldr	r0, [pc, #144]	@ (1000f4e8 <__d2b+0xac>)
1000f458:	f240 310f 	movw	r1, #783	@ 0x30f
1000f45c:	f7fd fbc4 	bl	1000cbe8 <__assert_func>
1000f460:	f3c9 550a 	ubfx	r5, r9, #20, #11
1000f464:	f3c9 0313 	ubfx	r3, r9, #0, #20
1000f468:	b10d      	cbz	r5, 1000f46e <__d2b+0x32>
1000f46a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
1000f46e:	9301      	str	r3, [sp, #4]
1000f470:	f1b8 0300 	subs.w	r3, r8, #0
1000f474:	d023      	beq.n	1000f4be <__d2b+0x82>
1000f476:	4668      	mov	r0, sp
1000f478:	9300      	str	r3, [sp, #0]
1000f47a:	f7ff fd14 	bl	1000eea6 <__lo0bits>
1000f47e:	e9dd 1200 	ldrd	r1, r2, [sp]
1000f482:	b1d0      	cbz	r0, 1000f4ba <__d2b+0x7e>
1000f484:	f1c0 0320 	rsb	r3, r0, #32
1000f488:	fa02 f303 	lsl.w	r3, r2, r3
1000f48c:	430b      	orrs	r3, r1
1000f48e:	40c2      	lsrs	r2, r0
1000f490:	6163      	str	r3, [r4, #20]
1000f492:	9201      	str	r2, [sp, #4]
1000f494:	9b01      	ldr	r3, [sp, #4]
1000f496:	61a3      	str	r3, [r4, #24]
1000f498:	2b00      	cmp	r3, #0
1000f49a:	bf0c      	ite	eq
1000f49c:	2201      	moveq	r2, #1
1000f49e:	2202      	movne	r2, #2
1000f4a0:	6122      	str	r2, [r4, #16]
1000f4a2:	b1a5      	cbz	r5, 1000f4ce <__d2b+0x92>
1000f4a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
1000f4a8:	4405      	add	r5, r0
1000f4aa:	603d      	str	r5, [r7, #0]
1000f4ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
1000f4b0:	6030      	str	r0, [r6, #0]
1000f4b2:	4620      	mov	r0, r4
1000f4b4:	b003      	add	sp, #12
1000f4b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1000f4ba:	6161      	str	r1, [r4, #20]
1000f4bc:	e7ea      	b.n	1000f494 <__d2b+0x58>
1000f4be:	a801      	add	r0, sp, #4
1000f4c0:	f7ff fcf1 	bl	1000eea6 <__lo0bits>
1000f4c4:	9b01      	ldr	r3, [sp, #4]
1000f4c6:	6163      	str	r3, [r4, #20]
1000f4c8:	3020      	adds	r0, #32
1000f4ca:	2201      	movs	r2, #1
1000f4cc:	e7e8      	b.n	1000f4a0 <__d2b+0x64>
1000f4ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
1000f4d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
1000f4d6:	6038      	str	r0, [r7, #0]
1000f4d8:	6918      	ldr	r0, [r3, #16]
1000f4da:	f7ff fcc5 	bl	1000ee68 <__hi0bits>
1000f4de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
1000f4e2:	e7e5      	b.n	1000f4b0 <__d2b+0x74>
1000f4e4:	1001230a 	.word	0x1001230a
1000f4e8:	1001231b 	.word	0x1001231b

1000f4ec <__ratio>:
1000f4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f4f0:	b085      	sub	sp, #20
1000f4f2:	e9cd 1000 	strd	r1, r0, [sp]
1000f4f6:	a902      	add	r1, sp, #8
1000f4f8:	f7ff ff56 	bl	1000f3a8 <__b2d>
1000f4fc:	9800      	ldr	r0, [sp, #0]
1000f4fe:	a903      	add	r1, sp, #12
1000f500:	ec55 4b10 	vmov	r4, r5, d0
1000f504:	f7ff ff50 	bl	1000f3a8 <__b2d>
1000f508:	9b01      	ldr	r3, [sp, #4]
1000f50a:	6919      	ldr	r1, [r3, #16]
1000f50c:	9b00      	ldr	r3, [sp, #0]
1000f50e:	691b      	ldr	r3, [r3, #16]
1000f510:	1ac9      	subs	r1, r1, r3
1000f512:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
1000f516:	1a9b      	subs	r3, r3, r2
1000f518:	ec5b ab10 	vmov	sl, fp, d0
1000f51c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1000f520:	2b00      	cmp	r3, #0
1000f522:	bfce      	itee	gt
1000f524:	462a      	movgt	r2, r5
1000f526:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
1000f52a:	465a      	movle	r2, fp
1000f52c:	462f      	mov	r7, r5
1000f52e:	46d9      	mov	r9, fp
1000f530:	bfcc      	ite	gt
1000f532:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
1000f536:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
1000f53a:	464b      	mov	r3, r9
1000f53c:	4652      	mov	r2, sl
1000f53e:	4620      	mov	r0, r4
1000f540:	4639      	mov	r1, r7
1000f542:	f7f1 f8cb 	bl	100006dc <__aeabi_ddiv>
1000f546:	ec41 0b10 	vmov	d0, r0, r1
1000f54a:	b005      	add	sp, #20
1000f54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1000f550 <__copybits>:
1000f550:	3901      	subs	r1, #1
1000f552:	b570      	push	{r4, r5, r6, lr}
1000f554:	1149      	asrs	r1, r1, #5
1000f556:	6914      	ldr	r4, [r2, #16]
1000f558:	3101      	adds	r1, #1
1000f55a:	f102 0314 	add.w	r3, r2, #20
1000f55e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
1000f562:	eb03 0484 	add.w	r4, r3, r4, lsl #2
1000f566:	1f05      	subs	r5, r0, #4
1000f568:	42a3      	cmp	r3, r4
1000f56a:	d30c      	bcc.n	1000f586 <__copybits+0x36>
1000f56c:	1aa3      	subs	r3, r4, r2
1000f56e:	3b11      	subs	r3, #17
1000f570:	f023 0303 	bic.w	r3, r3, #3
1000f574:	3211      	adds	r2, #17
1000f576:	42a2      	cmp	r2, r4
1000f578:	bf88      	it	hi
1000f57a:	2300      	movhi	r3, #0
1000f57c:	4418      	add	r0, r3
1000f57e:	2300      	movs	r3, #0
1000f580:	4288      	cmp	r0, r1
1000f582:	d305      	bcc.n	1000f590 <__copybits+0x40>
1000f584:	bd70      	pop	{r4, r5, r6, pc}
1000f586:	f853 6b04 	ldr.w	r6, [r3], #4
1000f58a:	f845 6f04 	str.w	r6, [r5, #4]!
1000f58e:	e7eb      	b.n	1000f568 <__copybits+0x18>
1000f590:	f840 3b04 	str.w	r3, [r0], #4
1000f594:	e7f4      	b.n	1000f580 <__copybits+0x30>

1000f596 <__any_on>:
1000f596:	f100 0214 	add.w	r2, r0, #20
1000f59a:	6900      	ldr	r0, [r0, #16]
1000f59c:	114b      	asrs	r3, r1, #5
1000f59e:	4298      	cmp	r0, r3
1000f5a0:	b510      	push	{r4, lr}
1000f5a2:	db11      	blt.n	1000f5c8 <__any_on+0x32>
1000f5a4:	dd0a      	ble.n	1000f5bc <__any_on+0x26>
1000f5a6:	f011 011f 	ands.w	r1, r1, #31
1000f5aa:	d007      	beq.n	1000f5bc <__any_on+0x26>
1000f5ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
1000f5b0:	fa24 f001 	lsr.w	r0, r4, r1
1000f5b4:	fa00 f101 	lsl.w	r1, r0, r1
1000f5b8:	428c      	cmp	r4, r1
1000f5ba:	d10b      	bne.n	1000f5d4 <__any_on+0x3e>
1000f5bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1000f5c0:	4293      	cmp	r3, r2
1000f5c2:	d803      	bhi.n	1000f5cc <__any_on+0x36>
1000f5c4:	2000      	movs	r0, #0
1000f5c6:	bd10      	pop	{r4, pc}
1000f5c8:	4603      	mov	r3, r0
1000f5ca:	e7f7      	b.n	1000f5bc <__any_on+0x26>
1000f5cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1000f5d0:	2900      	cmp	r1, #0
1000f5d2:	d0f5      	beq.n	1000f5c0 <__any_on+0x2a>
1000f5d4:	2001      	movs	r0, #1
1000f5d6:	e7f6      	b.n	1000f5c6 <__any_on+0x30>

1000f5d8 <sulp>:
1000f5d8:	b570      	push	{r4, r5, r6, lr}
1000f5da:	4604      	mov	r4, r0
1000f5dc:	460d      	mov	r5, r1
1000f5de:	ec45 4b10 	vmov	d0, r4, r5
1000f5e2:	4616      	mov	r6, r2
1000f5e4:	f7ff feba 	bl	1000f35c <__ulp>
1000f5e8:	ec51 0b10 	vmov	r0, r1, d0
1000f5ec:	b17e      	cbz	r6, 1000f60e <sulp+0x36>
1000f5ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
1000f5f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
1000f5f6:	2b00      	cmp	r3, #0
1000f5f8:	dd09      	ble.n	1000f60e <sulp+0x36>
1000f5fa:	051b      	lsls	r3, r3, #20
1000f5fc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
1000f600:	2400      	movs	r4, #0
1000f602:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
1000f606:	4622      	mov	r2, r4
1000f608:	462b      	mov	r3, r5
1000f60a:	f7f0 ff3d 	bl	10000488 <__aeabi_dmul>
1000f60e:	ec41 0b10 	vmov	d0, r0, r1
1000f612:	bd70      	pop	{r4, r5, r6, pc}
1000f614:	0000      	movs	r0, r0
	...

1000f618 <_strtod_l>:
1000f618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000f61c:	b09f      	sub	sp, #124	@ 0x7c
1000f61e:	460c      	mov	r4, r1
1000f620:	9217      	str	r2, [sp, #92]	@ 0x5c
1000f622:	2200      	movs	r2, #0
1000f624:	921a      	str	r2, [sp, #104]	@ 0x68
1000f626:	9005      	str	r0, [sp, #20]
1000f628:	f04f 0a00 	mov.w	sl, #0
1000f62c:	f04f 0b00 	mov.w	fp, #0
1000f630:	460a      	mov	r2, r1
1000f632:	9219      	str	r2, [sp, #100]	@ 0x64
1000f634:	7811      	ldrb	r1, [r2, #0]
1000f636:	292b      	cmp	r1, #43	@ 0x2b
1000f638:	d04a      	beq.n	1000f6d0 <_strtod_l+0xb8>
1000f63a:	d838      	bhi.n	1000f6ae <_strtod_l+0x96>
1000f63c:	290d      	cmp	r1, #13
1000f63e:	d832      	bhi.n	1000f6a6 <_strtod_l+0x8e>
1000f640:	2908      	cmp	r1, #8
1000f642:	d832      	bhi.n	1000f6aa <_strtod_l+0x92>
1000f644:	2900      	cmp	r1, #0
1000f646:	d03b      	beq.n	1000f6c0 <_strtod_l+0xa8>
1000f648:	2200      	movs	r2, #0
1000f64a:	920e      	str	r2, [sp, #56]	@ 0x38
1000f64c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
1000f64e:	782a      	ldrb	r2, [r5, #0]
1000f650:	2a30      	cmp	r2, #48	@ 0x30
1000f652:	f040 80b2 	bne.w	1000f7ba <_strtod_l+0x1a2>
1000f656:	786a      	ldrb	r2, [r5, #1]
1000f658:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
1000f65c:	2a58      	cmp	r2, #88	@ 0x58
1000f65e:	d16e      	bne.n	1000f73e <_strtod_l+0x126>
1000f660:	9302      	str	r3, [sp, #8]
1000f662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1000f664:	9301      	str	r3, [sp, #4]
1000f666:	ab1a      	add	r3, sp, #104	@ 0x68
1000f668:	9300      	str	r3, [sp, #0]
1000f66a:	4a8f      	ldr	r2, [pc, #572]	@ (1000f8a8 <_strtod_l+0x290>)
1000f66c:	9805      	ldr	r0, [sp, #20]
1000f66e:	ab1b      	add	r3, sp, #108	@ 0x6c
1000f670:	a919      	add	r1, sp, #100	@ 0x64
1000f672:	f001 fad9 	bl	10010c28 <__gethex>
1000f676:	f010 060f 	ands.w	r6, r0, #15
1000f67a:	4604      	mov	r4, r0
1000f67c:	d005      	beq.n	1000f68a <_strtod_l+0x72>
1000f67e:	2e06      	cmp	r6, #6
1000f680:	d128      	bne.n	1000f6d4 <_strtod_l+0xbc>
1000f682:	3501      	adds	r5, #1
1000f684:	2300      	movs	r3, #0
1000f686:	9519      	str	r5, [sp, #100]	@ 0x64
1000f688:	930e      	str	r3, [sp, #56]	@ 0x38
1000f68a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1000f68c:	2b00      	cmp	r3, #0
1000f68e:	f040 858e 	bne.w	100101ae <_strtod_l+0xb96>
1000f692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1000f694:	b1cb      	cbz	r3, 1000f6ca <_strtod_l+0xb2>
1000f696:	4652      	mov	r2, sl
1000f698:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
1000f69c:	ec43 2b10 	vmov	d0, r2, r3
1000f6a0:	b01f      	add	sp, #124	@ 0x7c
1000f6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000f6a6:	2920      	cmp	r1, #32
1000f6a8:	d1ce      	bne.n	1000f648 <_strtod_l+0x30>
1000f6aa:	3201      	adds	r2, #1
1000f6ac:	e7c1      	b.n	1000f632 <_strtod_l+0x1a>
1000f6ae:	292d      	cmp	r1, #45	@ 0x2d
1000f6b0:	d1ca      	bne.n	1000f648 <_strtod_l+0x30>
1000f6b2:	2101      	movs	r1, #1
1000f6b4:	910e      	str	r1, [sp, #56]	@ 0x38
1000f6b6:	1c51      	adds	r1, r2, #1
1000f6b8:	9119      	str	r1, [sp, #100]	@ 0x64
1000f6ba:	7852      	ldrb	r2, [r2, #1]
1000f6bc:	2a00      	cmp	r2, #0
1000f6be:	d1c5      	bne.n	1000f64c <_strtod_l+0x34>
1000f6c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1000f6c2:	9419      	str	r4, [sp, #100]	@ 0x64
1000f6c4:	2b00      	cmp	r3, #0
1000f6c6:	f040 8570 	bne.w	100101aa <_strtod_l+0xb92>
1000f6ca:	4652      	mov	r2, sl
1000f6cc:	465b      	mov	r3, fp
1000f6ce:	e7e5      	b.n	1000f69c <_strtod_l+0x84>
1000f6d0:	2100      	movs	r1, #0
1000f6d2:	e7ef      	b.n	1000f6b4 <_strtod_l+0x9c>
1000f6d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1000f6d6:	b13a      	cbz	r2, 1000f6e8 <_strtod_l+0xd0>
1000f6d8:	2135      	movs	r1, #53	@ 0x35
1000f6da:	a81c      	add	r0, sp, #112	@ 0x70
1000f6dc:	f7ff ff38 	bl	1000f550 <__copybits>
1000f6e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
1000f6e2:	9805      	ldr	r0, [sp, #20]
1000f6e4:	f7ff fb0e 	bl	1000ed04 <_Bfree>
1000f6e8:	3e01      	subs	r6, #1
1000f6ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
1000f6ec:	2e04      	cmp	r6, #4
1000f6ee:	d806      	bhi.n	1000f6fe <_strtod_l+0xe6>
1000f6f0:	e8df f006 	tbb	[pc, r6]
1000f6f4:	201d0314 	.word	0x201d0314
1000f6f8:	14          	.byte	0x14
1000f6f9:	00          	.byte	0x00
1000f6fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
1000f6fe:	05e1      	lsls	r1, r4, #23
1000f700:	bf48      	it	mi
1000f702:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
1000f706:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
1000f70a:	0d1b      	lsrs	r3, r3, #20
1000f70c:	051b      	lsls	r3, r3, #20
1000f70e:	2b00      	cmp	r3, #0
1000f710:	d1bb      	bne.n	1000f68a <_strtod_l+0x72>
1000f712:	f7fe fbcb 	bl	1000deac <__errno>
1000f716:	2322      	movs	r3, #34	@ 0x22
1000f718:	6003      	str	r3, [r0, #0]
1000f71a:	e7b6      	b.n	1000f68a <_strtod_l+0x72>
1000f71c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
1000f720:	f202 4233 	addw	r2, r2, #1075	@ 0x433
1000f724:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
1000f728:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
1000f72c:	e7e7      	b.n	1000f6fe <_strtod_l+0xe6>
1000f72e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 1000f8b0 <_strtod_l+0x298>
1000f732:	e7e4      	b.n	1000f6fe <_strtod_l+0xe6>
1000f734:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
1000f738:	f04f 3aff 	mov.w	sl, #4294967295
1000f73c:	e7df      	b.n	1000f6fe <_strtod_l+0xe6>
1000f73e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1000f740:	1c5a      	adds	r2, r3, #1
1000f742:	9219      	str	r2, [sp, #100]	@ 0x64
1000f744:	785b      	ldrb	r3, [r3, #1]
1000f746:	2b30      	cmp	r3, #48	@ 0x30
1000f748:	d0f9      	beq.n	1000f73e <_strtod_l+0x126>
1000f74a:	2b00      	cmp	r3, #0
1000f74c:	d09d      	beq.n	1000f68a <_strtod_l+0x72>
1000f74e:	2301      	movs	r3, #1
1000f750:	2700      	movs	r7, #0
1000f752:	9308      	str	r3, [sp, #32]
1000f754:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1000f756:	930c      	str	r3, [sp, #48]	@ 0x30
1000f758:	970b      	str	r7, [sp, #44]	@ 0x2c
1000f75a:	46b9      	mov	r9, r7
1000f75c:	220a      	movs	r2, #10
1000f75e:	9819      	ldr	r0, [sp, #100]	@ 0x64
1000f760:	7805      	ldrb	r5, [r0, #0]
1000f762:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
1000f766:	b2d9      	uxtb	r1, r3
1000f768:	2909      	cmp	r1, #9
1000f76a:	d928      	bls.n	1000f7be <_strtod_l+0x1a6>
1000f76c:	494f      	ldr	r1, [pc, #316]	@ (1000f8ac <_strtod_l+0x294>)
1000f76e:	2201      	movs	r2, #1
1000f770:	f7fe fb1d 	bl	1000ddae <strncmp>
1000f774:	2800      	cmp	r0, #0
1000f776:	d032      	beq.n	1000f7de <_strtod_l+0x1c6>
1000f778:	2000      	movs	r0, #0
1000f77a:	462a      	mov	r2, r5
1000f77c:	900a      	str	r0, [sp, #40]	@ 0x28
1000f77e:	464d      	mov	r5, r9
1000f780:	4603      	mov	r3, r0
1000f782:	2a65      	cmp	r2, #101	@ 0x65
1000f784:	d001      	beq.n	1000f78a <_strtod_l+0x172>
1000f786:	2a45      	cmp	r2, #69	@ 0x45
1000f788:	d114      	bne.n	1000f7b4 <_strtod_l+0x19c>
1000f78a:	b91d      	cbnz	r5, 1000f794 <_strtod_l+0x17c>
1000f78c:	9a08      	ldr	r2, [sp, #32]
1000f78e:	4302      	orrs	r2, r0
1000f790:	d096      	beq.n	1000f6c0 <_strtod_l+0xa8>
1000f792:	2500      	movs	r5, #0
1000f794:	9c19      	ldr	r4, [sp, #100]	@ 0x64
1000f796:	1c62      	adds	r2, r4, #1
1000f798:	9219      	str	r2, [sp, #100]	@ 0x64
1000f79a:	7862      	ldrb	r2, [r4, #1]
1000f79c:	2a2b      	cmp	r2, #43	@ 0x2b
1000f79e:	d07a      	beq.n	1000f896 <_strtod_l+0x27e>
1000f7a0:	2a2d      	cmp	r2, #45	@ 0x2d
1000f7a2:	d07e      	beq.n	1000f8a2 <_strtod_l+0x28a>
1000f7a4:	f04f 0c00 	mov.w	ip, #0
1000f7a8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
1000f7ac:	2909      	cmp	r1, #9
1000f7ae:	f240 8085 	bls.w	1000f8bc <_strtod_l+0x2a4>
1000f7b2:	9419      	str	r4, [sp, #100]	@ 0x64
1000f7b4:	f04f 0800 	mov.w	r8, #0
1000f7b8:	e0a5      	b.n	1000f906 <_strtod_l+0x2ee>
1000f7ba:	2300      	movs	r3, #0
1000f7bc:	e7c8      	b.n	1000f750 <_strtod_l+0x138>
1000f7be:	f1b9 0f08 	cmp.w	r9, #8
1000f7c2:	bfd8      	it	le
1000f7c4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
1000f7c6:	f100 0001 	add.w	r0, r0, #1
1000f7ca:	bfda      	itte	le
1000f7cc:	fb02 3301 	mlale	r3, r2, r1, r3
1000f7d0:	930b      	strle	r3, [sp, #44]	@ 0x2c
1000f7d2:	fb02 3707 	mlagt	r7, r2, r7, r3
1000f7d6:	f109 0901 	add.w	r9, r9, #1
1000f7da:	9019      	str	r0, [sp, #100]	@ 0x64
1000f7dc:	e7bf      	b.n	1000f75e <_strtod_l+0x146>
1000f7de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1000f7e0:	1c5a      	adds	r2, r3, #1
1000f7e2:	9219      	str	r2, [sp, #100]	@ 0x64
1000f7e4:	785a      	ldrb	r2, [r3, #1]
1000f7e6:	f1b9 0f00 	cmp.w	r9, #0
1000f7ea:	d03b      	beq.n	1000f864 <_strtod_l+0x24c>
1000f7ec:	900a      	str	r0, [sp, #40]	@ 0x28
1000f7ee:	464d      	mov	r5, r9
1000f7f0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
1000f7f4:	2b09      	cmp	r3, #9
1000f7f6:	d912      	bls.n	1000f81e <_strtod_l+0x206>
1000f7f8:	2301      	movs	r3, #1
1000f7fa:	e7c2      	b.n	1000f782 <_strtod_l+0x16a>
1000f7fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1000f7fe:	1c5a      	adds	r2, r3, #1
1000f800:	9219      	str	r2, [sp, #100]	@ 0x64
1000f802:	785a      	ldrb	r2, [r3, #1]
1000f804:	3001      	adds	r0, #1
1000f806:	2a30      	cmp	r2, #48	@ 0x30
1000f808:	d0f8      	beq.n	1000f7fc <_strtod_l+0x1e4>
1000f80a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
1000f80e:	2b08      	cmp	r3, #8
1000f810:	f200 84d2 	bhi.w	100101b8 <_strtod_l+0xba0>
1000f814:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1000f816:	900a      	str	r0, [sp, #40]	@ 0x28
1000f818:	2000      	movs	r0, #0
1000f81a:	930c      	str	r3, [sp, #48]	@ 0x30
1000f81c:	4605      	mov	r5, r0
1000f81e:	3a30      	subs	r2, #48	@ 0x30
1000f820:	f100 0301 	add.w	r3, r0, #1
1000f824:	d018      	beq.n	1000f858 <_strtod_l+0x240>
1000f826:	990a      	ldr	r1, [sp, #40]	@ 0x28
1000f828:	4419      	add	r1, r3
1000f82a:	910a      	str	r1, [sp, #40]	@ 0x28
1000f82c:	462e      	mov	r6, r5
1000f82e:	f04f 0e0a 	mov.w	lr, #10
1000f832:	1c71      	adds	r1, r6, #1
1000f834:	eba1 0c05 	sub.w	ip, r1, r5
1000f838:	4563      	cmp	r3, ip
1000f83a:	dc15      	bgt.n	1000f868 <_strtod_l+0x250>
1000f83c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
1000f840:	182b      	adds	r3, r5, r0
1000f842:	2b08      	cmp	r3, #8
1000f844:	f105 0501 	add.w	r5, r5, #1
1000f848:	4405      	add	r5, r0
1000f84a:	dc1a      	bgt.n	1000f882 <_strtod_l+0x26a>
1000f84c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1000f84e:	230a      	movs	r3, #10
1000f850:	fb03 2301 	mla	r3, r3, r1, r2
1000f854:	930b      	str	r3, [sp, #44]	@ 0x2c
1000f856:	2300      	movs	r3, #0
1000f858:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1000f85a:	1c51      	adds	r1, r2, #1
1000f85c:	9119      	str	r1, [sp, #100]	@ 0x64
1000f85e:	7852      	ldrb	r2, [r2, #1]
1000f860:	4618      	mov	r0, r3
1000f862:	e7c5      	b.n	1000f7f0 <_strtod_l+0x1d8>
1000f864:	4648      	mov	r0, r9
1000f866:	e7ce      	b.n	1000f806 <_strtod_l+0x1ee>
1000f868:	2e08      	cmp	r6, #8
1000f86a:	dc05      	bgt.n	1000f878 <_strtod_l+0x260>
1000f86c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
1000f86e:	fb0e f606 	mul.w	r6, lr, r6
1000f872:	960b      	str	r6, [sp, #44]	@ 0x2c
1000f874:	460e      	mov	r6, r1
1000f876:	e7dc      	b.n	1000f832 <_strtod_l+0x21a>
1000f878:	2910      	cmp	r1, #16
1000f87a:	bfd8      	it	le
1000f87c:	fb0e f707 	mulle.w	r7, lr, r7
1000f880:	e7f8      	b.n	1000f874 <_strtod_l+0x25c>
1000f882:	2b0f      	cmp	r3, #15
1000f884:	bfdc      	itt	le
1000f886:	230a      	movle	r3, #10
1000f888:	fb03 2707 	mlale	r7, r3, r7, r2
1000f88c:	e7e3      	b.n	1000f856 <_strtod_l+0x23e>
1000f88e:	2300      	movs	r3, #0
1000f890:	930a      	str	r3, [sp, #40]	@ 0x28
1000f892:	2301      	movs	r3, #1
1000f894:	e77a      	b.n	1000f78c <_strtod_l+0x174>
1000f896:	f04f 0c00 	mov.w	ip, #0
1000f89a:	1ca2      	adds	r2, r4, #2
1000f89c:	9219      	str	r2, [sp, #100]	@ 0x64
1000f89e:	78a2      	ldrb	r2, [r4, #2]
1000f8a0:	e782      	b.n	1000f7a8 <_strtod_l+0x190>
1000f8a2:	f04f 0c01 	mov.w	ip, #1
1000f8a6:	e7f8      	b.n	1000f89a <_strtod_l+0x282>
1000f8a8:	10012504 	.word	0x10012504
1000f8ac:	10012374 	.word	0x10012374
1000f8b0:	7ff00000 	.word	0x7ff00000
1000f8b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1000f8b6:	1c51      	adds	r1, r2, #1
1000f8b8:	9119      	str	r1, [sp, #100]	@ 0x64
1000f8ba:	7852      	ldrb	r2, [r2, #1]
1000f8bc:	2a30      	cmp	r2, #48	@ 0x30
1000f8be:	d0f9      	beq.n	1000f8b4 <_strtod_l+0x29c>
1000f8c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
1000f8c4:	2908      	cmp	r1, #8
1000f8c6:	f63f af75 	bhi.w	1000f7b4 <_strtod_l+0x19c>
1000f8ca:	3a30      	subs	r2, #48	@ 0x30
1000f8cc:	9209      	str	r2, [sp, #36]	@ 0x24
1000f8ce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1000f8d0:	920f      	str	r2, [sp, #60]	@ 0x3c
1000f8d2:	f04f 080a 	mov.w	r8, #10
1000f8d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1000f8d8:	1c56      	adds	r6, r2, #1
1000f8da:	9619      	str	r6, [sp, #100]	@ 0x64
1000f8dc:	7852      	ldrb	r2, [r2, #1]
1000f8de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
1000f8e2:	f1be 0f09 	cmp.w	lr, #9
1000f8e6:	d939      	bls.n	1000f95c <_strtod_l+0x344>
1000f8e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1000f8ea:	1a76      	subs	r6, r6, r1
1000f8ec:	2e08      	cmp	r6, #8
1000f8ee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
1000f8f2:	dc03      	bgt.n	1000f8fc <_strtod_l+0x2e4>
1000f8f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
1000f8f6:	4588      	cmp	r8, r1
1000f8f8:	bfa8      	it	ge
1000f8fa:	4688      	movge	r8, r1
1000f8fc:	f1bc 0f00 	cmp.w	ip, #0
1000f900:	d001      	beq.n	1000f906 <_strtod_l+0x2ee>
1000f902:	f1c8 0800 	rsb	r8, r8, #0
1000f906:	2d00      	cmp	r5, #0
1000f908:	d14e      	bne.n	1000f9a8 <_strtod_l+0x390>
1000f90a:	9908      	ldr	r1, [sp, #32]
1000f90c:	4308      	orrs	r0, r1
1000f90e:	f47f aebc 	bne.w	1000f68a <_strtod_l+0x72>
1000f912:	2b00      	cmp	r3, #0
1000f914:	f47f aed4 	bne.w	1000f6c0 <_strtod_l+0xa8>
1000f918:	2a69      	cmp	r2, #105	@ 0x69
1000f91a:	d028      	beq.n	1000f96e <_strtod_l+0x356>
1000f91c:	dc25      	bgt.n	1000f96a <_strtod_l+0x352>
1000f91e:	2a49      	cmp	r2, #73	@ 0x49
1000f920:	d025      	beq.n	1000f96e <_strtod_l+0x356>
1000f922:	2a4e      	cmp	r2, #78	@ 0x4e
1000f924:	f47f aecc 	bne.w	1000f6c0 <_strtod_l+0xa8>
1000f928:	499a      	ldr	r1, [pc, #616]	@ (1000fb94 <_strtod_l+0x57c>)
1000f92a:	a819      	add	r0, sp, #100	@ 0x64
1000f92c:	f001 fb9e 	bl	1001106c <__match>
1000f930:	2800      	cmp	r0, #0
1000f932:	f43f aec5 	beq.w	1000f6c0 <_strtod_l+0xa8>
1000f936:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1000f938:	781b      	ldrb	r3, [r3, #0]
1000f93a:	2b28      	cmp	r3, #40	@ 0x28
1000f93c:	d12e      	bne.n	1000f99c <_strtod_l+0x384>
1000f93e:	4996      	ldr	r1, [pc, #600]	@ (1000fb98 <_strtod_l+0x580>)
1000f940:	aa1c      	add	r2, sp, #112	@ 0x70
1000f942:	a819      	add	r0, sp, #100	@ 0x64
1000f944:	f001 fba6 	bl	10011094 <__hexnan>
1000f948:	2805      	cmp	r0, #5
1000f94a:	d127      	bne.n	1000f99c <_strtod_l+0x384>
1000f94c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1000f94e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
1000f952:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
1000f956:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
1000f95a:	e696      	b.n	1000f68a <_strtod_l+0x72>
1000f95c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1000f95e:	fb08 2101 	mla	r1, r8, r1, r2
1000f962:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
1000f966:	9209      	str	r2, [sp, #36]	@ 0x24
1000f968:	e7b5      	b.n	1000f8d6 <_strtod_l+0x2be>
1000f96a:	2a6e      	cmp	r2, #110	@ 0x6e
1000f96c:	e7da      	b.n	1000f924 <_strtod_l+0x30c>
1000f96e:	498b      	ldr	r1, [pc, #556]	@ (1000fb9c <_strtod_l+0x584>)
1000f970:	a819      	add	r0, sp, #100	@ 0x64
1000f972:	f001 fb7b 	bl	1001106c <__match>
1000f976:	2800      	cmp	r0, #0
1000f978:	f43f aea2 	beq.w	1000f6c0 <_strtod_l+0xa8>
1000f97c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1000f97e:	4988      	ldr	r1, [pc, #544]	@ (1000fba0 <_strtod_l+0x588>)
1000f980:	3b01      	subs	r3, #1
1000f982:	a819      	add	r0, sp, #100	@ 0x64
1000f984:	9319      	str	r3, [sp, #100]	@ 0x64
1000f986:	f001 fb71 	bl	1001106c <__match>
1000f98a:	b910      	cbnz	r0, 1000f992 <_strtod_l+0x37a>
1000f98c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1000f98e:	3301      	adds	r3, #1
1000f990:	9319      	str	r3, [sp, #100]	@ 0x64
1000f992:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 1000fbb0 <_strtod_l+0x598>
1000f996:	f04f 0a00 	mov.w	sl, #0
1000f99a:	e676      	b.n	1000f68a <_strtod_l+0x72>
1000f99c:	4881      	ldr	r0, [pc, #516]	@ (1000fba4 <_strtod_l+0x58c>)
1000f99e:	f001 f8bf 	bl	10010b20 <nan>
1000f9a2:	ec5b ab10 	vmov	sl, fp, d0
1000f9a6:	e670      	b.n	1000f68a <_strtod_l+0x72>
1000f9a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000f9aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1000f9ac:	eba8 0303 	sub.w	r3, r8, r3
1000f9b0:	f1b9 0f00 	cmp.w	r9, #0
1000f9b4:	bf08      	it	eq
1000f9b6:	46a9      	moveq	r9, r5
1000f9b8:	2d10      	cmp	r5, #16
1000f9ba:	9309      	str	r3, [sp, #36]	@ 0x24
1000f9bc:	462c      	mov	r4, r5
1000f9be:	bfa8      	it	ge
1000f9c0:	2410      	movge	r4, #16
1000f9c2:	f7f0 fce7 	bl	10000394 <__aeabi_ui2d>
1000f9c6:	2d09      	cmp	r5, #9
1000f9c8:	4682      	mov	sl, r0
1000f9ca:	468b      	mov	fp, r1
1000f9cc:	dc13      	bgt.n	1000f9f6 <_strtod_l+0x3de>
1000f9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000f9d0:	2b00      	cmp	r3, #0
1000f9d2:	f43f ae5a 	beq.w	1000f68a <_strtod_l+0x72>
1000f9d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000f9d8:	dd78      	ble.n	1000facc <_strtod_l+0x4b4>
1000f9da:	2b16      	cmp	r3, #22
1000f9dc:	dc5f      	bgt.n	1000fa9e <_strtod_l+0x486>
1000f9de:	4972      	ldr	r1, [pc, #456]	@ (1000fba8 <_strtod_l+0x590>)
1000f9e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
1000f9e4:	e9d1 0100 	ldrd	r0, r1, [r1]
1000f9e8:	4652      	mov	r2, sl
1000f9ea:	465b      	mov	r3, fp
1000f9ec:	f7f0 fd4c 	bl	10000488 <__aeabi_dmul>
1000f9f0:	4682      	mov	sl, r0
1000f9f2:	468b      	mov	fp, r1
1000f9f4:	e649      	b.n	1000f68a <_strtod_l+0x72>
1000f9f6:	4b6c      	ldr	r3, [pc, #432]	@ (1000fba8 <_strtod_l+0x590>)
1000f9f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
1000f9fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
1000fa00:	f7f0 fd42 	bl	10000488 <__aeabi_dmul>
1000fa04:	4682      	mov	sl, r0
1000fa06:	4638      	mov	r0, r7
1000fa08:	468b      	mov	fp, r1
1000fa0a:	f7f0 fcc3 	bl	10000394 <__aeabi_ui2d>
1000fa0e:	4602      	mov	r2, r0
1000fa10:	460b      	mov	r3, r1
1000fa12:	4650      	mov	r0, sl
1000fa14:	4659      	mov	r1, fp
1000fa16:	f7f0 fb81 	bl	1000011c <__adddf3>
1000fa1a:	2d0f      	cmp	r5, #15
1000fa1c:	4682      	mov	sl, r0
1000fa1e:	468b      	mov	fp, r1
1000fa20:	ddd5      	ble.n	1000f9ce <_strtod_l+0x3b6>
1000fa22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000fa24:	1b2c      	subs	r4, r5, r4
1000fa26:	441c      	add	r4, r3
1000fa28:	2c00      	cmp	r4, #0
1000fa2a:	f340 8093 	ble.w	1000fb54 <_strtod_l+0x53c>
1000fa2e:	f014 030f 	ands.w	r3, r4, #15
1000fa32:	d00a      	beq.n	1000fa4a <_strtod_l+0x432>
1000fa34:	495c      	ldr	r1, [pc, #368]	@ (1000fba8 <_strtod_l+0x590>)
1000fa36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
1000fa3a:	4652      	mov	r2, sl
1000fa3c:	465b      	mov	r3, fp
1000fa3e:	e9d1 0100 	ldrd	r0, r1, [r1]
1000fa42:	f7f0 fd21 	bl	10000488 <__aeabi_dmul>
1000fa46:	4682      	mov	sl, r0
1000fa48:	468b      	mov	fp, r1
1000fa4a:	f034 040f 	bics.w	r4, r4, #15
1000fa4e:	d073      	beq.n	1000fb38 <_strtod_l+0x520>
1000fa50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
1000fa54:	dd49      	ble.n	1000faea <_strtod_l+0x4d2>
1000fa56:	2400      	movs	r4, #0
1000fa58:	46a0      	mov	r8, r4
1000fa5a:	940b      	str	r4, [sp, #44]	@ 0x2c
1000fa5c:	46a1      	mov	r9, r4
1000fa5e:	9a05      	ldr	r2, [sp, #20]
1000fa60:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 1000fbb0 <_strtod_l+0x598>
1000fa64:	2322      	movs	r3, #34	@ 0x22
1000fa66:	6013      	str	r3, [r2, #0]
1000fa68:	f04f 0a00 	mov.w	sl, #0
1000fa6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1000fa6e:	2b00      	cmp	r3, #0
1000fa70:	f43f ae0b 	beq.w	1000f68a <_strtod_l+0x72>
1000fa74:	991a      	ldr	r1, [sp, #104]	@ 0x68
1000fa76:	9805      	ldr	r0, [sp, #20]
1000fa78:	f7ff f944 	bl	1000ed04 <_Bfree>
1000fa7c:	9805      	ldr	r0, [sp, #20]
1000fa7e:	4649      	mov	r1, r9
1000fa80:	f7ff f940 	bl	1000ed04 <_Bfree>
1000fa84:	9805      	ldr	r0, [sp, #20]
1000fa86:	4641      	mov	r1, r8
1000fa88:	f7ff f93c 	bl	1000ed04 <_Bfree>
1000fa8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1000fa8e:	9805      	ldr	r0, [sp, #20]
1000fa90:	f7ff f938 	bl	1000ed04 <_Bfree>
1000fa94:	9805      	ldr	r0, [sp, #20]
1000fa96:	4621      	mov	r1, r4
1000fa98:	f7ff f934 	bl	1000ed04 <_Bfree>
1000fa9c:	e5f5      	b.n	1000f68a <_strtod_l+0x72>
1000fa9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000faa0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
1000faa4:	4293      	cmp	r3, r2
1000faa6:	dbbc      	blt.n	1000fa22 <_strtod_l+0x40a>
1000faa8:	4c3f      	ldr	r4, [pc, #252]	@ (1000fba8 <_strtod_l+0x590>)
1000faaa:	f1c5 050f 	rsb	r5, r5, #15
1000faae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
1000fab2:	4652      	mov	r2, sl
1000fab4:	465b      	mov	r3, fp
1000fab6:	e9d1 0100 	ldrd	r0, r1, [r1]
1000faba:	f7f0 fce5 	bl	10000488 <__aeabi_dmul>
1000fabe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000fac0:	1b5d      	subs	r5, r3, r5
1000fac2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
1000fac6:	e9d4 2300 	ldrd	r2, r3, [r4]
1000faca:	e78f      	b.n	1000f9ec <_strtod_l+0x3d4>
1000facc:	3316      	adds	r3, #22
1000face:	dba8      	blt.n	1000fa22 <_strtod_l+0x40a>
1000fad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000fad2:	eba3 0808 	sub.w	r8, r3, r8
1000fad6:	4b34      	ldr	r3, [pc, #208]	@ (1000fba8 <_strtod_l+0x590>)
1000fad8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
1000fadc:	e9d8 2300 	ldrd	r2, r3, [r8]
1000fae0:	4650      	mov	r0, sl
1000fae2:	4659      	mov	r1, fp
1000fae4:	f7f0 fdfa 	bl	100006dc <__aeabi_ddiv>
1000fae8:	e782      	b.n	1000f9f0 <_strtod_l+0x3d8>
1000faea:	2300      	movs	r3, #0
1000faec:	4f2f      	ldr	r7, [pc, #188]	@ (1000fbac <_strtod_l+0x594>)
1000faee:	1124      	asrs	r4, r4, #4
1000faf0:	4650      	mov	r0, sl
1000faf2:	4659      	mov	r1, fp
1000faf4:	461e      	mov	r6, r3
1000faf6:	2c01      	cmp	r4, #1
1000faf8:	dc21      	bgt.n	1000fb3e <_strtod_l+0x526>
1000fafa:	b10b      	cbz	r3, 1000fb00 <_strtod_l+0x4e8>
1000fafc:	4682      	mov	sl, r0
1000fafe:	468b      	mov	fp, r1
1000fb00:	492a      	ldr	r1, [pc, #168]	@ (1000fbac <_strtod_l+0x594>)
1000fb02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
1000fb06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
1000fb0a:	4652      	mov	r2, sl
1000fb0c:	465b      	mov	r3, fp
1000fb0e:	e9d1 0100 	ldrd	r0, r1, [r1]
1000fb12:	f7f0 fcb9 	bl	10000488 <__aeabi_dmul>
1000fb16:	4b26      	ldr	r3, [pc, #152]	@ (1000fbb0 <_strtod_l+0x598>)
1000fb18:	460a      	mov	r2, r1
1000fb1a:	400b      	ands	r3, r1
1000fb1c:	4925      	ldr	r1, [pc, #148]	@ (1000fbb4 <_strtod_l+0x59c>)
1000fb1e:	428b      	cmp	r3, r1
1000fb20:	4682      	mov	sl, r0
1000fb22:	d898      	bhi.n	1000fa56 <_strtod_l+0x43e>
1000fb24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
1000fb28:	428b      	cmp	r3, r1
1000fb2a:	bf86      	itte	hi
1000fb2c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 1000fbb8 <_strtod_l+0x5a0>
1000fb30:	f04f 3aff 	movhi.w	sl, #4294967295
1000fb34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
1000fb38:	2300      	movs	r3, #0
1000fb3a:	9308      	str	r3, [sp, #32]
1000fb3c:	e076      	b.n	1000fc2c <_strtod_l+0x614>
1000fb3e:	07e2      	lsls	r2, r4, #31
1000fb40:	d504      	bpl.n	1000fb4c <_strtod_l+0x534>
1000fb42:	e9d7 2300 	ldrd	r2, r3, [r7]
1000fb46:	f7f0 fc9f 	bl	10000488 <__aeabi_dmul>
1000fb4a:	2301      	movs	r3, #1
1000fb4c:	3601      	adds	r6, #1
1000fb4e:	1064      	asrs	r4, r4, #1
1000fb50:	3708      	adds	r7, #8
1000fb52:	e7d0      	b.n	1000faf6 <_strtod_l+0x4de>
1000fb54:	d0f0      	beq.n	1000fb38 <_strtod_l+0x520>
1000fb56:	4264      	negs	r4, r4
1000fb58:	f014 020f 	ands.w	r2, r4, #15
1000fb5c:	d00a      	beq.n	1000fb74 <_strtod_l+0x55c>
1000fb5e:	4b12      	ldr	r3, [pc, #72]	@ (1000fba8 <_strtod_l+0x590>)
1000fb60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000fb64:	4650      	mov	r0, sl
1000fb66:	4659      	mov	r1, fp
1000fb68:	e9d3 2300 	ldrd	r2, r3, [r3]
1000fb6c:	f7f0 fdb6 	bl	100006dc <__aeabi_ddiv>
1000fb70:	4682      	mov	sl, r0
1000fb72:	468b      	mov	fp, r1
1000fb74:	1124      	asrs	r4, r4, #4
1000fb76:	d0df      	beq.n	1000fb38 <_strtod_l+0x520>
1000fb78:	2c1f      	cmp	r4, #31
1000fb7a:	dd1f      	ble.n	1000fbbc <_strtod_l+0x5a4>
1000fb7c:	2400      	movs	r4, #0
1000fb7e:	46a0      	mov	r8, r4
1000fb80:	940b      	str	r4, [sp, #44]	@ 0x2c
1000fb82:	46a1      	mov	r9, r4
1000fb84:	9a05      	ldr	r2, [sp, #20]
1000fb86:	2322      	movs	r3, #34	@ 0x22
1000fb88:	f04f 0a00 	mov.w	sl, #0
1000fb8c:	f04f 0b00 	mov.w	fp, #0
1000fb90:	6013      	str	r3, [r2, #0]
1000fb92:	e76b      	b.n	1000fa6c <_strtod_l+0x454>
1000fb94:	10012262 	.word	0x10012262
1000fb98:	100124f0 	.word	0x100124f0
1000fb9c:	1001225a 	.word	0x1001225a
1000fba0:	10012291 	.word	0x10012291
1000fba4:	10012254 	.word	0x10012254
1000fba8:	10012428 	.word	0x10012428
1000fbac:	10012400 	.word	0x10012400
1000fbb0:	7ff00000 	.word	0x7ff00000
1000fbb4:	7ca00000 	.word	0x7ca00000
1000fbb8:	7fefffff 	.word	0x7fefffff
1000fbbc:	f014 0310 	ands.w	r3, r4, #16
1000fbc0:	bf18      	it	ne
1000fbc2:	236a      	movne	r3, #106	@ 0x6a
1000fbc4:	4ea9      	ldr	r6, [pc, #676]	@ (1000fe6c <_strtod_l+0x854>)
1000fbc6:	9308      	str	r3, [sp, #32]
1000fbc8:	4650      	mov	r0, sl
1000fbca:	4659      	mov	r1, fp
1000fbcc:	2300      	movs	r3, #0
1000fbce:	07e7      	lsls	r7, r4, #31
1000fbd0:	d504      	bpl.n	1000fbdc <_strtod_l+0x5c4>
1000fbd2:	e9d6 2300 	ldrd	r2, r3, [r6]
1000fbd6:	f7f0 fc57 	bl	10000488 <__aeabi_dmul>
1000fbda:	2301      	movs	r3, #1
1000fbdc:	1064      	asrs	r4, r4, #1
1000fbde:	f106 0608 	add.w	r6, r6, #8
1000fbe2:	d1f4      	bne.n	1000fbce <_strtod_l+0x5b6>
1000fbe4:	b10b      	cbz	r3, 1000fbea <_strtod_l+0x5d2>
1000fbe6:	4682      	mov	sl, r0
1000fbe8:	468b      	mov	fp, r1
1000fbea:	9b08      	ldr	r3, [sp, #32]
1000fbec:	b1b3      	cbz	r3, 1000fc1c <_strtod_l+0x604>
1000fbee:	f3cb 520a 	ubfx	r2, fp, #20, #11
1000fbf2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
1000fbf6:	2b00      	cmp	r3, #0
1000fbf8:	4659      	mov	r1, fp
1000fbfa:	dd0f      	ble.n	1000fc1c <_strtod_l+0x604>
1000fbfc:	2b1f      	cmp	r3, #31
1000fbfe:	dd56      	ble.n	1000fcae <_strtod_l+0x696>
1000fc00:	2b34      	cmp	r3, #52	@ 0x34
1000fc02:	bfde      	ittt	le
1000fc04:	f04f 33ff 	movle.w	r3, #4294967295
1000fc08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
1000fc0c:	4093      	lslle	r3, r2
1000fc0e:	f04f 0a00 	mov.w	sl, #0
1000fc12:	bfcc      	ite	gt
1000fc14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
1000fc18:	ea03 0b01 	andle.w	fp, r3, r1
1000fc1c:	2200      	movs	r2, #0
1000fc1e:	2300      	movs	r3, #0
1000fc20:	4650      	mov	r0, sl
1000fc22:	4659      	mov	r1, fp
1000fc24:	f7f0 fe98 	bl	10000958 <__aeabi_dcmpeq>
1000fc28:	2800      	cmp	r0, #0
1000fc2a:	d1a7      	bne.n	1000fb7c <_strtod_l+0x564>
1000fc2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1000fc2e:	9300      	str	r3, [sp, #0]
1000fc30:	990c      	ldr	r1, [sp, #48]	@ 0x30
1000fc32:	9805      	ldr	r0, [sp, #20]
1000fc34:	462b      	mov	r3, r5
1000fc36:	464a      	mov	r2, r9
1000fc38:	f7ff f8cc 	bl	1000edd4 <__s2b>
1000fc3c:	900b      	str	r0, [sp, #44]	@ 0x2c
1000fc3e:	2800      	cmp	r0, #0
1000fc40:	f43f af09 	beq.w	1000fa56 <_strtod_l+0x43e>
1000fc44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1000fc46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000fc48:	2a00      	cmp	r2, #0
1000fc4a:	eba3 0308 	sub.w	r3, r3, r8
1000fc4e:	bfa8      	it	ge
1000fc50:	2300      	movge	r3, #0
1000fc52:	9312      	str	r3, [sp, #72]	@ 0x48
1000fc54:	2400      	movs	r4, #0
1000fc56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1000fc5a:	9316      	str	r3, [sp, #88]	@ 0x58
1000fc5c:	46a0      	mov	r8, r4
1000fc5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1000fc60:	9805      	ldr	r0, [sp, #20]
1000fc62:	6859      	ldr	r1, [r3, #4]
1000fc64:	f7ff f80e 	bl	1000ec84 <_Balloc>
1000fc68:	4681      	mov	r9, r0
1000fc6a:	2800      	cmp	r0, #0
1000fc6c:	f43f aef7 	beq.w	1000fa5e <_strtod_l+0x446>
1000fc70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1000fc72:	691a      	ldr	r2, [r3, #16]
1000fc74:	3202      	adds	r2, #2
1000fc76:	f103 010c 	add.w	r1, r3, #12
1000fc7a:	0092      	lsls	r2, r2, #2
1000fc7c:	300c      	adds	r0, #12
1000fc7e:	f7fe f942 	bl	1000df06 <memcpy>
1000fc82:	ec4b ab10 	vmov	d0, sl, fp
1000fc86:	9805      	ldr	r0, [sp, #20]
1000fc88:	aa1c      	add	r2, sp, #112	@ 0x70
1000fc8a:	a91b      	add	r1, sp, #108	@ 0x6c
1000fc8c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
1000fc90:	f7ff fbd4 	bl	1000f43c <__d2b>
1000fc94:	901a      	str	r0, [sp, #104]	@ 0x68
1000fc96:	2800      	cmp	r0, #0
1000fc98:	f43f aee1 	beq.w	1000fa5e <_strtod_l+0x446>
1000fc9c:	9805      	ldr	r0, [sp, #20]
1000fc9e:	2101      	movs	r1, #1
1000fca0:	f7ff f92e 	bl	1000ef00 <__i2b>
1000fca4:	4680      	mov	r8, r0
1000fca6:	b948      	cbnz	r0, 1000fcbc <_strtod_l+0x6a4>
1000fca8:	f04f 0800 	mov.w	r8, #0
1000fcac:	e6d7      	b.n	1000fa5e <_strtod_l+0x446>
1000fcae:	f04f 32ff 	mov.w	r2, #4294967295
1000fcb2:	fa02 f303 	lsl.w	r3, r2, r3
1000fcb6:	ea03 0a0a 	and.w	sl, r3, sl
1000fcba:	e7af      	b.n	1000fc1c <_strtod_l+0x604>
1000fcbc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
1000fcbe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
1000fcc0:	2d00      	cmp	r5, #0
1000fcc2:	bfab      	itete	ge
1000fcc4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
1000fcc6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
1000fcc8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
1000fcca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
1000fccc:	bfac      	ite	ge
1000fcce:	18ef      	addge	r7, r5, r3
1000fcd0:	1b5e      	sublt	r6, r3, r5
1000fcd2:	9b08      	ldr	r3, [sp, #32]
1000fcd4:	1aed      	subs	r5, r5, r3
1000fcd6:	4415      	add	r5, r2
1000fcd8:	4b65      	ldr	r3, [pc, #404]	@ (1000fe70 <_strtod_l+0x858>)
1000fcda:	3d01      	subs	r5, #1
1000fcdc:	429d      	cmp	r5, r3
1000fcde:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
1000fce2:	da50      	bge.n	1000fd86 <_strtod_l+0x76e>
1000fce4:	1b5b      	subs	r3, r3, r5
1000fce6:	2b1f      	cmp	r3, #31
1000fce8:	eba2 0203 	sub.w	r2, r2, r3
1000fcec:	f04f 0101 	mov.w	r1, #1
1000fcf0:	dc3d      	bgt.n	1000fd6e <_strtod_l+0x756>
1000fcf2:	fa01 f303 	lsl.w	r3, r1, r3
1000fcf6:	9313      	str	r3, [sp, #76]	@ 0x4c
1000fcf8:	2300      	movs	r3, #0
1000fcfa:	9310      	str	r3, [sp, #64]	@ 0x40
1000fcfc:	18bd      	adds	r5, r7, r2
1000fcfe:	9b08      	ldr	r3, [sp, #32]
1000fd00:	42af      	cmp	r7, r5
1000fd02:	4416      	add	r6, r2
1000fd04:	441e      	add	r6, r3
1000fd06:	463b      	mov	r3, r7
1000fd08:	bfa8      	it	ge
1000fd0a:	462b      	movge	r3, r5
1000fd0c:	42b3      	cmp	r3, r6
1000fd0e:	bfa8      	it	ge
1000fd10:	4633      	movge	r3, r6
1000fd12:	2b00      	cmp	r3, #0
1000fd14:	bfc2      	ittt	gt
1000fd16:	1aed      	subgt	r5, r5, r3
1000fd18:	1af6      	subgt	r6, r6, r3
1000fd1a:	1aff      	subgt	r7, r7, r3
1000fd1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
1000fd1e:	2b00      	cmp	r3, #0
1000fd20:	dd16      	ble.n	1000fd50 <_strtod_l+0x738>
1000fd22:	4641      	mov	r1, r8
1000fd24:	9805      	ldr	r0, [sp, #20]
1000fd26:	461a      	mov	r2, r3
1000fd28:	f7ff f9a2 	bl	1000f070 <__pow5mult>
1000fd2c:	4680      	mov	r8, r0
1000fd2e:	2800      	cmp	r0, #0
1000fd30:	d0ba      	beq.n	1000fca8 <_strtod_l+0x690>
1000fd32:	4601      	mov	r1, r0
1000fd34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
1000fd36:	9805      	ldr	r0, [sp, #20]
1000fd38:	f7ff f8f8 	bl	1000ef2c <__multiply>
1000fd3c:	900a      	str	r0, [sp, #40]	@ 0x28
1000fd3e:	2800      	cmp	r0, #0
1000fd40:	f43f ae8d 	beq.w	1000fa5e <_strtod_l+0x446>
1000fd44:	991a      	ldr	r1, [sp, #104]	@ 0x68
1000fd46:	9805      	ldr	r0, [sp, #20]
1000fd48:	f7fe ffdc 	bl	1000ed04 <_Bfree>
1000fd4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000fd4e:	931a      	str	r3, [sp, #104]	@ 0x68
1000fd50:	2d00      	cmp	r5, #0
1000fd52:	dc1d      	bgt.n	1000fd90 <_strtod_l+0x778>
1000fd54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1000fd56:	2b00      	cmp	r3, #0
1000fd58:	dd23      	ble.n	1000fda2 <_strtod_l+0x78a>
1000fd5a:	4649      	mov	r1, r9
1000fd5c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
1000fd5e:	9805      	ldr	r0, [sp, #20]
1000fd60:	f7ff f986 	bl	1000f070 <__pow5mult>
1000fd64:	4681      	mov	r9, r0
1000fd66:	b9e0      	cbnz	r0, 1000fda2 <_strtod_l+0x78a>
1000fd68:	f04f 0900 	mov.w	r9, #0
1000fd6c:	e677      	b.n	1000fa5e <_strtod_l+0x446>
1000fd6e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
1000fd72:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
1000fd76:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
1000fd7a:	35e2      	adds	r5, #226	@ 0xe2
1000fd7c:	fa01 f305 	lsl.w	r3, r1, r5
1000fd80:	9310      	str	r3, [sp, #64]	@ 0x40
1000fd82:	9113      	str	r1, [sp, #76]	@ 0x4c
1000fd84:	e7ba      	b.n	1000fcfc <_strtod_l+0x6e4>
1000fd86:	2300      	movs	r3, #0
1000fd88:	9310      	str	r3, [sp, #64]	@ 0x40
1000fd8a:	2301      	movs	r3, #1
1000fd8c:	9313      	str	r3, [sp, #76]	@ 0x4c
1000fd8e:	e7b5      	b.n	1000fcfc <_strtod_l+0x6e4>
1000fd90:	991a      	ldr	r1, [sp, #104]	@ 0x68
1000fd92:	9805      	ldr	r0, [sp, #20]
1000fd94:	462a      	mov	r2, r5
1000fd96:	f7ff f9c5 	bl	1000f124 <__lshift>
1000fd9a:	901a      	str	r0, [sp, #104]	@ 0x68
1000fd9c:	2800      	cmp	r0, #0
1000fd9e:	d1d9      	bne.n	1000fd54 <_strtod_l+0x73c>
1000fda0:	e65d      	b.n	1000fa5e <_strtod_l+0x446>
1000fda2:	2e00      	cmp	r6, #0
1000fda4:	dd07      	ble.n	1000fdb6 <_strtod_l+0x79e>
1000fda6:	4649      	mov	r1, r9
1000fda8:	9805      	ldr	r0, [sp, #20]
1000fdaa:	4632      	mov	r2, r6
1000fdac:	f7ff f9ba 	bl	1000f124 <__lshift>
1000fdb0:	4681      	mov	r9, r0
1000fdb2:	2800      	cmp	r0, #0
1000fdb4:	d0d8      	beq.n	1000fd68 <_strtod_l+0x750>
1000fdb6:	2f00      	cmp	r7, #0
1000fdb8:	dd08      	ble.n	1000fdcc <_strtod_l+0x7b4>
1000fdba:	4641      	mov	r1, r8
1000fdbc:	9805      	ldr	r0, [sp, #20]
1000fdbe:	463a      	mov	r2, r7
1000fdc0:	f7ff f9b0 	bl	1000f124 <__lshift>
1000fdc4:	4680      	mov	r8, r0
1000fdc6:	2800      	cmp	r0, #0
1000fdc8:	f43f ae49 	beq.w	1000fa5e <_strtod_l+0x446>
1000fdcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
1000fdce:	9805      	ldr	r0, [sp, #20]
1000fdd0:	464a      	mov	r2, r9
1000fdd2:	f7ff fa2f 	bl	1000f234 <__mdiff>
1000fdd6:	4604      	mov	r4, r0
1000fdd8:	2800      	cmp	r0, #0
1000fdda:	f43f ae40 	beq.w	1000fa5e <_strtod_l+0x446>
1000fdde:	68c3      	ldr	r3, [r0, #12]
1000fde0:	930f      	str	r3, [sp, #60]	@ 0x3c
1000fde2:	2300      	movs	r3, #0
1000fde4:	60c3      	str	r3, [r0, #12]
1000fde6:	4641      	mov	r1, r8
1000fde8:	f7ff fa08 	bl	1000f1fc <__mcmp>
1000fdec:	2800      	cmp	r0, #0
1000fdee:	da45      	bge.n	1000fe7c <_strtod_l+0x864>
1000fdf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1000fdf2:	ea53 030a 	orrs.w	r3, r3, sl
1000fdf6:	d16b      	bne.n	1000fed0 <_strtod_l+0x8b8>
1000fdf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
1000fdfc:	2b00      	cmp	r3, #0
1000fdfe:	d167      	bne.n	1000fed0 <_strtod_l+0x8b8>
1000fe00:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
1000fe04:	0d1b      	lsrs	r3, r3, #20
1000fe06:	051b      	lsls	r3, r3, #20
1000fe08:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
1000fe0c:	d960      	bls.n	1000fed0 <_strtod_l+0x8b8>
1000fe0e:	6963      	ldr	r3, [r4, #20]
1000fe10:	b913      	cbnz	r3, 1000fe18 <_strtod_l+0x800>
1000fe12:	6923      	ldr	r3, [r4, #16]
1000fe14:	2b01      	cmp	r3, #1
1000fe16:	dd5b      	ble.n	1000fed0 <_strtod_l+0x8b8>
1000fe18:	4621      	mov	r1, r4
1000fe1a:	2201      	movs	r2, #1
1000fe1c:	9805      	ldr	r0, [sp, #20]
1000fe1e:	f7ff f981 	bl	1000f124 <__lshift>
1000fe22:	4641      	mov	r1, r8
1000fe24:	4604      	mov	r4, r0
1000fe26:	f7ff f9e9 	bl	1000f1fc <__mcmp>
1000fe2a:	2800      	cmp	r0, #0
1000fe2c:	dd50      	ble.n	1000fed0 <_strtod_l+0x8b8>
1000fe2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
1000fe32:	9a08      	ldr	r2, [sp, #32]
1000fe34:	0d1b      	lsrs	r3, r3, #20
1000fe36:	051b      	lsls	r3, r3, #20
1000fe38:	2a00      	cmp	r2, #0
1000fe3a:	d06a      	beq.n	1000ff12 <_strtod_l+0x8fa>
1000fe3c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
1000fe40:	d867      	bhi.n	1000ff12 <_strtod_l+0x8fa>
1000fe42:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
1000fe46:	f67f ae9d 	bls.w	1000fb84 <_strtod_l+0x56c>
1000fe4a:	4b0a      	ldr	r3, [pc, #40]	@ (1000fe74 <_strtod_l+0x85c>)
1000fe4c:	4650      	mov	r0, sl
1000fe4e:	4659      	mov	r1, fp
1000fe50:	2200      	movs	r2, #0
1000fe52:	f7f0 fb19 	bl	10000488 <__aeabi_dmul>
1000fe56:	4b08      	ldr	r3, [pc, #32]	@ (1000fe78 <_strtod_l+0x860>)
1000fe58:	400b      	ands	r3, r1
1000fe5a:	4682      	mov	sl, r0
1000fe5c:	468b      	mov	fp, r1
1000fe5e:	2b00      	cmp	r3, #0
1000fe60:	f47f ae08 	bne.w	1000fa74 <_strtod_l+0x45c>
1000fe64:	9a05      	ldr	r2, [sp, #20]
1000fe66:	2322      	movs	r3, #34	@ 0x22
1000fe68:	6013      	str	r3, [r2, #0]
1000fe6a:	e603      	b.n	1000fa74 <_strtod_l+0x45c>
1000fe6c:	10012518 	.word	0x10012518
1000fe70:	fffffc02 	.word	0xfffffc02
1000fe74:	39500000 	.word	0x39500000
1000fe78:	7ff00000 	.word	0x7ff00000
1000fe7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
1000fe80:	d165      	bne.n	1000ff4e <_strtod_l+0x936>
1000fe82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1000fe84:	f3cb 0313 	ubfx	r3, fp, #0, #20
1000fe88:	b35a      	cbz	r2, 1000fee2 <_strtod_l+0x8ca>
1000fe8a:	4a9f      	ldr	r2, [pc, #636]	@ (10010108 <_strtod_l+0xaf0>)
1000fe8c:	4293      	cmp	r3, r2
1000fe8e:	d12b      	bne.n	1000fee8 <_strtod_l+0x8d0>
1000fe90:	9b08      	ldr	r3, [sp, #32]
1000fe92:	4651      	mov	r1, sl
1000fe94:	b303      	cbz	r3, 1000fed8 <_strtod_l+0x8c0>
1000fe96:	4b9d      	ldr	r3, [pc, #628]	@ (1001010c <_strtod_l+0xaf4>)
1000fe98:	465a      	mov	r2, fp
1000fe9a:	4013      	ands	r3, r2
1000fe9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
1000fea0:	f04f 32ff 	mov.w	r2, #4294967295
1000fea4:	d81b      	bhi.n	1000fede <_strtod_l+0x8c6>
1000fea6:	0d1b      	lsrs	r3, r3, #20
1000fea8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
1000feac:	fa02 f303 	lsl.w	r3, r2, r3
1000feb0:	4299      	cmp	r1, r3
1000feb2:	d119      	bne.n	1000fee8 <_strtod_l+0x8d0>
1000feb4:	4b96      	ldr	r3, [pc, #600]	@ (10010110 <_strtod_l+0xaf8>)
1000feb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1000feb8:	429a      	cmp	r2, r3
1000feba:	d102      	bne.n	1000fec2 <_strtod_l+0x8aa>
1000febc:	3101      	adds	r1, #1
1000febe:	f43f adce 	beq.w	1000fa5e <_strtod_l+0x446>
1000fec2:	4b92      	ldr	r3, [pc, #584]	@ (1001010c <_strtod_l+0xaf4>)
1000fec4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1000fec6:	401a      	ands	r2, r3
1000fec8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
1000fecc:	f04f 0a00 	mov.w	sl, #0
1000fed0:	9b08      	ldr	r3, [sp, #32]
1000fed2:	2b00      	cmp	r3, #0
1000fed4:	d1b9      	bne.n	1000fe4a <_strtod_l+0x832>
1000fed6:	e5cd      	b.n	1000fa74 <_strtod_l+0x45c>
1000fed8:	f04f 33ff 	mov.w	r3, #4294967295
1000fedc:	e7e8      	b.n	1000feb0 <_strtod_l+0x898>
1000fede:	4613      	mov	r3, r2
1000fee0:	e7e6      	b.n	1000feb0 <_strtod_l+0x898>
1000fee2:	ea53 030a 	orrs.w	r3, r3, sl
1000fee6:	d0a2      	beq.n	1000fe2e <_strtod_l+0x816>
1000fee8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
1000feea:	b1db      	cbz	r3, 1000ff24 <_strtod_l+0x90c>
1000feec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1000feee:	4213      	tst	r3, r2
1000fef0:	d0ee      	beq.n	1000fed0 <_strtod_l+0x8b8>
1000fef2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1000fef4:	9a08      	ldr	r2, [sp, #32]
1000fef6:	4650      	mov	r0, sl
1000fef8:	4659      	mov	r1, fp
1000fefa:	b1bb      	cbz	r3, 1000ff2c <_strtod_l+0x914>
1000fefc:	f7ff fb6c 	bl	1000f5d8 <sulp>
1000ff00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
1000ff04:	ec53 2b10 	vmov	r2, r3, d0
1000ff08:	f7f0 f908 	bl	1000011c <__adddf3>
1000ff0c:	4682      	mov	sl, r0
1000ff0e:	468b      	mov	fp, r1
1000ff10:	e7de      	b.n	1000fed0 <_strtod_l+0x8b8>
1000ff12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
1000ff16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
1000ff1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
1000ff1e:	f04f 3aff 	mov.w	sl, #4294967295
1000ff22:	e7d5      	b.n	1000fed0 <_strtod_l+0x8b8>
1000ff24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
1000ff26:	ea13 0f0a 	tst.w	r3, sl
1000ff2a:	e7e1      	b.n	1000fef0 <_strtod_l+0x8d8>
1000ff2c:	f7ff fb54 	bl	1000f5d8 <sulp>
1000ff30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
1000ff34:	ec53 2b10 	vmov	r2, r3, d0
1000ff38:	f7f0 f8ee 	bl	10000118 <__aeabi_dsub>
1000ff3c:	2200      	movs	r2, #0
1000ff3e:	2300      	movs	r3, #0
1000ff40:	4682      	mov	sl, r0
1000ff42:	468b      	mov	fp, r1
1000ff44:	f7f0 fd08 	bl	10000958 <__aeabi_dcmpeq>
1000ff48:	2800      	cmp	r0, #0
1000ff4a:	d0c1      	beq.n	1000fed0 <_strtod_l+0x8b8>
1000ff4c:	e61a      	b.n	1000fb84 <_strtod_l+0x56c>
1000ff4e:	4641      	mov	r1, r8
1000ff50:	4620      	mov	r0, r4
1000ff52:	f7ff facb 	bl	1000f4ec <__ratio>
1000ff56:	ec57 6b10 	vmov	r6, r7, d0
1000ff5a:	2200      	movs	r2, #0
1000ff5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
1000ff60:	4630      	mov	r0, r6
1000ff62:	4639      	mov	r1, r7
1000ff64:	f7f0 fd0c 	bl	10000980 <__aeabi_dcmple>
1000ff68:	2800      	cmp	r0, #0
1000ff6a:	d06f      	beq.n	1001004c <_strtod_l+0xa34>
1000ff6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1000ff6e:	2b00      	cmp	r3, #0
1000ff70:	d17a      	bne.n	10010068 <_strtod_l+0xa50>
1000ff72:	f1ba 0f00 	cmp.w	sl, #0
1000ff76:	d158      	bne.n	1001002a <_strtod_l+0xa12>
1000ff78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000ff7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
1000ff7e:	2b00      	cmp	r3, #0
1000ff80:	d15a      	bne.n	10010038 <_strtod_l+0xa20>
1000ff82:	4b64      	ldr	r3, [pc, #400]	@ (10010114 <_strtod_l+0xafc>)
1000ff84:	2200      	movs	r2, #0
1000ff86:	4630      	mov	r0, r6
1000ff88:	4639      	mov	r1, r7
1000ff8a:	f7f0 fcef 	bl	1000096c <__aeabi_dcmplt>
1000ff8e:	2800      	cmp	r0, #0
1000ff90:	d159      	bne.n	10010046 <_strtod_l+0xa2e>
1000ff92:	4630      	mov	r0, r6
1000ff94:	4639      	mov	r1, r7
1000ff96:	4b60      	ldr	r3, [pc, #384]	@ (10010118 <_strtod_l+0xb00>)
1000ff98:	2200      	movs	r2, #0
1000ff9a:	f7f0 fa75 	bl	10000488 <__aeabi_dmul>
1000ff9e:	4606      	mov	r6, r0
1000ffa0:	460f      	mov	r7, r1
1000ffa2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
1000ffa6:	9606      	str	r6, [sp, #24]
1000ffa8:	9307      	str	r3, [sp, #28]
1000ffaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1000ffae:	4d57      	ldr	r5, [pc, #348]	@ (1001010c <_strtod_l+0xaf4>)
1000ffb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
1000ffb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000ffb6:	401d      	ands	r5, r3
1000ffb8:	4b58      	ldr	r3, [pc, #352]	@ (1001011c <_strtod_l+0xb04>)
1000ffba:	429d      	cmp	r5, r3
1000ffbc:	f040 80b2 	bne.w	10010124 <_strtod_l+0xb0c>
1000ffc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1000ffc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
1000ffc6:	ec4b ab10 	vmov	d0, sl, fp
1000ffca:	f7ff f9c7 	bl	1000f35c <__ulp>
1000ffce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1000ffd2:	ec51 0b10 	vmov	r0, r1, d0
1000ffd6:	f7f0 fa57 	bl	10000488 <__aeabi_dmul>
1000ffda:	4652      	mov	r2, sl
1000ffdc:	465b      	mov	r3, fp
1000ffde:	f7f0 f89d 	bl	1000011c <__adddf3>
1000ffe2:	460b      	mov	r3, r1
1000ffe4:	4949      	ldr	r1, [pc, #292]	@ (1001010c <_strtod_l+0xaf4>)
1000ffe6:	4a4e      	ldr	r2, [pc, #312]	@ (10010120 <_strtod_l+0xb08>)
1000ffe8:	4019      	ands	r1, r3
1000ffea:	4291      	cmp	r1, r2
1000ffec:	4682      	mov	sl, r0
1000ffee:	d942      	bls.n	10010076 <_strtod_l+0xa5e>
1000fff0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1000fff2:	4b47      	ldr	r3, [pc, #284]	@ (10010110 <_strtod_l+0xaf8>)
1000fff4:	429a      	cmp	r2, r3
1000fff6:	d103      	bne.n	10010000 <_strtod_l+0x9e8>
1000fff8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1000fffa:	3301      	adds	r3, #1
1000fffc:	f43f ad2f 	beq.w	1000fa5e <_strtod_l+0x446>
10010000:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 10010110 <_strtod_l+0xaf8>
10010004:	f04f 3aff 	mov.w	sl, #4294967295
10010008:	991a      	ldr	r1, [sp, #104]	@ 0x68
1001000a:	9805      	ldr	r0, [sp, #20]
1001000c:	f7fe fe7a 	bl	1000ed04 <_Bfree>
10010010:	9805      	ldr	r0, [sp, #20]
10010012:	4649      	mov	r1, r9
10010014:	f7fe fe76 	bl	1000ed04 <_Bfree>
10010018:	9805      	ldr	r0, [sp, #20]
1001001a:	4641      	mov	r1, r8
1001001c:	f7fe fe72 	bl	1000ed04 <_Bfree>
10010020:	9805      	ldr	r0, [sp, #20]
10010022:	4621      	mov	r1, r4
10010024:	f7fe fe6e 	bl	1000ed04 <_Bfree>
10010028:	e619      	b.n	1000fc5e <_strtod_l+0x646>
1001002a:	f1ba 0f01 	cmp.w	sl, #1
1001002e:	d103      	bne.n	10010038 <_strtod_l+0xa20>
10010030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
10010032:	2b00      	cmp	r3, #0
10010034:	f43f ada6 	beq.w	1000fb84 <_strtod_l+0x56c>
10010038:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 100100e8 <_strtod_l+0xad0>
1001003c:	4f35      	ldr	r7, [pc, #212]	@ (10010114 <_strtod_l+0xafc>)
1001003e:	ed8d 7b06 	vstr	d7, [sp, #24]
10010042:	2600      	movs	r6, #0
10010044:	e7b1      	b.n	1000ffaa <_strtod_l+0x992>
10010046:	4f34      	ldr	r7, [pc, #208]	@ (10010118 <_strtod_l+0xb00>)
10010048:	2600      	movs	r6, #0
1001004a:	e7aa      	b.n	1000ffa2 <_strtod_l+0x98a>
1001004c:	4b32      	ldr	r3, [pc, #200]	@ (10010118 <_strtod_l+0xb00>)
1001004e:	4630      	mov	r0, r6
10010050:	4639      	mov	r1, r7
10010052:	2200      	movs	r2, #0
10010054:	f7f0 fa18 	bl	10000488 <__aeabi_dmul>
10010058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1001005a:	4606      	mov	r6, r0
1001005c:	460f      	mov	r7, r1
1001005e:	2b00      	cmp	r3, #0
10010060:	d09f      	beq.n	1000ffa2 <_strtod_l+0x98a>
10010062:	e9cd 6706 	strd	r6, r7, [sp, #24]
10010066:	e7a0      	b.n	1000ffaa <_strtod_l+0x992>
10010068:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 100100f0 <_strtod_l+0xad8>
1001006c:	ed8d 7b06 	vstr	d7, [sp, #24]
10010070:	ec57 6b17 	vmov	r6, r7, d7
10010074:	e799      	b.n	1000ffaa <_strtod_l+0x992>
10010076:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
1001007a:	9b08      	ldr	r3, [sp, #32]
1001007c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
10010080:	2b00      	cmp	r3, #0
10010082:	d1c1      	bne.n	10010008 <_strtod_l+0x9f0>
10010084:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
10010088:	0d1b      	lsrs	r3, r3, #20
1001008a:	051b      	lsls	r3, r3, #20
1001008c:	429d      	cmp	r5, r3
1001008e:	d1bb      	bne.n	10010008 <_strtod_l+0x9f0>
10010090:	4630      	mov	r0, r6
10010092:	4639      	mov	r1, r7
10010094:	f7f0 fd90 	bl	10000bb8 <__aeabi_d2lz>
10010098:	f7f0 f9c8 	bl	1000042c <__aeabi_l2d>
1001009c:	4602      	mov	r2, r0
1001009e:	460b      	mov	r3, r1
100100a0:	4630      	mov	r0, r6
100100a2:	4639      	mov	r1, r7
100100a4:	f7f0 f838 	bl	10000118 <__aeabi_dsub>
100100a8:	460b      	mov	r3, r1
100100aa:	4602      	mov	r2, r0
100100ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
100100b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
100100b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100100b6:	ea46 060a 	orr.w	r6, r6, sl
100100ba:	431e      	orrs	r6, r3
100100bc:	d06f      	beq.n	1001019e <_strtod_l+0xb86>
100100be:	a30e      	add	r3, pc, #56	@ (adr r3, 100100f8 <_strtod_l+0xae0>)
100100c0:	e9d3 2300 	ldrd	r2, r3, [r3]
100100c4:	f7f0 fc52 	bl	1000096c <__aeabi_dcmplt>
100100c8:	2800      	cmp	r0, #0
100100ca:	f47f acd3 	bne.w	1000fa74 <_strtod_l+0x45c>
100100ce:	a30c      	add	r3, pc, #48	@ (adr r3, 10010100 <_strtod_l+0xae8>)
100100d0:	e9d3 2300 	ldrd	r2, r3, [r3]
100100d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
100100d8:	f7f0 fc66 	bl	100009a8 <__aeabi_dcmpgt>
100100dc:	2800      	cmp	r0, #0
100100de:	d093      	beq.n	10010008 <_strtod_l+0x9f0>
100100e0:	e4c8      	b.n	1000fa74 <_strtod_l+0x45c>
100100e2:	bf00      	nop
100100e4:	f3af 8000 	nop.w
100100e8:	00000000 	.word	0x00000000
100100ec:	bff00000 	.word	0xbff00000
100100f0:	00000000 	.word	0x00000000
100100f4:	3ff00000 	.word	0x3ff00000
100100f8:	94a03595 	.word	0x94a03595
100100fc:	3fdfffff 	.word	0x3fdfffff
10010100:	35afe535 	.word	0x35afe535
10010104:	3fe00000 	.word	0x3fe00000
10010108:	000fffff 	.word	0x000fffff
1001010c:	7ff00000 	.word	0x7ff00000
10010110:	7fefffff 	.word	0x7fefffff
10010114:	3ff00000 	.word	0x3ff00000
10010118:	3fe00000 	.word	0x3fe00000
1001011c:	7fe00000 	.word	0x7fe00000
10010120:	7c9fffff 	.word	0x7c9fffff
10010124:	9b08      	ldr	r3, [sp, #32]
10010126:	b323      	cbz	r3, 10010172 <_strtod_l+0xb5a>
10010128:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
1001012c:	d821      	bhi.n	10010172 <_strtod_l+0xb5a>
1001012e:	a328      	add	r3, pc, #160	@ (adr r3, 100101d0 <_strtod_l+0xbb8>)
10010130:	e9d3 2300 	ldrd	r2, r3, [r3]
10010134:	4630      	mov	r0, r6
10010136:	4639      	mov	r1, r7
10010138:	f7f0 fc22 	bl	10000980 <__aeabi_dcmple>
1001013c:	b1a0      	cbz	r0, 10010168 <_strtod_l+0xb50>
1001013e:	4639      	mov	r1, r7
10010140:	4630      	mov	r0, r6
10010142:	f7f0 fc79 	bl	10000a38 <__aeabi_d2uiz>
10010146:	2801      	cmp	r0, #1
10010148:	bf38      	it	cc
1001014a:	2001      	movcc	r0, #1
1001014c:	f7f0 f922 	bl	10000394 <__aeabi_ui2d>
10010150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10010152:	4606      	mov	r6, r0
10010154:	460f      	mov	r7, r1
10010156:	b9fb      	cbnz	r3, 10010198 <_strtod_l+0xb80>
10010158:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
1001015c:	9014      	str	r0, [sp, #80]	@ 0x50
1001015e:	9315      	str	r3, [sp, #84]	@ 0x54
10010160:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
10010164:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
10010168:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1001016a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
1001016e:	1b5b      	subs	r3, r3, r5
10010170:	9311      	str	r3, [sp, #68]	@ 0x44
10010172:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
10010176:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
1001017a:	f7ff f8ef 	bl	1000f35c <__ulp>
1001017e:	4650      	mov	r0, sl
10010180:	ec53 2b10 	vmov	r2, r3, d0
10010184:	4659      	mov	r1, fp
10010186:	f7f0 f97f 	bl	10000488 <__aeabi_dmul>
1001018a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
1001018e:	f7ef ffc5 	bl	1000011c <__adddf3>
10010192:	4682      	mov	sl, r0
10010194:	468b      	mov	fp, r1
10010196:	e770      	b.n	1001007a <_strtod_l+0xa62>
10010198:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
1001019c:	e7e0      	b.n	10010160 <_strtod_l+0xb48>
1001019e:	a30e      	add	r3, pc, #56	@ (adr r3, 100101d8 <_strtod_l+0xbc0>)
100101a0:	e9d3 2300 	ldrd	r2, r3, [r3]
100101a4:	f7f0 fbe2 	bl	1000096c <__aeabi_dcmplt>
100101a8:	e798      	b.n	100100dc <_strtod_l+0xac4>
100101aa:	2300      	movs	r3, #0
100101ac:	930e      	str	r3, [sp, #56]	@ 0x38
100101ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
100101b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
100101b2:	6013      	str	r3, [r2, #0]
100101b4:	f7ff ba6d 	b.w	1000f692 <_strtod_l+0x7a>
100101b8:	2a65      	cmp	r2, #101	@ 0x65
100101ba:	f43f ab68 	beq.w	1000f88e <_strtod_l+0x276>
100101be:	2a45      	cmp	r2, #69	@ 0x45
100101c0:	f43f ab65 	beq.w	1000f88e <_strtod_l+0x276>
100101c4:	2301      	movs	r3, #1
100101c6:	f7ff bba0 	b.w	1000f90a <_strtod_l+0x2f2>
100101ca:	bf00      	nop
100101cc:	f3af 8000 	nop.w
100101d0:	ffc00000 	.word	0xffc00000
100101d4:	41dfffff 	.word	0x41dfffff
100101d8:	94a03595 	.word	0x94a03595
100101dc:	3fcfffff 	.word	0x3fcfffff

100101e0 <_strtod_r>:
100101e0:	4b01      	ldr	r3, [pc, #4]	@ (100101e8 <_strtod_r+0x8>)
100101e2:	f7ff ba19 	b.w	1000f618 <_strtod_l>
100101e6:	bf00      	nop
100101e8:	10020130 	.word	0x10020130

100101ec <_strtol_l.isra.0>:
100101ec:	2b24      	cmp	r3, #36	@ 0x24
100101ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
100101f2:	4686      	mov	lr, r0
100101f4:	4690      	mov	r8, r2
100101f6:	d801      	bhi.n	100101fc <_strtol_l.isra.0+0x10>
100101f8:	2b01      	cmp	r3, #1
100101fa:	d106      	bne.n	1001020a <_strtol_l.isra.0+0x1e>
100101fc:	f7fd fe56 	bl	1000deac <__errno>
10010200:	2316      	movs	r3, #22
10010202:	6003      	str	r3, [r0, #0]
10010204:	2000      	movs	r0, #0
10010206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1001020a:	4834      	ldr	r0, [pc, #208]	@ (100102dc <_strtol_l.isra.0+0xf0>)
1001020c:	460d      	mov	r5, r1
1001020e:	462a      	mov	r2, r5
10010210:	f815 4b01 	ldrb.w	r4, [r5], #1
10010214:	5d06      	ldrb	r6, [r0, r4]
10010216:	f016 0608 	ands.w	r6, r6, #8
1001021a:	d1f8      	bne.n	1001020e <_strtol_l.isra.0+0x22>
1001021c:	2c2d      	cmp	r4, #45	@ 0x2d
1001021e:	d110      	bne.n	10010242 <_strtol_l.isra.0+0x56>
10010220:	782c      	ldrb	r4, [r5, #0]
10010222:	2601      	movs	r6, #1
10010224:	1c95      	adds	r5, r2, #2
10010226:	f033 0210 	bics.w	r2, r3, #16
1001022a:	d115      	bne.n	10010258 <_strtol_l.isra.0+0x6c>
1001022c:	2c30      	cmp	r4, #48	@ 0x30
1001022e:	d10d      	bne.n	1001024c <_strtol_l.isra.0+0x60>
10010230:	782a      	ldrb	r2, [r5, #0]
10010232:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
10010236:	2a58      	cmp	r2, #88	@ 0x58
10010238:	d108      	bne.n	1001024c <_strtol_l.isra.0+0x60>
1001023a:	786c      	ldrb	r4, [r5, #1]
1001023c:	3502      	adds	r5, #2
1001023e:	2310      	movs	r3, #16
10010240:	e00a      	b.n	10010258 <_strtol_l.isra.0+0x6c>
10010242:	2c2b      	cmp	r4, #43	@ 0x2b
10010244:	bf04      	itt	eq
10010246:	782c      	ldrbeq	r4, [r5, #0]
10010248:	1c95      	addeq	r5, r2, #2
1001024a:	e7ec      	b.n	10010226 <_strtol_l.isra.0+0x3a>
1001024c:	2b00      	cmp	r3, #0
1001024e:	d1f6      	bne.n	1001023e <_strtol_l.isra.0+0x52>
10010250:	2c30      	cmp	r4, #48	@ 0x30
10010252:	bf14      	ite	ne
10010254:	230a      	movne	r3, #10
10010256:	2308      	moveq	r3, #8
10010258:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
1001025c:	f10c 3cff 	add.w	ip, ip, #4294967295
10010260:	2200      	movs	r2, #0
10010262:	fbbc f9f3 	udiv	r9, ip, r3
10010266:	4610      	mov	r0, r2
10010268:	fb03 ca19 	mls	sl, r3, r9, ip
1001026c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
10010270:	2f09      	cmp	r7, #9
10010272:	d80f      	bhi.n	10010294 <_strtol_l.isra.0+0xa8>
10010274:	463c      	mov	r4, r7
10010276:	42a3      	cmp	r3, r4
10010278:	dd1b      	ble.n	100102b2 <_strtol_l.isra.0+0xc6>
1001027a:	1c57      	adds	r7, r2, #1
1001027c:	d007      	beq.n	1001028e <_strtol_l.isra.0+0xa2>
1001027e:	4581      	cmp	r9, r0
10010280:	d314      	bcc.n	100102ac <_strtol_l.isra.0+0xc0>
10010282:	d101      	bne.n	10010288 <_strtol_l.isra.0+0x9c>
10010284:	45a2      	cmp	sl, r4
10010286:	db11      	blt.n	100102ac <_strtol_l.isra.0+0xc0>
10010288:	fb00 4003 	mla	r0, r0, r3, r4
1001028c:	2201      	movs	r2, #1
1001028e:	f815 4b01 	ldrb.w	r4, [r5], #1
10010292:	e7eb      	b.n	1001026c <_strtol_l.isra.0+0x80>
10010294:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
10010298:	2f19      	cmp	r7, #25
1001029a:	d801      	bhi.n	100102a0 <_strtol_l.isra.0+0xb4>
1001029c:	3c37      	subs	r4, #55	@ 0x37
1001029e:	e7ea      	b.n	10010276 <_strtol_l.isra.0+0x8a>
100102a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
100102a4:	2f19      	cmp	r7, #25
100102a6:	d804      	bhi.n	100102b2 <_strtol_l.isra.0+0xc6>
100102a8:	3c57      	subs	r4, #87	@ 0x57
100102aa:	e7e4      	b.n	10010276 <_strtol_l.isra.0+0x8a>
100102ac:	f04f 32ff 	mov.w	r2, #4294967295
100102b0:	e7ed      	b.n	1001028e <_strtol_l.isra.0+0xa2>
100102b2:	1c53      	adds	r3, r2, #1
100102b4:	d108      	bne.n	100102c8 <_strtol_l.isra.0+0xdc>
100102b6:	2322      	movs	r3, #34	@ 0x22
100102b8:	f8ce 3000 	str.w	r3, [lr]
100102bc:	4660      	mov	r0, ip
100102be:	f1b8 0f00 	cmp.w	r8, #0
100102c2:	d0a0      	beq.n	10010206 <_strtol_l.isra.0+0x1a>
100102c4:	1e69      	subs	r1, r5, #1
100102c6:	e006      	b.n	100102d6 <_strtol_l.isra.0+0xea>
100102c8:	b106      	cbz	r6, 100102cc <_strtol_l.isra.0+0xe0>
100102ca:	4240      	negs	r0, r0
100102cc:	f1b8 0f00 	cmp.w	r8, #0
100102d0:	d099      	beq.n	10010206 <_strtol_l.isra.0+0x1a>
100102d2:	2a00      	cmp	r2, #0
100102d4:	d1f6      	bne.n	100102c4 <_strtol_l.isra.0+0xd8>
100102d6:	f8c8 1000 	str.w	r1, [r8]
100102da:	e794      	b.n	10010206 <_strtol_l.isra.0+0x1a>
100102dc:	10012541 	.word	0x10012541

100102e0 <_strtol_r>:
100102e0:	f7ff bf84 	b.w	100101ec <_strtol_l.isra.0>

100102e4 <__ssputs_r>:
100102e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
100102e8:	688e      	ldr	r6, [r1, #8]
100102ea:	461f      	mov	r7, r3
100102ec:	42be      	cmp	r6, r7
100102ee:	680b      	ldr	r3, [r1, #0]
100102f0:	4682      	mov	sl, r0
100102f2:	460c      	mov	r4, r1
100102f4:	4690      	mov	r8, r2
100102f6:	d82d      	bhi.n	10010354 <__ssputs_r+0x70>
100102f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
100102fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
10010300:	d026      	beq.n	10010350 <__ssputs_r+0x6c>
10010302:	6965      	ldr	r5, [r4, #20]
10010304:	6909      	ldr	r1, [r1, #16]
10010306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1001030a:	eba3 0901 	sub.w	r9, r3, r1
1001030e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
10010312:	1c7b      	adds	r3, r7, #1
10010314:	444b      	add	r3, r9
10010316:	106d      	asrs	r5, r5, #1
10010318:	429d      	cmp	r5, r3
1001031a:	bf38      	it	cc
1001031c:	461d      	movcc	r5, r3
1001031e:	0553      	lsls	r3, r2, #21
10010320:	d527      	bpl.n	10010372 <__ssputs_r+0x8e>
10010322:	4629      	mov	r1, r5
10010324:	f7fc fcb0 	bl	1000cc88 <_malloc_r>
10010328:	4606      	mov	r6, r0
1001032a:	b360      	cbz	r0, 10010386 <__ssputs_r+0xa2>
1001032c:	6921      	ldr	r1, [r4, #16]
1001032e:	464a      	mov	r2, r9
10010330:	f7fd fde9 	bl	1000df06 <memcpy>
10010334:	89a3      	ldrh	r3, [r4, #12]
10010336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
1001033a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1001033e:	81a3      	strh	r3, [r4, #12]
10010340:	6126      	str	r6, [r4, #16]
10010342:	6165      	str	r5, [r4, #20]
10010344:	444e      	add	r6, r9
10010346:	eba5 0509 	sub.w	r5, r5, r9
1001034a:	6026      	str	r6, [r4, #0]
1001034c:	60a5      	str	r5, [r4, #8]
1001034e:	463e      	mov	r6, r7
10010350:	42be      	cmp	r6, r7
10010352:	d900      	bls.n	10010356 <__ssputs_r+0x72>
10010354:	463e      	mov	r6, r7
10010356:	6820      	ldr	r0, [r4, #0]
10010358:	4632      	mov	r2, r6
1001035a:	4641      	mov	r1, r8
1001035c:	f7fd fd05 	bl	1000dd6a <memmove>
10010360:	68a3      	ldr	r3, [r4, #8]
10010362:	1b9b      	subs	r3, r3, r6
10010364:	60a3      	str	r3, [r4, #8]
10010366:	6823      	ldr	r3, [r4, #0]
10010368:	4433      	add	r3, r6
1001036a:	6023      	str	r3, [r4, #0]
1001036c:	2000      	movs	r0, #0
1001036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10010372:	462a      	mov	r2, r5
10010374:	f000 ff3b 	bl	100111ee <_realloc_r>
10010378:	4606      	mov	r6, r0
1001037a:	2800      	cmp	r0, #0
1001037c:	d1e0      	bne.n	10010340 <__ssputs_r+0x5c>
1001037e:	6921      	ldr	r1, [r4, #16]
10010380:	4650      	mov	r0, sl
10010382:	f7fe fc35 	bl	1000ebf0 <_free_r>
10010386:	230c      	movs	r3, #12
10010388:	f8ca 3000 	str.w	r3, [sl]
1001038c:	89a3      	ldrh	r3, [r4, #12]
1001038e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10010392:	81a3      	strh	r3, [r4, #12]
10010394:	f04f 30ff 	mov.w	r0, #4294967295
10010398:	e7e9      	b.n	1001036e <__ssputs_r+0x8a>
	...

1001039c <_svfiprintf_r>:
1001039c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100103a0:	4698      	mov	r8, r3
100103a2:	898b      	ldrh	r3, [r1, #12]
100103a4:	061b      	lsls	r3, r3, #24
100103a6:	b09d      	sub	sp, #116	@ 0x74
100103a8:	4607      	mov	r7, r0
100103aa:	460d      	mov	r5, r1
100103ac:	4614      	mov	r4, r2
100103ae:	d510      	bpl.n	100103d2 <_svfiprintf_r+0x36>
100103b0:	690b      	ldr	r3, [r1, #16]
100103b2:	b973      	cbnz	r3, 100103d2 <_svfiprintf_r+0x36>
100103b4:	2140      	movs	r1, #64	@ 0x40
100103b6:	f7fc fc67 	bl	1000cc88 <_malloc_r>
100103ba:	6028      	str	r0, [r5, #0]
100103bc:	6128      	str	r0, [r5, #16]
100103be:	b930      	cbnz	r0, 100103ce <_svfiprintf_r+0x32>
100103c0:	230c      	movs	r3, #12
100103c2:	603b      	str	r3, [r7, #0]
100103c4:	f04f 30ff 	mov.w	r0, #4294967295
100103c8:	b01d      	add	sp, #116	@ 0x74
100103ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100103ce:	2340      	movs	r3, #64	@ 0x40
100103d0:	616b      	str	r3, [r5, #20]
100103d2:	2300      	movs	r3, #0
100103d4:	9309      	str	r3, [sp, #36]	@ 0x24
100103d6:	2320      	movs	r3, #32
100103d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
100103dc:	f8cd 800c 	str.w	r8, [sp, #12]
100103e0:	2330      	movs	r3, #48	@ 0x30
100103e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 10010580 <_svfiprintf_r+0x1e4>
100103e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
100103ea:	f04f 0901 	mov.w	r9, #1
100103ee:	4623      	mov	r3, r4
100103f0:	469a      	mov	sl, r3
100103f2:	f813 2b01 	ldrb.w	r2, [r3], #1
100103f6:	b10a      	cbz	r2, 100103fc <_svfiprintf_r+0x60>
100103f8:	2a25      	cmp	r2, #37	@ 0x25
100103fa:	d1f9      	bne.n	100103f0 <_svfiprintf_r+0x54>
100103fc:	ebba 0b04 	subs.w	fp, sl, r4
10010400:	d00b      	beq.n	1001041a <_svfiprintf_r+0x7e>
10010402:	465b      	mov	r3, fp
10010404:	4622      	mov	r2, r4
10010406:	4629      	mov	r1, r5
10010408:	4638      	mov	r0, r7
1001040a:	f7ff ff6b 	bl	100102e4 <__ssputs_r>
1001040e:	3001      	adds	r0, #1
10010410:	f000 80a7 	beq.w	10010562 <_svfiprintf_r+0x1c6>
10010414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10010416:	445a      	add	r2, fp
10010418:	9209      	str	r2, [sp, #36]	@ 0x24
1001041a:	f89a 3000 	ldrb.w	r3, [sl]
1001041e:	2b00      	cmp	r3, #0
10010420:	f000 809f 	beq.w	10010562 <_svfiprintf_r+0x1c6>
10010424:	2300      	movs	r3, #0
10010426:	f04f 32ff 	mov.w	r2, #4294967295
1001042a:	e9cd 2305 	strd	r2, r3, [sp, #20]
1001042e:	f10a 0a01 	add.w	sl, sl, #1
10010432:	9304      	str	r3, [sp, #16]
10010434:	9307      	str	r3, [sp, #28]
10010436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
1001043a:	931a      	str	r3, [sp, #104]	@ 0x68
1001043c:	4654      	mov	r4, sl
1001043e:	2205      	movs	r2, #5
10010440:	f814 1b01 	ldrb.w	r1, [r4], #1
10010444:	484e      	ldr	r0, [pc, #312]	@ (10010580 <_svfiprintf_r+0x1e4>)
10010446:	f7ef fe0b 	bl	10000060 <memchr>
1001044a:	9a04      	ldr	r2, [sp, #16]
1001044c:	b9d8      	cbnz	r0, 10010486 <_svfiprintf_r+0xea>
1001044e:	06d0      	lsls	r0, r2, #27
10010450:	bf44      	itt	mi
10010452:	2320      	movmi	r3, #32
10010454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10010458:	0711      	lsls	r1, r2, #28
1001045a:	bf44      	itt	mi
1001045c:	232b      	movmi	r3, #43	@ 0x2b
1001045e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
10010462:	f89a 3000 	ldrb.w	r3, [sl]
10010466:	2b2a      	cmp	r3, #42	@ 0x2a
10010468:	d015      	beq.n	10010496 <_svfiprintf_r+0xfa>
1001046a:	9a07      	ldr	r2, [sp, #28]
1001046c:	4654      	mov	r4, sl
1001046e:	2000      	movs	r0, #0
10010470:	f04f 0c0a 	mov.w	ip, #10
10010474:	4621      	mov	r1, r4
10010476:	f811 3b01 	ldrb.w	r3, [r1], #1
1001047a:	3b30      	subs	r3, #48	@ 0x30
1001047c:	2b09      	cmp	r3, #9
1001047e:	d94b      	bls.n	10010518 <_svfiprintf_r+0x17c>
10010480:	b1b0      	cbz	r0, 100104b0 <_svfiprintf_r+0x114>
10010482:	9207      	str	r2, [sp, #28]
10010484:	e014      	b.n	100104b0 <_svfiprintf_r+0x114>
10010486:	eba0 0308 	sub.w	r3, r0, r8
1001048a:	fa09 f303 	lsl.w	r3, r9, r3
1001048e:	4313      	orrs	r3, r2
10010490:	9304      	str	r3, [sp, #16]
10010492:	46a2      	mov	sl, r4
10010494:	e7d2      	b.n	1001043c <_svfiprintf_r+0xa0>
10010496:	9b03      	ldr	r3, [sp, #12]
10010498:	1d19      	adds	r1, r3, #4
1001049a:	681b      	ldr	r3, [r3, #0]
1001049c:	9103      	str	r1, [sp, #12]
1001049e:	2b00      	cmp	r3, #0
100104a0:	bfbb      	ittet	lt
100104a2:	425b      	neglt	r3, r3
100104a4:	f042 0202 	orrlt.w	r2, r2, #2
100104a8:	9307      	strge	r3, [sp, #28]
100104aa:	9307      	strlt	r3, [sp, #28]
100104ac:	bfb8      	it	lt
100104ae:	9204      	strlt	r2, [sp, #16]
100104b0:	7823      	ldrb	r3, [r4, #0]
100104b2:	2b2e      	cmp	r3, #46	@ 0x2e
100104b4:	d10a      	bne.n	100104cc <_svfiprintf_r+0x130>
100104b6:	7863      	ldrb	r3, [r4, #1]
100104b8:	2b2a      	cmp	r3, #42	@ 0x2a
100104ba:	d132      	bne.n	10010522 <_svfiprintf_r+0x186>
100104bc:	9b03      	ldr	r3, [sp, #12]
100104be:	1d1a      	adds	r2, r3, #4
100104c0:	681b      	ldr	r3, [r3, #0]
100104c2:	9203      	str	r2, [sp, #12]
100104c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
100104c8:	3402      	adds	r4, #2
100104ca:	9305      	str	r3, [sp, #20]
100104cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 10010590 <_svfiprintf_r+0x1f4>
100104d0:	7821      	ldrb	r1, [r4, #0]
100104d2:	2203      	movs	r2, #3
100104d4:	4650      	mov	r0, sl
100104d6:	f7ef fdc3 	bl	10000060 <memchr>
100104da:	b138      	cbz	r0, 100104ec <_svfiprintf_r+0x150>
100104dc:	9b04      	ldr	r3, [sp, #16]
100104de:	eba0 000a 	sub.w	r0, r0, sl
100104e2:	2240      	movs	r2, #64	@ 0x40
100104e4:	4082      	lsls	r2, r0
100104e6:	4313      	orrs	r3, r2
100104e8:	3401      	adds	r4, #1
100104ea:	9304      	str	r3, [sp, #16]
100104ec:	f814 1b01 	ldrb.w	r1, [r4], #1
100104f0:	4824      	ldr	r0, [pc, #144]	@ (10010584 <_svfiprintf_r+0x1e8>)
100104f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
100104f6:	2206      	movs	r2, #6
100104f8:	f7ef fdb2 	bl	10000060 <memchr>
100104fc:	2800      	cmp	r0, #0
100104fe:	d036      	beq.n	1001056e <_svfiprintf_r+0x1d2>
10010500:	4b21      	ldr	r3, [pc, #132]	@ (10010588 <_svfiprintf_r+0x1ec>)
10010502:	bb1b      	cbnz	r3, 1001054c <_svfiprintf_r+0x1b0>
10010504:	9b03      	ldr	r3, [sp, #12]
10010506:	3307      	adds	r3, #7
10010508:	f023 0307 	bic.w	r3, r3, #7
1001050c:	3308      	adds	r3, #8
1001050e:	9303      	str	r3, [sp, #12]
10010510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10010512:	4433      	add	r3, r6
10010514:	9309      	str	r3, [sp, #36]	@ 0x24
10010516:	e76a      	b.n	100103ee <_svfiprintf_r+0x52>
10010518:	fb0c 3202 	mla	r2, ip, r2, r3
1001051c:	460c      	mov	r4, r1
1001051e:	2001      	movs	r0, #1
10010520:	e7a8      	b.n	10010474 <_svfiprintf_r+0xd8>
10010522:	2300      	movs	r3, #0
10010524:	3401      	adds	r4, #1
10010526:	9305      	str	r3, [sp, #20]
10010528:	4619      	mov	r1, r3
1001052a:	f04f 0c0a 	mov.w	ip, #10
1001052e:	4620      	mov	r0, r4
10010530:	f810 2b01 	ldrb.w	r2, [r0], #1
10010534:	3a30      	subs	r2, #48	@ 0x30
10010536:	2a09      	cmp	r2, #9
10010538:	d903      	bls.n	10010542 <_svfiprintf_r+0x1a6>
1001053a:	2b00      	cmp	r3, #0
1001053c:	d0c6      	beq.n	100104cc <_svfiprintf_r+0x130>
1001053e:	9105      	str	r1, [sp, #20]
10010540:	e7c4      	b.n	100104cc <_svfiprintf_r+0x130>
10010542:	fb0c 2101 	mla	r1, ip, r1, r2
10010546:	4604      	mov	r4, r0
10010548:	2301      	movs	r3, #1
1001054a:	e7f0      	b.n	1001052e <_svfiprintf_r+0x192>
1001054c:	ab03      	add	r3, sp, #12
1001054e:	9300      	str	r3, [sp, #0]
10010550:	462a      	mov	r2, r5
10010552:	4b0e      	ldr	r3, [pc, #56]	@ (1001058c <_svfiprintf_r+0x1f0>)
10010554:	a904      	add	r1, sp, #16
10010556:	4638      	mov	r0, r7
10010558:	f7fc fcc2 	bl	1000cee0 <_printf_float>
1001055c:	1c42      	adds	r2, r0, #1
1001055e:	4606      	mov	r6, r0
10010560:	d1d6      	bne.n	10010510 <_svfiprintf_r+0x174>
10010562:	89ab      	ldrh	r3, [r5, #12]
10010564:	065b      	lsls	r3, r3, #25
10010566:	f53f af2d 	bmi.w	100103c4 <_svfiprintf_r+0x28>
1001056a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1001056c:	e72c      	b.n	100103c8 <_svfiprintf_r+0x2c>
1001056e:	ab03      	add	r3, sp, #12
10010570:	9300      	str	r3, [sp, #0]
10010572:	462a      	mov	r2, r5
10010574:	4b05      	ldr	r3, [pc, #20]	@ (1001058c <_svfiprintf_r+0x1f0>)
10010576:	a904      	add	r1, sp, #16
10010578:	4638      	mov	r0, r7
1001057a:	f7fc ff49 	bl	1000d410 <_printf_i>
1001057e:	e7ed      	b.n	1001055c <_svfiprintf_r+0x1c0>
10010580:	10012376 	.word	0x10012376
10010584:	10012380 	.word	0x10012380
10010588:	1000cee1 	.word	0x1000cee1
1001058c:	100102e5 	.word	0x100102e5
10010590:	1001237c 	.word	0x1001237c

10010594 <__sfputc_r>:
10010594:	6893      	ldr	r3, [r2, #8]
10010596:	3b01      	subs	r3, #1
10010598:	2b00      	cmp	r3, #0
1001059a:	b410      	push	{r4}
1001059c:	6093      	str	r3, [r2, #8]
1001059e:	da08      	bge.n	100105b2 <__sfputc_r+0x1e>
100105a0:	6994      	ldr	r4, [r2, #24]
100105a2:	42a3      	cmp	r3, r4
100105a4:	db01      	blt.n	100105aa <__sfputc_r+0x16>
100105a6:	290a      	cmp	r1, #10
100105a8:	d103      	bne.n	100105b2 <__sfputc_r+0x1e>
100105aa:	f85d 4b04 	ldr.w	r4, [sp], #4
100105ae:	f000 b9df 	b.w	10010970 <__swbuf_r>
100105b2:	6813      	ldr	r3, [r2, #0]
100105b4:	1c58      	adds	r0, r3, #1
100105b6:	6010      	str	r0, [r2, #0]
100105b8:	7019      	strb	r1, [r3, #0]
100105ba:	4608      	mov	r0, r1
100105bc:	f85d 4b04 	ldr.w	r4, [sp], #4
100105c0:	4770      	bx	lr

100105c2 <__sfputs_r>:
100105c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100105c4:	4606      	mov	r6, r0
100105c6:	460f      	mov	r7, r1
100105c8:	4614      	mov	r4, r2
100105ca:	18d5      	adds	r5, r2, r3
100105cc:	42ac      	cmp	r4, r5
100105ce:	d101      	bne.n	100105d4 <__sfputs_r+0x12>
100105d0:	2000      	movs	r0, #0
100105d2:	e007      	b.n	100105e4 <__sfputs_r+0x22>
100105d4:	f814 1b01 	ldrb.w	r1, [r4], #1
100105d8:	463a      	mov	r2, r7
100105da:	4630      	mov	r0, r6
100105dc:	f7ff ffda 	bl	10010594 <__sfputc_r>
100105e0:	1c43      	adds	r3, r0, #1
100105e2:	d1f3      	bne.n	100105cc <__sfputs_r+0xa>
100105e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100105e8 <_vfiprintf_r>:
100105e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100105ec:	460d      	mov	r5, r1
100105ee:	b09d      	sub	sp, #116	@ 0x74
100105f0:	4614      	mov	r4, r2
100105f2:	4698      	mov	r8, r3
100105f4:	4606      	mov	r6, r0
100105f6:	b118      	cbz	r0, 10010600 <_vfiprintf_r+0x18>
100105f8:	6a03      	ldr	r3, [r0, #32]
100105fa:	b90b      	cbnz	r3, 10010600 <_vfiprintf_r+0x18>
100105fc:	f7fd fac0 	bl	1000db80 <__sinit>
10010600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10010602:	07d9      	lsls	r1, r3, #31
10010604:	d405      	bmi.n	10010612 <_vfiprintf_r+0x2a>
10010606:	89ab      	ldrh	r3, [r5, #12]
10010608:	059a      	lsls	r2, r3, #22
1001060a:	d402      	bmi.n	10010612 <_vfiprintf_r+0x2a>
1001060c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1001060e:	f7fd fc78 	bl	1000df02 <__retarget_lock_acquire_recursive>
10010612:	89ab      	ldrh	r3, [r5, #12]
10010614:	071b      	lsls	r3, r3, #28
10010616:	d501      	bpl.n	1001061c <_vfiprintf_r+0x34>
10010618:	692b      	ldr	r3, [r5, #16]
1001061a:	b99b      	cbnz	r3, 10010644 <_vfiprintf_r+0x5c>
1001061c:	4629      	mov	r1, r5
1001061e:	4630      	mov	r0, r6
10010620:	f000 f9e4 	bl	100109ec <__swsetup_r>
10010624:	b170      	cbz	r0, 10010644 <_vfiprintf_r+0x5c>
10010626:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
10010628:	07dc      	lsls	r4, r3, #31
1001062a:	d504      	bpl.n	10010636 <_vfiprintf_r+0x4e>
1001062c:	f04f 30ff 	mov.w	r0, #4294967295
10010630:	b01d      	add	sp, #116	@ 0x74
10010632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10010636:	89ab      	ldrh	r3, [r5, #12]
10010638:	0598      	lsls	r0, r3, #22
1001063a:	d4f7      	bmi.n	1001062c <_vfiprintf_r+0x44>
1001063c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
1001063e:	f7fd fc61 	bl	1000df04 <__retarget_lock_release_recursive>
10010642:	e7f3      	b.n	1001062c <_vfiprintf_r+0x44>
10010644:	2300      	movs	r3, #0
10010646:	9309      	str	r3, [sp, #36]	@ 0x24
10010648:	2320      	movs	r3, #32
1001064a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
1001064e:	f8cd 800c 	str.w	r8, [sp, #12]
10010652:	2330      	movs	r3, #48	@ 0x30
10010654:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 10010804 <_vfiprintf_r+0x21c>
10010658:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
1001065c:	f04f 0901 	mov.w	r9, #1
10010660:	4623      	mov	r3, r4
10010662:	469a      	mov	sl, r3
10010664:	f813 2b01 	ldrb.w	r2, [r3], #1
10010668:	b10a      	cbz	r2, 1001066e <_vfiprintf_r+0x86>
1001066a:	2a25      	cmp	r2, #37	@ 0x25
1001066c:	d1f9      	bne.n	10010662 <_vfiprintf_r+0x7a>
1001066e:	ebba 0b04 	subs.w	fp, sl, r4
10010672:	d00b      	beq.n	1001068c <_vfiprintf_r+0xa4>
10010674:	465b      	mov	r3, fp
10010676:	4622      	mov	r2, r4
10010678:	4629      	mov	r1, r5
1001067a:	4630      	mov	r0, r6
1001067c:	f7ff ffa1 	bl	100105c2 <__sfputs_r>
10010680:	3001      	adds	r0, #1
10010682:	f000 80a7 	beq.w	100107d4 <_vfiprintf_r+0x1ec>
10010686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10010688:	445a      	add	r2, fp
1001068a:	9209      	str	r2, [sp, #36]	@ 0x24
1001068c:	f89a 3000 	ldrb.w	r3, [sl]
10010690:	2b00      	cmp	r3, #0
10010692:	f000 809f 	beq.w	100107d4 <_vfiprintf_r+0x1ec>
10010696:	2300      	movs	r3, #0
10010698:	f04f 32ff 	mov.w	r2, #4294967295
1001069c:	e9cd 2305 	strd	r2, r3, [sp, #20]
100106a0:	f10a 0a01 	add.w	sl, sl, #1
100106a4:	9304      	str	r3, [sp, #16]
100106a6:	9307      	str	r3, [sp, #28]
100106a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
100106ac:	931a      	str	r3, [sp, #104]	@ 0x68
100106ae:	4654      	mov	r4, sl
100106b0:	2205      	movs	r2, #5
100106b2:	f814 1b01 	ldrb.w	r1, [r4], #1
100106b6:	4853      	ldr	r0, [pc, #332]	@ (10010804 <_vfiprintf_r+0x21c>)
100106b8:	f7ef fcd2 	bl	10000060 <memchr>
100106bc:	9a04      	ldr	r2, [sp, #16]
100106be:	b9d8      	cbnz	r0, 100106f8 <_vfiprintf_r+0x110>
100106c0:	06d1      	lsls	r1, r2, #27
100106c2:	bf44      	itt	mi
100106c4:	2320      	movmi	r3, #32
100106c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
100106ca:	0713      	lsls	r3, r2, #28
100106cc:	bf44      	itt	mi
100106ce:	232b      	movmi	r3, #43	@ 0x2b
100106d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
100106d4:	f89a 3000 	ldrb.w	r3, [sl]
100106d8:	2b2a      	cmp	r3, #42	@ 0x2a
100106da:	d015      	beq.n	10010708 <_vfiprintf_r+0x120>
100106dc:	9a07      	ldr	r2, [sp, #28]
100106de:	4654      	mov	r4, sl
100106e0:	2000      	movs	r0, #0
100106e2:	f04f 0c0a 	mov.w	ip, #10
100106e6:	4621      	mov	r1, r4
100106e8:	f811 3b01 	ldrb.w	r3, [r1], #1
100106ec:	3b30      	subs	r3, #48	@ 0x30
100106ee:	2b09      	cmp	r3, #9
100106f0:	d94b      	bls.n	1001078a <_vfiprintf_r+0x1a2>
100106f2:	b1b0      	cbz	r0, 10010722 <_vfiprintf_r+0x13a>
100106f4:	9207      	str	r2, [sp, #28]
100106f6:	e014      	b.n	10010722 <_vfiprintf_r+0x13a>
100106f8:	eba0 0308 	sub.w	r3, r0, r8
100106fc:	fa09 f303 	lsl.w	r3, r9, r3
10010700:	4313      	orrs	r3, r2
10010702:	9304      	str	r3, [sp, #16]
10010704:	46a2      	mov	sl, r4
10010706:	e7d2      	b.n	100106ae <_vfiprintf_r+0xc6>
10010708:	9b03      	ldr	r3, [sp, #12]
1001070a:	1d19      	adds	r1, r3, #4
1001070c:	681b      	ldr	r3, [r3, #0]
1001070e:	9103      	str	r1, [sp, #12]
10010710:	2b00      	cmp	r3, #0
10010712:	bfbb      	ittet	lt
10010714:	425b      	neglt	r3, r3
10010716:	f042 0202 	orrlt.w	r2, r2, #2
1001071a:	9307      	strge	r3, [sp, #28]
1001071c:	9307      	strlt	r3, [sp, #28]
1001071e:	bfb8      	it	lt
10010720:	9204      	strlt	r2, [sp, #16]
10010722:	7823      	ldrb	r3, [r4, #0]
10010724:	2b2e      	cmp	r3, #46	@ 0x2e
10010726:	d10a      	bne.n	1001073e <_vfiprintf_r+0x156>
10010728:	7863      	ldrb	r3, [r4, #1]
1001072a:	2b2a      	cmp	r3, #42	@ 0x2a
1001072c:	d132      	bne.n	10010794 <_vfiprintf_r+0x1ac>
1001072e:	9b03      	ldr	r3, [sp, #12]
10010730:	1d1a      	adds	r2, r3, #4
10010732:	681b      	ldr	r3, [r3, #0]
10010734:	9203      	str	r2, [sp, #12]
10010736:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
1001073a:	3402      	adds	r4, #2
1001073c:	9305      	str	r3, [sp, #20]
1001073e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 10010814 <_vfiprintf_r+0x22c>
10010742:	7821      	ldrb	r1, [r4, #0]
10010744:	2203      	movs	r2, #3
10010746:	4650      	mov	r0, sl
10010748:	f7ef fc8a 	bl	10000060 <memchr>
1001074c:	b138      	cbz	r0, 1001075e <_vfiprintf_r+0x176>
1001074e:	9b04      	ldr	r3, [sp, #16]
10010750:	eba0 000a 	sub.w	r0, r0, sl
10010754:	2240      	movs	r2, #64	@ 0x40
10010756:	4082      	lsls	r2, r0
10010758:	4313      	orrs	r3, r2
1001075a:	3401      	adds	r4, #1
1001075c:	9304      	str	r3, [sp, #16]
1001075e:	f814 1b01 	ldrb.w	r1, [r4], #1
10010762:	4829      	ldr	r0, [pc, #164]	@ (10010808 <_vfiprintf_r+0x220>)
10010764:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
10010768:	2206      	movs	r2, #6
1001076a:	f7ef fc79 	bl	10000060 <memchr>
1001076e:	2800      	cmp	r0, #0
10010770:	d03f      	beq.n	100107f2 <_vfiprintf_r+0x20a>
10010772:	4b26      	ldr	r3, [pc, #152]	@ (1001080c <_vfiprintf_r+0x224>)
10010774:	bb1b      	cbnz	r3, 100107be <_vfiprintf_r+0x1d6>
10010776:	9b03      	ldr	r3, [sp, #12]
10010778:	3307      	adds	r3, #7
1001077a:	f023 0307 	bic.w	r3, r3, #7
1001077e:	3308      	adds	r3, #8
10010780:	9303      	str	r3, [sp, #12]
10010782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10010784:	443b      	add	r3, r7
10010786:	9309      	str	r3, [sp, #36]	@ 0x24
10010788:	e76a      	b.n	10010660 <_vfiprintf_r+0x78>
1001078a:	fb0c 3202 	mla	r2, ip, r2, r3
1001078e:	460c      	mov	r4, r1
10010790:	2001      	movs	r0, #1
10010792:	e7a8      	b.n	100106e6 <_vfiprintf_r+0xfe>
10010794:	2300      	movs	r3, #0
10010796:	3401      	adds	r4, #1
10010798:	9305      	str	r3, [sp, #20]
1001079a:	4619      	mov	r1, r3
1001079c:	f04f 0c0a 	mov.w	ip, #10
100107a0:	4620      	mov	r0, r4
100107a2:	f810 2b01 	ldrb.w	r2, [r0], #1
100107a6:	3a30      	subs	r2, #48	@ 0x30
100107a8:	2a09      	cmp	r2, #9
100107aa:	d903      	bls.n	100107b4 <_vfiprintf_r+0x1cc>
100107ac:	2b00      	cmp	r3, #0
100107ae:	d0c6      	beq.n	1001073e <_vfiprintf_r+0x156>
100107b0:	9105      	str	r1, [sp, #20]
100107b2:	e7c4      	b.n	1001073e <_vfiprintf_r+0x156>
100107b4:	fb0c 2101 	mla	r1, ip, r1, r2
100107b8:	4604      	mov	r4, r0
100107ba:	2301      	movs	r3, #1
100107bc:	e7f0      	b.n	100107a0 <_vfiprintf_r+0x1b8>
100107be:	ab03      	add	r3, sp, #12
100107c0:	9300      	str	r3, [sp, #0]
100107c2:	462a      	mov	r2, r5
100107c4:	4b12      	ldr	r3, [pc, #72]	@ (10010810 <_vfiprintf_r+0x228>)
100107c6:	a904      	add	r1, sp, #16
100107c8:	4630      	mov	r0, r6
100107ca:	f7fc fb89 	bl	1000cee0 <_printf_float>
100107ce:	4607      	mov	r7, r0
100107d0:	1c78      	adds	r0, r7, #1
100107d2:	d1d6      	bne.n	10010782 <_vfiprintf_r+0x19a>
100107d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
100107d6:	07d9      	lsls	r1, r3, #31
100107d8:	d405      	bmi.n	100107e6 <_vfiprintf_r+0x1fe>
100107da:	89ab      	ldrh	r3, [r5, #12]
100107dc:	059a      	lsls	r2, r3, #22
100107de:	d402      	bmi.n	100107e6 <_vfiprintf_r+0x1fe>
100107e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
100107e2:	f7fd fb8f 	bl	1000df04 <__retarget_lock_release_recursive>
100107e6:	89ab      	ldrh	r3, [r5, #12]
100107e8:	065b      	lsls	r3, r3, #25
100107ea:	f53f af1f 	bmi.w	1001062c <_vfiprintf_r+0x44>
100107ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
100107f0:	e71e      	b.n	10010630 <_vfiprintf_r+0x48>
100107f2:	ab03      	add	r3, sp, #12
100107f4:	9300      	str	r3, [sp, #0]
100107f6:	462a      	mov	r2, r5
100107f8:	4b05      	ldr	r3, [pc, #20]	@ (10010810 <_vfiprintf_r+0x228>)
100107fa:	a904      	add	r1, sp, #16
100107fc:	4630      	mov	r0, r6
100107fe:	f7fc fe07 	bl	1000d410 <_printf_i>
10010802:	e7e4      	b.n	100107ce <_vfiprintf_r+0x1e6>
10010804:	10012376 	.word	0x10012376
10010808:	10012380 	.word	0x10012380
1001080c:	1000cee1 	.word	0x1000cee1
10010810:	100105c3 	.word	0x100105c3
10010814:	1001237c 	.word	0x1001237c

10010818 <__sflush_r>:
10010818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1001081c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10010820:	0716      	lsls	r6, r2, #28
10010822:	4605      	mov	r5, r0
10010824:	460c      	mov	r4, r1
10010826:	d454      	bmi.n	100108d2 <__sflush_r+0xba>
10010828:	684b      	ldr	r3, [r1, #4]
1001082a:	2b00      	cmp	r3, #0
1001082c:	dc02      	bgt.n	10010834 <__sflush_r+0x1c>
1001082e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
10010830:	2b00      	cmp	r3, #0
10010832:	dd48      	ble.n	100108c6 <__sflush_r+0xae>
10010834:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
10010836:	2e00      	cmp	r6, #0
10010838:	d045      	beq.n	100108c6 <__sflush_r+0xae>
1001083a:	2300      	movs	r3, #0
1001083c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
10010840:	682f      	ldr	r7, [r5, #0]
10010842:	6a21      	ldr	r1, [r4, #32]
10010844:	602b      	str	r3, [r5, #0]
10010846:	d030      	beq.n	100108aa <__sflush_r+0x92>
10010848:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1001084a:	89a3      	ldrh	r3, [r4, #12]
1001084c:	0759      	lsls	r1, r3, #29
1001084e:	d505      	bpl.n	1001085c <__sflush_r+0x44>
10010850:	6863      	ldr	r3, [r4, #4]
10010852:	1ad2      	subs	r2, r2, r3
10010854:	6b63      	ldr	r3, [r4, #52]	@ 0x34
10010856:	b10b      	cbz	r3, 1001085c <__sflush_r+0x44>
10010858:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1001085a:	1ad2      	subs	r2, r2, r3
1001085c:	2300      	movs	r3, #0
1001085e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
10010860:	6a21      	ldr	r1, [r4, #32]
10010862:	4628      	mov	r0, r5
10010864:	47b0      	blx	r6
10010866:	1c43      	adds	r3, r0, #1
10010868:	89a3      	ldrh	r3, [r4, #12]
1001086a:	d106      	bne.n	1001087a <__sflush_r+0x62>
1001086c:	6829      	ldr	r1, [r5, #0]
1001086e:	291d      	cmp	r1, #29
10010870:	d82b      	bhi.n	100108ca <__sflush_r+0xb2>
10010872:	4a2a      	ldr	r2, [pc, #168]	@ (1001091c <__sflush_r+0x104>)
10010874:	40ca      	lsrs	r2, r1
10010876:	07d6      	lsls	r6, r2, #31
10010878:	d527      	bpl.n	100108ca <__sflush_r+0xb2>
1001087a:	2200      	movs	r2, #0
1001087c:	6062      	str	r2, [r4, #4]
1001087e:	04d9      	lsls	r1, r3, #19
10010880:	6922      	ldr	r2, [r4, #16]
10010882:	6022      	str	r2, [r4, #0]
10010884:	d504      	bpl.n	10010890 <__sflush_r+0x78>
10010886:	1c42      	adds	r2, r0, #1
10010888:	d101      	bne.n	1001088e <__sflush_r+0x76>
1001088a:	682b      	ldr	r3, [r5, #0]
1001088c:	b903      	cbnz	r3, 10010890 <__sflush_r+0x78>
1001088e:	6560      	str	r0, [r4, #84]	@ 0x54
10010890:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10010892:	602f      	str	r7, [r5, #0]
10010894:	b1b9      	cbz	r1, 100108c6 <__sflush_r+0xae>
10010896:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1001089a:	4299      	cmp	r1, r3
1001089c:	d002      	beq.n	100108a4 <__sflush_r+0x8c>
1001089e:	4628      	mov	r0, r5
100108a0:	f7fe f9a6 	bl	1000ebf0 <_free_r>
100108a4:	2300      	movs	r3, #0
100108a6:	6363      	str	r3, [r4, #52]	@ 0x34
100108a8:	e00d      	b.n	100108c6 <__sflush_r+0xae>
100108aa:	2301      	movs	r3, #1
100108ac:	4628      	mov	r0, r5
100108ae:	47b0      	blx	r6
100108b0:	4602      	mov	r2, r0
100108b2:	1c50      	adds	r0, r2, #1
100108b4:	d1c9      	bne.n	1001084a <__sflush_r+0x32>
100108b6:	682b      	ldr	r3, [r5, #0]
100108b8:	2b00      	cmp	r3, #0
100108ba:	d0c6      	beq.n	1001084a <__sflush_r+0x32>
100108bc:	2b1d      	cmp	r3, #29
100108be:	d001      	beq.n	100108c4 <__sflush_r+0xac>
100108c0:	2b16      	cmp	r3, #22
100108c2:	d11e      	bne.n	10010902 <__sflush_r+0xea>
100108c4:	602f      	str	r7, [r5, #0]
100108c6:	2000      	movs	r0, #0
100108c8:	e022      	b.n	10010910 <__sflush_r+0xf8>
100108ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
100108ce:	b21b      	sxth	r3, r3
100108d0:	e01b      	b.n	1001090a <__sflush_r+0xf2>
100108d2:	690f      	ldr	r7, [r1, #16]
100108d4:	2f00      	cmp	r7, #0
100108d6:	d0f6      	beq.n	100108c6 <__sflush_r+0xae>
100108d8:	0793      	lsls	r3, r2, #30
100108da:	680e      	ldr	r6, [r1, #0]
100108dc:	bf08      	it	eq
100108de:	694b      	ldreq	r3, [r1, #20]
100108e0:	600f      	str	r7, [r1, #0]
100108e2:	bf18      	it	ne
100108e4:	2300      	movne	r3, #0
100108e6:	eba6 0807 	sub.w	r8, r6, r7
100108ea:	608b      	str	r3, [r1, #8]
100108ec:	f1b8 0f00 	cmp.w	r8, #0
100108f0:	dde9      	ble.n	100108c6 <__sflush_r+0xae>
100108f2:	6a21      	ldr	r1, [r4, #32]
100108f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
100108f6:	4643      	mov	r3, r8
100108f8:	463a      	mov	r2, r7
100108fa:	4628      	mov	r0, r5
100108fc:	47b0      	blx	r6
100108fe:	2800      	cmp	r0, #0
10010900:	dc08      	bgt.n	10010914 <__sflush_r+0xfc>
10010902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10010906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1001090a:	81a3      	strh	r3, [r4, #12]
1001090c:	f04f 30ff 	mov.w	r0, #4294967295
10010910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10010914:	4407      	add	r7, r0
10010916:	eba8 0800 	sub.w	r8, r8, r0
1001091a:	e7e7      	b.n	100108ec <__sflush_r+0xd4>
1001091c:	20400001 	.word	0x20400001

10010920 <_fflush_r>:
10010920:	b538      	push	{r3, r4, r5, lr}
10010922:	690b      	ldr	r3, [r1, #16]
10010924:	4605      	mov	r5, r0
10010926:	460c      	mov	r4, r1
10010928:	b913      	cbnz	r3, 10010930 <_fflush_r+0x10>
1001092a:	2500      	movs	r5, #0
1001092c:	4628      	mov	r0, r5
1001092e:	bd38      	pop	{r3, r4, r5, pc}
10010930:	b118      	cbz	r0, 1001093a <_fflush_r+0x1a>
10010932:	6a03      	ldr	r3, [r0, #32]
10010934:	b90b      	cbnz	r3, 1001093a <_fflush_r+0x1a>
10010936:	f7fd f923 	bl	1000db80 <__sinit>
1001093a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1001093e:	2b00      	cmp	r3, #0
10010940:	d0f3      	beq.n	1001092a <_fflush_r+0xa>
10010942:	6e62      	ldr	r2, [r4, #100]	@ 0x64
10010944:	07d0      	lsls	r0, r2, #31
10010946:	d404      	bmi.n	10010952 <_fflush_r+0x32>
10010948:	0599      	lsls	r1, r3, #22
1001094a:	d402      	bmi.n	10010952 <_fflush_r+0x32>
1001094c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001094e:	f7fd fad8 	bl	1000df02 <__retarget_lock_acquire_recursive>
10010952:	4628      	mov	r0, r5
10010954:	4621      	mov	r1, r4
10010956:	f7ff ff5f 	bl	10010818 <__sflush_r>
1001095a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
1001095c:	07da      	lsls	r2, r3, #31
1001095e:	4605      	mov	r5, r0
10010960:	d4e4      	bmi.n	1001092c <_fflush_r+0xc>
10010962:	89a3      	ldrh	r3, [r4, #12]
10010964:	059b      	lsls	r3, r3, #22
10010966:	d4e1      	bmi.n	1001092c <_fflush_r+0xc>
10010968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1001096a:	f7fd facb 	bl	1000df04 <__retarget_lock_release_recursive>
1001096e:	e7dd      	b.n	1001092c <_fflush_r+0xc>

10010970 <__swbuf_r>:
10010970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010972:	460e      	mov	r6, r1
10010974:	4614      	mov	r4, r2
10010976:	4605      	mov	r5, r0
10010978:	b118      	cbz	r0, 10010982 <__swbuf_r+0x12>
1001097a:	6a03      	ldr	r3, [r0, #32]
1001097c:	b90b      	cbnz	r3, 10010982 <__swbuf_r+0x12>
1001097e:	f7fd f8ff 	bl	1000db80 <__sinit>
10010982:	69a3      	ldr	r3, [r4, #24]
10010984:	60a3      	str	r3, [r4, #8]
10010986:	89a3      	ldrh	r3, [r4, #12]
10010988:	071a      	lsls	r2, r3, #28
1001098a:	d501      	bpl.n	10010990 <__swbuf_r+0x20>
1001098c:	6923      	ldr	r3, [r4, #16]
1001098e:	b943      	cbnz	r3, 100109a2 <__swbuf_r+0x32>
10010990:	4621      	mov	r1, r4
10010992:	4628      	mov	r0, r5
10010994:	f000 f82a 	bl	100109ec <__swsetup_r>
10010998:	b118      	cbz	r0, 100109a2 <__swbuf_r+0x32>
1001099a:	f04f 37ff 	mov.w	r7, #4294967295
1001099e:	4638      	mov	r0, r7
100109a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100109a2:	6823      	ldr	r3, [r4, #0]
100109a4:	6922      	ldr	r2, [r4, #16]
100109a6:	1a98      	subs	r0, r3, r2
100109a8:	6963      	ldr	r3, [r4, #20]
100109aa:	b2f6      	uxtb	r6, r6
100109ac:	4283      	cmp	r3, r0
100109ae:	4637      	mov	r7, r6
100109b0:	dc05      	bgt.n	100109be <__swbuf_r+0x4e>
100109b2:	4621      	mov	r1, r4
100109b4:	4628      	mov	r0, r5
100109b6:	f7ff ffb3 	bl	10010920 <_fflush_r>
100109ba:	2800      	cmp	r0, #0
100109bc:	d1ed      	bne.n	1001099a <__swbuf_r+0x2a>
100109be:	68a3      	ldr	r3, [r4, #8]
100109c0:	3b01      	subs	r3, #1
100109c2:	60a3      	str	r3, [r4, #8]
100109c4:	6823      	ldr	r3, [r4, #0]
100109c6:	1c5a      	adds	r2, r3, #1
100109c8:	6022      	str	r2, [r4, #0]
100109ca:	701e      	strb	r6, [r3, #0]
100109cc:	6962      	ldr	r2, [r4, #20]
100109ce:	1c43      	adds	r3, r0, #1
100109d0:	429a      	cmp	r2, r3
100109d2:	d004      	beq.n	100109de <__swbuf_r+0x6e>
100109d4:	89a3      	ldrh	r3, [r4, #12]
100109d6:	07db      	lsls	r3, r3, #31
100109d8:	d5e1      	bpl.n	1001099e <__swbuf_r+0x2e>
100109da:	2e0a      	cmp	r6, #10
100109dc:	d1df      	bne.n	1001099e <__swbuf_r+0x2e>
100109de:	4621      	mov	r1, r4
100109e0:	4628      	mov	r0, r5
100109e2:	f7ff ff9d 	bl	10010920 <_fflush_r>
100109e6:	2800      	cmp	r0, #0
100109e8:	d0d9      	beq.n	1001099e <__swbuf_r+0x2e>
100109ea:	e7d6      	b.n	1001099a <__swbuf_r+0x2a>

100109ec <__swsetup_r>:
100109ec:	b538      	push	{r3, r4, r5, lr}
100109ee:	4b29      	ldr	r3, [pc, #164]	@ (10010a94 <__swsetup_r+0xa8>)
100109f0:	4605      	mov	r5, r0
100109f2:	6818      	ldr	r0, [r3, #0]
100109f4:	460c      	mov	r4, r1
100109f6:	b118      	cbz	r0, 10010a00 <__swsetup_r+0x14>
100109f8:	6a03      	ldr	r3, [r0, #32]
100109fa:	b90b      	cbnz	r3, 10010a00 <__swsetup_r+0x14>
100109fc:	f7fd f8c0 	bl	1000db80 <__sinit>
10010a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10010a04:	0719      	lsls	r1, r3, #28
10010a06:	d422      	bmi.n	10010a4e <__swsetup_r+0x62>
10010a08:	06da      	lsls	r2, r3, #27
10010a0a:	d407      	bmi.n	10010a1c <__swsetup_r+0x30>
10010a0c:	2209      	movs	r2, #9
10010a0e:	602a      	str	r2, [r5, #0]
10010a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10010a14:	81a3      	strh	r3, [r4, #12]
10010a16:	f04f 30ff 	mov.w	r0, #4294967295
10010a1a:	e033      	b.n	10010a84 <__swsetup_r+0x98>
10010a1c:	0758      	lsls	r0, r3, #29
10010a1e:	d512      	bpl.n	10010a46 <__swsetup_r+0x5a>
10010a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10010a22:	b141      	cbz	r1, 10010a36 <__swsetup_r+0x4a>
10010a24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
10010a28:	4299      	cmp	r1, r3
10010a2a:	d002      	beq.n	10010a32 <__swsetup_r+0x46>
10010a2c:	4628      	mov	r0, r5
10010a2e:	f7fe f8df 	bl	1000ebf0 <_free_r>
10010a32:	2300      	movs	r3, #0
10010a34:	6363      	str	r3, [r4, #52]	@ 0x34
10010a36:	89a3      	ldrh	r3, [r4, #12]
10010a38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
10010a3c:	81a3      	strh	r3, [r4, #12]
10010a3e:	2300      	movs	r3, #0
10010a40:	6063      	str	r3, [r4, #4]
10010a42:	6923      	ldr	r3, [r4, #16]
10010a44:	6023      	str	r3, [r4, #0]
10010a46:	89a3      	ldrh	r3, [r4, #12]
10010a48:	f043 0308 	orr.w	r3, r3, #8
10010a4c:	81a3      	strh	r3, [r4, #12]
10010a4e:	6923      	ldr	r3, [r4, #16]
10010a50:	b94b      	cbnz	r3, 10010a66 <__swsetup_r+0x7a>
10010a52:	89a3      	ldrh	r3, [r4, #12]
10010a54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
10010a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
10010a5c:	d003      	beq.n	10010a66 <__swsetup_r+0x7a>
10010a5e:	4621      	mov	r1, r4
10010a60:	4628      	mov	r0, r5
10010a62:	f000 fc25 	bl	100112b0 <__smakebuf_r>
10010a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10010a6a:	f013 0201 	ands.w	r2, r3, #1
10010a6e:	d00a      	beq.n	10010a86 <__swsetup_r+0x9a>
10010a70:	2200      	movs	r2, #0
10010a72:	60a2      	str	r2, [r4, #8]
10010a74:	6962      	ldr	r2, [r4, #20]
10010a76:	4252      	negs	r2, r2
10010a78:	61a2      	str	r2, [r4, #24]
10010a7a:	6922      	ldr	r2, [r4, #16]
10010a7c:	b942      	cbnz	r2, 10010a90 <__swsetup_r+0xa4>
10010a7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
10010a82:	d1c5      	bne.n	10010a10 <__swsetup_r+0x24>
10010a84:	bd38      	pop	{r3, r4, r5, pc}
10010a86:	0799      	lsls	r1, r3, #30
10010a88:	bf58      	it	pl
10010a8a:	6962      	ldrpl	r2, [r4, #20]
10010a8c:	60a2      	str	r2, [r4, #8]
10010a8e:	e7f4      	b.n	10010a7a <__swsetup_r+0x8e>
10010a90:	2000      	movs	r0, #0
10010a92:	e7f7      	b.n	10010a84 <__swsetup_r+0x98>
10010a94:	100200e0 	.word	0x100200e0

10010a98 <_raise_r>:
10010a98:	291f      	cmp	r1, #31
10010a9a:	b538      	push	{r3, r4, r5, lr}
10010a9c:	4605      	mov	r5, r0
10010a9e:	460c      	mov	r4, r1
10010aa0:	d904      	bls.n	10010aac <_raise_r+0x14>
10010aa2:	2316      	movs	r3, #22
10010aa4:	6003      	str	r3, [r0, #0]
10010aa6:	f04f 30ff 	mov.w	r0, #4294967295
10010aaa:	bd38      	pop	{r3, r4, r5, pc}
10010aac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
10010aae:	b112      	cbz	r2, 10010ab6 <_raise_r+0x1e>
10010ab0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
10010ab4:	b94b      	cbnz	r3, 10010aca <_raise_r+0x32>
10010ab6:	4628      	mov	r0, r5
10010ab8:	f000 f830 	bl	10010b1c <_getpid_r>
10010abc:	4622      	mov	r2, r4
10010abe:	4601      	mov	r1, r0
10010ac0:	4628      	mov	r0, r5
10010ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10010ac6:	f000 b817 	b.w	10010af8 <_kill_r>
10010aca:	2b01      	cmp	r3, #1
10010acc:	d00a      	beq.n	10010ae4 <_raise_r+0x4c>
10010ace:	1c59      	adds	r1, r3, #1
10010ad0:	d103      	bne.n	10010ada <_raise_r+0x42>
10010ad2:	2316      	movs	r3, #22
10010ad4:	6003      	str	r3, [r0, #0]
10010ad6:	2001      	movs	r0, #1
10010ad8:	e7e7      	b.n	10010aaa <_raise_r+0x12>
10010ada:	2100      	movs	r1, #0
10010adc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
10010ae0:	4620      	mov	r0, r4
10010ae2:	4798      	blx	r3
10010ae4:	2000      	movs	r0, #0
10010ae6:	e7e0      	b.n	10010aaa <_raise_r+0x12>

10010ae8 <raise>:
10010ae8:	4b02      	ldr	r3, [pc, #8]	@ (10010af4 <raise+0xc>)
10010aea:	4601      	mov	r1, r0
10010aec:	6818      	ldr	r0, [r3, #0]
10010aee:	f7ff bfd3 	b.w	10010a98 <_raise_r>
10010af2:	bf00      	nop
10010af4:	100200e0 	.word	0x100200e0

10010af8 <_kill_r>:
10010af8:	b538      	push	{r3, r4, r5, lr}
10010afa:	4d07      	ldr	r5, [pc, #28]	@ (10010b18 <_kill_r+0x20>)
10010afc:	2300      	movs	r3, #0
10010afe:	4604      	mov	r4, r0
10010b00:	4608      	mov	r0, r1
10010b02:	4611      	mov	r1, r2
10010b04:	602b      	str	r3, [r5, #0]
10010b06:	f7f1 fd4d 	bl	100025a4 <_kill>
10010b0a:	1c43      	adds	r3, r0, #1
10010b0c:	d102      	bne.n	10010b14 <_kill_r+0x1c>
10010b0e:	682b      	ldr	r3, [r5, #0]
10010b10:	b103      	cbz	r3, 10010b14 <_kill_r+0x1c>
10010b12:	6023      	str	r3, [r4, #0]
10010b14:	bd38      	pop	{r3, r4, r5, pc}
10010b16:	bf00      	nop
10010b18:	100217fc 	.word	0x100217fc

10010b1c <_getpid_r>:
10010b1c:	f7f1 bd3a 	b.w	10002594 <_getpid>

10010b20 <nan>:
10010b20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 10010b28 <nan+0x8>
10010b24:	4770      	bx	lr
10010b26:	bf00      	nop
10010b28:	00000000 	.word	0x00000000
10010b2c:	7ff80000 	.word	0x7ff80000

10010b30 <_calloc_r>:
10010b30:	b570      	push	{r4, r5, r6, lr}
10010b32:	fba1 5402 	umull	r5, r4, r1, r2
10010b36:	b934      	cbnz	r4, 10010b46 <_calloc_r+0x16>
10010b38:	4629      	mov	r1, r5
10010b3a:	f7fc f8a5 	bl	1000cc88 <_malloc_r>
10010b3e:	4606      	mov	r6, r0
10010b40:	b928      	cbnz	r0, 10010b4e <_calloc_r+0x1e>
10010b42:	4630      	mov	r0, r6
10010b44:	bd70      	pop	{r4, r5, r6, pc}
10010b46:	220c      	movs	r2, #12
10010b48:	6002      	str	r2, [r0, #0]
10010b4a:	2600      	movs	r6, #0
10010b4c:	e7f9      	b.n	10010b42 <_calloc_r+0x12>
10010b4e:	462a      	mov	r2, r5
10010b50:	4621      	mov	r1, r4
10010b52:	f7fd f924 	bl	1000dd9e <memset>
10010b56:	e7f4      	b.n	10010b42 <_calloc_r+0x12>

10010b58 <rshift>:
10010b58:	6903      	ldr	r3, [r0, #16]
10010b5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
10010b5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
10010b62:	ea4f 1261 	mov.w	r2, r1, asr #5
10010b66:	f100 0414 	add.w	r4, r0, #20
10010b6a:	dd45      	ble.n	10010bf8 <rshift+0xa0>
10010b6c:	f011 011f 	ands.w	r1, r1, #31
10010b70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
10010b74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
10010b78:	d10c      	bne.n	10010b94 <rshift+0x3c>
10010b7a:	f100 0710 	add.w	r7, r0, #16
10010b7e:	4629      	mov	r1, r5
10010b80:	42b1      	cmp	r1, r6
10010b82:	d334      	bcc.n	10010bee <rshift+0x96>
10010b84:	1a9b      	subs	r3, r3, r2
10010b86:	009b      	lsls	r3, r3, #2
10010b88:	1eea      	subs	r2, r5, #3
10010b8a:	4296      	cmp	r6, r2
10010b8c:	bf38      	it	cc
10010b8e:	2300      	movcc	r3, #0
10010b90:	4423      	add	r3, r4
10010b92:	e015      	b.n	10010bc0 <rshift+0x68>
10010b94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
10010b98:	f1c1 0820 	rsb	r8, r1, #32
10010b9c:	40cf      	lsrs	r7, r1
10010b9e:	f105 0e04 	add.w	lr, r5, #4
10010ba2:	46a1      	mov	r9, r4
10010ba4:	4576      	cmp	r6, lr
10010ba6:	46f4      	mov	ip, lr
10010ba8:	d815      	bhi.n	10010bd6 <rshift+0x7e>
10010baa:	1a9a      	subs	r2, r3, r2
10010bac:	0092      	lsls	r2, r2, #2
10010bae:	3a04      	subs	r2, #4
10010bb0:	3501      	adds	r5, #1
10010bb2:	42ae      	cmp	r6, r5
10010bb4:	bf38      	it	cc
10010bb6:	2200      	movcc	r2, #0
10010bb8:	18a3      	adds	r3, r4, r2
10010bba:	50a7      	str	r7, [r4, r2]
10010bbc:	b107      	cbz	r7, 10010bc0 <rshift+0x68>
10010bbe:	3304      	adds	r3, #4
10010bc0:	1b1a      	subs	r2, r3, r4
10010bc2:	42a3      	cmp	r3, r4
10010bc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
10010bc8:	bf08      	it	eq
10010bca:	2300      	moveq	r3, #0
10010bcc:	6102      	str	r2, [r0, #16]
10010bce:	bf08      	it	eq
10010bd0:	6143      	streq	r3, [r0, #20]
10010bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
10010bd6:	f8dc c000 	ldr.w	ip, [ip]
10010bda:	fa0c fc08 	lsl.w	ip, ip, r8
10010bde:	ea4c 0707 	orr.w	r7, ip, r7
10010be2:	f849 7b04 	str.w	r7, [r9], #4
10010be6:	f85e 7b04 	ldr.w	r7, [lr], #4
10010bea:	40cf      	lsrs	r7, r1
10010bec:	e7da      	b.n	10010ba4 <rshift+0x4c>
10010bee:	f851 cb04 	ldr.w	ip, [r1], #4
10010bf2:	f847 cf04 	str.w	ip, [r7, #4]!
10010bf6:	e7c3      	b.n	10010b80 <rshift+0x28>
10010bf8:	4623      	mov	r3, r4
10010bfa:	e7e1      	b.n	10010bc0 <rshift+0x68>

10010bfc <__hexdig_fun>:
10010bfc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
10010c00:	2b09      	cmp	r3, #9
10010c02:	d802      	bhi.n	10010c0a <__hexdig_fun+0xe>
10010c04:	3820      	subs	r0, #32
10010c06:	b2c0      	uxtb	r0, r0
10010c08:	4770      	bx	lr
10010c0a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
10010c0e:	2b05      	cmp	r3, #5
10010c10:	d801      	bhi.n	10010c16 <__hexdig_fun+0x1a>
10010c12:	3847      	subs	r0, #71	@ 0x47
10010c14:	e7f7      	b.n	10010c06 <__hexdig_fun+0xa>
10010c16:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
10010c1a:	2b05      	cmp	r3, #5
10010c1c:	d801      	bhi.n	10010c22 <__hexdig_fun+0x26>
10010c1e:	3827      	subs	r0, #39	@ 0x27
10010c20:	e7f1      	b.n	10010c06 <__hexdig_fun+0xa>
10010c22:	2000      	movs	r0, #0
10010c24:	4770      	bx	lr
	...

10010c28 <__gethex>:
10010c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10010c2c:	b085      	sub	sp, #20
10010c2e:	468a      	mov	sl, r1
10010c30:	9302      	str	r3, [sp, #8]
10010c32:	680b      	ldr	r3, [r1, #0]
10010c34:	9001      	str	r0, [sp, #4]
10010c36:	4690      	mov	r8, r2
10010c38:	1c9c      	adds	r4, r3, #2
10010c3a:	46a1      	mov	r9, r4
10010c3c:	f814 0b01 	ldrb.w	r0, [r4], #1
10010c40:	2830      	cmp	r0, #48	@ 0x30
10010c42:	d0fa      	beq.n	10010c3a <__gethex+0x12>
10010c44:	eba9 0303 	sub.w	r3, r9, r3
10010c48:	f1a3 0b02 	sub.w	fp, r3, #2
10010c4c:	f7ff ffd6 	bl	10010bfc <__hexdig_fun>
10010c50:	4605      	mov	r5, r0
10010c52:	2800      	cmp	r0, #0
10010c54:	d168      	bne.n	10010d28 <__gethex+0x100>
10010c56:	49a0      	ldr	r1, [pc, #640]	@ (10010ed8 <__gethex+0x2b0>)
10010c58:	2201      	movs	r2, #1
10010c5a:	4648      	mov	r0, r9
10010c5c:	f7fd f8a7 	bl	1000ddae <strncmp>
10010c60:	4607      	mov	r7, r0
10010c62:	2800      	cmp	r0, #0
10010c64:	d167      	bne.n	10010d36 <__gethex+0x10e>
10010c66:	f899 0001 	ldrb.w	r0, [r9, #1]
10010c6a:	4626      	mov	r6, r4
10010c6c:	f7ff ffc6 	bl	10010bfc <__hexdig_fun>
10010c70:	2800      	cmp	r0, #0
10010c72:	d062      	beq.n	10010d3a <__gethex+0x112>
10010c74:	4623      	mov	r3, r4
10010c76:	7818      	ldrb	r0, [r3, #0]
10010c78:	2830      	cmp	r0, #48	@ 0x30
10010c7a:	4699      	mov	r9, r3
10010c7c:	f103 0301 	add.w	r3, r3, #1
10010c80:	d0f9      	beq.n	10010c76 <__gethex+0x4e>
10010c82:	f7ff ffbb 	bl	10010bfc <__hexdig_fun>
10010c86:	fab0 f580 	clz	r5, r0
10010c8a:	096d      	lsrs	r5, r5, #5
10010c8c:	f04f 0b01 	mov.w	fp, #1
10010c90:	464a      	mov	r2, r9
10010c92:	4616      	mov	r6, r2
10010c94:	3201      	adds	r2, #1
10010c96:	7830      	ldrb	r0, [r6, #0]
10010c98:	f7ff ffb0 	bl	10010bfc <__hexdig_fun>
10010c9c:	2800      	cmp	r0, #0
10010c9e:	d1f8      	bne.n	10010c92 <__gethex+0x6a>
10010ca0:	498d      	ldr	r1, [pc, #564]	@ (10010ed8 <__gethex+0x2b0>)
10010ca2:	2201      	movs	r2, #1
10010ca4:	4630      	mov	r0, r6
10010ca6:	f7fd f882 	bl	1000ddae <strncmp>
10010caa:	2800      	cmp	r0, #0
10010cac:	d13f      	bne.n	10010d2e <__gethex+0x106>
10010cae:	b944      	cbnz	r4, 10010cc2 <__gethex+0x9a>
10010cb0:	1c74      	adds	r4, r6, #1
10010cb2:	4622      	mov	r2, r4
10010cb4:	4616      	mov	r6, r2
10010cb6:	3201      	adds	r2, #1
10010cb8:	7830      	ldrb	r0, [r6, #0]
10010cba:	f7ff ff9f 	bl	10010bfc <__hexdig_fun>
10010cbe:	2800      	cmp	r0, #0
10010cc0:	d1f8      	bne.n	10010cb4 <__gethex+0x8c>
10010cc2:	1ba4      	subs	r4, r4, r6
10010cc4:	00a7      	lsls	r7, r4, #2
10010cc6:	7833      	ldrb	r3, [r6, #0]
10010cc8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
10010ccc:	2b50      	cmp	r3, #80	@ 0x50
10010cce:	d13e      	bne.n	10010d4e <__gethex+0x126>
10010cd0:	7873      	ldrb	r3, [r6, #1]
10010cd2:	2b2b      	cmp	r3, #43	@ 0x2b
10010cd4:	d033      	beq.n	10010d3e <__gethex+0x116>
10010cd6:	2b2d      	cmp	r3, #45	@ 0x2d
10010cd8:	d034      	beq.n	10010d44 <__gethex+0x11c>
10010cda:	1c71      	adds	r1, r6, #1
10010cdc:	2400      	movs	r4, #0
10010cde:	7808      	ldrb	r0, [r1, #0]
10010ce0:	f7ff ff8c 	bl	10010bfc <__hexdig_fun>
10010ce4:	1e43      	subs	r3, r0, #1
10010ce6:	b2db      	uxtb	r3, r3
10010ce8:	2b18      	cmp	r3, #24
10010cea:	d830      	bhi.n	10010d4e <__gethex+0x126>
10010cec:	f1a0 0210 	sub.w	r2, r0, #16
10010cf0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
10010cf4:	f7ff ff82 	bl	10010bfc <__hexdig_fun>
10010cf8:	f100 3cff 	add.w	ip, r0, #4294967295
10010cfc:	fa5f fc8c 	uxtb.w	ip, ip
10010d00:	f1bc 0f18 	cmp.w	ip, #24
10010d04:	f04f 030a 	mov.w	r3, #10
10010d08:	d91e      	bls.n	10010d48 <__gethex+0x120>
10010d0a:	b104      	cbz	r4, 10010d0e <__gethex+0xe6>
10010d0c:	4252      	negs	r2, r2
10010d0e:	4417      	add	r7, r2
10010d10:	f8ca 1000 	str.w	r1, [sl]
10010d14:	b1ed      	cbz	r5, 10010d52 <__gethex+0x12a>
10010d16:	f1bb 0f00 	cmp.w	fp, #0
10010d1a:	bf0c      	ite	eq
10010d1c:	2506      	moveq	r5, #6
10010d1e:	2500      	movne	r5, #0
10010d20:	4628      	mov	r0, r5
10010d22:	b005      	add	sp, #20
10010d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10010d28:	2500      	movs	r5, #0
10010d2a:	462c      	mov	r4, r5
10010d2c:	e7b0      	b.n	10010c90 <__gethex+0x68>
10010d2e:	2c00      	cmp	r4, #0
10010d30:	d1c7      	bne.n	10010cc2 <__gethex+0x9a>
10010d32:	4627      	mov	r7, r4
10010d34:	e7c7      	b.n	10010cc6 <__gethex+0x9e>
10010d36:	464e      	mov	r6, r9
10010d38:	462f      	mov	r7, r5
10010d3a:	2501      	movs	r5, #1
10010d3c:	e7c3      	b.n	10010cc6 <__gethex+0x9e>
10010d3e:	2400      	movs	r4, #0
10010d40:	1cb1      	adds	r1, r6, #2
10010d42:	e7cc      	b.n	10010cde <__gethex+0xb6>
10010d44:	2401      	movs	r4, #1
10010d46:	e7fb      	b.n	10010d40 <__gethex+0x118>
10010d48:	fb03 0002 	mla	r0, r3, r2, r0
10010d4c:	e7ce      	b.n	10010cec <__gethex+0xc4>
10010d4e:	4631      	mov	r1, r6
10010d50:	e7de      	b.n	10010d10 <__gethex+0xe8>
10010d52:	eba6 0309 	sub.w	r3, r6, r9
10010d56:	3b01      	subs	r3, #1
10010d58:	4629      	mov	r1, r5
10010d5a:	2b07      	cmp	r3, #7
10010d5c:	dc0a      	bgt.n	10010d74 <__gethex+0x14c>
10010d5e:	9801      	ldr	r0, [sp, #4]
10010d60:	f7fd ff90 	bl	1000ec84 <_Balloc>
10010d64:	4604      	mov	r4, r0
10010d66:	b940      	cbnz	r0, 10010d7a <__gethex+0x152>
10010d68:	4b5c      	ldr	r3, [pc, #368]	@ (10010edc <__gethex+0x2b4>)
10010d6a:	4602      	mov	r2, r0
10010d6c:	21e4      	movs	r1, #228	@ 0xe4
10010d6e:	485c      	ldr	r0, [pc, #368]	@ (10010ee0 <__gethex+0x2b8>)
10010d70:	f7fb ff3a 	bl	1000cbe8 <__assert_func>
10010d74:	3101      	adds	r1, #1
10010d76:	105b      	asrs	r3, r3, #1
10010d78:	e7ef      	b.n	10010d5a <__gethex+0x132>
10010d7a:	f100 0a14 	add.w	sl, r0, #20
10010d7e:	2300      	movs	r3, #0
10010d80:	4655      	mov	r5, sl
10010d82:	469b      	mov	fp, r3
10010d84:	45b1      	cmp	r9, r6
10010d86:	d337      	bcc.n	10010df8 <__gethex+0x1d0>
10010d88:	f845 bb04 	str.w	fp, [r5], #4
10010d8c:	eba5 050a 	sub.w	r5, r5, sl
10010d90:	10ad      	asrs	r5, r5, #2
10010d92:	6125      	str	r5, [r4, #16]
10010d94:	4658      	mov	r0, fp
10010d96:	f7fe f867 	bl	1000ee68 <__hi0bits>
10010d9a:	016d      	lsls	r5, r5, #5
10010d9c:	f8d8 6000 	ldr.w	r6, [r8]
10010da0:	1a2d      	subs	r5, r5, r0
10010da2:	42b5      	cmp	r5, r6
10010da4:	dd54      	ble.n	10010e50 <__gethex+0x228>
10010da6:	1bad      	subs	r5, r5, r6
10010da8:	4629      	mov	r1, r5
10010daa:	4620      	mov	r0, r4
10010dac:	f7fe fbf3 	bl	1000f596 <__any_on>
10010db0:	4681      	mov	r9, r0
10010db2:	b178      	cbz	r0, 10010dd4 <__gethex+0x1ac>
10010db4:	1e6b      	subs	r3, r5, #1
10010db6:	1159      	asrs	r1, r3, #5
10010db8:	f003 021f 	and.w	r2, r3, #31
10010dbc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
10010dc0:	f04f 0901 	mov.w	r9, #1
10010dc4:	fa09 f202 	lsl.w	r2, r9, r2
10010dc8:	420a      	tst	r2, r1
10010dca:	d003      	beq.n	10010dd4 <__gethex+0x1ac>
10010dcc:	454b      	cmp	r3, r9
10010dce:	dc36      	bgt.n	10010e3e <__gethex+0x216>
10010dd0:	f04f 0902 	mov.w	r9, #2
10010dd4:	4629      	mov	r1, r5
10010dd6:	4620      	mov	r0, r4
10010dd8:	f7ff febe 	bl	10010b58 <rshift>
10010ddc:	442f      	add	r7, r5
10010dde:	f8d8 3008 	ldr.w	r3, [r8, #8]
10010de2:	42bb      	cmp	r3, r7
10010de4:	da42      	bge.n	10010e6c <__gethex+0x244>
10010de6:	9801      	ldr	r0, [sp, #4]
10010de8:	4621      	mov	r1, r4
10010dea:	f7fd ff8b 	bl	1000ed04 <_Bfree>
10010dee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10010df0:	2300      	movs	r3, #0
10010df2:	6013      	str	r3, [r2, #0]
10010df4:	25a3      	movs	r5, #163	@ 0xa3
10010df6:	e793      	b.n	10010d20 <__gethex+0xf8>
10010df8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
10010dfc:	2a2e      	cmp	r2, #46	@ 0x2e
10010dfe:	d012      	beq.n	10010e26 <__gethex+0x1fe>
10010e00:	2b20      	cmp	r3, #32
10010e02:	d104      	bne.n	10010e0e <__gethex+0x1e6>
10010e04:	f845 bb04 	str.w	fp, [r5], #4
10010e08:	f04f 0b00 	mov.w	fp, #0
10010e0c:	465b      	mov	r3, fp
10010e0e:	7830      	ldrb	r0, [r6, #0]
10010e10:	9303      	str	r3, [sp, #12]
10010e12:	f7ff fef3 	bl	10010bfc <__hexdig_fun>
10010e16:	9b03      	ldr	r3, [sp, #12]
10010e18:	f000 000f 	and.w	r0, r0, #15
10010e1c:	4098      	lsls	r0, r3
10010e1e:	ea4b 0b00 	orr.w	fp, fp, r0
10010e22:	3304      	adds	r3, #4
10010e24:	e7ae      	b.n	10010d84 <__gethex+0x15c>
10010e26:	45b1      	cmp	r9, r6
10010e28:	d8ea      	bhi.n	10010e00 <__gethex+0x1d8>
10010e2a:	492b      	ldr	r1, [pc, #172]	@ (10010ed8 <__gethex+0x2b0>)
10010e2c:	9303      	str	r3, [sp, #12]
10010e2e:	2201      	movs	r2, #1
10010e30:	4630      	mov	r0, r6
10010e32:	f7fc ffbc 	bl	1000ddae <strncmp>
10010e36:	9b03      	ldr	r3, [sp, #12]
10010e38:	2800      	cmp	r0, #0
10010e3a:	d1e1      	bne.n	10010e00 <__gethex+0x1d8>
10010e3c:	e7a2      	b.n	10010d84 <__gethex+0x15c>
10010e3e:	1ea9      	subs	r1, r5, #2
10010e40:	4620      	mov	r0, r4
10010e42:	f7fe fba8 	bl	1000f596 <__any_on>
10010e46:	2800      	cmp	r0, #0
10010e48:	d0c2      	beq.n	10010dd0 <__gethex+0x1a8>
10010e4a:	f04f 0903 	mov.w	r9, #3
10010e4e:	e7c1      	b.n	10010dd4 <__gethex+0x1ac>
10010e50:	da09      	bge.n	10010e66 <__gethex+0x23e>
10010e52:	1b75      	subs	r5, r6, r5
10010e54:	4621      	mov	r1, r4
10010e56:	9801      	ldr	r0, [sp, #4]
10010e58:	462a      	mov	r2, r5
10010e5a:	f7fe f963 	bl	1000f124 <__lshift>
10010e5e:	1b7f      	subs	r7, r7, r5
10010e60:	4604      	mov	r4, r0
10010e62:	f100 0a14 	add.w	sl, r0, #20
10010e66:	f04f 0900 	mov.w	r9, #0
10010e6a:	e7b8      	b.n	10010dde <__gethex+0x1b6>
10010e6c:	f8d8 5004 	ldr.w	r5, [r8, #4]
10010e70:	42bd      	cmp	r5, r7
10010e72:	dd6f      	ble.n	10010f54 <__gethex+0x32c>
10010e74:	1bed      	subs	r5, r5, r7
10010e76:	42ae      	cmp	r6, r5
10010e78:	dc34      	bgt.n	10010ee4 <__gethex+0x2bc>
10010e7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
10010e7e:	2b02      	cmp	r3, #2
10010e80:	d022      	beq.n	10010ec8 <__gethex+0x2a0>
10010e82:	2b03      	cmp	r3, #3
10010e84:	d024      	beq.n	10010ed0 <__gethex+0x2a8>
10010e86:	2b01      	cmp	r3, #1
10010e88:	d115      	bne.n	10010eb6 <__gethex+0x28e>
10010e8a:	42ae      	cmp	r6, r5
10010e8c:	d113      	bne.n	10010eb6 <__gethex+0x28e>
10010e8e:	2e01      	cmp	r6, #1
10010e90:	d10b      	bne.n	10010eaa <__gethex+0x282>
10010e92:	9a02      	ldr	r2, [sp, #8]
10010e94:	f8d8 3004 	ldr.w	r3, [r8, #4]
10010e98:	6013      	str	r3, [r2, #0]
10010e9a:	2301      	movs	r3, #1
10010e9c:	6123      	str	r3, [r4, #16]
10010e9e:	f8ca 3000 	str.w	r3, [sl]
10010ea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10010ea4:	2562      	movs	r5, #98	@ 0x62
10010ea6:	601c      	str	r4, [r3, #0]
10010ea8:	e73a      	b.n	10010d20 <__gethex+0xf8>
10010eaa:	1e71      	subs	r1, r6, #1
10010eac:	4620      	mov	r0, r4
10010eae:	f7fe fb72 	bl	1000f596 <__any_on>
10010eb2:	2800      	cmp	r0, #0
10010eb4:	d1ed      	bne.n	10010e92 <__gethex+0x26a>
10010eb6:	9801      	ldr	r0, [sp, #4]
10010eb8:	4621      	mov	r1, r4
10010eba:	f7fd ff23 	bl	1000ed04 <_Bfree>
10010ebe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10010ec0:	2300      	movs	r3, #0
10010ec2:	6013      	str	r3, [r2, #0]
10010ec4:	2550      	movs	r5, #80	@ 0x50
10010ec6:	e72b      	b.n	10010d20 <__gethex+0xf8>
10010ec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10010eca:	2b00      	cmp	r3, #0
10010ecc:	d1f3      	bne.n	10010eb6 <__gethex+0x28e>
10010ece:	e7e0      	b.n	10010e92 <__gethex+0x26a>
10010ed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10010ed2:	2b00      	cmp	r3, #0
10010ed4:	d1dd      	bne.n	10010e92 <__gethex+0x26a>
10010ed6:	e7ee      	b.n	10010eb6 <__gethex+0x28e>
10010ed8:	10012374 	.word	0x10012374
10010edc:	1001230a 	.word	0x1001230a
10010ee0:	1001238f 	.word	0x1001238f
10010ee4:	1e6f      	subs	r7, r5, #1
10010ee6:	f1b9 0f00 	cmp.w	r9, #0
10010eea:	d130      	bne.n	10010f4e <__gethex+0x326>
10010eec:	b127      	cbz	r7, 10010ef8 <__gethex+0x2d0>
10010eee:	4639      	mov	r1, r7
10010ef0:	4620      	mov	r0, r4
10010ef2:	f7fe fb50 	bl	1000f596 <__any_on>
10010ef6:	4681      	mov	r9, r0
10010ef8:	117a      	asrs	r2, r7, #5
10010efa:	2301      	movs	r3, #1
10010efc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
10010f00:	f007 071f 	and.w	r7, r7, #31
10010f04:	40bb      	lsls	r3, r7
10010f06:	4213      	tst	r3, r2
10010f08:	4629      	mov	r1, r5
10010f0a:	4620      	mov	r0, r4
10010f0c:	bf18      	it	ne
10010f0e:	f049 0902 	orrne.w	r9, r9, #2
10010f12:	f7ff fe21 	bl	10010b58 <rshift>
10010f16:	f8d8 7004 	ldr.w	r7, [r8, #4]
10010f1a:	1b76      	subs	r6, r6, r5
10010f1c:	2502      	movs	r5, #2
10010f1e:	f1b9 0f00 	cmp.w	r9, #0
10010f22:	d047      	beq.n	10010fb4 <__gethex+0x38c>
10010f24:	f8d8 300c 	ldr.w	r3, [r8, #12]
10010f28:	2b02      	cmp	r3, #2
10010f2a:	d015      	beq.n	10010f58 <__gethex+0x330>
10010f2c:	2b03      	cmp	r3, #3
10010f2e:	d017      	beq.n	10010f60 <__gethex+0x338>
10010f30:	2b01      	cmp	r3, #1
10010f32:	d109      	bne.n	10010f48 <__gethex+0x320>
10010f34:	f019 0f02 	tst.w	r9, #2
10010f38:	d006      	beq.n	10010f48 <__gethex+0x320>
10010f3a:	f8da 3000 	ldr.w	r3, [sl]
10010f3e:	ea49 0903 	orr.w	r9, r9, r3
10010f42:	f019 0f01 	tst.w	r9, #1
10010f46:	d10e      	bne.n	10010f66 <__gethex+0x33e>
10010f48:	f045 0510 	orr.w	r5, r5, #16
10010f4c:	e032      	b.n	10010fb4 <__gethex+0x38c>
10010f4e:	f04f 0901 	mov.w	r9, #1
10010f52:	e7d1      	b.n	10010ef8 <__gethex+0x2d0>
10010f54:	2501      	movs	r5, #1
10010f56:	e7e2      	b.n	10010f1e <__gethex+0x2f6>
10010f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10010f5a:	f1c3 0301 	rsb	r3, r3, #1
10010f5e:	930f      	str	r3, [sp, #60]	@ 0x3c
10010f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10010f62:	2b00      	cmp	r3, #0
10010f64:	d0f0      	beq.n	10010f48 <__gethex+0x320>
10010f66:	f8d4 b010 	ldr.w	fp, [r4, #16]
10010f6a:	f104 0314 	add.w	r3, r4, #20
10010f6e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
10010f72:	eb03 018b 	add.w	r1, r3, fp, lsl #2
10010f76:	f04f 0c00 	mov.w	ip, #0
10010f7a:	4618      	mov	r0, r3
10010f7c:	f853 2b04 	ldr.w	r2, [r3], #4
10010f80:	f1b2 3fff 	cmp.w	r2, #4294967295
10010f84:	d01b      	beq.n	10010fbe <__gethex+0x396>
10010f86:	3201      	adds	r2, #1
10010f88:	6002      	str	r2, [r0, #0]
10010f8a:	2d02      	cmp	r5, #2
10010f8c:	f104 0314 	add.w	r3, r4, #20
10010f90:	d13c      	bne.n	1001100c <__gethex+0x3e4>
10010f92:	f8d8 2000 	ldr.w	r2, [r8]
10010f96:	3a01      	subs	r2, #1
10010f98:	42b2      	cmp	r2, r6
10010f9a:	d109      	bne.n	10010fb0 <__gethex+0x388>
10010f9c:	1171      	asrs	r1, r6, #5
10010f9e:	2201      	movs	r2, #1
10010fa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
10010fa4:	f006 061f 	and.w	r6, r6, #31
10010fa8:	fa02 f606 	lsl.w	r6, r2, r6
10010fac:	421e      	tst	r6, r3
10010fae:	d13a      	bne.n	10011026 <__gethex+0x3fe>
10010fb0:	f045 0520 	orr.w	r5, r5, #32
10010fb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
10010fb6:	601c      	str	r4, [r3, #0]
10010fb8:	9b02      	ldr	r3, [sp, #8]
10010fba:	601f      	str	r7, [r3, #0]
10010fbc:	e6b0      	b.n	10010d20 <__gethex+0xf8>
10010fbe:	4299      	cmp	r1, r3
10010fc0:	f843 cc04 	str.w	ip, [r3, #-4]
10010fc4:	d8d9      	bhi.n	10010f7a <__gethex+0x352>
10010fc6:	68a3      	ldr	r3, [r4, #8]
10010fc8:	459b      	cmp	fp, r3
10010fca:	db17      	blt.n	10010ffc <__gethex+0x3d4>
10010fcc:	6861      	ldr	r1, [r4, #4]
10010fce:	9801      	ldr	r0, [sp, #4]
10010fd0:	3101      	adds	r1, #1
10010fd2:	f7fd fe57 	bl	1000ec84 <_Balloc>
10010fd6:	4681      	mov	r9, r0
10010fd8:	b918      	cbnz	r0, 10010fe2 <__gethex+0x3ba>
10010fda:	4b1a      	ldr	r3, [pc, #104]	@ (10011044 <__gethex+0x41c>)
10010fdc:	4602      	mov	r2, r0
10010fde:	2184      	movs	r1, #132	@ 0x84
10010fe0:	e6c5      	b.n	10010d6e <__gethex+0x146>
10010fe2:	6922      	ldr	r2, [r4, #16]
10010fe4:	3202      	adds	r2, #2
10010fe6:	f104 010c 	add.w	r1, r4, #12
10010fea:	0092      	lsls	r2, r2, #2
10010fec:	300c      	adds	r0, #12
10010fee:	f7fc ff8a 	bl	1000df06 <memcpy>
10010ff2:	4621      	mov	r1, r4
10010ff4:	9801      	ldr	r0, [sp, #4]
10010ff6:	f7fd fe85 	bl	1000ed04 <_Bfree>
10010ffa:	464c      	mov	r4, r9
10010ffc:	6923      	ldr	r3, [r4, #16]
10010ffe:	1c5a      	adds	r2, r3, #1
10011000:	eb04 0383 	add.w	r3, r4, r3, lsl #2
10011004:	6122      	str	r2, [r4, #16]
10011006:	2201      	movs	r2, #1
10011008:	615a      	str	r2, [r3, #20]
1001100a:	e7be      	b.n	10010f8a <__gethex+0x362>
1001100c:	6922      	ldr	r2, [r4, #16]
1001100e:	455a      	cmp	r2, fp
10011010:	dd0b      	ble.n	1001102a <__gethex+0x402>
10011012:	2101      	movs	r1, #1
10011014:	4620      	mov	r0, r4
10011016:	f7ff fd9f 	bl	10010b58 <rshift>
1001101a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1001101e:	3701      	adds	r7, #1
10011020:	42bb      	cmp	r3, r7
10011022:	f6ff aee0 	blt.w	10010de6 <__gethex+0x1be>
10011026:	2501      	movs	r5, #1
10011028:	e7c2      	b.n	10010fb0 <__gethex+0x388>
1001102a:	f016 061f 	ands.w	r6, r6, #31
1001102e:	d0fa      	beq.n	10011026 <__gethex+0x3fe>
10011030:	4453      	add	r3, sl
10011032:	f1c6 0620 	rsb	r6, r6, #32
10011036:	f853 0c04 	ldr.w	r0, [r3, #-4]
1001103a:	f7fd ff15 	bl	1000ee68 <__hi0bits>
1001103e:	42b0      	cmp	r0, r6
10011040:	dbe7      	blt.n	10011012 <__gethex+0x3ea>
10011042:	e7f0      	b.n	10011026 <__gethex+0x3fe>
10011044:	1001230a 	.word	0x1001230a

10011048 <L_shift>:
10011048:	f1c2 0208 	rsb	r2, r2, #8
1001104c:	0092      	lsls	r2, r2, #2
1001104e:	b570      	push	{r4, r5, r6, lr}
10011050:	f1c2 0620 	rsb	r6, r2, #32
10011054:	6843      	ldr	r3, [r0, #4]
10011056:	6804      	ldr	r4, [r0, #0]
10011058:	fa03 f506 	lsl.w	r5, r3, r6
1001105c:	432c      	orrs	r4, r5
1001105e:	40d3      	lsrs	r3, r2
10011060:	6004      	str	r4, [r0, #0]
10011062:	f840 3f04 	str.w	r3, [r0, #4]!
10011066:	4288      	cmp	r0, r1
10011068:	d3f4      	bcc.n	10011054 <L_shift+0xc>
1001106a:	bd70      	pop	{r4, r5, r6, pc}

1001106c <__match>:
1001106c:	b530      	push	{r4, r5, lr}
1001106e:	6803      	ldr	r3, [r0, #0]
10011070:	3301      	adds	r3, #1
10011072:	f811 4b01 	ldrb.w	r4, [r1], #1
10011076:	b914      	cbnz	r4, 1001107e <__match+0x12>
10011078:	6003      	str	r3, [r0, #0]
1001107a:	2001      	movs	r0, #1
1001107c:	bd30      	pop	{r4, r5, pc}
1001107e:	f813 2b01 	ldrb.w	r2, [r3], #1
10011082:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
10011086:	2d19      	cmp	r5, #25
10011088:	bf98      	it	ls
1001108a:	3220      	addls	r2, #32
1001108c:	42a2      	cmp	r2, r4
1001108e:	d0f0      	beq.n	10011072 <__match+0x6>
10011090:	2000      	movs	r0, #0
10011092:	e7f3      	b.n	1001107c <__match+0x10>

10011094 <__hexnan>:
10011094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10011098:	680b      	ldr	r3, [r1, #0]
1001109a:	6801      	ldr	r1, [r0, #0]
1001109c:	115e      	asrs	r6, r3, #5
1001109e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
100110a2:	f013 031f 	ands.w	r3, r3, #31
100110a6:	b087      	sub	sp, #28
100110a8:	bf18      	it	ne
100110aa:	3604      	addne	r6, #4
100110ac:	2500      	movs	r5, #0
100110ae:	1f37      	subs	r7, r6, #4
100110b0:	4682      	mov	sl, r0
100110b2:	4690      	mov	r8, r2
100110b4:	9301      	str	r3, [sp, #4]
100110b6:	f846 5c04 	str.w	r5, [r6, #-4]
100110ba:	46b9      	mov	r9, r7
100110bc:	463c      	mov	r4, r7
100110be:	9502      	str	r5, [sp, #8]
100110c0:	46ab      	mov	fp, r5
100110c2:	784a      	ldrb	r2, [r1, #1]
100110c4:	1c4b      	adds	r3, r1, #1
100110c6:	9303      	str	r3, [sp, #12]
100110c8:	b342      	cbz	r2, 1001111c <__hexnan+0x88>
100110ca:	4610      	mov	r0, r2
100110cc:	9105      	str	r1, [sp, #20]
100110ce:	9204      	str	r2, [sp, #16]
100110d0:	f7ff fd94 	bl	10010bfc <__hexdig_fun>
100110d4:	2800      	cmp	r0, #0
100110d6:	d151      	bne.n	1001117c <__hexnan+0xe8>
100110d8:	9a04      	ldr	r2, [sp, #16]
100110da:	9905      	ldr	r1, [sp, #20]
100110dc:	2a20      	cmp	r2, #32
100110de:	d818      	bhi.n	10011112 <__hexnan+0x7e>
100110e0:	9b02      	ldr	r3, [sp, #8]
100110e2:	459b      	cmp	fp, r3
100110e4:	dd13      	ble.n	1001110e <__hexnan+0x7a>
100110e6:	454c      	cmp	r4, r9
100110e8:	d206      	bcs.n	100110f8 <__hexnan+0x64>
100110ea:	2d07      	cmp	r5, #7
100110ec:	dc04      	bgt.n	100110f8 <__hexnan+0x64>
100110ee:	462a      	mov	r2, r5
100110f0:	4649      	mov	r1, r9
100110f2:	4620      	mov	r0, r4
100110f4:	f7ff ffa8 	bl	10011048 <L_shift>
100110f8:	4544      	cmp	r4, r8
100110fa:	d952      	bls.n	100111a2 <__hexnan+0x10e>
100110fc:	2300      	movs	r3, #0
100110fe:	f1a4 0904 	sub.w	r9, r4, #4
10011102:	f844 3c04 	str.w	r3, [r4, #-4]
10011106:	f8cd b008 	str.w	fp, [sp, #8]
1001110a:	464c      	mov	r4, r9
1001110c:	461d      	mov	r5, r3
1001110e:	9903      	ldr	r1, [sp, #12]
10011110:	e7d7      	b.n	100110c2 <__hexnan+0x2e>
10011112:	2a29      	cmp	r2, #41	@ 0x29
10011114:	d157      	bne.n	100111c6 <__hexnan+0x132>
10011116:	3102      	adds	r1, #2
10011118:	f8ca 1000 	str.w	r1, [sl]
1001111c:	f1bb 0f00 	cmp.w	fp, #0
10011120:	d051      	beq.n	100111c6 <__hexnan+0x132>
10011122:	454c      	cmp	r4, r9
10011124:	d206      	bcs.n	10011134 <__hexnan+0xa0>
10011126:	2d07      	cmp	r5, #7
10011128:	dc04      	bgt.n	10011134 <__hexnan+0xa0>
1001112a:	462a      	mov	r2, r5
1001112c:	4649      	mov	r1, r9
1001112e:	4620      	mov	r0, r4
10011130:	f7ff ff8a 	bl	10011048 <L_shift>
10011134:	4544      	cmp	r4, r8
10011136:	d936      	bls.n	100111a6 <__hexnan+0x112>
10011138:	f1a8 0204 	sub.w	r2, r8, #4
1001113c:	4623      	mov	r3, r4
1001113e:	f853 1b04 	ldr.w	r1, [r3], #4
10011142:	f842 1f04 	str.w	r1, [r2, #4]!
10011146:	429f      	cmp	r7, r3
10011148:	d2f9      	bcs.n	1001113e <__hexnan+0xaa>
1001114a:	1b3b      	subs	r3, r7, r4
1001114c:	f023 0303 	bic.w	r3, r3, #3
10011150:	3304      	adds	r3, #4
10011152:	3401      	adds	r4, #1
10011154:	3e03      	subs	r6, #3
10011156:	42b4      	cmp	r4, r6
10011158:	bf88      	it	hi
1001115a:	2304      	movhi	r3, #4
1001115c:	4443      	add	r3, r8
1001115e:	2200      	movs	r2, #0
10011160:	f843 2b04 	str.w	r2, [r3], #4
10011164:	429f      	cmp	r7, r3
10011166:	d2fb      	bcs.n	10011160 <__hexnan+0xcc>
10011168:	683b      	ldr	r3, [r7, #0]
1001116a:	b91b      	cbnz	r3, 10011174 <__hexnan+0xe0>
1001116c:	4547      	cmp	r7, r8
1001116e:	d128      	bne.n	100111c2 <__hexnan+0x12e>
10011170:	2301      	movs	r3, #1
10011172:	603b      	str	r3, [r7, #0]
10011174:	2005      	movs	r0, #5
10011176:	b007      	add	sp, #28
10011178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1001117c:	3501      	adds	r5, #1
1001117e:	2d08      	cmp	r5, #8
10011180:	f10b 0b01 	add.w	fp, fp, #1
10011184:	dd06      	ble.n	10011194 <__hexnan+0x100>
10011186:	4544      	cmp	r4, r8
10011188:	d9c1      	bls.n	1001110e <__hexnan+0x7a>
1001118a:	2300      	movs	r3, #0
1001118c:	f844 3c04 	str.w	r3, [r4, #-4]
10011190:	2501      	movs	r5, #1
10011192:	3c04      	subs	r4, #4
10011194:	6822      	ldr	r2, [r4, #0]
10011196:	f000 000f 	and.w	r0, r0, #15
1001119a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
1001119e:	6020      	str	r0, [r4, #0]
100111a0:	e7b5      	b.n	1001110e <__hexnan+0x7a>
100111a2:	2508      	movs	r5, #8
100111a4:	e7b3      	b.n	1001110e <__hexnan+0x7a>
100111a6:	9b01      	ldr	r3, [sp, #4]
100111a8:	2b00      	cmp	r3, #0
100111aa:	d0dd      	beq.n	10011168 <__hexnan+0xd4>
100111ac:	f1c3 0320 	rsb	r3, r3, #32
100111b0:	f04f 32ff 	mov.w	r2, #4294967295
100111b4:	40da      	lsrs	r2, r3
100111b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
100111ba:	4013      	ands	r3, r2
100111bc:	f846 3c04 	str.w	r3, [r6, #-4]
100111c0:	e7d2      	b.n	10011168 <__hexnan+0xd4>
100111c2:	3f04      	subs	r7, #4
100111c4:	e7d0      	b.n	10011168 <__hexnan+0xd4>
100111c6:	2004      	movs	r0, #4
100111c8:	e7d5      	b.n	10011176 <__hexnan+0xe2>

100111ca <__ascii_mbtowc>:
100111ca:	b082      	sub	sp, #8
100111cc:	b901      	cbnz	r1, 100111d0 <__ascii_mbtowc+0x6>
100111ce:	a901      	add	r1, sp, #4
100111d0:	b142      	cbz	r2, 100111e4 <__ascii_mbtowc+0x1a>
100111d2:	b14b      	cbz	r3, 100111e8 <__ascii_mbtowc+0x1e>
100111d4:	7813      	ldrb	r3, [r2, #0]
100111d6:	600b      	str	r3, [r1, #0]
100111d8:	7812      	ldrb	r2, [r2, #0]
100111da:	1e10      	subs	r0, r2, #0
100111dc:	bf18      	it	ne
100111de:	2001      	movne	r0, #1
100111e0:	b002      	add	sp, #8
100111e2:	4770      	bx	lr
100111e4:	4610      	mov	r0, r2
100111e6:	e7fb      	b.n	100111e0 <__ascii_mbtowc+0x16>
100111e8:	f06f 0001 	mvn.w	r0, #1
100111ec:	e7f8      	b.n	100111e0 <__ascii_mbtowc+0x16>

100111ee <_realloc_r>:
100111ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100111f2:	4607      	mov	r7, r0
100111f4:	4614      	mov	r4, r2
100111f6:	460d      	mov	r5, r1
100111f8:	b921      	cbnz	r1, 10011204 <_realloc_r+0x16>
100111fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
100111fe:	4611      	mov	r1, r2
10011200:	f7fb bd42 	b.w	1000cc88 <_malloc_r>
10011204:	b92a      	cbnz	r2, 10011212 <_realloc_r+0x24>
10011206:	f7fd fcf3 	bl	1000ebf0 <_free_r>
1001120a:	4625      	mov	r5, r4
1001120c:	4628      	mov	r0, r5
1001120e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10011212:	f000 f8ab 	bl	1001136c <_malloc_usable_size_r>
10011216:	4284      	cmp	r4, r0
10011218:	4606      	mov	r6, r0
1001121a:	d802      	bhi.n	10011222 <_realloc_r+0x34>
1001121c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
10011220:	d8f4      	bhi.n	1001120c <_realloc_r+0x1e>
10011222:	4621      	mov	r1, r4
10011224:	4638      	mov	r0, r7
10011226:	f7fb fd2f 	bl	1000cc88 <_malloc_r>
1001122a:	4680      	mov	r8, r0
1001122c:	b908      	cbnz	r0, 10011232 <_realloc_r+0x44>
1001122e:	4645      	mov	r5, r8
10011230:	e7ec      	b.n	1001120c <_realloc_r+0x1e>
10011232:	42b4      	cmp	r4, r6
10011234:	4622      	mov	r2, r4
10011236:	4629      	mov	r1, r5
10011238:	bf28      	it	cs
1001123a:	4632      	movcs	r2, r6
1001123c:	f7fc fe63 	bl	1000df06 <memcpy>
10011240:	4629      	mov	r1, r5
10011242:	4638      	mov	r0, r7
10011244:	f7fd fcd4 	bl	1000ebf0 <_free_r>
10011248:	e7f1      	b.n	1001122e <_realloc_r+0x40>

1001124a <__ascii_wctomb>:
1001124a:	4603      	mov	r3, r0
1001124c:	4608      	mov	r0, r1
1001124e:	b141      	cbz	r1, 10011262 <__ascii_wctomb+0x18>
10011250:	2aff      	cmp	r2, #255	@ 0xff
10011252:	d904      	bls.n	1001125e <__ascii_wctomb+0x14>
10011254:	228a      	movs	r2, #138	@ 0x8a
10011256:	601a      	str	r2, [r3, #0]
10011258:	f04f 30ff 	mov.w	r0, #4294967295
1001125c:	4770      	bx	lr
1001125e:	700a      	strb	r2, [r1, #0]
10011260:	2001      	movs	r0, #1
10011262:	4770      	bx	lr

10011264 <__swhatbuf_r>:
10011264:	b570      	push	{r4, r5, r6, lr}
10011266:	460c      	mov	r4, r1
10011268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1001126c:	2900      	cmp	r1, #0
1001126e:	b096      	sub	sp, #88	@ 0x58
10011270:	4615      	mov	r5, r2
10011272:	461e      	mov	r6, r3
10011274:	da0d      	bge.n	10011292 <__swhatbuf_r+0x2e>
10011276:	89a3      	ldrh	r3, [r4, #12]
10011278:	f013 0f80 	tst.w	r3, #128	@ 0x80
1001127c:	f04f 0100 	mov.w	r1, #0
10011280:	bf14      	ite	ne
10011282:	2340      	movne	r3, #64	@ 0x40
10011284:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
10011288:	2000      	movs	r0, #0
1001128a:	6031      	str	r1, [r6, #0]
1001128c:	602b      	str	r3, [r5, #0]
1001128e:	b016      	add	sp, #88	@ 0x58
10011290:	bd70      	pop	{r4, r5, r6, pc}
10011292:	466a      	mov	r2, sp
10011294:	f000 f848 	bl	10011328 <_fstat_r>
10011298:	2800      	cmp	r0, #0
1001129a:	dbec      	blt.n	10011276 <__swhatbuf_r+0x12>
1001129c:	9901      	ldr	r1, [sp, #4]
1001129e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
100112a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
100112a6:	4259      	negs	r1, r3
100112a8:	4159      	adcs	r1, r3
100112aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
100112ae:	e7eb      	b.n	10011288 <__swhatbuf_r+0x24>

100112b0 <__smakebuf_r>:
100112b0:	898b      	ldrh	r3, [r1, #12]
100112b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100112b4:	079d      	lsls	r5, r3, #30
100112b6:	4606      	mov	r6, r0
100112b8:	460c      	mov	r4, r1
100112ba:	d507      	bpl.n	100112cc <__smakebuf_r+0x1c>
100112bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
100112c0:	6023      	str	r3, [r4, #0]
100112c2:	6123      	str	r3, [r4, #16]
100112c4:	2301      	movs	r3, #1
100112c6:	6163      	str	r3, [r4, #20]
100112c8:	b003      	add	sp, #12
100112ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112cc:	ab01      	add	r3, sp, #4
100112ce:	466a      	mov	r2, sp
100112d0:	f7ff ffc8 	bl	10011264 <__swhatbuf_r>
100112d4:	9f00      	ldr	r7, [sp, #0]
100112d6:	4605      	mov	r5, r0
100112d8:	4639      	mov	r1, r7
100112da:	4630      	mov	r0, r6
100112dc:	f7fb fcd4 	bl	1000cc88 <_malloc_r>
100112e0:	b948      	cbnz	r0, 100112f6 <__smakebuf_r+0x46>
100112e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
100112e6:	059a      	lsls	r2, r3, #22
100112e8:	d4ee      	bmi.n	100112c8 <__smakebuf_r+0x18>
100112ea:	f023 0303 	bic.w	r3, r3, #3
100112ee:	f043 0302 	orr.w	r3, r3, #2
100112f2:	81a3      	strh	r3, [r4, #12]
100112f4:	e7e2      	b.n	100112bc <__smakebuf_r+0xc>
100112f6:	89a3      	ldrh	r3, [r4, #12]
100112f8:	6020      	str	r0, [r4, #0]
100112fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
100112fe:	81a3      	strh	r3, [r4, #12]
10011300:	9b01      	ldr	r3, [sp, #4]
10011302:	e9c4 0704 	strd	r0, r7, [r4, #16]
10011306:	b15b      	cbz	r3, 10011320 <__smakebuf_r+0x70>
10011308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1001130c:	4630      	mov	r0, r6
1001130e:	f000 f81d 	bl	1001134c <_isatty_r>
10011312:	b128      	cbz	r0, 10011320 <__smakebuf_r+0x70>
10011314:	89a3      	ldrh	r3, [r4, #12]
10011316:	f023 0303 	bic.w	r3, r3, #3
1001131a:	f043 0301 	orr.w	r3, r3, #1
1001131e:	81a3      	strh	r3, [r4, #12]
10011320:	89a3      	ldrh	r3, [r4, #12]
10011322:	431d      	orrs	r5, r3
10011324:	81a5      	strh	r5, [r4, #12]
10011326:	e7cf      	b.n	100112c8 <__smakebuf_r+0x18>

10011328 <_fstat_r>:
10011328:	b538      	push	{r3, r4, r5, lr}
1001132a:	4d07      	ldr	r5, [pc, #28]	@ (10011348 <_fstat_r+0x20>)
1001132c:	2300      	movs	r3, #0
1001132e:	4604      	mov	r4, r0
10011330:	4608      	mov	r0, r1
10011332:	4611      	mov	r1, r2
10011334:	602b      	str	r3, [r5, #0]
10011336:	f7f1 f995 	bl	10002664 <_fstat>
1001133a:	1c43      	adds	r3, r0, #1
1001133c:	d102      	bne.n	10011344 <_fstat_r+0x1c>
1001133e:	682b      	ldr	r3, [r5, #0]
10011340:	b103      	cbz	r3, 10011344 <_fstat_r+0x1c>
10011342:	6023      	str	r3, [r4, #0]
10011344:	bd38      	pop	{r3, r4, r5, pc}
10011346:	bf00      	nop
10011348:	100217fc 	.word	0x100217fc

1001134c <_isatty_r>:
1001134c:	b538      	push	{r3, r4, r5, lr}
1001134e:	4d06      	ldr	r5, [pc, #24]	@ (10011368 <_isatty_r+0x1c>)
10011350:	2300      	movs	r3, #0
10011352:	4604      	mov	r4, r0
10011354:	4608      	mov	r0, r1
10011356:	602b      	str	r3, [r5, #0]
10011358:	f7f1 f994 	bl	10002684 <_isatty>
1001135c:	1c43      	adds	r3, r0, #1
1001135e:	d102      	bne.n	10011366 <_isatty_r+0x1a>
10011360:	682b      	ldr	r3, [r5, #0]
10011362:	b103      	cbz	r3, 10011366 <_isatty_r+0x1a>
10011364:	6023      	str	r3, [r4, #0]
10011366:	bd38      	pop	{r3, r4, r5, pc}
10011368:	100217fc 	.word	0x100217fc

1001136c <_malloc_usable_size_r>:
1001136c:	f851 3c04 	ldr.w	r3, [r1, #-4]
10011370:	1f18      	subs	r0, r3, #4
10011372:	2b00      	cmp	r3, #0
10011374:	bfbc      	itt	lt
10011376:	580b      	ldrlt	r3, [r1, r0]
10011378:	18c0      	addlt	r0, r0, r3
1001137a:	4770      	bx	lr

1001137c <_sbrk>:
1001137c:	4a04      	ldr	r2, [pc, #16]	@ (10011390 <_sbrk+0x14>)
1001137e:	6811      	ldr	r1, [r2, #0]
10011380:	4603      	mov	r3, r0
10011382:	b909      	cbnz	r1, 10011388 <_sbrk+0xc>
10011384:	4903      	ldr	r1, [pc, #12]	@ (10011394 <_sbrk+0x18>)
10011386:	6011      	str	r1, [r2, #0]
10011388:	6810      	ldr	r0, [r2, #0]
1001138a:	4403      	add	r3, r0
1001138c:	6013      	str	r3, [r2, #0]
1001138e:	4770      	bx	lr
10011390:	10021804 	.word	0x10021804
10011394:	10021808 	.word	0x10021808

10011398 <_init>:
10011398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001139a:	bf00      	nop
1001139c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001139e:	bc08      	pop	{r3}
100113a0:	469e      	mov	lr, r3
100113a2:	4770      	bx	lr

100113a4 <_fini>:
100113a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100113a6:	bf00      	nop
100113a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
100113aa:	bc08      	pop	{r3}
100113ac:	469e      	mov	lr, r3
100113ae:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

100113b0 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
100113b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 100113e8 <LoopForever+0x2>
  movs  r1, #0
100113b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
100113b6:	e003      	b.n	100113c0 <LoopCopyDataInit>

100113b8 <CopyDataInit>:
  ldr  r3, =_sidata
100113b8:	4b0c      	ldr	r3, [pc, #48]	@ (100113ec <LoopForever+0x6>)
  ldr  r3, [r3, r1]
100113ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
100113bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
100113be:	3104      	adds	r1, #4

100113c0 <LoopCopyDataInit>:
  ldr  r0, =_sdata
100113c0:	480b      	ldr	r0, [pc, #44]	@ (100113f0 <LoopForever+0xa>)
  ldr  r3, =_edata
100113c2:	4b0c      	ldr	r3, [pc, #48]	@ (100113f4 <LoopForever+0xe>)
  adds  r2, r0, r1
100113c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
100113c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
100113c8:	d3f6      	bcc.n	100113b8 <CopyDataInit>
  ldr  r2, =_sbss
100113ca:	4a0b      	ldr	r2, [pc, #44]	@ (100113f8 <LoopForever+0x12>)
  b  LoopFillZerobss
100113cc:	e002      	b.n	100113d4 <LoopFillZerobss>

100113ce <FillZerobss>:
  movs  r3, #0
100113ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
100113d0:	f842 3b04 	str.w	r3, [r2], #4

100113d4 <LoopFillZerobss>:
  ldr  r3, = _ebss
100113d4:	4b09      	ldr	r3, [pc, #36]	@ (100113fc <LoopForever+0x16>)
  cmp  r2, r3
100113d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
100113d8:	d3f9      	bcc.n	100113ce <FillZerobss>
  bl  SystemInit
100113da:	f7f2 fd21 	bl	10003e20 <SystemInit>
 bl __libc_init_array
100113de:	f7fc fd6b 	bl	1000deb8 <__libc_init_array>
  bl main
100113e2:	f7ef fefd 	bl	100011e0 <main>

100113e6 <LoopForever>:
    b LoopForever
100113e6:	e7fe      	b.n	100113e6 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
100113e8:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
100113ec:	10012654 	.word	0x10012654
  ldr  r0, =_sdata
100113f0:	10020000 	.word	0x10020000
  ldr  r3, =_edata
100113f4:	1002029c 	.word	0x1002029c
  ldr  r2, =_sbss
100113f8:	10020328 	.word	0x10020328
  ldr  r3, = _ebss
100113fc:	10021808 	.word	0x10021808
